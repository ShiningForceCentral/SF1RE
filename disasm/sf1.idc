//
// +-------------------------------------------------------------------------+
// |     This file is generated by The Interactive Disassembler (IDA)        |
// |     Copyright (c) 2007 by DataRescue sa/nv, <ida@datarescue.com>        |
// | Licensed to: Mach EDV Dienstleistungen, Jan Mach, 1 user, adv, 11/2007  |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void) {
        GenInfo();              // various settings
        Segments();             // segmentation
        Enums();                // enumerations
        Structures();           // structure types
        Bytes();                // individual bytes (code,data)
        Functions();            // function definitions
        SegRegs();              // segment register values
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("68000");
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(128);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x80);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	SetSelector(0X1,0X0);
	;
	SegCreate(0X0,0X180000,0X0,1,0,2);
	SegRename(0X0,"ROM");
	SegClass (0X0,"");
	SegCreate(0X200000,0X204000,0X0,1,1,2);
	SegRename(0X200000,"SRAM");
	SegClass (0X200000,"");
	SegCreate(0XA00000,0XA0FFFF,0X0,0,0,2);
	SegRename(0XA00000,"Z80");
	SegClass (0XA00000,"");
	SegCreate(0XA10000,0XA10FFF,0X0,0,0,2);
	SegRename(0XA10000,"IO");
	SegClass (0XA10000,"");
	SegCreate(0XA11000,0XA11FFF,0X0,0,0,2);
	SegRename(0XA11000,"Control");
	SegClass (0XA11000,"");
	SegCreate(0XC00000,0XC00012,0X0,1,0,2);
	SegRename(0XC00000,"VDP");
	SegClass (0XC00000,"");
	SegCreate(0XFF0000,0X1000000,0X0,0,0,2);
	SegRename(0XFF0000,"RAM");
	SegClass (0XFF0000,"");
	LowVoids(0x0);
	HighVoids(0xFFFFFF);
}

static Enums_0(id) {

	id = AddEnum(-1,"BattleAction_Offsets",0x1100000);
	AddConstEx(id,"BATTLE_ACTION_OFFSET_CASTER_INDEX",	0X0,	-1);
	AddConstEx(id,"BATTLE_ACTION_OFFSET_TYPE",	0X1,	-1);
	AddConstEx(id,"BATTLE_ACTION_OFFSET_SPELL_INDEX",	0X2,	-1);
	AddConstEx(id,"BATTLE_ACTION_OFFSET_TARGET_INDEX",	0X3,	-1);
	AddConstEx(id,"BATTLE_ACTION_OFFSET_TARGET_X",	0X4,	-1);
	AddConstEx(id,"BATTLE_ACTION_OFFSET_TARGET_Y",	0X5,	-1);
	id = AddEnum(-1,"BattleActionTypes",0x2200000);
	AddConstEx(id,"BATTLE_ACTION_TYPE_ATTACK",	0X0,	-1);
	AddConstEx(id,"BATTLE_ACTION_TYPE_CAST_SPELL",	0X1,	-1);
	AddConstEx(id,"BATTLE_ACTION_TYPE_USE_ITEM",	0X2,	-1);
	AddConstEx(id,"BATTLE_ACTION_TYPE_3",	0X3,	-1);
	id = AddEnum(-1,"BattlefieldEngine_Offsets",0x1100000);
	AddConstEx(id,"OFFSET_PASSABILITY_FLAGS_TO_TABLE_AT_FFA8C0",	0X400,	-1);
	AddConstEx(id,"OFFSET_PASSABILITY_FLAGS_TO_CURRENT_TERRAIN_DATA",	0X800,	-1);
	AddConstEx(id,"OFFSET_CURRENT_TERRAIN_DATA_TO_MOVE_COSTS",	0X1540,	-1);
	AddConstEx(id,"OFFSET_PASSABILITY_FLAGS_TO_MOVE_COSTS",	0X1D40,	-1);
	id = AddEnum(-1,"BattleHeader_Offsets",0x1100000);
	AddConstEx(id,"BATTLEHEADER_OFFSET_MAP_WIDTH",	0X10,	-1);
	id = AddEnum(-1,"BattlePartySlots",0x2200000);
	AddConstEx(id,"BATTLE_PARTY_SLOTS_COUNTER",	0XB,	-1);
	AddConstEx(id,"BATTLE_PARTY_SLOTS_NUMBER",	0XC,	-1);
	AddConstEx(id,"EMPTY_BATTLE_PARTY_SLOT",	0XFF,	-1);
	id = AddEnum(-1,"BattleSpriteProperties",0x2200000);
	AddConstEx(id,"PROMOTED_BATTLESPRITES_START",	0X13,	-1);
	id = AddEnum(-1,"BattleSprites",0x2200000);
	AddConstEx(id,"BATTLESPRITE_MAX_SDMN",	0X0,	-1);
	AddConstEx(id,"BATTLESPRITE_KNT",	0X1,	-1);
	AddConstEx(id,"BATTLESPRITE_WARR",	0X2,	-1);
	AddConstEx(id,"BATTLESPRITE_GUNTZ_SKNT",	0X3,	-1);
	AddConstEx(id,"BATTLESPRITE_MAGE",	0X4,	-1);
	AddConstEx(id,"BATTLESPRITE_DOMINGO_1",	0X5,	-1);
	AddConstEx(id,"BATTLESPRITE_HEAL",	0X6,	-1);
	AddConstEx(id,"BATTLESPRITE_KHRIS_HEAL",	0X7,	-1);
	AddConstEx(id,"BATTLESPRITE_GONG_MONK",	0X8,	-1);
	AddConstEx(id,"BATTLESPRITE_ACHR",	0X9,	-1);
	AddConstEx(id,"BATTLESPRITE_LYLE_ASKT",	0XA,	-1);
	AddConstEx(id,"BATTLESPRITE_BDMN",	0XB,	-1);
	AddConstEx(id,"BATTLESPRITE_KOKICHI_WKNT",	0XC,	-1);
	AddConstEx(id,"BATTLESPRITE_BLEU_DRGN",	0XD,	-1);
	AddConstEx(id,"BATTLESPRITE_ADAM_RBT",	0XE,	-1);
	AddConstEx(id,"BATTLESPRITE_ZYLO_WRWF",	0XF,	-1);
	AddConstEx(id,"BATTLESPRITE_MUSASHI",	0X10,	-1);
	AddConstEx(id,"BATTLESPRITE_HANZOU",	0X11,	-1);
	AddConstEx(id,"BATTLESPRITE_JOGURT",	0X12,	-1);
	AddConstEx(id,"BATTLESPRITE_MAX_HERO",	0X13,	-1);
	AddConstEx(id,"BATTLESPRITE_PLDN",	0X14,	-1);
	AddConstEx(id,"BATTLESPRITE_GLDR",	0X15,	-1);
	AddConstEx(id,"BATTLESPRITE_GUNTZ_SBRN",	0X16,	-1);
	AddConstEx(id,"BATTLESPRITE_WIZD",	0X17,	-1);
	AddConstEx(id,"BATTLESPRITE_DOMINGO_2",	0X18,	-1);
	AddConstEx(id,"BATTLESPRITE_VICR",	0X19,	-1);
	AddConstEx(id,"BATTLESPRITE_KHRIS_VICR",	0X1A,	-1);
	AddConstEx(id,"BATTLESPRITE_GONG_MSMK",	0X1B,	-1);
	AddConstEx(id,"BATTLESPRITE_BWMS",	0X1C,	-1);
	AddConstEx(id,"BATTLESPRITE_LYLE_SKNT",	0X1D,	-1);
	AddConstEx(id,"BATTLESPRITE_SKYW",	0X1E,	-1);
	AddConstEx(id,"BATTLESPRITE_KOKICHI_SKYL",	0X1F,	-1);
	AddConstEx(id,"BATTLESPRITE_BLEU_GRDR",	0X20,	-1);
	AddConstEx(id,"BATTLESPRITE_ADAM_CYBG",	0X21,	-1);
	AddConstEx(id,"BATTLESPRITE_ZYLO_WFBN",	0X22,	-1);
	id = AddEnum(-1,"ClassDefOffsets",0x1100000);
	AddConstEx(id,"CLASSDEF_OFFSET_MOVE_TYPE",	0X0,	-1);
	AddConstEx(id,"CLASSDEF_OFFSET_AI_ACTION",	0X1,	-1);
	AddConstEx(id,"CLASSDEF_OFFSET_RESISTANCES",	0X2,	-1);
	AddConstEx(id,"CLASSDEF_OFFSET_PROPERTIES",	0X4,	-1);
	SetConstCmt(GetConstEx(id,0X4,0,-1),"upper nibble holds AI action chance",1);
	AddConstEx(id,"CLASSDEF_OFFSET_UNARMED_RANGE",	0X5,	-1);
	AddConstEx(id,"CLASSDEF_OFFSET_UNARMED_EFFECT",	0X6,	-1);
	AddConstEx(id,"CLASSDEF_OFFSET_SPECIAL_ATTACK_INDEX",	0X7,	-1);
	id = AddEnum(-1,"ClassDefMoveTypes",0x1100000);
	AddConstEx(id,"MOVE_TYPE_STANDARD",	0X1,	-1);
	AddConstEx(id,"MOVE_TYPE_MOUNTED",	0X2,	-1);
	AddConstEx(id,"MOVE_TYPE_AQUATIC",	0X3,	-1);
	AddConstEx(id,"MOVE_TYPE_FOREST",	0X4,	-1);
	AddConstEx(id,"MOVE_TYPE_MECHANICAL",	0X5,	-1);
	AddConstEx(id,"MOVE_TYPE_FLYING",	0X6,	-1);
	AddConstEx(id,"MOVE_TYPE_HOVERING",	0X7,	-1);
	id = AddEnum(-1,"ClassDefAiActions",0x1100000);
	AddConstEx(id,"AI_ACTION_CAST_SPELL",	0X80,	-1);
	AddConstEx(id,"AI_ACTION_USE_ITEM_SLOT_0",	0X81,	-1);
	AddConstEx(id,"AI_ACTION_USE_ITEM_SLOT_1",	0X82,	-1);
	AddConstEx(id,"AI_ACTION_DARK_DRAGON",	0X83,	-1);
	AddConstEx(id,"AI_ACTION_REGULAR_ATTACK",	0XFF,	-1);
	id = AddEnum(-1,"ClassDefResistances",0x1100000);
	AddConstEx(id,"CLASS_RESISTANCE_BLAZE",	0X0,	-1);
	AddConstEx(id,"CLASS_RESISTANCE_FREEZE",	0X1,	-1);
	AddConstEx(id,"CLASS_RESISTANCE_BOLT",	0X2,	-1);
	AddConstEx(id,"CLASS_RESISTANCE_SLEEP_AND_DESOUL",	0X3,	-1);
	AddConstEx(id,"CLASS_RESISTANCE_ANTI_AIR",	0X4,	-1);
	SetConstCmt(GetConstEx(id,0X4,0,-1),"misleadingly labeled \"Muddle\" in SF1Edit",1);
	AddConstEx(id,"CLASS_RESISTANCE_CHAOS_BREAKER",	0X5,	-1);
	SetConstCmt(GetConstEx(id,0X5,0,-1),"misleadingly labeled \"Slow\" in SF1Edit",1);
	AddConstEx(id,"CLASS_RESISTANCE_UNUSED",	0X6,	-1);
	SetConstCmt(GetConstEx(id,0X6,0,-1),"labeled \"?\" in SF1Edit",1);
	AddConstEx(id,"CLASS_RESISTANCE_EVASION",	0X7,	-1);
	id = AddEnum(-1,"ClassResistanceElements",0x2200000);
	AddConstEx(id,"ELEMENT_FIRE",	0X0,	-1);
	SetConstCmt(GetConstEx(id,0X0,0,-1),"also determines resistance to SLOW, DISPEL, and MUDDLE",1);
	AddConstEx(id,"ELEMENT_ICE",	0X1,	-1);
	AddConstEx(id,"ELEMENT_LIGHTNING",	0X2,	-1);
	AddConstEx(id,"ELEMENT_SLEEP_AND_DESOUL",	0X3,	-1);
	AddConstEx(id,"ELEMENT_ANTI_AIR",	0X4,	-1);
	AddConstEx(id,"ELEMENT_CHAOS_BREAKER",	0X5,	-1);
	AddConstEx(id,"ELEMENT_UNUSED",	0X6,	-1);
	AddConstEx(id,"ELEMENT_NONE",	0X7,	-1);
	id = AddEnum(-1,"ClassDefProperties",0x1100000);
	AddConstEx(id,"CLASS_PROPERTY_MASK_SPECIAL_ATTACK_CHANCE",	0X3,	-1);
	AddConstEx(id,"CLASS_PROPERTY_HP_REGEN_TOGGLE",	0X7,	-1);
	AddConstEx(id,"CLASS_PROPERTY_MASK_DOUBLE_ATTACK_MODE",	0XC,	-1);
	AddConstEx(id,"CLASS_PROPERTY_MASK_AI_ACTION_CHANCE",	0X30,	-1);
	id = AddEnum(-1,"ClassDefDoubleAttackModes",0x1100000);
	AddConstEx(id,"DOUBLE_ATTACK_MODE_DEFAULT",	0X0,	-1);
	AddConstEx(id,"DOUBLE_ATTACK_MODE_NEVER",	0X1,	-1);
	AddConstEx(id,"DOUBLE_ATTACK_MODE_HIGH",	0X2,	-1);
	AddConstEx(id,"DOUBLE_ATTACK_MODE_LEVEL_BONUS",	0X3,	-1);
	id = AddEnum(-1,"ClassEntryProperties",0x2200000);
	AddConstEx(id,"BASE_CLASSES_END",	0XD,	-1);
	AddConstEx(id,"PROMOTED_CLASSES_START",	0XE,	-1);
	AddConstEx(id,"ENEMY_CLASSES_START",	0X20,	-1);
	id = AddEnum(-1,"Classes",0x2200000);
	AddConstEx(id,"CLASS_SDMN",	0X0,	-1);
	AddConstEx(id,"CLASS_KNT",	0X1,	-1);
	AddConstEx(id,"CLASS_WARR",	0X2,	-1);
	AddConstEx(id,"CLASS_SKNT_1",	0X3,	-1);
	SetConstCmt(GetConstEx(id,0X3,0,-1),"Guntz's base class",1);
	AddConstEx(id,"CLASS_MAGE",	0X4,	-1);
	AddConstEx(id,"CLASS_MONK",	0X5,	-1);
	AddConstEx(id,"CLASS_HEAL",	0X6,	-1);
	AddConstEx(id,"CLASS_ACHR",	0X7,	-1);
	AddConstEx(id,"CLASS_ASKT",	0X8,	-1);
	AddConstEx(id,"CLASS_BDMN",	0X9,	-1);
	AddConstEx(id,"CLASS_WKNT",	0XA,	-1);
	AddConstEx(id,"CLASS_DRGN",	0XB,	-1);
	AddConstEx(id,"CLASS_RBT",	0XC,	-1);
	AddConstEx(id,"CLASS_WRWF",	0XD,	-1);
	AddConstEx(id,"CLASS_SMR",	0XE,	-1);
	AddConstEx(id,"CLASS_NINJ",	0XF,	-1);
	AddConstEx(id,"CLASS_HERO",	0X10,	-1);
	AddConstEx(id,"CLASS_PLDN",	0X11,	-1);
	AddConstEx(id,"CLASS_GLDR",	0X12,	-1);
	AddConstEx(id,"CLASS_SBRN",	0X13,	-1);
	AddConstEx(id,"CLASS_WIZD",	0X14,	-1);
	AddConstEx(id,"CLASS_MSMK",	0X15,	-1);
	AddConstEx(id,"CLASS_VICR",	0X16,	-1);
	AddConstEx(id,"CLASS_BWMS",	0X17,	-1);
	AddConstEx(id,"CLASS_SKNT_2",	0X18,	-1);
	SetConstCmt(GetConstEx(id,0X18,0,-1),"Lyle's promoted class",1);
	AddConstEx(id,"CLASS_SKYW",	0X19,	-1);
	AddConstEx(id,"CLASS_SKYL",	0X1A,	-1);
	AddConstEx(id,"CLASS_GRDR",	0X1B,	-1);
	AddConstEx(id,"CLASS_CYBG",	0X1C,	-1);
	AddConstEx(id,"CLASS_WFBN",	0X1D,	-1);
	AddConstEx(id,"CLASS_YGRT",	0X1E,	-1);
	AddConstEx(id,"CLASS_MGCR",	0X1F,	-1);
	AddConstEx(id,"CLASS_GOBLIN",	0X20,	-1);
	AddConstEx(id,"CLASS_BOWRIDER",	0X21,	-1);
	AddConstEx(id,"CLASS_RUNE_KNIGHT",	0X22,	-1);
	AddConstEx(id,"CLASS_SILVER_KNIGHT",	0X23,	-1);
	AddConstEx(id,"CLASS_DURAHAN_1",	0X24,	-1);
	AddConstEx(id,"CLASS_DARK_SWARF",	0X25,	-1);
	AddConstEx(id,"CLASS_HORSEMAN",	0X26,	-1);
	AddConstEx(id,"CLASS_SNIPER",	0X27,	-1);
	AddConstEx(id,"CLASS_DARK_ELF",	0X28,	-1);
	AddConstEx(id,"CLASS_LIZARDMAN",	0X29,	-1);
	AddConstEx(id,"CLASS_DARK_MAGE_1",	0X2A,	-1);
	AddConstEx(id,"CLASS_DARK_PRIEST_1",	0X2B,	-1);
	AddConstEx(id,"CLASS_HIGH_PRIEST_1",	0X2C,	-1);
	AddConstEx(id,"CLASS_CERBERUS",	0X2D,	-1);
	AddConstEx(id,"CLASS_HELLHOUND",	0X2E,	-1);
	AddConstEx(id,"CLASS_GARGOYLE",	0X2F,	-1);
	AddConstEx(id,"CLASS_BELIAL",	0X30,	-1);
	AddConstEx(id,"CLASS_GOLEM",	0X31,	-1);
	AddConstEx(id,"CLASS_WEED",	0X32,	-1);
	AddConstEx(id,"CLASS_DARK_PRIEST_2",	0X33,	-1);
	AddConstEx(id,"CLASS_ZOMBIE_1",	0X34,	-1);
	AddConstEx(id,"CLASS_DARK_MAGE_2",	0X35,	-1);
	AddConstEx(id,"CLASS_MASTER_MAGE",	0X36,	-1);
	AddConstEx(id,"CLASS_DEMON_MASTER_1",	0X37,	-1);
	AddConstEx(id,"CLASS_GIANT_BAT",	0X38,	-1);
	AddConstEx(id,"CLASS_SEABAT",	0X39,	-1);
	AddConstEx(id,"CLASS_WORM",	0X3A,	-1);
	AddConstEx(id,"CLASS_ICE_WORM",	0X3B,	-1);
	AddConstEx(id,"CLASS_MINOTAUR_1",	0X3C,	-1);
	AddConstEx(id,"CLASS_ARTILLERY_1",	0X3D,	-1);
	AddConstEx(id,"CLASS_MANNEQUIN",	0X3E,	-1);
	AddConstEx(id,"CLASS_EVIL_PUPPET",	0X3F,	-1);
	AddConstEx(id,"CLASS_DIRE_CLOWN",	0X40,	-1);
	AddConstEx(id,"CLASS_DURAHAN_2",	0X41,	-1);
	AddConstEx(id,"CLASS_SKELETON_1",	0X42,	-1);
	AddConstEx(id,"CLASS_HIGH_PRIEST_2",	0X43,	-1);
	AddConstEx(id,"CLASS_MARIONETTE",	0X44,	-1);
	AddConstEx(id,"CLASS_DEMON_MASTER_2",	0X45,	-1);
	AddConstEx(id,"CLASS_ARMED_SKELETON",	0X46,	-1);
	AddConstEx(id,"CLASS_PEGASUS_KNIGHT_1",	0X47,	-1);
	AddConstEx(id,"CLASS_ARTILLERY_2",	0X48,	-1);
	AddConstEx(id,"CLASS_CHIMAERA_1",	0X49,	-1);
	AddConstEx(id,"CLASS_WYVERN",	0X4A,	-1);
	AddConstEx(id,"CLASS_BLUE_DRAGON",	0X4B,	-1);
	AddConstEx(id,"CLASS_CONCH",	0X4C,	-1);
	AddConstEx(id,"CLASS_SHELLFISH",	0X4D,	-1);
	AddConstEx(id,"CLASS_ARTILLERY_3",	0X4E,	-1);
	AddConstEx(id,"CLASS_STEEL_CLAW",	0X4F,	-1);
	AddConstEx(id,"CLASS_TORCH_EYE",	0X50,	-1);
	AddConstEx(id,"CLASS_JET",	0X51,	-1);
	AddConstEx(id,"CLASS_DARKSOL",	0X52,	-1);
	AddConstEx(id,"CLASS_LASER_EYE",	0X53,	-1);
	AddConstEx(id,"CLASS_ELLIOTT",	0X54,	-1);
	AddConstEx(id,"CLASS_BALBAZAK",	0X55,	-1);
	AddConstEx(id,"CLASS_MISHAELA",	0X56,	-1);
	AddConstEx(id,"CLASS_CHAOS",	0X57,	-1);
	AddConstEx(id,"CLASS_RAMLADU",	0X58,	-1);
	AddConstEx(id,"CLASS_CAIN",	0X59,	-1);
	AddConstEx(id,"CLASS_COLOSSUS_1",	0X5A,	-1);
	AddConstEx(id,"CLASS_DARK_DRAGON_1",	0X5B,	-1);
	AddConstEx(id,"CLASS_COLOSSUS_2",	0X5C,	-1);
	AddConstEx(id,"CLASS_COLOSSUS_3",	0X5D,	-1);
	AddConstEx(id,"CLASS_DARK_MAGE_3",	0X5E,	-1);
	AddConstEx(id,"CLASS_ZOMBIE_2",	0X5F,	-1);
	AddConstEx(id,"CLASS_SKELETON_2",	0X60,	-1);
	AddConstEx(id,"CLASS_GHOUL",	0X61,	-1);
	AddConstEx(id,"CLASS_PEGASUS_KNIGHT_2",	0X62,	-1);
	AddConstEx(id,"CLASS_DARK_MAGE_4",	0X63,	-1);
	AddConstEx(id,"CLASS_DURAHAN_3",	0X64,	-1);
	AddConstEx(id,"CLASS_MINOTAUR_2",	0X65,	-1);
	AddConstEx(id,"CLASS_CHIMAERA_2",	0X66,	-1);
	AddConstEx(id,"CLASS_SKELETON_3",	0X67,	-1);
	AddConstEx(id,"CLASS_DARK_DRAGON_2",	0X68,	-1);
	id = AddEnum(-1,"CombatantEntry",0x2200000);
	AddConstEx(id,"COMBATANT_ENTRY_SIZE",	0X10,	-1);
	AddConstEx(id,"COMBATANT_ENTRIES_COUNTER",	0X1F,	-1);
	AddConstEx(id,"COMBATANT_ENTRIES_NUMBER",	0X20,	-1);
	AddConstEx(id,"EMPTY_COMBATANT_SLOT",	0XFF,	-1);
	id = AddEnum(-1,"CombatantEntry_Offsets",0x2200000);
	AddConstEx(id,"COMBATANT_OFFSET_ENTITY_INDEX",	0X0,	-1);
	AddConstEx(id,"COMBATANT_OFFSET_X",	0X1,	-1);
	AddConstEx(id,"COMBATANT_OFFSET_Y",	0X2,	-1);
	AddConstEx(id,"COMBATANT_OFFSET_MODIFIED_ATTACK",	0X3,	-1);
	AddConstEx(id,"COMBATANT_OFFSET_MODIFIED_DEFENSE",	0X4,	-1);
	AddConstEx(id,"COMBATANT_OFFSET_MODIFIED_AGILITY",	0X5,	-1);
	AddConstEx(id,"COMBATANT_OFFSET_MODIFIED_MOVE",	0X6,	-1);
	AddConstEx(id,"COMBATANT_OFFSET_MODIFIED_CRITICAL",	0X7,	-1);
	AddConstEx(id,"COMBATANT_OFFSET_MODIFIED_DOUBLE_ATTACK_MODE",	0X8,	-1);
	AddConstEx(id,"COMBATANT_OFFSET_ITEMS",	0X9,	-1);
	AddConstEx(id,"COMBATANT_OFFSET_SPELLS",	0XC,	-1);
	id = AddEnum(-1,"CombatantMasks",0x1100000);
	AddConstEx(id,"COMBATANT_INDEX_MASK",	0X7F,	-1);
	id = AddEnum(-1,"ControllerInputs",0x1100000);
	SetEnumBf(id,1);
	AddConstEx(id,"INPUT_UP",	0X1,	0x1);
	AddConstEx(id,"INPUT_DOWN",	0X2,	0x2);
	AddConstEx(id,"INPUT_LEFT",	0X4,	0x4);
	AddConstEx(id,"INPUT_RIGHT",	0X8,	0x8);
	AddConstEx(id,"INPUT_B",	0X10,	0x10);
	AddConstEx(id,"INPUT_C",	0X20,	0x20);
	AddConstEx(id,"INPUT_A",	0X40,	0x40);
	AddConstEx(id,"INPUT_START",	0X80,	0x80);
	id = AddEnum(-1,"InputsBitmap",0x2200000);
	AddConstEx(id,"INPUT_BIT_UP",	0X0,	-1);
	AddConstEx(id,"INPUT_BIT_DOWN",	0X1,	-1);
	AddConstEx(id,"INPUT_BIT_LEFT",	0X2,	-1);
	AddConstEx(id,"INPUT_BIT_RIGHT",	0X3,	-1);
	AddConstEx(id,"INPUT_BIT_B",	0X4,	-1);
	AddConstEx(id,"INPUT_BIT_C",	0X5,	-1);
	AddConstEx(id,"INPUT_BIT_A",	0X6,	-1);
	AddConstEx(id,"INPUT_BIT_START",	0X7,	-1);
	id = AddEnum(-1,"Colors",0x2200000);
	AddConstEx(id,"PALETTE_COLORS_COUNTER",	0XF,	-1);
	AddConstEx(id,"CRAM_COLORS_COUNTER",	0X3F,	-1);
	id = AddEnum(-1,"DealsItems",0x2200000);
	AddConstEx(id,"DEALS_ITEMS_BYTES_COUNTER",	0X1F,	-1);
	id = AddEnum(-1,"EntityEntry",0x2200000);
	AddConstEx(id,"ENTITYENTRY_BIT_ENEMY",	0X7,	-1);
	id = AddEnum(-1,"EffectDefOffsets",0x1100000);
	AddConstEx(id,"EFFECTDEF_OFFSET_TYPE",	0X0,	-1);
	AddConstEx(id,"EFFECTDEF_OFFSET_ANIM",	0X1,	-1);
	AddConstEx(id,"EFFECTDEF_OFFSET_ELEMENT",	0X2,	-1);
	AddConstEx(id,"EFFECTDEF_OFFSET_STATUS",	0X2,	-1);
	SetConstCmt(GetConstEx(id,0X2,1,-1),"inflict status effect",1);
	AddConstEx(id,"EFFECTDEF_OFFSET_POWER",	0X3,	-1);
	AddConstEx(id,"EFFECTDEF_OFFSET_CAN_FAIL",	0X3,	-1);
	SetConstCmt(GetConstEx(id,0X3,1,-1),"inflict status effect",1);
	AddConstEx(id,"EFFECTDEF_OFFSET_MESSAGE",	0X4,	-1);
	AddConstEx(id,"EFFECTDEF_OFFSET_ROUTINE",	0X6,	-1);
	id = AddEnum(-1,"Effects",0x2200000);
	AddConstEx(id,"EFFECT_ATTACK",	0X0,	-1);
	AddConstEx(id,"EFFECT_DOOM_BLADE_ATTACK",	0X1,	-1);
	AddConstEx(id,"EFFECT_CHAOS_BREAKER_ATTACK",	0X2,	-1);
	AddConstEx(id,"EFFECT_DEMON_ROD_USE",	0X3,	-1);
	AddConstEx(id,"EFFECT_FIRE_BREATH_1",	0X4,	-1);
	AddConstEx(id,"EFFECT_FIRE_BREATH_2",	0X5,	-1);
	AddConstEx(id,"EFFECT_FIRE_BREATH_3",	0X6,	-1);
	AddConstEx(id,"EFFECT_ICE_BREATH_1",	0X7,	-1);
	AddConstEx(id,"EFFECT_ICE_BREATH_2",	0X8,	-1);
	AddConstEx(id,"EFFECT_ICE_BREATH_3",	0X9,	-1);
	AddConstEx(id,"EFFECT_ELECTRIC_BREATH",	0XA,	-1);
	SetConstCmt(GetConstEx(id,0XA,0,-1),"unused",1);
	AddConstEx(id,"EFFECT_MACHINE_GUN",	0XB,	-1);
	AddConstEx(id,"EFFECT_LASER",	0XC,	-1);
	AddConstEx(id,"EFFECT_DEMON_BLAZE_1",	0XD,	-1);
	AddConstEx(id,"EFFECT_LASER_EYE",	0XE,	-1);
	AddConstEx(id,"EFFECT_MEDICAL_HERB",	0XF,	-1);
	AddConstEx(id,"EFFECT_HEALING_SEED",	0X10,	-1);
	AddConstEx(id,"EFFECT_ANTIDOTE",	0X11,	-1);
	AddConstEx(id,"EFFECT_SHOWER_OF_CURE",	0X12,	-1);
	AddConstEx(id,"EFFECT_YOGURT_RING",	0X13,	-1);
	AddConstEx(id,"EFFECT_HEAL_1",	0X14,	-1);
	AddConstEx(id,"EFFECT_HEAL_2",	0X15,	-1);
	AddConstEx(id,"EFFECT_HEAL_3",	0X16,	-1);
	AddConstEx(id,"EFFECT_HEAL_4",	0X17,	-1);
	AddConstEx(id,"EFFECT_AURA_1",	0X18,	-1);
	AddConstEx(id,"EFFECT_AURA_2",	0X19,	-1);
	AddConstEx(id,"EFFECT_AURA_3",	0X1A,	-1);
	AddConstEx(id,"EFFECT_AURA_4",	0X1B,	-1);
	AddConstEx(id,"EFFECT_DETOX_1",	0X1C,	-1);
	AddConstEx(id,"EFFECT_DETOX_2",	0X1D,	-1);
	AddConstEx(id,"EFFECT_QUICK",	0X1E,	-1);
	AddConstEx(id,"EFFECT_SLOW",	0X1F,	-1);
	AddConstEx(id,"EFFECT_BOOST",	0X20,	-1);
	AddConstEx(id,"EFFECT_DISPEL",	0X21,	-1);
	AddConstEx(id,"EFFECT_SHIELD",	0X22,	-1);
	AddConstEx(id,"EFFECT_MUDDLE",	0X23,	-1);
	AddConstEx(id,"EFFECT_BLAZE_1",	0X24,	-1);
	AddConstEx(id,"EFFECT_BLAZE_2",	0X25,	-1);
	AddConstEx(id,"EFFECT_BLAZE_3",	0X26,	-1);
	AddConstEx(id,"EFFECT_BLAZE_4",	0X27,	-1);
	AddConstEx(id,"EFFECT_FREEZE_1",	0X28,	-1);
	AddConstEx(id,"EFFECT_FREEZE_2",	0X29,	-1);
	AddConstEx(id,"EFFECT_FREEZE_3",	0X2A,	-1);
	AddConstEx(id,"EFFECT_FREEZE_4",	0X2B,	-1);
	AddConstEx(id,"EFFECT_BOLT_1",	0X2C,	-1);
	AddConstEx(id,"EFFECT_BOLT_2",	0X2D,	-1);
	AddConstEx(id,"EFFECT_BOLT_3",	0X2E,	-1);
	AddConstEx(id,"EFFECT_BOLT_4",	0X2F,	-1);
	AddConstEx(id,"EFFECT_DESOUL_1",	0X30,	-1);
	AddConstEx(id,"EFFECT_DESOUL_2",	0X31,	-1);
	AddConstEx(id,"EFFECT_EGRESS",	0X32,	-1);
	AddConstEx(id,"EFFECT_UNUSED",	0X33,	-1);
	AddConstEx(id,"EFFECT_SLEEP",	0X34,	-1);
	AddConstEx(id,"EFFECT_POWER_POTION",	0X35,	-1);
	AddConstEx(id,"EFFECT_DEFENSE_POTION",	0X36,	-1);
	AddConstEx(id,"EFFECT_LEGS_OF_HASTE",	0X37,	-1);
	AddConstEx(id,"EFFECT_TURBO_PEPPER",	0X38,	-1);
	AddConstEx(id,"EFFECT_BREAD_OF_LIFE",	0X39,	-1);
	AddConstEx(id,"EFFECT_DEMON_BLAZE_2",	0X3A,	-1);
	id = AddEnum(-1,"EnemyEntry_Offsets",0x2200000);
	AddConstEx(id,"ENEMY_OFFSET_COINS",	0X0,	-1);
	AddConstEx(id,"ENEMY_OFFSET_CLASS",	0X2,	-1);
	AddConstEx(id,"ENEMY_OFFSET_LEVEL",	0X3,	-1);
	AddConstEx(id,"ENEMY_OFFSET_ATTACK",	0X4,	-1);
	AddConstEx(id,"ENEMY_OFFSET_DEFENSE",	0X5,	-1);
	AddConstEx(id,"ENEMY_OFFSET_AGILITY",	0X6,	-1);
	AddConstEx(id,"ENEMY_OFFSET_MOVE",	0X7,	-1);
	AddConstEx(id,"ENEMY_OFFSET_HP",	0X8,	-1);
	AddConstEx(id,"ENEMY_OFFSET_MP",	0XA,	-1);
	AddConstEx(id,"ENEMY_OFFSET_11",	0XB,	-1);
	AddConstEx(id,"ENEMY_OFFSET_MAPSPRITE",	0XC,	-1);
	AddConstEx(id,"ENEMY_OFFSET_BATTLESPRITE",	0XD,	-1);
	AddConstEx(id,"ENEMY_OFFSET_PALETTE",	0XE,	-1);
	AddConstEx(id,"ENEMY_OFFSET_PORTRAIT",	0XF,	-1);
	id = AddEnum(-1,"EventFlags",0x2200000);
	AddConstEx(id,"EVENT_FLAGS_COUNTER",	0X3F,	-1);
	id = AddEnum(-1,"Fading",0x1100000);
	AddConstEx(id,"IN_FROM_BLACK",	0X1,	-1);
	AddConstEx(id,"OUT_TO_BLACK",	0X2,	-1);
	AddConstEx(id,"IN_FROM_WHITE",	0X3,	-1);
	AddConstEx(id,"OUT_TO_WHITE",	0X4,	-1);
	id = AddEnum(-1,"ForceDefinition",0x2200000);
	AddConstEx(id,"FORCE_MEMBER_NAME_COUNTER",	0X9,	-1);
	AddConstEx(id,"FORCE_NAME_LENGTH",	0XA,	-1);
	AddConstEx(id,"FORCE_LEVEL_CAP_UNPROMOTED",	0X14,	-1);
	AddConstEx(id,"FORCE_ENTRY_SIZE",	0X28,	-1);
	AddConstEx(id,"FORCE_STAT_CAP",	0X63,	-1);
	AddConstEx(id,"FORCE_LEVEL_CAP_PROMOTED",	0X63,	-1);
	AddConstEx(id,"FORCE_GOLD_CAP",	0XF423F,	-1);
	id = AddEnum(-1,"ForceMemberEntry",0x1100000);
	AddConstEx(id,"FORCEMEMBERENTRY_MASK_INDEX",	0X3F,	-1);
	AddConstEx(id,"FORCEMEMBERENTRY_MASK_INDEX_0",	0X7F,	-1);
	id = AddEnum(-1,"ForceDataOffsets",0x2200000);
	AddConstEx(id,"FORCE_OFFSET_NAME",	0X0,	-1);
	AddConstEx(id,"FORCE_OFFSET_CLASS",	0XA,	-1);
	AddConstEx(id,"FORCE_OFFSET_LEVEL",	0XB,	-1);
	AddConstEx(id,"FORCE_OFFSET_BASE_ATTACK",	0XC,	-1);
	AddConstEx(id,"FORCE_OFFSET_BASE_DEFENSE",	0XD,	-1);
	AddConstEx(id,"FORCE_OFFSET_BASE_AGILITY",	0XE,	-1);
	AddConstEx(id,"FORCE_OFFSET_BASE_MOVE",	0XF,	-1);
	AddConstEx(id,"FORCE_OFFSET_BASE_CRITICAL",	0X10,	-1);
	AddConstEx(id,"FORCE_OFFSET_EXPERIENCE",	0X11,	-1);
	AddConstEx(id,"FORCE_OFFSET_MAXIMUM_HP",	0X12,	-1);
	AddConstEx(id,"FORCE_OFFSET_MAXIMUM_HP_LOW_BYTE",	0X13,	-1);
	AddConstEx(id,"FORCE_OFFSET_CURRENT_HP",	0X14,	-1);
	AddConstEx(id,"FORCE_OFFSET_MAXIMUM_MP",	0X16,	-1);
	AddConstEx(id,"FORCE_OFFSET_CURRENT_MP",	0X17,	-1);
	AddConstEx(id,"FORCE_OFFSET_STATUS_EFFECTS",	0X18,	-1);
	AddConstEx(id,"FORCE_OFFSET_ITEMS",	0X1A,	-1);
	AddConstEx(id,"FORCE_OFFSET_SPELLS",	0X1E,	-1);
	id = AddEnum(-1,"ForceMembers",0x2200000);
	AddConstEx(id,"MAX",	0X0,	-1);
	AddConstEx(id,"MAE",	0X1,	-1);
	AddConstEx(id,"PELLE",	0X2,	-1);
	AddConstEx(id,"KEN",	0X3,	-1);
	AddConstEx(id,"VANKAR",	0X4,	-1);
	AddConstEx(id,"EARNEST",	0X5,	-1);
	AddConstEx(id,"ARTHUR",	0X6,	-1);
	AddConstEx(id,"GORT",	0X7,	-1);
	AddConstEx(id,"LUKE",	0X8,	-1);
	AddConstEx(id,"GUNTZ",	0X9,	-1);
	AddConstEx(id,"ANRI",	0XA,	-1);
	AddConstEx(id,"ALEF",	0XB,	-1);
	AddConstEx(id,"TAO",	0XC,	-1);
	AddConstEx(id,"DOMINGO",	0XD,	-1);
	AddConstEx(id,"LOWE",	0XE,	-1);
	AddConstEx(id,"KHRIS",	0XF,	-1);
	AddConstEx(id,"TORASU",	0X10,	-1);
	AddConstEx(id,"GONG",	0X11,	-1);
	AddConstEx(id,"DIANE",	0X12,	-1);
	AddConstEx(id,"HANS",	0X13,	-1);
	AddConstEx(id,"LYLE",	0X14,	-1);
	AddConstEx(id,"AMON",	0X15,	-1);
	AddConstEx(id,"BALBAROY",	0X16,	-1);
	AddConstEx(id,"KOKICHI",	0X17,	-1);
	AddConstEx(id,"BLEU",	0X18,	-1);
	AddConstEx(id,"ADAM",	0X19,	-1);
	AddConstEx(id,"ZYLO",	0X1A,	-1);
	AddConstEx(id,"MUSASHI",	0X1B,	-1);
	AddConstEx(id,"HANZOU",	0X1C,	-1);
	AddConstEx(id,"JOGURT",	0X1D,	-1);
	AddConstEx(id,"NOVA",	0X1E,	-1);
	id = AddEnum(-1,"ForceMembersData",0x2200000);
	AddConstEx(id,"REGULAR_NON_LEADER_FORCE_MEMBERS_COUNTER",	0X1B,	-1);
	AddConstEx(id,"REGULAR_FORCE_MEMBERS_COUNTER",	0X1C,	-1);
	SetConstCmt(GetConstEx(id,0X1C,0,-1),"exclude Jogurt and Nova from regular Force",1);
	AddConstEx(id,"NON_LEADER_FORCE_MEMBERS_COUNTER",	0X1C,	-1);
	SetConstCmt(GetConstEx(id,0X1C,1,-1),"exclude Max",1);
	AddConstEx(id,"FORCE_MEMBERS_COUNTER",	0X1E,	-1);
	AddConstEx(id,"FORCE_MEMBERS_NUMBER",	0X1F,	-1);
	AddConstEx(id,"FORCE_MEMBERS_DATA_BYTES_COUNTER",	0X4D7,	-1);
	id = AddEnum(-1,"GrowthDefinition",0x1100000);
	AddConstEx(id,"GROWTH_PROJECTION_LEVEL",	0X14,	-1);
	AddConstEx(id,"GROWTH_MASK_VALUE",	0X3F,	-1);
	AddConstEx(id,"GROWTH_MASK_CURVE_INDEX",	0XC0,	-1);
	id = AddEnum(-1,"IconTiles_Properties",0x1100000);
	AddConstEx(id,"ICONTILES_BYTESIZE",	0XC0,	-1);
	AddConstEx(id,"ICONTILES_OFFSET_EMPTY",	0X2F40,	-1);
	id = AddEnum(-1,"ItemDefOffsets",0x2200000);
	AddConstEx(id,"ITEMDEF_OFFSET_EQUIP_FLAGS",	0X0,	-1);
	AddConstEx(id,"ITEMDEF_OFFSET_TYPE",	0X4,	-1);
	AddConstEx(id,"ITEMDEF_OFFSET_EQUIP_EFFECT",	0X6,	-1);
	AddConstEx(id,"ITEMDEF_OFFSET_EQUIP_EFFECT_VALUE",	0X7,	-1);
	AddConstEx(id,"ITEMDEF_OFFSET_USE_RANGE",	0X8,	-1);
	AddConstEx(id,"ITEMDEF_OFFSET_USE_EFFECT",	0X9,	-1);
	AddConstEx(id,"ITEMDEF_OFFSET_ATTACK_RANGE",	0XC,	-1);
	AddConstEx(id,"ITEMDEF_OFFSET_ATTACK_EFFECT",	0XD,	-1);
	AddConstEx(id,"ITEMDEF_OFFSET_PRICE",	0XE,	-1);
	id = AddEnum(-1,"ItemEntryBitmap",0x2200000);
	AddConstEx(id,"ITEMENTRY_BIT_BROKEN",	0X6,	-1);
	AddConstEx(id,"ITEMENTRY_BIT_EQUIPPED",	0X7,	-1);
	id = AddEnum(-1,"ItemEntryMasks",0x1100000);
	AddConstEx(id,"ITEMENTRY_MASK_INDEX",	0X3F,	-1);
	AddConstEx(id,"ITEMENTRY_MASK_BROKEN_BIT",	0X40,	-1);
	AddConstEx(id,"ITEMENTRY_MASK_INDEX_AND_BROKEN_BIT",	0X7F,	-1);
	AddConstEx(id,"ITEMENTRY_MASK_EQUIPPED_BIT",	0X80,	-1);
	id = AddEnum(-1,"ItemTypeBitmap",0x2200000);
	AddConstEx(id,"ITEMTYPE_BIT_CURSE_SETTING",	0X0,	-1);
	SetConstCmt(GetConstEx(id,0X0,0,-1),"0 = has to chance to paralyze, 1 = has chance to inflict damage back to attacker",1);
	AddConstEx(id,"ITEMTYPE_BIT_WEAPON",	0X8,	-1);
	AddConstEx(id,"ITEMTYPE_BIT_RING",	0X9,	-1);
	AddConstEx(id,"ITEMTYPE_BIT_USABLE",	0XA,	-1);
	AddConstEx(id,"ITEMTYPE_BIT_CANNOT_DROP",	0XB,	-1);
	AddConstEx(id,"ITEMTYPE_BIT_CONSUMABLE",	0XC,	-1);
	AddConstEx(id,"ITEMTYPE_BIT_CURSED",	0XD,	-1);
	AddConstEx(id,"ITEMTYPE_BIT_CHANCE_TO_CRACK",	0XE,	-1);
	AddConstEx(id,"ITEMTYPE_BIT_RARE",	0XF,	-1);
	id = AddEnum(-1,"ItemTypeMasks",0x1100000);
	AddConstEx(id,"ITEMTYPE_MASK_CURSE_SETTING",	0X1,	-1);
	AddConstEx(id,"ITEMTYPE_MASK_WEAPON",	0X100,	-1);
	AddConstEx(id,"ITEMTYPE_MASK_RING",	0X200,	-1);
	AddConstEx(id,"ITEMTYPE_MASK_WEAPON_OR_RING",	0X300,	-1);
	AddConstEx(id,"ITEMTYPE_MASK_USABLE",	0X400,	-1);
	id = AddEnum(-1,"Items",0x2200000);
	SetEnumBf(id,1);
	AddConstEx(id,"MEDICAL_HERB",	0X0,	0x3F);
	AddConstEx(id,"HEALING_SEED",	0X1,	0x3F);
	AddConstEx(id,"ANTIDOTE",	0X2,	0x3F);
	AddConstEx(id,"SHOWER_OF_CURE",	0X3,	0x3F);
	AddConstEx(id,"ANGEL_WING",	0X4,	0x3F);
	AddConstEx(id,"POWER_POTION",	0X5,	0x3F);
	AddConstEx(id,"DEFENSE_POTION",	0X6,	0x3F);
	AddConstEx(id,"LEGS_OF_HASTE",	0X7,	0x3F);
	AddConstEx(id,"TURBO_PEPPER",	0X8,	0x3F);
	AddConstEx(id,"BREAD_OF_LIFE",	0X9,	0x3F);
	AddConstEx(id,"POWER_RING",	0XA,	0x3F);
	AddConstEx(id,"SHIELD_RING",	0XB,	0x3F);
	AddConstEx(id,"SPEED_RING",	0XC,	0x3F);
	AddConstEx(id,"MOBILITY_RING",	0XD,	0x3F);
	AddConstEx(id,"WHITE_RING",	0XE,	0x3F);
	AddConstEx(id,"BLACK_RING",	0XF,	0x3F);
	AddConstEx(id,"EVIL_RING",	0X10,	0x3F);
	AddConstEx(id,"SUGOI_MIZUGI",	0X11,	0x3F);
	AddConstEx(id,"ORB_OF_LIGHT",	0X12,	0x3F);
	AddConstEx(id,"MOON_STONE",	0X13,	0x3F);
	AddConstEx(id,"LUNAR_DEW",	0X14,	0x3F);
	AddConstEx(id,"KITUI_HUKU",	0X15,	0x3F);
	AddConstEx(id,"DOMINGO_EGG",	0X16,	0x3F);
	AddConstEx(id,"KENJI",	0X17,	0x3F);
	AddConstEx(id,"TEPPOU",	0X18,	0x3F);
	AddConstEx(id,"KAKU_CHAN",	0X19,	0x3F);
	AddConstEx(id,"YOUJI",	0X1A,	0x3F);
	AddConstEx(id,"GREAT_AXE",	0X1B,	0x3F);
	AddConstEx(id,"KINDAN_NOHAKO",	0X1C,	0x3F);
	AddConstEx(id,"SHORT_SWORD",	0X1D,	0x3F);
	AddConstEx(id,"MIDDLE_SWORD",	0X1E,	0x3F);
	AddConstEx(id,"LONG_SWORD",	0X1F,	0x3F);
	AddConstEx(id,"STEEL_SWORD",	0X20,	0x3F);
	AddConstEx(id,"BROAD_SWORD",	0X21,	0x3F);
	AddConstEx(id,"DOOM_BLADE",	0X22,	0x3F);
	AddConstEx(id,"KATANA",	0X23,	0x3F);
	AddConstEx(id,"ELVEN_ARROW",	0X24,	0x3F);
	AddConstEx(id,"SWORD_OF_DARKNESS",	0X25,	0x3F);
	AddConstEx(id,"SWORD_OF_LIGHT",	0X26,	0x3F);
	AddConstEx(id,"CHAOS_BREAKER",	0X27,	0x3F);
	AddConstEx(id,"BRONZE_LANCE",	0X28,	0x3F);
	AddConstEx(id,"STEEL_LANCE",	0X29,	0x3F);
	AddConstEx(id,"CHROME_LANCE",	0X2A,	0x3F);
	AddConstEx(id,"DEVIL_LANCE",	0X2B,	0x3F);
	AddConstEx(id,"HALBERD",	0X2C,	0x3F);
	AddConstEx(id,"SPEAR",	0X2D,	0x3F);
	AddConstEx(id,"POWER_SPEAR",	0X2E,	0x3F);
	AddConstEx(id,"VALKYRIE",	0X2F,	0x3F);
	AddConstEx(id,"HAND_AXE",	0X30,	0x3F);
	AddConstEx(id,"MIDDLE_AXE",	0X31,	0x3F);
	AddConstEx(id,"BATTLE_AXE",	0X32,	0x3F);
	AddConstEx(id,"HEAT_AXE",	0X33,	0x3F);
	AddConstEx(id,"ATLAS",	0X34,	0x3F);
	AddConstEx(id,"WOODEN_STAFF",	0X35,	0x3F);
	AddConstEx(id,"GUARDIAN_STAFF",	0X36,	0x3F);
	AddConstEx(id,"HOLY_STAFF",	0X37,	0x3F);
	AddConstEx(id,"POWER_STAFF",	0X38,	0x3F);
	AddConstEx(id,"DEMON_ROD",	0X39,	0x3F);
	AddConstEx(id,"YOGURT_RING",	0X3A,	0x3F);
	AddConstEx(id,"WOODEN_ARROW",	0X3B,	0x3F);
	AddConstEx(id,"STEEL_ARROW",	0X3C,	0x3F);
	AddConstEx(id,"ASSAULT_SHELL",	0X3D,	0x3F);
	AddConstEx(id,"BUSTER_SHOT",	0X3E,	0x3F);
	AddConstEx(id,"NOTHING_ITEM",	0X3F,	0x3F);
	SetBmaskName(id,0X3F,"ItemIndexMask");
	AddConstEx(id,"BROKEN",	0X40,	0x40);
	AddConstEx(id,"EQUIPPED",	0X80,	0x80);
	id = AddEnum(-1,"ItemSlots",0x1100000);
	AddConstEx(id,"ITEM_SLOTS_COUNTER",	0X3,	-1);
	AddConstEx(id,"ITEM_SLOTS_NUMBER",	0X4,	-1);
	AddConstEx(id,"EMPTY_ITEM_SLOT",	0XFF,	-1);
	id = AddEnum(-1,"Maps",0x2200000);
	AddConstEx(id,"MAP_GUARDIANA_CASTLE",	0X0,	-1);
	AddConstEx(id,"MAP_WESTERN_GATE_OF_THE_ANCIENTS",	0X1,	-1);
	AddConstEx(id,"MAP_GUARDIANA",	0X2,	-1);
	AddConstEx(id,"MAP_GUARDIANA_RUINED",	0X3,	-1);
	AddConstEx(id,"MAP_ALTERONE",	0X4,	-1);
	AddConstEx(id,"MAP_ALTERONE_CASTLE",	0X5,	-1);
	AddConstEx(id,"MAP_RINDO",	0X6,	-1);
	AddConstEx(id,"MAP_BUSTOKE",	0X7,	-1);
	AddConstEx(id,"MAP_SHADE_ABBEY",	0X8,	-1);
	AddConstEx(id,"MAP_PAO1",	0X9,	-1);
	AddConstEx(id,"MAP_PAO2",	0XA,	-1);
	AddConstEx(id,"MAP_HEADQUARTERS",	0XB,	-1);
	AddConstEx(id,"MAP_CABIN",	0XC,	-1);
	AddConstEx(id,"MAP_MANARINA",	0XD,	-1);
	AddConstEx(id,"MAP_RUNEFAUST",	0XE,	-1);
	AddConstEx(id,"MAP_CIRCUS_TENT",	0XF,	-1);
	AddConstEx(id,"MAP_METAPHA",	0X10,	-1);
	AddConstEx(id,"MAP_EASTERN_GATE_OF_THE_ANCIENTS",	0X11,	-1);
	AddConstEx(id,"MAP_OVERWORLD_CHAPTER1",	0X12,	-1);
	AddConstEx(id,"MAP_OVERWORLD_CHAPTER2",	0X13,	-1);
	AddConstEx(id,"MAP_OVERWORLD_CHAPTER4",	0X14,	-1);
	AddConstEx(id,"MAP_OVERWORLD_CHAPTER3",	0X15,	-1);
	AddConstEx(id,"MAP_OVERWORLD_CHAPTER6",	0X16,	-1);
	AddConstEx(id,"MAP_OVERWORLD_CHAPTER7",	0X17,	-1);
	AddConstEx(id,"MAP_OVERWORLD_CHAPTER8",	0X18,	-1);
	AddConstEx(id,"MAP_OVERWORLD_CHAPTER5",	0X19,	-1);
	AddConstEx(id,"MAP_CAVERN_OF_DARKNESS",	0X1A,	-1);
	AddConstEx(id,"MAP_DEMON_CASTLE",	0X1B,	-1);
	AddConstEx(id,"MAP_QUARRY",	0X1C,	-1);
	AddConstEx(id,"MAP_URANBATOL",	0X1D,	-1);
	AddConstEx(id,"MAP_PROMPT",	0X1E,	-1);
	AddConstEx(id,"MAP_DRAGONIA",	0X1F,	-1);
	AddConstEx(id,"MAP_WARAL",	0X20,	-1);
	AddConstEx(id,"MAP_RUDO",	0X21,	-1);
	AddConstEx(id,"MAP_PROMPT_CASTLE",	0X22,	-1);
	AddConstEx(id,"MAP_PAO_BRIDGE",	0X23,	-1);
	AddConstEx(id,"MAP_TOWER_OF_THE_ANCIENTS",	0X24,	-1);
	AddConstEx(id,"MAP_RUNEFAUST_CASTLE",	0X25,	-1);
	AddConstEx(id,"MAP_SHIP_HEADQUARTERS",	0X26,	-1);
	AddConstEx(id,"MAP_CASTLE_OF_THE_ANCIENTS1",	0X27,	-1);
	AddConstEx(id,"MAP_RINDO_SHIP",	0X28,	-1);
	AddConstEx(id,"MAP_SHIP_DECK",	0X29,	-1);
	AddConstEx(id,"MAP_SHINING_PATH",	0X2A,	-1);
	AddConstEx(id,"MAP_CASTLE_OF_THE_ANCIENTS2",	0X2B,	-1);
	id = AddEnum(-1,"MapSpriteProperties",0x2200000);
	AddConstEx(id,"PROMOTED_MAPSPRITES_START",	0X1E,	-1);
	id = AddEnum(-1,"MapSprites",0x2200000);
	AddConstEx(id,"MAPSPRITE_MAX_SDMN",	0X0,	-1);
	AddConstEx(id,"MAPSPRITE_MAE_KNT",	0X1,	-1);
	AddConstEx(id,"MAPSPRITE_PELLE_KNT",	0X2,	-1);
	AddConstEx(id,"MAPSPRITE_KEN_KNT",	0X3,	-1);
	AddConstEx(id,"MAPSPRITE_VANKAR_KNT",	0X4,	-1);
	AddConstEx(id,"MAPSPRITE_EARNEST_KNT",	0X5,	-1);
	AddConstEx(id,"MAPSPRITE_ARTHUR_KNT",	0X6,	-1);
	AddConstEx(id,"MAPSPRITE_GORT_WARR",	0X7,	-1);
	AddConstEx(id,"MAPSPRITE_LUKE_WARR",	0X8,	-1);
	AddConstEx(id,"MAPSPRITE_GUNTZ_SKNT",	0X9,	-1);
	AddConstEx(id,"MAPSPRITE_ANRI_MAGE",	0XA,	-1);
	AddConstEx(id,"MAPSPRITE_ALEF_MAGE",	0XB,	-1);
	AddConstEx(id,"MAPSPRITE_TAO_MAGE",	0XC,	-1);
	AddConstEx(id,"MAPSPRITE_DOMINGO",	0XD,	-1);
	AddConstEx(id,"MAPSPRITE_LOWE_HEAL",	0XE,	-1);
	AddConstEx(id,"MAPSPRITE_KHRIS_HEAL",	0XF,	-1);
	AddConstEx(id,"MAPSPRITE_TORASU_HEAL",	0X10,	-1);
	AddConstEx(id,"MAPSPRITE_GONG_MONK",	0X11,	-1);
	AddConstEx(id,"MAPSPRITE_DIANE_ACHR",	0X12,	-1);
	AddConstEx(id,"MAPSPRITE_HANS_ACHR",	0X13,	-1);
	AddConstEx(id,"MAPSPRITE_LYLE_ASKT",	0X14,	-1);
	AddConstEx(id,"MAPSPRITE_AMON_BDMN",	0X15,	-1);
	AddConstEx(id,"MAPSPRITE_BALBAROY_BDMN",	0X16,	-1);
	AddConstEx(id,"MAPSPRITE_KOKICHI_WKNT",	0X17,	-1);
	AddConstEx(id,"MAPSPRITE_BLEU_DRGN",	0X18,	-1);
	AddConstEx(id,"MAPSPRITE_ADAM_RBT",	0X19,	-1);
	AddConstEx(id,"MAPSPRITE_ZYLO_WRWF",	0X1A,	-1);
	AddConstEx(id,"MAPSPRITE_MUSASHI",	0X1B,	-1);
	AddConstEx(id,"MAPSPRITE_HANZOU",	0X1C,	-1);
	AddConstEx(id,"MAPSPRITE_JOGURT_1",	0X1D,	-1);
	AddConstEx(id,"MAPSPRITE_MAX_HERO",	0X1E,	-1);
	AddConstEx(id,"MAPSPRITE_MAE_PLDN",	0X1F,	-1);
	AddConstEx(id,"MAPSPRITE_PELLE_PLDN",	0X20,	-1);
	AddConstEx(id,"MAPSPRITE_KEN_PLDN",	0X21,	-1);
	AddConstEx(id,"MAPSPRITE_VANKAR_PLDN",	0X22,	-1);
	AddConstEx(id,"MAPSPRITE_EARNEST_PLDN",	0X23,	-1);
	AddConstEx(id,"MAPSPRITE_ARTHUR_PLDN",	0X24,	-1);
	AddConstEx(id,"MAPSPRITE_GORT_GLDR",	0X25,	-1);
	AddConstEx(id,"MAPSPRITE_LUKE_GLDR",	0X26,	-1);
	AddConstEx(id,"MAPSPRITE_GUNTZ_SBRN",	0X27,	-1);
	AddConstEx(id,"MAPSPRITE_ANRI_WIZD",	0X28,	-1);
	AddConstEx(id,"MAPSPRITE_ALEF_WIZD",	0X29,	-1);
	AddConstEx(id,"MAPSPRITE_TAO_WIZD",	0X2A,	-1);
	AddConstEx(id,"MAPSPRITE_BLUE_FLAME",	0X2B,	-1);
	AddConstEx(id,"MAPSPRITE_LOWE_VICR",	0X2C,	-1);
	AddConstEx(id,"MAPSPRITE_KHRIS_VICR",	0X2D,	-1);
	AddConstEx(id,"MAPSPRITE_TORASU_VICR",	0X2E,	-1);
	AddConstEx(id,"MAPSPRITE_GONG_MSMK",	0X2F,	-1);
	AddConstEx(id,"MAPSPRITE_DIANE_BWMS",	0X30,	-1);
	AddConstEx(id,"MAPSPRITE_HANS_BWMS",	0X31,	-1);
	AddConstEx(id,"MAPSPRITE_LYLE_SKNT",	0X32,	-1);
	AddConstEx(id,"MAPSPRITE_AMON_SKYW",	0X33,	-1);
	AddConstEx(id,"MAPSPRITE_BALBAROY_SKYW",	0X34,	-1);
	AddConstEx(id,"MAPSPRITE_KOKICHI_SKYL",	0X35,	-1);
	AddConstEx(id,"MAPSPRITE_BLEU_GRDR",	0X36,	-1);
	AddConstEx(id,"MAPSPRITE_ADAM_CYBG",	0X37,	-1);
	AddConstEx(id,"MAPSPRITE_ZYLO_WFBN",	0X38,	-1);
	AddConstEx(id,"MAPSPRITE_NOVA",	0X39,	-1);
	AddConstEx(id,"MAPSPRITE_ANRI_OUTFIT",	0X3A,	-1);
	AddConstEx(id,"MAPSPRITE_TAO_OUTFIT",	0X3B,	-1);
	AddConstEx(id,"MAPSPRITE_GOBLIN",	0X3C,	-1);
	AddConstEx(id,"MAPSPRITE_BOWRIDER",	0X3D,	-1);
	AddConstEx(id,"MAPSPRITE_RUNE_KNIGHT",	0X3E,	-1);
	AddConstEx(id,"MAPSPRITE_SILVER_KNIGHT",	0X3F,	-1);
	AddConstEx(id,"MAPSPRITE_DURAHAN",	0X40,	-1);
	AddConstEx(id,"MAPSPRITE_DARK_DWARF",	0X41,	-1);
	AddConstEx(id,"MAPSPRITE_HORSEMAN",	0X42,	-1);
	AddConstEx(id,"MAPSPRITE_SNIPER",	0X43,	-1);
	AddConstEx(id,"MAPSPRITE_DARK_ELF",	0X44,	-1);
	AddConstEx(id,"MAPSPRITE_LIZARDMAN",	0X45,	-1);
	AddConstEx(id,"MAPSPRITE_ROCK",	0X46,	-1);
	AddConstEx(id,"MAPSPRITE_DARK_PRIEST",	0X47,	-1);
	AddConstEx(id,"MAPSPRITE_HIGH_PRIEST",	0X48,	-1);
	AddConstEx(id,"MAPSPRITE_CERBERUS",	0X49,	-1);
	AddConstEx(id,"MAPSPRITE_HELLHOUND",	0X4A,	-1);
	AddConstEx(id,"MAPSPRITE_GARGOYLE",	0X4B,	-1);
	AddConstEx(id,"MAPSPRITE_BELIAL",	0X4C,	-1);
	AddConstEx(id,"MAPSPRITE_GOLEM",	0X4D,	-1);
	AddConstEx(id,"MAPSPRITE_WEED",	0X4E,	-1);
	AddConstEx(id,"MAPSPRITE_GHOUL",	0X4F,	-1);
	AddConstEx(id,"MAPSPRITE_ZOMBIE",	0X50,	-1);
	AddConstEx(id,"MAPSPRITE_DARK_MAGE",	0X51,	-1);
	AddConstEx(id,"MAPSPRITE_MASTER_MAGE",	0X52,	-1);
	AddConstEx(id,"MAPSPRITE_DEMON_MASTER",	0X53,	-1);
	AddConstEx(id,"MAPSPRITE_GIANT_BAT",	0X54,	-1);
	AddConstEx(id,"MAPSPRITE_SEABAT",	0X55,	-1);
	AddConstEx(id,"MAPSPRITE_WORM",	0X56,	-1);
	AddConstEx(id,"MAPSPRITE_ICE_WORM",	0X57,	-1);
	AddConstEx(id,"MAPSPRITE_MINOTAUR",	0X58,	-1);
	AddConstEx(id,"MAPSPRITE_SPIRIT_OF_THE_POOL",	0X59,	-1);
	AddConstEx(id,"MAPSPRITE_MANNEQUIN",	0X5A,	-1);
	AddConstEx(id,"MAPSPRITE_EVIL_PUPPET",	0X5B,	-1);
	AddConstEx(id,"MAPSPRITE_DIRE_CLOWN",	0X5C,	-1);
	AddConstEx(id,"MAPSPRITE_CART",	0X5D,	-1);
	AddConstEx(id,"MAPSPRITE_SKELETON",	0X5E,	-1);
	AddConstEx(id,"MAPSPRITE_JOGURT_2",	0X5F,	-1);
	AddConstEx(id,"MAPSPRITE_MARIONETTE",	0X60,	-1);
	AddConstEx(id,"MAPSPRITE_JOGURT_3",	0X61,	-1);
	AddConstEx(id,"MAPSPRITE_ARMED_SKELETON",	0X62,	-1);
	AddConstEx(id,"MAPSPRITE_PEGASUS_KNIGHT",	0X63,	-1);
	AddConstEx(id,"MAPSPRITE_SWORD_OF_DARKNESS",	0X64,	-1);
	AddConstEx(id,"MAPSPRITE_CHIMAERA",	0X65,	-1);
	AddConstEx(id,"MAPSPRITE_WYVERN",	0X66,	-1);
	AddConstEx(id,"MAPSPRITE_BLUE_DRAGON",	0X67,	-1);
	AddConstEx(id,"MAPSPRITE_CONCH",	0X68,	-1);
	AddConstEx(id,"MAPSPRITE_SHELLFISH",	0X69,	-1);
	AddConstEx(id,"MAPSPRITE_ARTILLERY",	0X6A,	-1);
	AddConstEx(id,"MAPSPRITE_STEEL_CLAW",	0X6B,	-1);
	AddConstEx(id,"MAPSPRITE_TORCH_EYE",	0X6C,	-1);
	AddConstEx(id,"MAPSPRITE_JET",	0X6D,	-1);
	AddConstEx(id,"MAPSPRITE_DARKSOL",	0X6E,	-1);
	AddConstEx(id,"MAPSPRITE_LASER_EYE",	0X6F,	-1);
	AddConstEx(id,"MAPSPRITE_ELLIOTT",	0X70,	-1);
	AddConstEx(id,"MAPSPRITE_BALABAZAK",	0X71,	-1);
	AddConstEx(id,"MAPSPRITE_MISHAELA",	0X72,	-1);
	AddConstEx(id,"MAPSPRITE_CHAOS",	0X73,	-1);
	AddConstEx(id,"MAPSPRITE_RAMLADU",	0X74,	-1);
	AddConstEx(id,"MAPSPRITE_KANE",	0X75,	-1);
	AddConstEx(id,"MAPSPRITE_COLOSSUS",	0X76,	-1);
	AddConstEx(id,"MAPSPRITE_DARK_DRAGON",	0X77,	-1);
	AddConstEx(id,"MAPSPRITE_JOGURT_4",	0X78,	-1);
	AddConstEx(id,"MAPSPRITE_VARIOS",	0X79,	-1);
	AddConstEx(id,"MAPSPRITE_WOUNDED_SOLDIER",	0X7A,	-1);
	AddConstEx(id,"MAPSPRITE_SHEEP",	0X7B,	-1);
	AddConstEx(id,"MAPSPRITE_MERMAID",	0X7C,	-1);
	AddConstEx(id,"MAPSPRITE_WITCH",	0X7D,	-1);
	AddConstEx(id,"MAPSPRITE_OTRANT",	0X7E,	-1);
	AddConstEx(id,"MAPSPRITE_BOKEN",	0X7F,	-1);
	AddConstEx(id,"MAPSPRITE_OLD_MAN",	0X80,	-1);
	AddConstEx(id,"MAPSPRITE_OLD_WOMAN",	0X81,	-1);
	AddConstEx(id,"MAPSPRITE_MIDDLE_AGED_MAN",	0X82,	-1);
	AddConstEx(id,"MAPSPRITE_MIDDLE_AGED_WOMAN",	0X83,	-1);
	AddConstEx(id,"MAPSPRITE_YOUNG_MAN",	0X84,	-1);
	AddConstEx(id,"MAPSPRITE_YOUNG_WOMAN",	0X85,	-1);
	AddConstEx(id,"MAPSPRITE_BOY",	0X86,	-1);
	AddConstEx(id,"MAPSPRITE_GIRL",	0X87,	-1);
	AddConstEx(id,"MAPSPRITE_DOG",	0X88,	-1);
	AddConstEx(id,"MAPSPRITE_CAT",	0X89,	-1);
	AddConstEx(id,"MAPSPRITE_CHICKEN",	0X8A,	-1);
	AddConstEx(id,"MAPSPRITE_MERCHANT",	0X8B,	-1);
	AddConstEx(id,"MAPSPRITE_FAT_MAN",	0X8C,	-1);
	AddConstEx(id,"MAPSPRITE_FRIAR",	0X8D,	-1);
	AddConstEx(id,"MAPSPRITE_KING",	0X8E,	-1);
	AddConstEx(id,"MAPSPRITE_MINISTER",	0X8F,	-1);
	AddConstEx(id,"MAPSPRITE_QUEEN_KORON",	0X90,	-1);
	AddConstEx(id,"MAPSPRITE_PRINCESS",	0X91,	-1);
	AddConstEx(id,"MAPSPRITE_SOLDIER",	0X92,	-1);
	AddConstEx(id,"MAPSPRITE_MAID",	0X93,	-1);
	AddConstEx(id,"MAPSPRITE_HERMIT",	0X94,	-1);
	AddConstEx(id,"MAPSPRITE_MAX_STABBING_DARK_DRAGON",	0X95,	-1);
	AddConstEx(id,"MAPSPRITE_GUARD",	0X96,	-1);
	SetConstCmt(GetConstEx(id,0X96,0,-1),"unused",1);
	AddConstEx(id,"MAPSPRITE_MAGE",	0X97,	-1);
	AddConstEx(id,"MAPSPRITE_BOAT",	0X98,	-1);
	AddConstEx(id,"MAPSPRITE_SHIP",	0X99,	-1);
	AddConstEx(id,"MAPSPRITE_CARRIAGE",	0X9A,	-1);
	AddConstEx(id,"MAPSPRITE_MAYOR",	0X9B,	-1);
	AddConstEx(id,"MAPSPRITE_WATER_SPLASH",	0X9C,	-1);
	AddConstEx(id,"MAPSPRITE_MAX_DROWNING",	0X9D,	-1);
	AddConstEx(id,"MAPSPRITE_NUN",	0X9E,	-1);
	AddConstEx(id,"MAPSPRITE_JOGURT_5",	0X9F,	-1);
	id = AddEnum(-1,"MenuActions",0x2200000);
	AddConstEx(id,"CHURCH_CURE_POISON_COST",	0XA,	-1);
	AddConstEx(id,"CHURCH_RAISE_COST_PER_LEVEL",	0XA,	-1);
	AddConstEx(id,"CHURCH_BASE_PROMOTION_LEVEL",	0XA,	-1);
	AddConstEx(id,"CHURCH_CURE_CURSE_COST",	0X14,	-1);
	id = AddEnum(-1,"Menus",0x1100000);
	AddConstEx(id,"MAIN_MENU",	0X1,	-1);
	AddConstEx(id,"MAGIC_MENU",	0X2,	-1);
	AddConstEx(id,"ITEM_MENU",	0X4,	-1);
	AddConstEx(id,"SHOP_MENU",	0X5,	-1);
	AddConstEx(id,"HEADQUARTERS_MENU",	0X8,	-1);
	AddConstEx(id,"CHURCH_MENU",	0X9,	-1);
	id = AddEnum(-1,"Messages",0x2200000);
	AddConstEx(id,"MESSAGE_ADVICES_START",	0X2EE,	-1);
	id = AddEnum(-1,"Portraits",0x2200000);
	AddConstEx(id,"PORTRAIT_MAX_SDMN",	0X0,	-1);
	AddConstEx(id,"PORTRAIT_MAE",	0X1,	-1);
	AddConstEx(id,"PORTRAIT_PELLE",	0X2,	-1);
	AddConstEx(id,"PORTRAIT_KEN",	0X3,	-1);
	AddConstEx(id,"PORTRAIT_VANKAR",	0X4,	-1);
	AddConstEx(id,"PORTRAIT_EARNEST",	0X5,	-1);
	AddConstEx(id,"PORTRAIT_ARTHUR",	0X6,	-1);
	AddConstEx(id,"PORTRAIT_GORT",	0X7,	-1);
	AddConstEx(id,"PORTRAIT_LUKE",	0X8,	-1);
	AddConstEx(id,"PORTRAIT_GUNTZ",	0X9,	-1);
	AddConstEx(id,"PORTRAIT_ANRI",	0XA,	-1);
	AddConstEx(id,"PORTRAIT_ALEF",	0XB,	-1);
	AddConstEx(id,"PORTRAIT_TAO",	0XC,	-1);
	AddConstEx(id,"PORTRAIT_DOMINGO",	0XD,	-1);
	AddConstEx(id,"PORTRAIT_LOWE",	0XE,	-1);
	AddConstEx(id,"PORTRAIT_KHRIS",	0XF,	-1);
	AddConstEx(id,"PORTRAIT_TORASU",	0X10,	-1);
	AddConstEx(id,"PORTRAIT_GONG",	0X11,	-1);
	AddConstEx(id,"PORTRAIT_DIANE",	0X12,	-1);
	AddConstEx(id,"PORTRAIT_HANS",	0X13,	-1);
	AddConstEx(id,"PORTRAIT_LYLE",	0X14,	-1);
	AddConstEx(id,"PORTRAIT_AMON",	0X15,	-1);
	AddConstEx(id,"PORTRAIT_BALBAROY",	0X16,	-1);
	AddConstEx(id,"PORTRAIT_KOKICHI",	0X17,	-1);
	AddConstEx(id,"PORTRAIT_BLEU_DRGN",	0X18,	-1);
	AddConstEx(id,"PORTRAIT_ADAM_RBT",	0X19,	-1);
	AddConstEx(id,"PORTRAIT_ZYLO",	0X1A,	-1);
	AddConstEx(id,"PORTRAIT_MUSASHI",	0X1B,	-1);
	AddConstEx(id,"PORTRAIT_HANZOU",	0X1C,	-1);
	AddConstEx(id,"PORTRAIT_JOGURT",	0X1D,	-1);
	AddConstEx(id,"PORTRAIT_VARIOS",	0X1E,	-1);
	AddConstEx(id,"PORTRAIT_ELLIOTT",	0X1F,	-1);
	AddConstEx(id,"PORTRAIT_BALBAZAK",	0X20,	-1);
	AddConstEx(id,"PORTRAIT_MISHAELA",	0X21,	-1);
	AddConstEx(id,"PORTRAIT_CHAOS",	0X22,	-1);
	AddConstEx(id,"PORTRAIT_RAMLADU",	0X23,	-1);
	AddConstEx(id,"PORTRAIT_KANE_MASKED",	0X24,	-1);
	AddConstEx(id,"PORTRAIT_KANE_UNMASKED",	0X25,	-1);
	AddConstEx(id,"PORTRAIT_COLOSSUS",	0X26,	-1);
	AddConstEx(id,"PORTRAIT_DARK_DRAGON",	0X27,	-1);
	AddConstEx(id,"PORTRAIT_DARKSOL",	0X28,	-1);
	AddConstEx(id,"PORTRAIT_NOVA",	0X29,	-1);
	AddConstEx(id,"PORTRAIT_SHELL",	0X2A,	-1);
	AddConstEx(id,"PORTRAIT_MAX_HERO",	0X2B,	-1);
	AddConstEx(id,"PORTRAIT_BLEU_GRDR",	0X2C,	-1);
	AddConstEx(id,"PORTRAIT_ADAM_CYBG",	0X2D,	-1);
	AddConstEx(id,"PORTRAIT_KING",	0X2E,	-1);
	AddConstEx(id,"PORTRAIT_FRIAR",	0X2F,	-1);
	AddConstEx(id,"PORTRAIT_OTRANT",	0X30,	-1);
	AddConstEx(id,"PORTRAIT_GUARDIANA_KING_1",	0X31,	-1);
	AddConstEx(id,"PORTRAIT_GUARDIANA_KING_2",	0X32,	-1);
	AddConstEx(id,"PORTRAIT_GUARDIANA_KING_3",	0X33,	-1);
	AddConstEx(id,"PORTRAIT_NONE",	0XFF,	-1);
	id = AddEnum(-1,"RangeEntry_Offsets",0x1100000);
	AddConstEx(id,"RANGE_OFFSET_MAX_DISTANCE",	0X0,	-1);
	AddConstEx(id,"RANGE_OFFSET_MIN_DISTANCE",	0X1,	-1);
	AddConstEx(id,"RANGE_OFFSET_AREA",	0X2,	-1);
	AddConstEx(id,"RANGE_OFFSET_GROUP",	0X3,	-1);
	AddConstEx(id,"RANGE_OFFSET_ROUTINE",	0X4,	-1);
	id = AddEnum(-1,"RangeEntry_SpecialRanges",0x2200000);
	AddConstEx(id,"SPECIAL_RANGE_LASER_EYE",	0X80,	-1);
	AddConstEx(id,"SPECIAL_RANGE_TORCH_EYE",	0X81,	-1);
	AddConstEx(id,"SPECIAL_RANGE_UNUSED",	0X82,	-1);
	id = AddEnum(-1,"RangeEntry_GroupFlags",0x1100000);
	AddConstEx(id,"RANGE_GROUP_FLAG_FRIENDS",	0X0,	-1);
	AddConstEx(id,"RANGE_GROUP_FLAG_FOES",	0X1,	-1);
	AddConstEx(id,"RANGE_GROUP_FLAG_ALL",	0X2,	-1);
	AddConstEx(id,"RANGE_GROUP_MASK_TARGETS",	0X3,	-1);
	AddConstEx(id,"RANGE_GROUP_MASK_ALL",	0XFC,	-1);
	id = AddEnum(-1,"RangeEntry_Targets",0x1100000);
	AddConstEx(id,"RANGE_TARGETS_NONE",	0X0,	-1);
	AddConstEx(id,"RANGE_TARGETS_FRIENDS",	0X1,	-1);
	AddConstEx(id,"RANGE_TARGETS_FOES",	0X2,	-1);
	AddConstEx(id,"RANGE_TARGETS_FRIENDS_AND_FOES",	0X3,	-1);
	id = AddEnum(-1,"Ranges",0x2200000);
	AddConstEx(id,"RANGE_0",	0X0,	-1);
	AddConstEx(id,"RANGE_1",	0X1,	-1);
	AddConstEx(id,"RANGE_2",	0X2,	-1);
	AddConstEx(id,"RANGE_3",	0X3,	-1);
	AddConstEx(id,"RANGE_4",	0X4,	-1);
	AddConstEx(id,"RANGE_5",	0X5,	-1);
	AddConstEx(id,"RANGE_6",	0X6,	-1);
	AddConstEx(id,"RANGE_7",	0X7,	-1);
	AddConstEx(id,"RANGE_8",	0X8,	-1);
	AddConstEx(id,"RANGE_9",	0X9,	-1);
	AddConstEx(id,"RANGE_A",	0XA,	-1);
	AddConstEx(id,"RANGE_B",	0XB,	-1);
	AddConstEx(id,"RANGE_C",	0XC,	-1);
	AddConstEx(id,"RANGE_D",	0XD,	-1);
	AddConstEx(id,"RANGE_E",	0XE,	-1);
	AddConstEx(id,"RANGE_F",	0XF,	-1);
	AddConstEx(id,"RANGE_MELEE",	0X10,	-1);
	AddConstEx(id,"RANGE_ARROW_LONG",	0X11,	-1);
	SetConstCmt(GetConstEx(id,0X11,0,-1),"arrows (long)",1);
	AddConstEx(id,"RANGE_ARROW_SHORT",	0X12,	-1);
	SetConstCmt(GetConstEx(id,0X12,0,-1),"arrows (short)",1);
	AddConstEx(id,"RANGE_SPEAR_AND_LASER",	0X13,	-1);
	SetConstCmt(GetConstEx(id,0X13,0,-1),"spears, laser",1);
	AddConstEx(id,"RANGE_HEAL_1",	0X14,	-1);
	AddConstEx(id,"RANGE_HEAL_2",	0X15,	-1);
	AddConstEx(id,"RANGE_HEAL_3",	0X16,	-1);
	AddConstEx(id,"RANGE_HEAL_4",	0X17,	-1);
	AddConstEx(id,"RANGE_AURA_1",	0X18,	-1);
	AddConstEx(id,"RANGE_AURA_2",	0X19,	-1);
	AddConstEx(id,"RANGE_AURA_3",	0X1A,	-1);
	AddConstEx(id,"RANGE_AURA_4",	0X1B,	-1);
	AddConstEx(id,"RANGE_DETOX_1",	0X1C,	-1);
	AddConstEx(id,"RANGE_DETOX_2",	0X1D,	-1);
	AddConstEx(id,"RANGE_QUICK_1",	0X1E,	-1);
	AddConstEx(id,"RANGE_SLOW_1",	0X1F,	-1);
	AddConstEx(id,"RANGE_BOOST",	0X20,	-1);
	AddConstEx(id,"RANGE_DISPEL",	0X21,	-1);
	AddConstEx(id,"RANGE_SHIELD",	0X22,	-1);
	AddConstEx(id,"RANGE_MUDDLE",	0X23,	-1);
	AddConstEx(id,"RANGE_BLAZE_1",	0X24,	-1);
	AddConstEx(id,"RANGE_BLAZE_2",	0X25,	-1);
	AddConstEx(id,"RANGE_BLAZE_3",	0X26,	-1);
	AddConstEx(id,"RANGE_BLAZE_4",	0X27,	-1);
	AddConstEx(id,"RANGE_FREEZE_1",	0X28,	-1);
	AddConstEx(id,"RANGE_FREEZE_2",	0X29,	-1);
	AddConstEx(id,"RANGE_FREEZE_3",	0X2A,	-1);
	AddConstEx(id,"RANGE_FREEZE_4",	0X2B,	-1);
	AddConstEx(id,"RANGE_BOLT_1",	0X2C,	-1);
	AddConstEx(id,"RANGE_BOLT_2",	0X2D,	-1);
	AddConstEx(id,"RANGE_BOLT_3",	0X2E,	-1);
	AddConstEx(id,"RANGE_BOLT_4",	0X2F,	-1);
	AddConstEx(id,"RANGE_DESOUL_1",	0X30,	-1);
	AddConstEx(id,"RANGE_DESOUL_2",	0X31,	-1);
	AddConstEx(id,"RANGE_EGRESS",	0X32,	-1);
	AddConstEx(id,"RANGE_33",	0X33,	-1);
	SetConstCmt(GetConstEx(id,0X33,0,-1),"unused",1);
	AddConstEx(id,"RANGE_SLEEP",	0X34,	-1);
	AddConstEx(id,"RANGE_BREATH",	0X35,	-1);
	AddConstEx(id,"RANGE_LASER_EYE",	0X36,	-1);
	AddConstEx(id,"RANGE_MACHINE_GUN",	0X37,	-1);
	AddConstEx(id,"RANGE_DEMON_BLAZE_1",	0X38,	-1);
	AddConstEx(id,"RANGE_DEMON_BLAZE_2",	0X39,	-1);
	AddConstEx(id,"RANGE_TORCH_EYE",	0X3A,	-1);
	AddConstEx(id,"RANGE_DEMON_ROD",	0X3B,	-1);
	AddConstEx(id,"RANGE_ITEM",	0X3C,	-1);
	AddConstEx(id,"RANGE_KINDAN_NOHAKO",	0X3D,	-1);
	AddConstEx(id,"RANGE_QUICK_2",	0X3E,	-1);
	AddConstEx(id,"RANGE_SLOW_2",	0X3F,	-1);
	id = AddEnum(-1,"ShopTypes",0x2200000);
	AddConstEx(id,"SHOPTYPE_WEAPONS",	0X0,	-1);
	AddConstEx(id,"SHOPTYPE_ITEMS",	0X1,	-1);
	id = AddEnum(-1,"SoundCommands",0x1100000);
	AddConstEx(id,"SOUND_COMMAND_INIT_DRIVER",	0X20,	-1);
	AddConstEx(id,"SOUND_COMMAND_WAIT_MUSIC_END",	0XF0,	-1);
	AddConstEx(id,"SOUND_COMMAND_PLAY_PREVIOUS_MUSIC",	0XFB,	-1);
	AddConstEx(id,"SOUND_COMMAND_FADE_OUT",	0XFD,	-1);
	AddConstEx(id,"SOUND_COMMAND_254",	0XFE,	-1);
	AddConstEx(id,"SOUND_COMMAND_18564",	0X4884,	-1);
	AddConstEx(id,"SOUND_COMMAND_GET_D0_PARAMETER",	0XFFFF,	-1);
	id = AddEnum(-1,"Music",0x2200000);
	AddConstEx(id,"MUSIC_NOTHING",	0X0,	-1);
	AddConstEx(id,"MUSIC_JOIN",	0X1,	-1);
	AddConstEx(id,"MUSIC_CURSED_ITEM",	0X2,	-1);
	AddConstEx(id,"MUSIC_TOWN",	0X3,	-1);
	AddConstEx(id,"MUSIC_SUSPEND",	0X4,	-1);
	AddConstEx(id,"MUSIC_SIMONE",	0X5,	-1);
	AddConstEx(id,"MUSIC_ATTACK",	0X6,	-1);
	AddConstEx(id,"MUSIC_INTRO",	0X7,	-1);
	AddConstEx(id,"MUSIC_MAIN_THEME",	0X8,	-1);
	AddConstEx(id,"MUSIC_BATTLE_1",	0X9,	-1);
	AddConstEx(id,"MUSIC_BATTLE_2",	0XA,	-1);
	AddConstEx(id,"MUSIC_SAD_THEME",	0XB,	-1);
	AddConstEx(id,"MUSIC_PROMOTION",	0XC,	-1);
	AddConstEx(id,"MUSIC_ITEM",	0XD,	-1);
	AddConstEx(id,"MUSIC_SAVE",	0XE,	-1);
	AddConstEx(id,"MUSIC_MAX_DIED",	0XF,	-1);
	AddConstEx(id,"MUSIC_BATTLE_3",	0X10,	-1);
	AddConstEx(id,"MUSIC_NOTHING_0",	0X11,	-1);
	AddConstEx(id,"MUSIC_HQ",	0X12,	-1);
	AddConstEx(id,"MUSIC_SHIP",	0X13,	-1);
	AddConstEx(id,"MUSIC_CHAPTER_END",	0X14,	-1);
	AddConstEx(id,"MUSIC_REVIVE",	0X15,	-1);
	AddConstEx(id,"MUSIC_SAD_JOIN",	0X16,	-1);
	AddConstEx(id,"MUSIC_DARKSOL_BATTLE",	0X17,	-1);
	AddConstEx(id,"MUSIC_SAD_TOWN",	0X18,	-1);
	AddConstEx(id,"MUSIC_NOTHING_1",	0X19,	-1);
	AddConstEx(id,"MUSIC_NOTHING_2",	0X1A,	-1);
	AddConstEx(id,"MUSIC_NOTHING_3",	0X1B,	-1);
	AddConstEx(id,"MUSIC_NOTHING_4",	0X1C,	-1);
	AddConstEx(id,"MUSIC_NOTHING_5",	0X1D,	-1);
	AddConstEx(id,"MUSIC_NOTHING_6",	0X1E,	-1);
	AddConstEx(id,"MUSIC_EARTHQUAKE",	0X1F,	-1);
	AddConstEx(id,"MUSIC_STOP",	0X20,	-1);
	AddConstEx(id,"MUSIC_BATTLE_4",	0X21,	-1);
	AddConstEx(id,"MUSIC_CASTLE",	0X22,	-1);
	AddConstEx(id,"MUSIC_TITLE",	0X23,	-1);
	AddConstEx(id,"MUSIC_FINAL_BATTLE",	0X24,	-1);
	AddConstEx(id,"MUSIC_RISE_OF_THE_CASTLE",	0X25,	-1);
	AddConstEx(id,"MUSIC_CREDITS",	0X26,	-1);
	AddConstEx(id,"MUSIC_ENDING",	0X27,	-1);
	id = AddEnum(-1,"Sfx",0x2200000);
	AddConstEx(id,"SFX_MENU_SWITCH",	0X41,	-1);
	AddConstEx(id,"SFX_MENU_SELECTION",	0X42,	-1);
	AddConstEx(id,"SFX_VALIDATION",	0X43,	-1);
	AddConstEx(id,"SFX_REFUSAL",	0X44,	-1);
	AddConstEx(id,"SFX_DIALOG_BLEEP_1",	0X45,	-1);
	AddConstEx(id,"SFX_DIALOG_BLEEP_2",	0X46,	-1);
	AddConstEx(id,"SFX_DIALOG_BLEEP_3",	0X47,	-1);
	AddConstEx(id,"SFX_DIALOG_BLEEP_4",	0X48,	-1);
	AddConstEx(id,"SFX_DIALOG_BLEEP_5",	0X49,	-1);
	AddConstEx(id,"SFX_DIALOG_BLEEP_6",	0X4A,	-1);
	AddConstEx(id,"SFX_DIALOG_BLEEP_7",	0X4B,	-1);
	AddConstEx(id,"SFX_DIALOG_BLEEP_8",	0X4C,	-1);
	AddConstEx(id,"SFX_SPELL_CAST",	0X4D,	-1);
	AddConstEx(id,"SFX_HIT",	0X4E,	-1);
	AddConstEx(id,"SFX_NOTHING_1",	0X4F,	-1);
	AddConstEx(id,"SFX_NOTHING_2",	0X50,	-1);
	AddConstEx(id,"SFX_TINKLING",	0X51,	-1);
	AddConstEx(id,"SFX_MONSTER_1",	0X52,	-1);
	AddConstEx(id,"SFX_MONSTER_2",	0X53,	-1);
	AddConstEx(id,"SFX_MONSTER_3",	0X54,	-1);
	AddConstEx(id,"SFX_WARP",	0X55,	-1);
	AddConstEx(id,"SFX_DOOR_OPEN_HIGH_PITCH",	0X56,	-1);
	AddConstEx(id,"SFX_BOLT_SPELL",	0X57,	-1);
	AddConstEx(id,"SFX_DOOR_OPEN",	0X58,	-1);
	AddConstEx(id,"SFX_DEMON_SMILE",	0X59,	-1);
	AddConstEx(id,"SFX_CRITICAL_HIT",	0X5A,	-1);
	AddConstEx(id,"SFX_JOGURT",	0X5B,	-1);
	AddConstEx(id,"SFX_TRAIN_WHISTLE",	0X5C,	-1);
	AddConstEx(id,"SFX_LASER",	0X5D,	-1);
	AddConstEx(id,"SFX_SWORDS_HIT",	0X5E,	-1);
	AddConstEx(id,"SFX_FIRE_BREATH",	0X5F,	-1);
	AddConstEx(id,"SFX_MACHINE_GUN",	0X60,	-1);
	AddConstEx(id,"SFX_TREASURE_CHEST",	0X61,	-1);
	AddConstEx(id,"SFX_WALKING",	0X62,	-1);
	AddConstEx(id,"SFX_FALLING",	0X63,	-1);
	AddConstEx(id,"SFX_BOW_MASTER",	0X64,	-1);
	AddConstEx(id,"SFX_HEALING",	0X65,	-1);
	AddConstEx(id,"SFX_DESOUL_HOVERING",	0X66,	-1);
	AddConstEx(id,"SFX_LIGHTNING_BREATH",	0X67,	-1);
	AddConstEx(id,"SFX_METALLIC",	0X68,	-1);
	AddConstEx(id,"SFX_SWORD_BEAM",	0X69,	-1);
	id = AddEnum(-1,"SpellAnimationEngine_Types",0x1100000);
	AddConstEx(id,"SPELLANIM_TYPE_BLAZE",	0X0,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_FREEZE",	0X1,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_ICE_BREATH",	0X2,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_FLYING_DRAGONS",	0X3,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_ASSAULT_SHELL",	0X4,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_DESOUL",	0X5,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_DEBUFF",	0X6,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_BOLT",	0X7,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_HEALING",	0X8,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_HEALING_0",	0X9,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_FIRE_BREATH",	0XA,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_DEMON_BLAZE",	0XB,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_NOTHING",	0XC,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_NOTHING_0",	0XD,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_NOTHING_1",	0XE,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_MACHINE_GUN",	0XF,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_CROSSBOW",	0X10,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_LIGHTNING_BREATH",	0X11,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_LASER",	0X12,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_BUSTER_SHOT",	0X13,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_ENERGY_WAVE",	0X14,	-1);
	AddConstEx(id,"SPELLANIM_TYPE_ENERGY_BLAST",	0X15,	-1);
	id = AddEnum(-1,"SpellEntity_Offset",0x1100000);
	AddConstEx(id,"SPELLENTITY_OFFSET_X",	0X0,	-1);
	AddConstEx(id,"SPELLENTITY_OFFSET_Y",	0X2,	-1);
	AddConstEx(id,"SPELLENTITY_OFFSET_EXISTS",	0X4,	-1);
	AddConstEx(id,"SPELLENTITY_OFFSET_FRAME",	0X6,	-1);
	id = AddEnum(-1,"SpellCastColors",0x1100000);
	AddConstEx(id,"SPELLCAST_COLOR_GOLD",	0X0,	-1);
	SetConstCmt(GetConstEx(id,0X0,0,-1),"$6CC",1);
	AddConstEx(id,"SPELLCAST_COLOR_ORANGE",	0X1,	-1);
	SetConstCmt(GetConstEx(id,0X1,0,-1),"$08E",1);
	AddConstEx(id,"SPELLCAST_COLOR_PURPLE",	0X2,	-1);
	SetConstCmt(GetConstEx(id,0X2,0,-1),"$E04",1);
	AddConstEx(id,"SPELLCAST_COLOR_DARK_GREY",	0X3,	-1);
	SetConstCmt(GetConstEx(id,0X3,0,-1),"$444",1);
	AddConstEx(id,"SPELLCAST_COLOR_RED",	0X4,	-1);
	SetConstCmt(GetConstEx(id,0X4,0,-1),"$02E",1);
	AddConstEx(id,"SPELLCAST_COLOR_MAGENTA",	0X5,	-1);
	SetConstCmt(GetConstEx(id,0X5,0,-1),"$82A",1);
	AddConstEx(id,"SPELLCAST_COLOR_AZURE",	0X6,	-1);
	SetConstCmt(GetConstEx(id,0X6,0,-1),"$E42",1);
	AddConstEx(id,"SPELLCAST_COLOR_YELLOW",	0X7,	-1);
	SetConstCmt(GetConstEx(id,0X7,0,-1),"$2EE",1);
	AddConstEx(id,"SPELLCAST_COLOR_GREEN",	0X8,	-1);
	SetConstCmt(GetConstEx(id,0X8,0,-1),"$2E4",1);
	AddConstEx(id,"SPELLCAST_COLOR_CINNABAR",	0X9,	-1);
	SetConstCmt(GetConstEx(id,0X9,0,-1),"$24E",1);
	AddConstEx(id,"SPELLCAST_COLOR_LIGHT_GREY",	0XA,	-1);
	SetConstCmt(GetConstEx(id,0XA,0,-1),"$888",1);
	AddConstEx(id,"SPELLCAST_COLOR_BLUE",	0XB,	-1);
	SetConstCmt(GetConstEx(id,0XB,0,-1),"$E00",1);
	AddConstEx(id,"SPELLCAST_COLOR_CELADON",	0XC,	-1);
	SetConstCmt(GetConstEx(id,0XC,0,-1),"$4E0",1);
	id = AddEnum(-1,"SpellCastColorsPerSpell",0x1100000);
	AddConstEx(id,"HEAL_SPELLCAST_COLOR",	0X0,	-1);
	AddConstEx(id,"DETOX_SPELLCAST_COLOR",	0X1,	-1);
	AddConstEx(id,"DESOUL_SPELLCAST_COLOR",	0X2,	-1);
	AddConstEx(id,"SLOW_SPELLCAST_COLOR",	0X3,	-1);
	AddConstEx(id,"BLAZE_SPELLCAST_COLOR",	0X4,	-1);
	AddConstEx(id,"SLEEP_SPELLCAST_COLOR",	0X5,	-1);
	AddConstEx(id,"FREEZE_SPELLCAST_COLOR",	0X6,	-1);
	AddConstEx(id,"ICE_BREATH_SPELLCAST_COLOR",	0X6,	-1);
	AddConstEx(id,"BOLT_SPELLCAST_COLOR",	0X7,	-1);
	AddConstEx(id,"MUDDLE_SPELLCAST_COLOR",	0X8,	-1);
	AddConstEx(id,"BOOST_SPELLCAST_COLOR",	0X9,	-1);
	AddConstEx(id,"DISPEL_SPELLCAST_COLOR",	0XA,	-1);
	AddConstEx(id,"QUICK_SPELLCAST_COLOR",	0XB,	-1);
	AddConstEx(id,"SHIELD_SPELLCAST_COLOR",	0XC,	-1);
	id = AddEnum(-1,"SpellEntry_Offsets",0x1100000);
	AddConstEx(id,"SPELL_OFFSET_RANGE",	0X0,	-1);
	AddConstEx(id,"SPELL_OFFSET_EFFECT",	0X1,	-1);
	AddConstEx(id,"SPELL_OFFSET_MP_COST",	0X2,	-1);
	id = AddEnum(-1,"SpellEntryMasks",0x1100000);
	AddConstEx(id,"SPELLENTRY_MASK_INDEX",	0X3F,	-1);
	AddConstEx(id,"SPELLENTRY_MASK_LEVEL",	0XC0,	-1);
	id = AddEnum(-1,"Spells",0x2200000);
	SetEnumBf(id,1);
	AddConstEx(id,"SPELL_HEAL",	0X0,	0x3F);
	SetConstCmt(GetConstEx(id,0X0,0,0x3F),"00: HEAL",1);
	AddConstEx(id,"SPELL_AURA",	0X1,	0x3F);
	SetConstCmt(GetConstEx(id,0X1,0,0x3F),"01: AURA",1);
	AddConstEx(id,"SPELL_DETOX",	0X2,	0x3F);
	SetConstCmt(GetConstEx(id,0X2,0,0x3F),"02: DETOX",1);
	AddConstEx(id,"SPELL_QUICK",	0X3,	0x3F);
	SetConstCmt(GetConstEx(id,0X3,0,0x3F),"03: QUICK",1);
	AddConstEx(id,"SPELL_SLOW",	0X4,	0x3F);
	SetConstCmt(GetConstEx(id,0X4,0,0x3F),"04: SLOW",1);
	AddConstEx(id,"SPELL_BOOST",	0X5,	0x3F);
	SetConstCmt(GetConstEx(id,0X5,0,0x3F),"05: BOOST",1);
	AddConstEx(id,"SPELL_DISPEL",	0X6,	0x3F);
	SetConstCmt(GetConstEx(id,0X6,0,0x3F),"06: DISPEL",1);
	AddConstEx(id,"SPELL_SHIELD",	0X7,	0x3F);
	SetConstCmt(GetConstEx(id,0X7,0,0x3F),"07: SHIELD",1);
	AddConstEx(id,"SPELL_MUDDLE",	0X8,	0x3F);
	SetConstCmt(GetConstEx(id,0X8,0,0x3F),"08: MUDDLE",1);
	AddConstEx(id,"SPELL_BLAZE",	0X9,	0x3F);
	SetConstCmt(GetConstEx(id,0X9,0,0x3F),"09: BLAZE",1);
	AddConstEx(id,"SPELL_FREEZE",	0XA,	0x3F);
	SetConstCmt(GetConstEx(id,0XA,0,0x3F),"10: FREEZE",1);
	AddConstEx(id,"SPELL_BOLT",	0XB,	0x3F);
	SetConstCmt(GetConstEx(id,0XB,0,0x3F),"11: BOLT",1);
	AddConstEx(id,"SPELL_DESOUL",	0XC,	0x3F);
	SetConstCmt(GetConstEx(id,0XC,0,0x3F),"12: DESOUL",1);
	AddConstEx(id,"SPELL_EGRESS",	0XD,	0x3F);
	SetConstCmt(GetConstEx(id,0XD,0,0x3F),"13: EGRESS",1);
	AddConstEx(id,"SPELL_DUMMY",	0XE,	0x3F);
	SetConstCmt(GetConstEx(id,0XE,0,0x3F),"14: dummy",1);
	AddConstEx(id,"SPELL_SLEEP",	0XF,	0x3F);
	SetConstCmt(GetConstEx(id,0XF,0,0x3F),"15: SLEEP",1);
	AddConstEx(id,"SPELL_NOTHING",	0X3F,	0x3F);
	SetBmaskName(id,0X3F,"SpellIndexMask");
	AddConstEx(id,"LV_1",	0X0,	0xC0);
	AddConstEx(id,"LV_2",	0X40,	0xC0);
	AddConstEx(id,"LV_3",	0X80,	0xC0);
	AddConstEx(id,"LV_4",	0XC0,	0xC0);
	SetBmaskName(id,0XC0,"SpellLevelMask");
	id = AddEnum(-1,"SpellSlots",0x1100000);
	AddConstEx(id,"SPELL_SLOTS_COUNTER",	0X3,	-1);
	AddConstEx(id,"SPELL_SLOTS_NUMBER",	0X4,	-1);
	AddConstEx(id,"EMPTY_SPELL_SLOT",	0XFF,	-1);
	id = AddEnum(-1,"Sram",0x2200000);
	AddConstEx(id,"SAVE_SLOT_SIZE",	0X8B6,	-1);
	AddConstEx(id,"SRAM_COUNTER_MINUS_ONE",	0X1FFE,	-1);
	id = AddEnum(-1,"StatusEffects",0x2200000);
	AddConstEx(id,"STATUSEFFECT_QUICK",	0X0,	-1);
	AddConstEx(id,"STATUSEFFECT_SLOW",	0X1,	-1);
	AddConstEx(id,"STATUSEFFECT_BOOST",	0X2,	-1);
	AddConstEx(id,"STATUSEFFECT_DISPEL",	0X3,	-1);
	AddConstEx(id,"STATUSEFFECT_SHIELD",	0X4,	-1);
	AddConstEx(id,"STATUSEFFECT_MUDDLE",	0X5,	-1);
	AddConstEx(id,"STATUSEFFECT_SLEEP",	0X6,	-1);
	AddConstEx(id,"STATUSEFFECT_POISON",	0X7,	-1);
	AddConstEx(id,"STATUSEFFECT_CURSE",	0X8,	-1);
	AddConstEx(id,"STATUSEFFECT_JOGURT",	0X9,	-1);
	id = AddEnum(-1,"StatusEffectBitmap",0x2200000);
	AddConstEx(id,"STATUSEFFECT_BIT_POISON",	0X0,	-1);
	AddConstEx(id,"STATUSEFFECT_BIT_SLEEP",	0X1,	-1);
	AddConstEx(id,"STATUSEFFECT_BIT_CURSE",	0X2,	-1);
	AddConstEx(id,"STATUSEFFECT_BIT_JOGURT",	0X3,	-1);
	AddConstEx(id,"STATUSEFFECT_BIT_MUDDLE",	0X4,	-1);
	AddConstEx(id,"STATUSEFFECT_BIT_DISPEL",	0X6,	-1);
	AddConstEx(id,"STATUSEFFECT_BIT_QUICK",	0X8,	-1);
	AddConstEx(id,"STATUSEFFECT_BIT_SLOW",	0XA,	-1);
	AddConstEx(id,"STATUSEFFECT_BIT_BOOST",	0XC,	-1);
	AddConstEx(id,"STATUSEFFECT_BIT_SHIELD",	0XE,	-1);
	id = AddEnum(-1,"StatusEffectCounters",0x1100000);
	SetEnumBf(id,1);
	AddConstEx(id,"STATUSEFFECT_COUNTER_POISON",	0X1,	0x1);
	AddConstEx(id,"STATUSEFFECT_COUNTER_SLEEP",	0X2,	0x2);
	AddConstEx(id,"STATUSEFFECT_COUNTER_CURSE",	0X4,	0x4);
	AddConstEx(id,"STATUSEFFECT_COUNTER_JOGURT",	0X8,	0x8);
	AddConstEx(id,"STATUSEFFECT_COUNTER_MUDDLE",	0X30,	0x30);
	AddConstEx(id,"STATUSEFFECT_COUNTER_DISPEL",	0XC0,	0xC0);
	AddConstEx(id,"STATUSEFFECT_COUNTER_QUICK",	0X300,	0x300);
	AddConstEx(id,"STATUSEFFECT_COUNTER_SLOW",	0XC00,	0xC00);
	AddConstEx(id,"STATUSEFFECT_COUNTER_BOOST",	0X3000,	0x3000);
	AddConstEx(id,"STATUSEFFECT_COUNTER_SHIELD",	0XC000,	0xC000);
	id = AddEnum(-1,"StatusEffectProperties",0x2200000);
	AddConstEx(id,"STATUSEFFECT_MASK_COUNTER",	0X3,	-1);
	AddConstEx(id,"STATUSEFFECT_COUNTERS_COUNTER",	0X5,	-1);
	AddConstEx(id,"STATUSEFFECT_COUNTERS_NUMBER",	0X6,	-1);
	AddConstEx(id,"STATUSEFFECT_BASE_CHANCE_TO_HIT",	0X25,	-1);
	id = AddEnum(-1,"Traps",0x1100000);
	AddConstEx(id,"SOUND_COMMAND",	0X0,	-1);
	AddConstEx(id,"OPEN_MESSAGE_WINDOW",	0X5,	-1);
	AddConstEx(id,"CLOSE_MESSAGE_WINDOW",	0X6,	-1);
	AddConstEx(id,"CREATE_MESSAGE_WINDOW",	0X7,	-1);
	AddConstEx(id,"DISPLAY_MESSAGE",	0X8,	-1);
	id = AddEnum(-1,"TurnOrderProperties",0x2200000);
	AddConstEx(id,"TURN_ORDER_ENTRY_SIZE",	0X2,	-1);
	AddConstEx(id,"NEXT_TURN_ORDER_ENTRY",	0X2,	-1);
	AddConstEx(id,"TURN_ORDER_LONGWORDS_COUNTER",	0XF,	-1);
	AddConstEx(id,"TURN_ORDER_SORT_MAIN_COUNTER",	0X1D,	-1);
	AddConstEx(id,"TURN_ORDER_SORT_INNER_COUNTER",	0X1E,	-1);
	AddConstEx(id,"TURN_ORDER_ENTRIES_COUNTER",	0X1F,	-1);
	AddConstEx(id,"TURN_ORDER_ENTRIES_NUMBER",	0X20,	-1);
	id = AddEnum(-1,"VdpSprites",0x2200000);
	AddConstEx(id,"VDP_SPRITES_COUNTER",	0X3F,	-1);
	id = AddEnum(-1,"VdpTiles",0x1100000);
	SetEnumBf(id,1);
	AddConstEx(id,"VDPTILE_STATUS_BAR_1",	0X1,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_2",	0X2,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_3",	0X3,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_4",	0X4,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_5",	0X5,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_6",	0X6,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_7",	0X7,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_8",	0X8,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_9",	0X9,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_A",	0XA,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_B",	0XB,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_C",	0XC,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_D",	0XD,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_E",	0XE,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_F",	0XF,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_10",	0X10,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_11",	0X11,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_12",	0X12,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_13",	0X13,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_14",	0X14,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_15",	0X15,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_16",	0X16,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_17",	0X17,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_18",	0X18,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_19",	0X19,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_1A",	0X1A,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_1B",	0X1B,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_1C",	0X1C,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_1D",	0X1D,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_1E",	0X1E,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_1F",	0X1F,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_SPACE",	0X20,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_EXCLAMATION_MARK",	0X21,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_QUOTATION_MARK",	0X22,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_SIGN",	0X23,	0x7FF);
	AddConstEx(id,"VDPTILE_24",	0X24,	0x7FF);
	SetConstCmt(GetConstEx(id,0X24,0,0x7FF),"price tag string",1);
	AddConstEx(id,"VDPTILE_ASCII_PERCENT_SIGN",	0X25,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_AMPERSAND",	0X26,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_APOSTROPHE",	0X27,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_OPENING_ROUND_BRACKET",	0X28,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_CLOSING_ROUND_BRACKET",	0X29,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_MULTIPLICATION_SIGN",	0X2A,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_PLUS_SIGN",	0X2B,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_COMMA",	0X2C,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_MINUS_SIGN",	0X2D,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_DOT",	0X2E,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_SLASH",	0X2F,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_ZERO",	0X30,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_ONE",	0X31,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_TWO",	0X32,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_THREE",	0X33,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_FOUR",	0X34,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_FIVE",	0X35,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_SIX",	0X36,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_SEVEN",	0X37,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_EIGHT",	0X38,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_NUMBER_NINE",	0X39,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_COLON",	0X3A,	0x7FF);
	AddConstEx(id,"VDPTILE_3B",	0X3B,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUSEFFECT_DISPEL_A",	0X3C,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_EQUALS_SIGN",	0X3D,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUSEFFECT_DISPEL_B",	0X3E,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_QUESTION_MARK",	0X3F,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_AT_SIGN",	0X40,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_A",	0X41,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_B",	0X42,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_C",	0X43,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_D",	0X44,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_E",	0X45,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_F",	0X46,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_G",	0X47,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_H",	0X48,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_I",	0X49,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_J",	0X4A,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_K",	0X4B,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_L",	0X4C,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_M",	0X4D,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_N",	0X4E,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_O",	0X4F,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_P",	0X50,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_Q",	0X51,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_R",	0X52,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_S",	0X53,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_T",	0X54,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_U",	0X55,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_V",	0X56,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_W",	0X57,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_X",	0X58,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_Y",	0X59,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UPPERCASE_Z",	0X5A,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUSEFFECT_MUDDLE_A",	0X5B,	0x7FF);
	AddConstEx(id,"VDPTILE_5C",	0X5C,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUSEFFECT_MUDDLE_B",	0X5D,	0x7FF);
	AddConstEx(id,"VDPTILE_5E",	0X5E,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_UNDERSCORE",	0X5F,	0x7FF);
	AddConstEx(id,"VDPTILE_60",	0X60,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_A",	0X61,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_B",	0X62,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_C",	0X63,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_D",	0X64,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_E",	0X65,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_F",	0X66,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_G",	0X67,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_H",	0X68,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_I",	0X69,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_J",	0X6A,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_K",	0X6B,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_L",	0X6C,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_M",	0X6D,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_N",	0X6E,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_O",	0X6F,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_P",	0X70,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_Q",	0X71,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_R",	0X72,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_S",	0X73,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_T",	0X74,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_U",	0X75,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_V",	0X76,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_W",	0X77,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_X",	0X78,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_Y",	0X79,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_LOWERCASE_Z",	0X7A,	0x7FF);
	AddConstEx(id,"VDPTILE_7B",	0X7B,	0x7FF);
	AddConstEx(id,"VDPTILE_7C",	0X7C,	0x7FF);
	AddConstEx(id,"VDPTILE_CL_SYMBOL",	0X7D,	0x7FF);
	AddConstEx(id,"VDPTILE_FW_SYMBOL",	0X7E,	0x7FF);
	AddConstEx(id,"VDPTILE_EQ_SYMBOL",	0X7F,	0x7FF);
	AddConstEx(id,"VDPTILE_WINDOW_CORNER",	0X80,	0x7FF);
	AddConstEx(id,"VDPTILE_WINDOW_HORIZONTAL_BORDER",	0X81,	0x7FF);
	AddConstEx(id,"VDPTILE_MINISTATUS_P_WITH_BAR",	0X82,	0x7FF);
	AddConstEx(id,"VDPTILE_MINISTATUS_P",	0X83,	0x7FF);
	AddConstEx(id,"VDPTILE_VERTICAL_ARROWHEAD",	0X84,	0x7FF);
	AddConstEx(id,"VDPTILE_HORIZONTAL_ARROWHEAD",	0X85,	0x7FF);
	AddConstEx(id,"VDPTILE_ASCII_HYPHEN",	0X86,	0x7FF);
	AddConstEx(id,"VDPTILE_87",	0X87,	0x7FF);
	AddConstEx(id,"VDPTILE_88",	0X88,	0x7FF);
	AddConstEx(id,"VDPTILE_89",	0X89,	0x7FF);
	AddConstEx(id,"VDPTILE_8A",	0X8A,	0x7FF);
	AddConstEx(id,"VDPTILE_8B",	0X8B,	0x7FF);
	AddConstEx(id,"VDPTILE_8C",	0X8C,	0x7FF);
	AddConstEx(id,"VDPTILE_8D",	0X8D,	0x7FF);
	AddConstEx(id,"VDPTILE_8E",	0X8E,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_EQUALS_SIGN",	0X8F,	0x7FF);
	AddConstEx(id,"VDPTILE_WINDOW_VERTICAL_BORDER",	0X90,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_EXCLAMATION_MARK",	0X91,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_QUOTATION_MARK",	0X92,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_SIGN",	0X93,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_COLON",	0X94,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_PERCENT_SIGN",	0X95,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_AMPERSAND",	0X96,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_APOSTROPHE",	0X97,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_OPENING_ROUND_BRACKET",	0X98,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_CLOSING_ROUND_BRACKET",	0X99,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_MULTIPLICATION_SIGN",	0X9A,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_PLUS_SIGN",	0X9B,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_COMMA",	0X9C,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_MINUS_SIGN",	0X9D,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_DOT",	0X9E,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_SLASH",	0X9F,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_QUESTION_MARK",	0XA0,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_A",	0XA1,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_B",	0XA2,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_C",	0XA3,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_D",	0XA4,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_E",	0XA5,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_F",	0XA6,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_G",	0XA7,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_H",	0XA8,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_I",	0XA9,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_J",	0XAA,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_K",	0XAB,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_L",	0XAC,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_M",	0XAD,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_N",	0XAE,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_O",	0XAF,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_P",	0XB0,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_Q",	0XB1,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_R",	0XB2,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_S",	0XB3,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_T",	0XB4,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_U",	0XB5,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_V",	0XB6,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_W",	0XB7,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_X",	0XB8,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_Y",	0XB9,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UPPERCASE_Z",	0XBA,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_ZERO",	0XBB,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_ONE",	0XBC,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_TWO",	0XBD,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_THREE",	0XBE,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_FOUR",	0XBF,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_UNDERSCORE",	0XC0,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_A",	0XC1,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_B",	0XC2,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_C",	0XC3,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_D",	0XC4,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_E",	0XC5,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_F",	0XC6,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_G",	0XC7,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_H",	0XC8,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_I",	0XC9,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_J",	0XCA,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_K",	0XCB,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_L",	0XCC,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_M",	0XCD,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_N",	0XCE,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_O",	0XCF,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_P",	0XD0,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_Q",	0XD1,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_R",	0XD2,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_S",	0XD3,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_T",	0XD4,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_U",	0XD5,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_V",	0XD6,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_W",	0XD7,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_X",	0XD8,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_Y",	0XD9,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_LOWERCASE_Z",	0XDA,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_FIVE",	0XDB,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_SIX",	0XDC,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_SEVEN",	0XDD,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_EIGHT",	0XDE,	0x7FF);
	AddConstEx(id,"VDPTILE_ORANGE_NUMBER_NINE",	0XDF,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_E0",	0XE0,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_E1",	0XE1,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_E2",	0XE2,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_E3",	0XE3,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_E4",	0XE4,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_E5",	0XE5,	0x7FF);
	return id;
}

static Enums_1(id) {

	AddConstEx(id,"VDPTILE_STATUS_BAR_E6",	0XE6,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_E7",	0XE7,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_E8",	0XE8,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_E9",	0XE9,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_EA",	0XEA,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_EB",	0XEB,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_EC",	0XEC,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUS_BAR_ED",	0XED,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUSEFFECT_POISON_A",	0XEE,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUSEFFECT_POISON_B",	0XEF,	0x7FF);
	AddConstEx(id,"VDPTILE_SPELL_LEVEL_BAR_F0",	0XF0,	0x7FF);
	AddConstEx(id,"VDPTILE_SPELL_LEVEL_BAR_F1",	0XF1,	0x7FF);
	AddConstEx(id,"VDPTILE_SPELL_LEVEL_BAR_F2",	0XF2,	0x7FF);
	AddConstEx(id,"VDPTILE_SPELL_LEVEL_BAR_F3",	0XF3,	0x7FF);
	AddConstEx(id,"VDPTILE_SPELL_LEVEL_BAR_F4",	0XF4,	0x7FF);
	AddConstEx(id,"VDPTILE_SPELL_LEVEL_BAR_F5",	0XF5,	0x7FF);
	AddConstEx(id,"VDPTILE_SPELL_LEVEL_BAR_F6",	0XF6,	0x7FF);
	AddConstEx(id,"VDPTILE_SPELL_LEVEL_BAR_F7",	0XF7,	0x7FF);
	AddConstEx(id,"VDPTILE_F8",	0XF8,	0x7FF);
	AddConstEx(id,"VDPTILE_PORTRAIT_WINDOW_CORNER",	0XF9,	0x7FF);
	AddConstEx(id,"VDPTILE_HORIZONTAL_PORTRAIT_WINDOW_BORDER",	0XFA,	0x7FF);
	AddConstEx(id,"VDPTILE_VERTICAL_PORTRAIT_WINDOW_BORDER",	0XFB,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUSEFFECT_SLEEP_A",	0XFC,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUSEFFECT_SLEEP_B",	0XFD,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUSEFFECT_CURSE_A",	0XFE,	0x7FF);
	AddConstEx(id,"VDPTILE_STATUSEFFECT_CURSE_B",	0XFF,	0x7FF);
	AddConstEx(id,"VDPTILE_MESSAGE_START1",	0X680,	0x7FF);
	AddConstEx(id,"VDPTILE_MESSAGE_END1",	0X700,	0x7FF);
	AddConstEx(id,"VDPTILE_MESSAGE_START2",	0X7C0,	0x7FF);
	SetBmaskName(id,0X7FF,"VDPTILE_INDEX_MASK");
	AddConstEx(id,"VDPTILE_MIRRORED_BIT",	0X800,	0x800);
	AddConstEx(id,"VDPTILE_FLIPPED_BIT",	0X1000,	0x1000);
	AddConstEx(id,"VDPTILE_PALETTE2",	0X2000,	0x6000);
	AddConstEx(id,"VDPTILE_PALETTE3",	0X4000,	0x6000);
	AddConstEx(id,"VDPTILE_PALETTE4",	0X6000,	0x6000);
	SetBmaskName(id,0X6000,"VDPTILE_PALETTE_MASK");
	AddConstEx(id,"VDPTILE_PRIORITY_BIT",	0X8000,	0x8000);
	id = AddEnum(-1,"VdpTiles_StatusEffects",0x1100000);
	AddConstEx(id,"VDPTILES_STATUSEFFECT_DISPEL",	0XC03CC03E,	-1);
	AddConstEx(id,"VDPTILES_STATUSEFFECT_MUDDLE",	0XC05BC05D,	-1);
	AddConstEx(id,"VDPTILES_STATUSEFFECT_POISON",	0XC0EEC0EF,	-1);
	AddConstEx(id,"VDPTILES_STATUSEFFECT_SLEEP",	0XC0FCC0FD,	-1);
	AddConstEx(id,"VDPTILES_STATUSEFFECT_CURSE",	0XC0FEC0FF,	-1);
	id = AddEnum(-1,"VIntBitmap",0x1100000);
	AddConstEx(id,"VDP_COMMAND_REQUEST",	0X0,	-1);
	AddConstEx(id,"DEACTIVATE_DMA",	0X1,	-1);
	AddConstEx(id,"DMA_REQUEST",	0X3,	-1);
	AddConstEx(id,"VRAM_READ_REQUEST",	0X4,	-1);
	AddConstEx(id,"ENABLE_VINT",	0X7,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
	id = Enums_0(id);
	id = Enums_1(id);
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	MakeRptCmt	(0X0,	"Initial stack pointer value");
	ExtLinA		(0X0,	0,	"; File Name   : E:\\SEGADEV\\IDB\\SF1\\sf1.bin");
	ExtLinA		(0X0,	1,	"; Format      : Binary file");
	ExtLinA		(0X0,	2,	"; Base Address: 0000h Range: 0000h - 180000h Loaded length: 180000h");
	MakeDword	(0X0);
	MakeName	(0X0,	"InitStack");
	MakeRptCmt	(0X4,	"Start of program");
	MakeDword	(x=0X4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X4,	"p_Start");
	MakeRptCmt	(0X8,	"Bus error");
	MakeDword	(x=0X8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XC,	"Address error");
	MakeDword	(x=0XC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X10,	"Illegal instruction");
	MakeDword	(x=0X10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X14,	"Division by zero");
	MakeDword	(x=0X14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X18,	"CHK exception");
	MakeDword	(x=0X18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1C,	"TRAPV exception");
	MakeDword	(x=0X1C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X20,	"Privilege violation");
	MakeDword	(x=0X20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X24,	"TRACE exception");
	MakeDword	(x=0X24);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X28,	"Line-A emulator");
	MakeDword	(x=0X28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2C,	"Line-F emulator");
	MakeDword	(x=0X2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X30,	"Unused (reserved)");
	MakeDword	(x=0X30);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X34,	"Unused (reserved)");
	MakeDword	(x=0X34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X38,	"Unused (reserved)");
	MakeDword	(x=0X38);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X3C,	"Unused (reserved)");
	MakeDword	(x=0X3C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X40,	"Unused (reserved)");
	MakeDword	(x=0X40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X44,	"Unused (reserved)");
	MakeDword	(x=0X44);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X48,	"Unused (reserved)");
	MakeDword	(x=0X48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X4C,	"Unused (reserved)");
	MakeDword	(x=0X4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X50,	"Unused (reserved)");
	MakeDword	(x=0X50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X54,	"Unused (reserved)");
	MakeDword	(x=0X54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X58,	"Unused (reserved)");
	MakeDword	(x=0X58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X5C,	"Unused (reserved)");
	MakeDword	(x=0X5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X60,	"Spurious exception");
	MakeDword	(x=0X60);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X64,	"IRQ level 1");
	MakeDword	(x=0X64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X68,	"IRQ level 2");
	MakeDword	(x=0X68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X6C,	"IRQ level 3");
	MakeDword	(x=0X6C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X70,	"IRQ level 4 - HBlank interrupt");
	MakeDword	(x=0X70);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X74,	"IRQ level 5");
	MakeDword	(x=0X74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X78,	"IRQ level 6 - VBlank interrupt");
	MakeDword	(x=0X78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X7C,	"IRQ level 7");
	MakeDword	(x=0X7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X80,	"TRAP #00 - Sound command");
	MakeDword	(x=0X80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X84,	"TRAP #01");
	MakeDword	(x=0X84);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X88,	"TRAP #02");
	MakeDword	(x=0X88);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X8C,	"TRAP #03");
	MakeDword	(x=0X8C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X90,	"TRAP #04");
	MakeDword	(x=0X90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X94,	"TRAP #05");
	MakeDword	(x=0X94);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X98,	"TRAP #06");
	MakeDword	(x=0X98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X9C,	"TRAP #07");
	MakeDword	(x=0X9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA0,	"TRAP #08 - Display message");
	MakeDword	(x=0XA0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA4,	"TRAP #09 exception");
	MakeDword	(x=0XA4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA8,	"TRAP #10 exception");
	MakeDword	(x=0XA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XAC,	"TRAP #11 exception");
	MakeDword	(x=0XAC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XB0,	"TRAP #12 exception");
	MakeDword	(x=0XB0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XB4,	"TRAP #13 exception");
	MakeDword	(x=0XB4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XB8,	"TRAP #14 exception");
	MakeDword	(x=0XB8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XBC,	"TRAP #15 exception");
	MakeDword	(x=0XBC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XC0,	"Unused (reserved)");
	MakeDword	(x=0XC0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XC4,	"Unused (reserved)");
	MakeDword	(x=0XC4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XC8,	"Unused (reserved)");
	MakeDword	(x=0XC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XCC,	"Unused (reserved)");
	MakeDword	(x=0XCC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XD0,	"Unused (reserved)");
	MakeDword	(x=0XD0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XD4,	"Unused (reserved)");
	MakeDword	(x=0XD4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XD8,	"Unused (reserved)");
	MakeDword	(x=0XD8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XDC,	"Unused (reserved)");
	MakeDword	(x=0XDC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XE0,	"Unused (reserved)");
	MakeDword	(x=0XE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XE4,	"Unused (reserved)");
	MakeDword	(x=0XE4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XE8,	"Unused (reserved)");
	MakeDword	(x=0XE8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XEC,	"Unused (reserved)");
	MakeDword	(x=0XEC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XF0,	"Unused (reserved)");
	MakeDword	(x=0XF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XF4,	"Unused (reserved)");
	MakeDword	(x=0XF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XF8,	"Unused (reserved)");
	MakeDword	(x=0XF8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XFC,	"Unused (reserved)");
	MakeDword	(x=0XFC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X100,	"Hardware system ID");
	MakeStr		(0X100,	0X110);
	MakeName	(0X100,	"aSegaGenesis");
	MakeRptCmt	(0X110,	"Release date");
	MakeStr		(0X110,	0X120);
	MakeName	(0X110,	"aCSega1993_apr");
	MakeRptCmt	(0X120,	"Domestic name");
	MakeStr		(0X120,	0X130);
	MakeName	(0X120,	"aShiningForce");
	MakeStr		(0X130,	0X140);
	MakeStr		(0X140,	0X150);
	MakeRptCmt	(0X150,	"Overseas name");
	MakeStr		(0X150,	0X160);
	MakeName	(0X150,	"aShiningForce_0");
	MakeStr		(0X160,	0X170);
	MakeStr		(0X170,	0X180);
	MakeRptCmt	(0X180,	"Product code and serial/version number");
	MakeStr		(0X180,	0X18E);
	MakeName	(0X180,	"aGmMk131200");
	MakeRptCmt	(0X18E,	"Checksum");
	MakeWord	(0X18E);
	MakeRptCmt	(0X190,	"I/O support");
	MakeStr		(0X190,	0X1A0);
	MakeName	(0X190,	"aJ");
	MakeRptCmt	(0X1A0,	"ROM start address");
	MakeDword	(0X1A0);
	MakeRptCmt	(0X1A4,	"ROM end address");
	MakeDword	(x=0X1A4);
	OpHex		(x,	0);
	MakeName	(0X1A4,	"RomEndAddress");
	MakeRptCmt	(0X1A8,	"RAM start address");
	MakeDword	(x=0X1A8);
	OpHex		(x,	0);
	MakeRptCmt	(0X1AC,	"RAM end address");
	MakeDword	(x=0X1AC);
	OpHex		(x,	0);
	MakeRptCmt	(0X1B0,	"SRAM data");
	MakeStr		(0X1B0,	0X1B2);
	MakeName	(0X1B0,	"aRa");
	MakeRptCmt	(0X1B2,	"%1x1yy000\nx = 1 if used for backup\nyy = 11 if odd bytes addressing, 10 if even only, 00 if both");
	MakeByte	(x=0X1B2);
	OpBinary	(x,	0);
	MakeByte	(x=0X1B3);
	OpBinary	(x,	0);
	MakeRptCmt	(0X1B4,	"SRAM start address");
	MakeDword	(x=0X1B4);
	OpHex		(x,	0);
	MakeRptCmt	(0X1B8,	"SRAM end address");
	MakeDword	(x=0X1B8);
	OpHex		(x,	0);
	MakeRptCmt	(0X1BC,	"Modem data");
	MakeStr		(0X1BC,	0X1C8);
	MakeRptCmt	(0X1C8,	"Memo");
	MakeStr		(0X1C8,	0X1DC);
	MakeStr		(0X1DC,	0X1F0);
	MakeRptCmt	(0X1F0,	"Region codes");
	MakeStr		(0X1F0,	0X200);
	MakeName	(0X1F0,	"aU");
	MakeCode	(0X200);
	MakeName	(0X200,	"j_EnableDisplayOnVdp");
	MakeCode	(0X204);
	MakeName	(0X204,	"j_DisableDisplayOnVdp");
	MakeCode	(0X208);
	MakeName	(0X208,	"j_EnableInterrupts");
	MakeCode	(0X20C);
	MakeName	(0X20C,	"j_DisableInterrupts");
	MakeCode	(0X210);
	MakeName	(0X210,	"j_EnableDisplayAndInterrupts");
	MakeCode	(0X214);
	MakeName	(0X214,	"j_DisableDisplayAndInterrupts");
	MakeCode	(0X218);
	MakeName	(0X218,	"j_ActivateVIntDmaQueueProcessing");
	MakeCode	(0X21C);
	MakeName	(0X21C,	"j_DeactivateVIntDmaQueueProcessing");
	MakeCode	(0X220);
	MakeName	(0X220,	"j_DuplicatePalettes");
	MakeCode	(0X224);
	MakeName	(0X224,	"j_ApplyVIntCramDma");
	MakeCode	(0X228);
	MakeName	(0X228,	"j_FadeInFromBlack");
	MakeCode	(0X22C);
	MakeName	(0X22C,	"j_FadeOutToBlack");
	MakeCode	(0X230);
	MakeName	(0X230,	"j_ClearScrollAndSpriteTables");
	MakeCode	(0X234);
	MakeName	(0X234,	"j_ClearScrollTable");
	MakeCode	(0X238);
	MakeName	(0X238,	"j_ClearSpriteTable");
	MakeCode	(0X23C);
	MakeName	(0X23C,	"j_UpdateVdpSpriteTable");
	MakeCode	(0X240);
	MakeName	(0X240,	"j_WaitForVInt");
	MakeCode	(0X244);
	MakeName	(0X244,	"j_Sleep");
	MakeCode	(0X248);
	MakeCode	(0X24C);
	MakeCode	(0X250);
	MakeCode	(0X254);
	MakeCode	(0X258);
	MakeName	(0X258,	"j_RequestVdpCommandQueueProcessing");
	MakeCode	(0X25C);
	MakeName	(0X25C,	"j_WaitForVdpCommandQueueProcessing");
	MakeCode	(0X260);
	MakeName	(0X260,	"j_EnableDmaQueueProcessing");
	MakeCode	(0X264);
	MakeName	(0X264,	"j_WaitForDmaQueueProcessing");
	MakeCode	(0X268);
	MakeCode	(0X26C);
	MakeCode	(0X270);
	MakeCode	(0X274);
	MakeName	(0X274,	"j_ApplyImmediateVramDma");
	MakeCode	(0X278);
	MakeName	(0X278,	"j_ApplyVIntVramDma");
	MakeCode	(0X27C);
	MakeName	(0X27C,	"j_UpdateVdpHScrollData");
	MakeCode	(0X280);
	MakeName	(0X280,	"j_UpdateForegroundHScrollData");
	MakeCode	(0X284);
	MakeName	(0X284,	"j_UpdateBackgroundHScrollData");
	MakeCode	(0X288);
	MakeName	(0X288,	"j_UpdateVdpVScrollData");
	MakeCode	(0X28C);
	MakeName	(0X28C,	"j_UpdateForegroundVScrollData");
	MakeCode	(0X290);
	MakeName	(0X290,	"j_UpdateBackgroundVScrollData");
	MakeCode	(0X294);
	MakeName	(0X294,	"j_ApplyImmediateVramDmaOnCompressedTiles");
	MakeCode	(0X298);
	MakeName	(0X298,	"j_ApplyVIntVramDmaOnCompressedTiles");
	MakeCode	(0X29C);
	MakeCode	(0X2A0);
	MakeName	(0X2A0,	"j_DMAandWait");
	MakeCode	(0X2A4);
	MakeName	(0X2A4,	"j_GetVdpRegStatus");
	MakeCode	(0X2A8);
	MakeName	(0X2A8,	"j_SetVdpReg");
	MakeCode	(0X2AC);
	MakeName	(0X2AC,	"j_ApplyLogicalOrOnVdpReg");
	MakeCode	(0X2B0);
	MakeName	(0X2B0,	"j_ApplyLogicalAndOnVdpReg");
	MakeCode	(0X2B4);
	MakeName	(0X2B4,	"j_ApplyVramDmaFill");
	MakeCode	(0X2B8);
	MakeName	(0X2B8,	"j_CopyPalette1");
	MakeCode	(0X2BC);
	MakeName	(0X2BC,	"j_CopyPalette");
	MakeCode	(0X2C0);
	MakeName	(0X2C0,	"j_CopyPalette_Loop");
	MakeCode	(0X2C4);
	MakeName	(0X2C4,	"j_WriteAsciiNumber");
	MakeCode	(0X2C8);
	MakeName	(0X2C8,	"j_nullsub_13E8");
	MakeCode	(0X2CC);
	MakeName	(0X2CC,	"j_WaitForPlayerInput");
	MakeCode	(0X2D0);
	MakeName	(0X2D0,	"j_WaitForPlayer1NewInput");
	MakeCode	(0X2D4);
	MakeCode	(0X2D8);
	MakeName	(0X2D8,	"j_WaitForInputFor1Second");
	MakeCode	(0X2DC);
	MakeName	(0X2DC,	"j_WaitForInputFor3Seconds");
	MakeCode	(0X2E0);
	MakeName	(0X2E0,	"j_GenerateRandomNumber");
	MakeCode	(0X2E4);
	MakeName	(0X2E4,	"j_PlayMusicAfterCurrentOne");
	MakeCode	(0X2E8);
	MakeName	(0X2E8,	"j_ApplyCurrentColorFadingValue");
	MakeCode	(0X2EC);
	MakeName	(0X2EC,	"j_DecompressGraphics");
	MakeCode	(0X2F0);
	MakeCode	(0X2F4);
	MakeName	(0X2F4,	"j_FadeInFromWhite");
	MakeCode	(0X2F8);
	MakeName	(0X2F8,	"j_FadeOutToWhite");
	MakeCode	(0X2FC);
	MakeName	(0X2FC,	"j_CopyBytes");
	MakeCode	(0X300);
	MakeCode	(0X304);
	MakeCode	(0X308);
	MakeName	(0X308,	"j_LoadText");
	MakeCode	(0X30C);
	MakeName	(0X30C,	"j_CloseMessageWindow");
	MakeCode	(0X310);
	MakeName	(0X310,	"j_InitSprites");
	MakeCode	(0X314);
	MakeCode	(0X318);
	MakeCode	(0X31C);
	MakeCode	(0X320);
	MakeCode	(0X324);
	MakeCode	(0X328);
	MakeName	(0X328,	"j_CreateMessageWindow");
	MakeCode	(0X32C);
	MakeName	(0X32C,	"j_SaveGame");
	MakeCode	(0X330);
	MakeName	(0X330,	"j_LoadGame");
	MakeCode	(0X334);
	MakeName	(0X334,	"j_YesNoChoiceBox");
	MakeCode	(0X338);
	MakeName	(0X338,	"j_ExecuteHeadquartersMenu");
	MakeCode	(0X33C);
	MakeName	(0X33C,	"j_ExecuteMainMenu");
	MakeCode	(0X340);
	MakeCode	(0X344);
	MakeCode	(0X348);
	MakeName	(0X348,	"j_YesNoPrompt");
	MakeCode	(0X34C);
	MakeCode	(0X350);
	MakeCode	(0X354);
	MakeCode	(0X358);
	MakeCode	(0X35C);
	MakeCode	(0X360);
	MakeName	(0X360,	"j_ExecuteItemMenu");
	MakeCode	(0X364);
	MakeName	(0X364,	"j_optionMenu_Speed");
	MakeCode	(0X368);
	MakeName	(0X368,	"j_optionMenuAction_Message");
	MakeCode	(0X36C);
	MakeName	(0X36C,	"j_optionMenuAction_Quit");
	MakeCode	(0X370);
	MakeCode	(0X374);
	MakeCode	(0X378);
	MakeCode	(0X37C);
	MakeCode	(0X380);
	MakeCode	(0X384);
	MakeCode	(0X388);
	MakeCode	(0X38C);
	MakeName	(0X38C,	"j_SetEventFlag");
	MakeCode	(0X390);
	MakeName	(0X390,	"j_ClearEventFlag");
	MakeCode	(0X394);
	MakeName	(0X394,	"j_CheckEventFlag");
	MakeCode	(0X398);
	MakeName	(0X398,	"InitSystem");
	MakeCode	(0X3A6);
	MakeName	(0X3A6,	"InitVdp");
	MakeCode	(x=0X3AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X3B0,	"clear all RAM");
	ExtLinB		(0X3B2,	0,	"                ");
	MakeCode	(x=0X3C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X3E0,	"InitVdpData");
	MakeCode	(x=0X3EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X3F4,	"PD2 output mode ?");
	MakeCode	(x=0X408);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X412,	"clear from FF0100 to FF0500");
	MakeCode	(x=0X41E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X428,	"clear next 80d bytes");
	MakeCode	(x=0X434);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X43C,	"clear palette replicas ?");
	MakeRptCmt	(0X454,	"disable H int, enable read H V counter");
	MakeWord	(0X454);
	MakeName	(0X454,	"vdp_init_params");
	MakeRptCmt	(0X456,	"disable display, enable V int, disable DMA, V28 cell mode");
	MakeWord	(0X456);
	MakeRptCmt	(0X458,	"scroll A table VRAM address : C000");
	MakeWord	(0X458);
	MakeRptCmt	(0X45A,	"window table VRAM address : E000");
	MakeWord	(0X45A);
	MakeRptCmt	(0X45C,	"scroll B table VRAM address : E000");
	MakeWord	(0X45C);
	MakeRptCmt	(0X45E,	"sprite attribute table VRAM address : F000");
	MakeWord	(0X45E);
	MakeRptCmt	(0X460,	"always 0");
	MakeWord	(0X460);
	MakeRptCmt	(0X462,	"background color : plt 0, clr 0");
	MakeWord	(0X462);
	MakeRptCmt	(0X464,	"always 0");
	MakeWord	(0X464);
	MakeRptCmt	(0X466,	"always 0");
	MakeWord	(0X466);
	MakeRptCmt	(0X468,	"Hint timing : 0");
	MakeWord	(0X468);
	MakeRptCmt	(0X46A,	"disable external interrupt, full scrolls");
	MakeWord	(0X46A);
	MakeRptCmt	(0X46C,	"H40 cell mode, no interlace");
	MakeWord	(0X46C);
	MakeRptCmt	(0X46E,	"H Scroll table VRAM address : F400");
	MakeWord	(0X46E);
	MakeRptCmt	(0X470,	"always 0");
	MakeWord	(0X470);
	MakeRptCmt	(0X472,	"auto increment bias number : 2");
	MakeWord	(0X472);
	MakeRptCmt	(0X474,	"scroll size : V32 cell, H64 cell");
	MakeWord	(0X474);
	MakeRptCmt	(0X476,	"window is 20 cells from right");
	MakeWord	(0X476);
	MakeRptCmt	(0X478,	"window is 28 cells from bottom");
	MakeWord	(0X478);
	MakeCode	(0X47A);
	MakeName	(0X47A,	"Start");
	MakeCode	(x=0X48A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X48E,	"copy parameters");
	MakeRptCmt	(0X492,	"copy adresses");
	MakeRptCmt	(0X496,	"get HW Info at 0xA10001");
	MakeCode	(x=0X4A0);
	OpChr		(x,	0);
	MakeRptCmt	(0X4A8,	"just read vdp control, why ?");
	MakeRptCmt	(0X4AE,	"reset user stack pointer ?");
	MakeRptCmt	(0X4B0,	"loop for each of the 24 vdp registers");
	MakeRptCmt	(0X4B2,	"set each vdp register with initial parameters");
	MakeRptCmt	(0X4BE,	"move 0 to vdp data port");
	MakeRptCmt	(0X4C0,	"Z80 busreq cancel ?");
	MakeRptCmt	(0X4C2,	"Z80 bus reset request ?");
	MakeRptCmt	(0X4C6,	"wait for availability");
	MakeRptCmt	(0X4C8,	"loop 37 times");
	MakeRptCmt	(0X4CA,	"copy 37 bytes to Z80 ram");
	MakeRptCmt	(0X4D0,	"Z80 reset request ?");
	MakeRptCmt	(0X4D2,	"Z80 busreq cancel ?");
	MakeRptCmt	(0X4D4,	"Z80 reset cancel ?");
	MakeRptCmt	(0X4D6,	"clear RAM");
	MakeRptCmt	(0X4DC,	"disable DMA, increment data bias number : 2");
	MakeRptCmt	(0X4DE,	"address set : CRAM write ?");
	MakeRptCmt	(0X4E0,	"loop 31 times");
	MakeRptCmt	(0X4E2,	"clear CRAM ?");
	MakeRptCmt	(0X4E8,	"VSRAM write");
	MakeRptCmt	(0X4EA,	"loop 19 times");
	MakeRptCmt	(0X4EC,	"clear VSRAM");
	MakeRptCmt	(0X4F2,	"loop 3 times");
	MakeRptCmt	(0X4F4,	"set PSG volume to 0");
	MakeRptCmt	(0X4FC,	"bus reset cancel ?");
	MakeRptCmt	(0X4FE,	"clear registers");
	MakeRptCmt	(0X502,	"Move 0x2700 into Status Register, which now has these set: no trace, A7 is Interupt Stack Pointer, no interrupts, clear condition code bits");
	MakeRptCmt	(0X508,	"vdp register set base word");
	MakeWord	(0X508);
	MakeName	(0X508,	"StartParams");
	MakeWord	(0X50A);
	MakeRptCmt	(0X50C,	"vdp register set word to add for next register");
	MakeWord	(0X50C);
	MakeDword	(x=0X50E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X512,	"Z80 bus request");
	MakeDword	(x=0X512);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X516,	"Z80 bus reset");
	MakeDword	(x=0X516);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X51A,	"vdp data port");
	MakeDword	(x=0X51A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X51E,	"vdp control port");
	MakeDword	(x=0X51E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X522,	"vdp reg 00 : disable HInt, enable read H V counter");
	MakeByte	(0X522);
	MakeRptCmt	(0X523,	"vdp reg 01 : disable display, disable VInt, enable DMA, V28 cell mode");
	MakeByte	(0X523);
	MakeRptCmt	(0X524,	"vdp reg 02 : scroll A table vram address : C000");
	MakeByte	(0X524);
	MakeRptCmt	(0X525,	"vdp reg 03 : window table vram address : F000 ?");
	MakeByte	(0X525);
	MakeRptCmt	(0X526,	"vdp reg 04 : scroll B table vram address : E000");
	MakeByte	(0X526);
	MakeRptCmt	(0X527,	"vdp reg 05 : sprite attribute table vram address : D800");
	MakeByte	(0X527);
	MakeRptCmt	(0X528,	"vdp reg 06 : always 0");
	MakeByte	(0X528);
	MakeRptCmt	(0X529,	"vdp reg 07 : background color : plt 0 color 0");
	MakeByte	(0X529);
	MakeRptCmt	(0X52A,	"vdp reg 08 : always 0");
	MakeByte	(0X52A);
	MakeRptCmt	(0X52B,	"vdp reg 09 : always 0");
	MakeByte	(0X52B);
	MakeRptCmt	(0X52C,	"vdp reg 10 : Hint timing value");
	MakeByte	(0X52C);
	MakeRptCmt	(0X52D,	"vdp reg 11 : disable external interrupt, full V/H scrolls");
	MakeByte	(0X52D);
	MakeRptCmt	(0X52E,	"vdp reg 12 : H40 cell mode, disable shadow/highlight, no interlace");
	MakeByte	(0X52E);
	MakeRptCmt	(0X52F,	"vdp reg 13 : H Scroll table vram address : FC00");
	MakeByte	(0X52F);
	MakeRptCmt	(0X530,	"vdp reg 14 : always 0");
	MakeByte	(0X530);
	MakeRptCmt	(0X531,	"vdp reg 15 : auto-increment bias number : 1");
	MakeByte	(0X531);
	MakeRptCmt	(0X532,	"vdp reg 16 : scroll size : V32 cell, H64 cell");
	MakeByte	(0X532);
	MakeRptCmt	(0X533,	"vdp reg 17 : window H position : from left side");
	MakeByte	(0X533);
	MakeRptCmt	(0X534,	"vdp reg 18 : window V position : from upper side");
	MakeByte	(0X534);
	MakeRptCmt	(0X535,	"vdp reg 19 : DMA length counter low");
	MakeByte	(0X535);
	MakeRptCmt	(0X536,	"vdp reg 20 : DMA length counter high");
	MakeByte	(0X536);
	MakeRptCmt	(0X537,	"vdp reg 21 : DMA source address low");
	MakeByte	(0X537);
	MakeRptCmt	(0X538,	"vdp reg 22 : DMA source address mid");
	MakeByte	(0X538);
	MakeRptCmt	(0X539,	"vdp reg 23 : DMA source address high, VRAM fill");
	MakeByte	(0X539);
	MakeRptCmt	(0X53A,	"?");
	MakeDword	(0X53A);
	MakeRptCmt	(0X53E,	"Z80 start code");
	MakeByte	(0X53E);
	MakeRptCmt	(0X53F,	"xor     a");
	MakeByte	(0X53F);
	MakeRptCmt	(0X540,	"ld      bc, 1FD9h");
	MakeByte	(0X540);
	MakeRptCmt	(0X541,	"ld      de, 27h");
	MakeByte	(0X541);
	MakeRptCmt	(0X542,	"ld      hl, 26h");
	MakeByte	(0X542);
	MakeRptCmt	(0X543,	"ld      sp, hl");
	MakeByte	(0X543);
	MakeRptCmt	(0X544,	"ld      (hl), a");
	MakeByte	(0X544);
	MakeRptCmt	(0X545,	"ldir");
	MakeByte	(0X545);
	MakeRptCmt	(0X546,	"pop     ix");
	MakeByte	(0X546);
	MakeRptCmt	(0X547,	"pop     iy");
	MakeByte	(0X547);
	MakeRptCmt	(0X548,	"ld      i, a");
	MakeByte	(0X548);
	MakeRptCmt	(0X549,	"ld      r, a");
	MakeByte	(0X549);
	MakeRptCmt	(0X54A,	"pop     de");
	MakeByte	(0X54A);
	MakeRptCmt	(0X54B,	"pop     hl");
	MakeByte	(0X54B);
	MakeRptCmt	(0X54C,	"pop     af");
	MakeByte	(0X54C);
	MakeRptCmt	(0X54D,	"ex      af, af'");
	MakeByte	(0X54D);
	MakeRptCmt	(0X54E,	"exx");
	MakeByte	(0X54E);
	MakeRptCmt	(0X54F,	"pop     bc");
	MakeByte	(0X54F);
	MakeRptCmt	(0X550,	"pop     de");
	MakeByte	(0X550);
	MakeRptCmt	(0X551,	"pop     hl");
	MakeByte	(0X551);
	MakeRptCmt	(0X552,	"pop     af");
	MakeByte	(0X552);
	MakeRptCmt	(0X553,	"ld      sp, hl");
	MakeByte	(0X553);
	MakeRptCmt	(0X554,	"di");
	MakeByte	(0X554);
	MakeRptCmt	(0X555,	"im      1");
	MakeByte	(0X555);
	MakeRptCmt	(0X556,	"ld      (hl), 0E9h");
	MakeByte	(0X556);
	MakeRptCmt	(0X557,	"jp      (hl)");
	MakeByte	(0X557);
	MakeByte	(0X558);
	MakeByte	(0X559);
	MakeByte	(0X55A);
	MakeByte	(0X55B);
	MakeByte	(0X55C);
	MakeByte	(0X55D);
	MakeByte	(0X55E);
	MakeByte	(0X55F);
	MakeByte	(0X560);
	MakeByte	(0X561);
	MakeByte	(0X562);
	MakeRptCmt	(0X563,	"Z80 start code end");
	MakeByte	(0X563);
	MakeRptCmt	(0X564,	"disable DMA, increment data bias number : 2");
	MakeDword	(0X564);
	MakeRptCmt	(0X568,	"CRAM write");
	MakeDword	(0X568);
	MakeRptCmt	(0X56C,	"VSRAM write");
	MakeDword	(0X56C);
	MakeRptCmt	(0X570,	"PSG bytes");
	MakeByte	(0X570);
	MakeByte	(0X571);
	MakeByte	(0X572);
	MakeRptCmt	(0X573,	"end of PSG bytes");
	MakeByte	(0X573);
	MakeCode	(0X574);
	MakeRptCmt	(0X580,	"wait for free DMA");
	ExtLinB		(0X584,	0,	"                ");
	MakeRptCmt	(0X58A,	"unused Z80 code");
	MakeByte	(0X58A);
	MakeRptCmt	(0X58B,	"loc_0:         di");
	MakeByte	(0X58B);
	MakeRptCmt	(0X58C,	"               ld      sp, 1FF0h");
	MakeByte	(0X58C);
	MakeRptCmt	(0X58D,	"               jp      loc_0");
	MakeByte	(0X58D);
	MakeByte	(0X58E);
	MakeByte	(0X58F);
	MakeByte	(0X590);
	MakeByte	(0X591);
	MakeCode	(0X592);
	MakeName	(0X592,	"InitZ80");
	MakeCode	(x=0X5A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X5BC,	0,	"                ");
	ExtLinB		(0X5CA,	0,	"                ");
	MakeCode	(x=0X5DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5EA);
	MakeName	(0X5EA,	"CopyWordToZ80");
	MakeName	(0X5F0,	"CopyByteToZ80");
	MakeCode	(0X5FA);
	MakeName	(0X5FA,	"Trap0_SoundCommand");
	MakeRptCmt	(0X602,	"get interrupt param");
	MakeRptCmt	(0X60E,	"if param = FFFF, then get param from d0");
	MakeCode	(x=0X610);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X616);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X624,	"add new sound command to send");
	MakeCode	(x=0X62E);
	OpChr		(x,	0);
	MakeName	(0X62E,	"int_AdressError");
	MakeCode	(x=0X638);
	OpHex		(x,	0);
	MakeCode	(x=0X646);
	OpChr		(x,	0);
	MakeName	(0X646,	"int_IllegalInstruction");
	MakeCode	(x=0X650);
	OpStkvar	(x,	0);
	MakeCode	(x=0X65E);
	OpChr		(x,	0);
	MakeName	(0X65E,	"int_ZeroDivide");
	MakeCode	(x=0X668);
	OpStkvar	(x,	0);
	MakeCode	(x=0X676);
	OpChr		(x,	0);
	MakeName	(0X676,	"int_OtherError");
	MakeCode	(x=0X680);
	OpStkvar	(x,	0);
	MakeCode	(0X68E);
	MakeName	(0X68E,	"int_ExternalInterrupt");
	MakeCode	(0X694);
	MakeName	(0X694,	"IntLv17");
	MakeCode	(0X698);
	MakeName	(0X698,	"Trap5_");
	MakeCode	(0X6A8);
	MakeName	(0X6A8,	"Trap6_");
	MakeCode	(0X6B8);
	MakeName	(0X6B8,	"Trap7_");
	MakeCode	(0X6C8);
	MakeName	(0X6C8,	"Trap8_DisplayMessage");
	MakeCode	(0X6D8);
	MakeName	(0X6D8,	"VInt");
	MakeRptCmt	(0X6DC,	"disable VInt");
	MakeCode	(x=0X6DC);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeRptCmt	(0X6E4,	"skip if VInt was already disabled");
	MakeCode	(0X728);
	MakeName	(0X728,	"CallContextualFunction");
	MakeRptCmt	(0X72E,	"increment frame and second counters");
	MakeCode	(x=0X730);
	OpDecimal	(x,	0);
	MakeCode	(0X74A);
	MakeCode	(0X74C);
	MakeName	(0X74C,	"DisableDisplay");
	MakeCode	(0X760);
	MakeName	(0X760,	"ProcessVdpQueues");
	MakeCode	(x=0X768);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeName	(0X768,	"ProcessVdpCommandQueue");
	MakeCode	(x=0X77E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X7CC,	0,	"                ");
	ExtLinB		(0X7D6,	0,	"                ");
	MakeCode	(x=0X7E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X7EC,	"Check if VRAM read requested");
	MakeCode	(x=0X7EC);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeName	(0X7EC,	"ProcessVramRead");
	MakeCode	(x=0X7F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X7FC,	"autoincrement 02");
	MakeComm	(0X82C,	"Check if DMA requested");
	MakeCode	(x=0X82C);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeName	(0X82C,	"ProcessDmaQueue");
	MakeRptCmt	(0X836,	"Check if DMA deactivated");
	MakeCode	(x=0X836);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeRptCmt	(0X840,	"Bus request");
	MakeRptCmt	(0X848,	"Check bus availability");
	ExtLinB		(0X850,	0,	"                ");
	MakeRptCmt	(0X852,	"Check if DMA deactivated");
	MakeCode	(x=0X852);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeRptCmt	(0X85C,	"Update sprites");
	MakeCode	(x=0X868);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X86E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X87A,	"Enable DMA on VDP");
	MakeRptCmt	(0X880,	"Send all queued DMA commands");
	ExtLinB		(0X89A,	0,	"                ");
	MakeCode	(x=0X8AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8BA);
	MakeName	(0X8BA,	"ApplyZ80BusUpdates");
	MakeRptCmt	(0X8CA,	"wait for Z80 bus available");
	MakeCode	(x=0X8E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8EC);
	OpHex		(x,	0);
	MakeRptCmt	(0X8F0,	"if stack void, do nothing");
	MakeRptCmt	(0X8F6,	"contains music volume parameter when command is FC\nor fade in parameter when 7F < command < F0");
	MakeRptCmt	(0X8F8,	"stores first command in d1 and d0 and pushes the rest forward");
	MakeRptCmt	(0X90E,	"if command FB, play back previous music\nNOTE : for future cube save/resume feature,\nsend proper resume command instead of previous music index !\nCube should save current music at every new music index !");
	MakeCode	(x=0X91C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X944);
	MakeRptCmt	(0X94A,	"if command >= FD, then send it to Z80");
	MakeCode	(0X954);
	MakeRptCmt	(0X95A,	"if F0, then wait for current music to end before sending commands to Z80");
	MakeCode	(0X966);
	MakeRptCmt	(0X96A,	"if FC, then update music level");
	MakeCode	(0X980);
	MakeRptCmt	(0X984,	"a music/sfx index mask that must be changed to allow indexes above $80\nalso change stuff at 9AA then !");
	MakeRptCmt	(0X988,	"compare with last played music");
	MakeRptCmt	(0X994,	"if same to last played music, let current music play\n(might play nothing if last played music has ended !)");
	MakeComm	(0X998,	"if command > 7F, then send Fade In parameter");
	MakeCode	(0X998);
	MakeRptCmt	(0X99C,	"branch if bit was 1 before bclr");
	MakeCode	(0X9A6);
	MakeRptCmt	(0X9AC,	"if music, put this fade in parameter : no fade in");
	MakeComm	(0X9B4,	"send music/sfx command to Z80");
	MakeCode	(x=0X9C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X9CC,	"add music index to music stack");
	MakeRptCmt	(0XA1A,	"get current walking direction");
	MakeRptCmt	(0XA20,	"get new direction");
	MakeRptCmt	(0XA28,	"if only one direction pushed, set it as primary");
	MakeCode	(0XA28);
	MakeCode	(x=0XA2E);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeRptCmt	(0XA3E,	"overwrite P2 6-button data with P1 state with walking direction");
	MakeRptCmt	(0XA4C,	"if input is the same then increment counter and ignore input");
	MakeCode	(x=0XA52);
	OpDecimal	(x,	0);
	MakeRptCmt	(0XA5C,	"keep current input only when counter reaches $18");
	MakeCode	(0XA64);
	MakeRptCmt	(0XA6C,	"if input is new");
	MakeCode	(0XA6C);
	MakeCode	(x=0XA74);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeRptCmt	(0XA7A,	"was pushing a direction");
	MakeCode	(x=0XA86);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(0XAA4);
	MakeName	(0XAA4,	"nullsub_AA4");
	MakeCode	(0XAA6);
	MakeName	(0XAA6,	"nullsub_AA6");
	MakeCode	(0XAA8);
	MakeCode	(x=0XAAC);
	OpStkvar	(x,	0);
	MakeCode	(x=0XAB2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XABE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XAD6);
	MakeName	(0XAD6,	"ApplyFadingEffect");
	MakeRptCmt	(0XB26,	"go x backwards");
	MakeCode	(0XB34);
	MakeByte	(0XB4C);
	MakeArray	(0XB4C,	0X50);
	MakeName	(0XB4C,	"FadingData");
	MakeCode	(0XB9C);
	MakeName	(0XB9C,	"HInt");
	MakeCode	(0XB9E);
	MakeName	(0XB9E,	"WaitDmaEnd");
	MakeRptCmt	(0XBA8,	"control if DMA in progress");
	MakeComm	(0XBAC,	"loop if DMA in progress");
	MakeCode	(0XBB2);
	MakeName	(0XBB2,	"GetVdpRegStatus");
	MakeCode	(x=0XBB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XBC8);
	MakeName	(0XBC8,	"SetVdpReg");
	MakeCode	(x=0XBCE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XBE2,	"store new vdp reg status");
	MakeCode	(0XBEC);
	MakeName	(0XBEC,	"ApplyLogicalOrOnVdpReg");
	MakeCode	(x=0XBF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XBFA,	"enable display");
	MakeCode	(0XC00);
	MakeName	(0XC00,	"ApplyLogicalAndOnVdpReg");
	MakeCode	(x=0XC06);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XC0E,	"disable display");
	MakeName	(0XC12,	"SendVdpCommand");
	MakeComm	(0XC22,	"get vdp reg 01");
	MakeCode	(0XC22);
	MakeName	(0XC22,	"EnableDisplayOnVdp");
	MakeCode	(0XC2C);
	MakeName	(0XC2C,	"DisableDisplayOnVdp");
	MakeCode	(0XC36);
	MakeName	(0XC36,	"EnableInterrupts");
	MakeRptCmt	(0XC3E,	"set interrupt mask to level 3");
	MakeCode	(0XC44);
	MakeName	(0XC44,	"DisableInterrupts");
	MakeRptCmt	(0XC4A,	"set interrupt mask to level 7 : no more HInt/VInt !");
	MakeCode	(0XC50);
	MakeName	(0XC50,	"EnableDisplayAndInterrupts");
	MakeCode	(0XC54);
	MakeName	(0XC54,	"DisableDisplayAndInterrupts");
	MakeCode	(x=0XC58);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeName	(0XC58,	"ActivateVIntDmaQueueProcessing");
	MakeCode	(x=0XC62);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeName	(0XC62,	"DeactivateVIntDmaQueueProcessing");
	MakeCode	(0XC6C);
	MakeName	(0XC6C,	"DuplicatePalettes");
	MakeCode	(x=0XC70);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC76);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC7C);
	OpEnumEx		(x,	0,	GetEnum("Colors"),0);
	MakeName	(0XC8A,	"ApplyVIntCramDma");
	MakeRptCmt	(0XC8C,	"disable interrupts");
	MakeRptCmt	(0XC9A,	"auto increment : 2");
	MakeRptCmt	(0XC9E,	"DMA length : 64");
	MakeRptCmt	(0XCAE,	"RAM to VRAM, address : ?");
	MakeRptCmt	(0XCB6,	"CRAM DMA Write");
	MakeCode	(x=0XCB6);
	OpHex		(x,	0);
	MakeCode	(x=0XCCE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCCE,	"CopyPalette1");
	MakeCode	(x=0XCD4);
	OpEnumEx		(x,	0,	GetEnum("Colors"),0);
	MakeName	(0XCD4,	"CopyPalette");
	MakeName	(0XCD8,	"CopyPalette_Loop");
	MakeCode	(x=0XCE0);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeName	(0XCE0,	"FadeInFromBlack");
	MakeCode	(x=0XCEC);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeName	(0XCEC,	"FadeOutToBlack");
	MakeCode	(x=0XCF8);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeName	(0XCF8,	"FadeInFromWhite");
	MakeCode	(x=0XD04);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeName	(0XD04,	"FadeOutToWhite");
	MakeName	(0XD0C,	"ExecuteFading");
	MakeRptCmt	(0XD28,	"wait until fade end");
	MakeCode	(0XD36);
	MakeName	(0XD36,	"ApplyCurrentColorFadingValue");
	MakeCode	(x=0XD3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XD5C);
	MakeCode	(0XD74);
	MakeCode	(0XD8E);
	MakeCode	(0XDAA);
	MakeCode	(0XDD2);
	MakeName	(0XDD2,	"ClearScrollAndSpriteTables");
	MakeCode	(x=0XDD6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XDD6,	"UpdateVdpSpriteTable");
	MakeRptCmt	(0XDDC,	"disable display, enable VInt, enable DMA");
	MakeRptCmt	(0XDE0,	"DMA Length : $100");
	MakeCode	(0XE0A);
	MakeName	(0XE0A,	"ClearSpriteTable");
	MakeCode	(x=0XE0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE14);
	OpEnumEx		(x,	0,	GetEnum("VdpSprites"),0);
	MakeCode	(0XE30);
	MakeName	(0XE30,	"ClearScrollTable");
	MakeRptCmt	(0XE34,	"clear scroll A table");
	MakeRptCmt	(0XE42,	"clear scroll B table");
	MakeCode	(x=0XE54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE66);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeName	(0XE66,	"WaitForVInt");
	MakeComm	(0XE76,	"wait until toggle cleared");
	MakeCode	(0XE80);
	MakeName	(0XE80,	"Sleep");
	MakeCode	(x=0XE96);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeName	(0XE96,	"RequestVdpCommandQueueProcessing");
	MakeCode	(0XEA0);
	MakeName	(0XEA0,	"WaitForVdpCommandQueueProcessing");
	MakeCode	(x=0XEA6);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeName	(0XEA6,	"EnableDmaQueueProcessing");
	MakeCode	(0XEB0);
	MakeName	(0XEB0,	"WaitForDmaQueueProcessing");
	MakeCode	(0XEB6);
	MakeCode	(x=0XEDE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XEF0);
	MakeCode	(0XF0A);
	MakeCode	(x=0XF0E);
	OpHex		(x,	0);
	MakeCode	(0XF42);
	MakeName	(0XF42,	"SwapA6");
	MakeCode	(0XF52);
	MakeCode	(x=0XF56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF8A);
	OpHex		(x,	0);
	MakeCode	(0XFE8);
	MakeCode	(x=0XFEC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1018);
	MakeName	(0X1018,	"ApplyImmediateVramDma");
	MakeCode	(x=0X1020);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X102E);
	OpSign		(x,	0);
	MakeCode	(0X10D2);
	MakeName	(0X10D2,	"ApplyVIntVramDma");
	MakeCode	(x=0X10E6);
	OpSign		(x,	0);
	MakeRptCmt	(0X10EA,	"Apply auto-increment from D1");
	MakeRptCmt	(0X10FE,	"Apply DMA Length from D0");
	MakeRptCmt	(0X111C,	"Apply source address from A0");
	MakeRptCmt	(0X1136,	"Apply VRAM write destination address from A1");
	MakeCode	(0X115A);
	MakeCode	(0X1180);
	MakeName	(0X1180,	"UpdateVdpHScrollData");
	MakeRptCmt	(0X118A,	"auto-increment : 2");
	MakeRptCmt	(0X118E,	"Check HScroll mode");
	MakeRptCmt	(0X1198,	"If HScroll mode = 00, then full screen");
	MakeRptCmt	(0X119C,	"DMA length = 2");
	MakeRptCmt	(0X11A2,	"If HScroll mode = 10, then 8 pixel rows");
	MakeCode	(0X11A2);
	MakeRptCmt	(0X11A6,	"DMA length = $200 = 512");
	MakeRptCmt	(0X11B2,	"RAM to VRAM, address :");
	MakeCode	(0X11D0);
	MakeName	(0X11D0,	"UpdateForegroundHScrollData");
	MakeCode	(x=0X11D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11EC);
	MakeName	(0X11EC,	"UpdateBackgroundHScrollData");
	MakeCode	(x=0X11F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11F8);
	MakeName	(0X11F8,	"UpdateVdpVScrollData");
	MakeCode	(0X1234);
	MakeName	(0X1234,	"UpdateForegroundVScrollData");
	MakeCode	(x=0X1238);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1250);
	MakeName	(0X1250,	"UpdateBackgroundVScrollData");
	MakeCode	(x=0X1254);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X125C);
	MakeName	(0X125C,	"ApplyImmediateVramDmaOnCompressedTiles");
	MakeCode	(0X126C);
	MakeName	(0X126C,	"DecompressTilesForVramDma");
	MakeCode	(x=0X1274);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1284);
	MakeName	(0X1284,	"ApplyVIntVramDmaOnCompressedTiles");
	MakeCode	(0X1294);
	MakeCode	(x=0X1298);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X129E);
	OpHex		(x,	0);
	MakeCode	(0X12BA);
	MakeCode	(x=0X12BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C4);
	OpHex		(x,	0);
	MakeCode	(0X12E0);
	MakeName	(0X12E0,	"DmaAndWait");
	MakeCode	(0X12E6);
	MakeName	(0X12E6,	"ApplyVramDmaFill");
	MakeRptCmt	(0X12EA,	"get last 16+ vdp reg config command ?");
	MakeRptCmt	(0X12F0,	"make sure it concerns a 16+ vdp reg");
	MakeRptCmt	(0X12F4,	"send command again");
	MakeRptCmt	(0X12FA,	"set auto increment bias number to 1");
	MakeRptCmt	(0X130E,	"DMA length counter low : 0");
	MakeRptCmt	(0X131A,	"DMA length counter high : 1");
	MakeRptCmt	(0X1324,	"VRAM fill");
	MakeRptCmt	(0X1330,	"d0 : destination address");
	MakeRptCmt	(0X1348,	"errr .. CD5 set to 1 ? doesn't correspond to any access mode");
	MakeRptCmt	(0X134C,	"destination address, second word");
	MakeRptCmt	(0X1352,	"writes 0 everytime");
	MakeRptCmt	(0X135E,	"wait for DMA free");
	MakeRptCmt	(0X1364,	"get last vdp 16+ reg config command and send it");
	MakeRptCmt	(0X1370,	"auto increment bias number : 2");
	MakeCode	(0X137E);
	MakeName	(0X137E,	"WriteAsciiNumber");
	MakeCode	(x=0X1382);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1386);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X139C,	0,	"                ");
	MakeCode	(x=0X13A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13BE);
	OpDecimal	(x,	0);
	MakeName	(0X13BE,	"tbl_PowersOfTen");
	MakeDword	(x=0X13C2);
	OpDecimal	(x,	0);
	MakeDword	(x=0X13C6);
	OpDecimal	(x,	0);
	MakeDword	(x=0X13CA);
	OpDecimal	(x,	0);
	MakeDword	(x=0X13CE);
	OpDecimal	(x,	0);
	MakeDword	(x=0X13D2);
	OpDecimal	(x,	0);
	MakeDword	(x=0X13D6);
	OpDecimal	(x,	0);
	MakeDword	(x=0X13DA);
	OpDecimal	(x,	0);
	MakeDword	(x=0X13DE);
	OpDecimal	(x,	0);
	MakeDword	(0X13E2);
	MakeCode	(0X13E6);
	MakeCode	(0X13E8);
	MakeName	(0X13E8,	"nullsub_13E8");
	MakeCode	(0X13EA);
	MakeCode	(x=0X1410);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1410,	"UpdatePlayerInputs");
	MakeCode	(x=0X1416);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1420,	"Update random seed");
	MakeCode	(x=0X144E);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeName	(0X144E,	"WaitForPlayerInput");
	MakeCode	(0X145E);
	MakeCode	(x=0X1460);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeName	(0X1460,	"WaitForPlayer1NewInput");
	MakeCode	(x=0X1470);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(0X1480);
	MakeCode	(0X1482);
	MakeCode	(0X14B2);
	MakeCode	(0X14C4);
	MakeName	(0X14C4,	"WaitForInputFor1Second");
	MakeRptCmt	(0X14C8,	"number of frames to wait, minus one");
	MakeCode	(x=0X14C8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X14CA);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeName	(0X14CA,	"WaitForInput_Loop");
	MakeCode	(0X14E2);
	MakeName	(0X14E2,	"WaitForInputFor3Seconds");
	MakeCode	(x=0X14E6);
	OpDecimal	(x,	0);
	MakeCode	(0X14EE);
	MakeName	(0X14EE,	"GenerateRandomNumber");
	MakeCode	(x=0X150E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X150E,	"PlayMusicAfterCurrentOne");
	MakeRptCmt	(0X1510,	"Wait for current music to end");
	MakeWord	(x=0X1510);
	OpEnumEx		(x,	0,	GetEnum("SoundCommands"),0);
	MakeByte	(0X1512);
	MakeArray	(0X1512,	0X4);
	MakeCode	(0X1516);
	MakeRptCmt	(0X151C,	"wait for sound command sent");
	MakeCode	(0X1526);
	MakeName	(0X1526,	"CopyBytes");
	MakeCode	(0X153E);
	MakeCode	(0X1550);
	MakeName	(0X1550,	"InitSprites");
	MakeCode	(x=0X1554);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X157C);
	MakeWord	(0X1594);
	MakeWord	(0X1596);
	MakeWord	(0X1598);
	MakeWord	(0X159A);
	MakeWord	(0X159C);
	MakeWord	(0X159E);
	MakeWord	(0X15A0);
	MakeWord	(0X15A2);
	MakeWord	(0X15A4);
	MakeWord	(0X15A6);
	MakeWord	(0X15A8);
	MakeWord	(0X15AA);
	MakeWord	(0X15AC);
	MakeWord	(0X15AE);
	MakeWord	(0X15B0);
	MakeWord	(0X15B2);
	MakeWord	(0X15B4);
	MakeWord	(0X15B6);
	MakeWord	(0X15B8);
	MakeWord	(0X15BA);
	MakeWord	(0X15BC);
	MakeWord	(0X15BE);
	MakeWord	(0X15C0);
	MakeWord	(0X15C2);
	MakeWord	(0X15C4);
	MakeWord	(0X15C6);
	MakeWord	(0X15C8);
	MakeWord	(0X15CA);
	MakeWord	(0X15CC);
	MakeWord	(0X15CE);
	MakeWord	(0X15D0);
	MakeWord	(0X15D2);
	MakeWord	(0X15D4);
	MakeWord	(0X15D6);
	MakeWord	(0X15D8);
	MakeWord	(0X15DA);
	MakeWord	(0X15DC);
	MakeWord	(0X15DE);
	MakeWord	(0X15E0);
	MakeWord	(0X15E2);
	MakeWord	(0X15E4);
	MakeWord	(0X15E6);
	MakeWord	(0X15E8);
	MakeWord	(0X15EA);
	MakeWord	(0X15EC);
	MakeWord	(0X15EE);
	MakeWord	(0X15F0);
	MakeWord	(0X15F2);
	MakeWord	(0X15F4);
	MakeWord	(0X15F6);
	MakeWord	(0X15F8);
	MakeWord	(0X15FA);
	MakeWord	(0X15FC);
	MakeWord	(0X15FE);
	MakeWord	(0X1600);
	MakeWord	(0X1602);
	MakeWord	(0X1604);
	MakeWord	(0X1606);
	MakeWord	(0X1608);
	MakeWord	(0X160A);
	MakeWord	(0X160C);
	MakeWord	(0X160E);
	MakeWord	(0X1610);
	MakeWord	(0X1612);
	MakeWord	(0X1614);
	MakeWord	(0X1616);
	MakeWord	(0X1618);
	MakeWord	(0X161A);
	MakeWord	(0X161C);
	MakeWord	(0X161E);
	MakeWord	(0X1620);
	MakeWord	(0X1622);
	MakeWord	(0X1624);
	MakeWord	(0X1626);
	MakeWord	(0X1628);
	MakeWord	(0X162A);
	MakeWord	(0X162C);
	MakeWord	(0X162E);
	MakeWord	(0X1630);
	MakeWord	(0X1632);
	MakeWord	(0X1634);
	MakeWord	(0X1636);
	MakeWord	(0X1638);
	MakeWord	(0X163A);
	MakeWord	(0X163C);
	MakeWord	(0X163E);
	MakeWord	(0X1640);
	MakeWord	(0X1642);
	MakeWord	(0X1644);
	MakeWord	(0X1646);
	MakeWord	(0X1648);
	MakeWord	(0X164A);
	MakeWord	(0X164C);
	MakeWord	(0X164E);
	MakeWord	(0X1650);
	MakeWord	(0X1652);
	MakeWord	(0X1654);
	MakeWord	(0X1656);
	MakeWord	(0X1658);
	MakeWord	(0X165A);
	MakeWord	(0X165C);
	MakeWord	(0X165E);
	MakeWord	(0X1660);
	MakeWord	(0X1662);
	MakeWord	(0X1664);
	MakeWord	(0X1666);
	MakeWord	(0X1668);
	MakeWord	(0X166A);
	MakeWord	(0X166C);
	MakeWord	(0X166E);
	MakeWord	(0X1670);
	MakeWord	(0X1672);
	MakeWord	(0X1674);
	MakeWord	(0X1676);
	MakeWord	(0X1678);
	MakeWord	(0X167A);
	MakeWord	(0X167C);
	MakeWord	(0X167E);
	MakeWord	(0X1680);
	MakeWord	(0X1682);
	MakeWord	(0X1684);
	MakeWord	(0X1686);
	MakeWord	(0X1688);
	MakeWord	(0X168A);
	MakeWord	(0X168C);
	MakeWord	(0X168E);
	MakeWord	(0X1690);
	MakeWord	(0X1692);
	MakeWord	(0X1694);
	MakeWord	(0X1696);
	MakeWord	(0X1698);
	MakeWord	(0X169A);
	MakeWord	(0X169C);
	MakeWord	(0X169E);
	MakeWord	(0X16A0);
	MakeWord	(0X16A2);
	MakeWord	(0X16A4);
	MakeWord	(0X16A6);
	MakeWord	(0X16A8);
	MakeWord	(0X16AA);
	MakeWord	(0X16AC);
	MakeWord	(0X16AE);
	MakeWord	(0X16B0);
	MakeWord	(0X16B2);
	MakeWord	(0X16B4);
	MakeWord	(0X16B6);
	MakeWord	(0X16B8);
	MakeWord	(0X16BA);
	MakeWord	(0X16BC);
	MakeWord	(0X16BE);
	MakeWord	(0X16C0);
	MakeWord	(0X16C2);
	MakeWord	(0X16C4);
	MakeWord	(0X16C6);
	MakeWord	(0X16C8);
	MakeWord	(0X16CA);
	MakeWord	(0X16CC);
	MakeWord	(0X16CE);
	MakeWord	(0X16D0);
	MakeWord	(0X16D2);
	MakeWord	(0X16D4);
	MakeWord	(0X16D6);
	MakeWord	(0X16D8);
	MakeWord	(0X16DA);
	MakeWord	(0X16DC);
	MakeWord	(0X16DE);
	MakeWord	(0X16E0);
	MakeWord	(0X16E2);
	MakeWord	(0X16E4);
	MakeWord	(0X16E6);
	MakeWord	(0X16E8);
	MakeWord	(0X16EA);
	MakeWord	(0X16EC);
	MakeWord	(0X16EE);
	MakeWord	(0X16F0);
	MakeWord	(0X16F2);
	MakeWord	(0X16F4);
	MakeWord	(0X16F6);
	MakeWord	(0X16F8);
	MakeWord	(0X16FA);
	MakeWord	(0X16FC);
	MakeWord	(0X16FE);
	MakeWord	(0X1700);
	MakeWord	(0X1702);
	MakeWord	(0X1704);
	MakeWord	(0X1706);
	MakeWord	(0X1708);
	MakeWord	(0X170A);
	MakeWord	(0X170C);
	MakeWord	(0X170E);
	MakeWord	(0X1710);
	MakeWord	(0X1712);
	MakeWord	(0X1714);
	MakeWord	(0X1716);
	MakeWord	(0X1718);
	MakeWord	(0X171A);
	MakeWord	(0X171C);
	MakeWord	(0X171E);
	MakeWord	(0X1720);
	MakeWord	(0X1722);
	MakeWord	(0X1724);
	MakeWord	(0X1726);
	MakeWord	(0X1728);
	MakeWord	(0X172A);
	MakeWord	(0X172C);
	MakeWord	(0X172E);
	MakeWord	(0X1730);
	MakeWord	(0X1732);
	MakeWord	(0X1734);
	MakeWord	(0X1736);
	MakeWord	(0X1738);
	MakeWord	(0X173A);
	MakeWord	(0X173C);
	MakeWord	(0X173E);
	MakeWord	(0X1740);
	MakeWord	(0X1742);
	MakeWord	(0X1744);
	MakeWord	(0X1746);
	MakeWord	(0X1748);
	MakeWord	(0X174A);
	MakeWord	(0X174C);
	MakeWord	(0X174E);
	MakeWord	(0X1750);
	MakeWord	(0X1752);
	MakeWord	(0X1754);
	MakeWord	(0X1756);
	MakeWord	(0X1758);
	MakeWord	(0X175A);
	MakeWord	(0X175C);
	MakeWord	(0X175E);
	MakeWord	(0X1760);
	MakeWord	(0X1762);
	MakeWord	(0X1764);
	MakeWord	(0X1766);
	MakeWord	(0X1768);
	MakeWord	(0X176A);
	MakeWord	(0X176C);
	MakeWord	(0X176E);
	MakeWord	(0X1770);
	MakeWord	(0X1772);
	MakeWord	(0X1774);
	MakeWord	(0X1776);
	MakeWord	(0X1778);
	MakeWord	(0X177A);
	MakeWord	(0X177C);
	MakeWord	(0X177E);
	MakeWord	(0X1780);
	MakeWord	(0X1782);
	MakeWord	(0X1784);
	MakeWord	(0X1786);
	MakeWord	(0X1788);
	MakeWord	(0X178A);
	MakeWord	(0X178C);
	MakeWord	(0X178E);
	MakeWord	(0X1790);
	MakeWord	(0X1792);
	MakeCode	(0X1794);
	MakeCode	(0X17B4);
	MakeCode	(0X17C0);
	MakeCode	(0X17FA);
	MakeCode	(0X1800);
	MakeByte	(0X1814);
	MakeByte	(0X1815);
	MakeByte	(0X1816);
	MakeByte	(0X1817);
	MakeByte	(0X1818);
	MakeByte	(0X1819);
	MakeByte	(0X181A);
	MakeByte	(0X181B);
	MakeByte	(0X181C);
	MakeByte	(0X181D);
	MakeByte	(0X181E);
	MakeByte	(0X181F);
	MakeByte	(0X1820);
	MakeByte	(0X1821);
	MakeByte	(0X1822);
	MakeByte	(0X1823);
	MakeByte	(0X1824);
	MakeByte	(0X1825);
	MakeByte	(0X1826);
	MakeByte	(0X1827);
	MakeByte	(0X1828);
	MakeByte	(0X1829);
	MakeByte	(0X182A);
	MakeByte	(0X182B);
	MakeByte	(0X182C);
	MakeByte	(0X182D);
	MakeByte	(0X182E);
	MakeByte	(0X182F);
	MakeByte	(0X1830);
	MakeByte	(0X1831);
	MakeByte	(0X1832);
	MakeByte	(0X1833);
	MakeByte	(0X1834);
	MakeByte	(0X1835);
	MakeByte	(0X1836);
	MakeByte	(0X1837);
	MakeByte	(0X1838);
	MakeByte	(0X1839);
	MakeByte	(0X183A);
	MakeByte	(0X183B);
	MakeByte	(0X183C);
	MakeByte	(0X183D);
	MakeByte	(0X183E);
	MakeByte	(0X183F);
	MakeByte	(0X1840);
	MakeByte	(0X1841);
	MakeByte	(0X1842);
	MakeByte	(0X1843);
	MakeByte	(0X1844);
	MakeByte	(0X1845);
	MakeByte	(0X1846);
	MakeByte	(0X1847);
	MakeByte	(0X1848);
	MakeByte	(0X1849);
	MakeByte	(0X184A);
	MakeByte	(0X184B);
	MakeByte	(0X184C);
	MakeByte	(0X184D);
	MakeByte	(0X184E);
	MakeByte	(0X184F);
	MakeByte	(0X1850);
	MakeByte	(0X1851);
	MakeByte	(0X1852);
	MakeByte	(0X1853);
	MakeByte	(0X1854);
	MakeByte	(0X1855);
	MakeCode	(0X1856);
	MakeCode	(x=0X185A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1880);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X18A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X18C4);
	MakeCode	(x=0X18CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X18DC);
	MakeCode	(0X18EC);
	MakeName	(0X18EC,	"CreateMessageWindow");
	MakeCode	(x=0X1902);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X191C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X191C,	"OpenMessageWindow");
	MakeCode	(x=0X1932);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1948);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1948,	"LoadMessageWindowLayout_TopBorder");
	MakeCode	(x=0X194C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0X1950);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0X1954);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	ExtLinA		(0X195A,	0,	"                ");
	ExtLinA		(0X195A,	1,	"                ; unused code");
	MakeCode	(0X195A);
	MakeCode	(x=0X195C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0X1960);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0X1964);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	ExtLinB		(0X196E,	0,	"; ---------------------------------------------------------------------------");
	MakeCode	(x=0X1972);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0X1972,	"LoadMessageWindowLayout_BottomBorder");
	MakeCode	(x=0X1976);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0X197A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0X197E,	"LoadMessageWindowSingleRow");
	ExtLinB		(0X1986,	0,	"                ");
	MakeCode	(x=0X198E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X198E,	"HandleDialogueTypewriting");
	MakeCode	(x=0X1994);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X199A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X19BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X19DA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X19E4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X19E8);
	MakeArray	(0X19E8,	0X4);
	MakeCode	(0X19EC);
	MakeCode	(x=0X19F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1A0E);
	MakeName	(0X1A0E,	"HandleBlinkingDialogueCursor");
	MakeCode	(x=0X1A1A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1A32);
	OpHex		(x,	0);
	MakeCode	(x=0X1A44);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1A4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1A74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1A7A);
	OpHex		(x,	0);
	MakeCode	(0X1A92);
	MakeName	(0X1A92,	"CloseMessageWindow");
	MakeCode	(x=0X1AA0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1AB6);
	MakeName	(0X1AB6,	"LoadMessageWindowLayout");
	MakeCode	(x=0X1ABA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0X1ABE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0X1AC2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	ExtLinB		(0X1ACC,	0,	"                ");
	MakeCode	(0X1AD4);
	MakeName	(0X1AD4,	"LoadMessageWindowLayout_Content");
	MakeCode	(x=0X1ADE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0X1AE4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	ExtLinB		(0X1AE8,	0,	"                ");
	MakeCode	(0X1AF0);
	MakeCode	(x=0X1B1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1B34);
	MakeCode	(0X1B4A);
	MakeCode	(0X1B6E);
	MakeCode	(x=0X1B74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1B98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1BA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1BB8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1BCE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1BEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1BF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1BFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinA		(0X1C0E,	0,	"; sprite properties data");
	ExtLinA		(0X1C0E,	1,	"                ");
	MakeWord	(0X1C0E);
	MakeByte	(0X1C10);
	MakeByte	(0X1C11);
	MakeWord	(0X1C12);
	MakeWord	(0X1C14);
	MakeWord	(0X1C16);
	MakeByte	(0X1C18);
	MakeByte	(0X1C19);
	MakeWord	(0X1C1A);
	MakeWord	(0X1C1C);
	MakeWord	(0X1C1E);
	MakeByte	(0X1C20);
	MakeByte	(0X1C21);
	MakeWord	(0X1C22);
	MakeWord	(0X1C24);
	MakeWord	(0X1C26);
	MakeByte	(0X1C28);
	MakeByte	(0X1C29);
	MakeWord	(0X1C2A);
	MakeWord	(0X1C2C);
	MakeWord	(0X1C2E);
	MakeByte	(0X1C30);
	MakeByte	(0X1C31);
	MakeWord	(0X1C32);
	MakeWord	(0X1C34);
	MakeWord	(0X1C36);
	MakeByte	(0X1C38);
	MakeByte	(0X1C39);
	MakeWord	(0X1C3A);
	MakeWord	(0X1C3C);
	MakeWord	(0X1C3E);
	MakeByte	(0X1C40);
	MakeByte	(0X1C41);
	MakeWord	(0X1C42);
	MakeWord	(0X1C44);
	MakeWord	(0X1C46);
	MakeByte	(0X1C48);
	MakeByte	(0X1C49);
	MakeWord	(0X1C4A);
	MakeWord	(0X1C4C);
	MakeWord	(0X1C4E);
	MakeByte	(0X1C50);
	MakeByte	(0X1C51);
	MakeWord	(0X1C52);
	MakeWord	(0X1C54);
	MakeWord	(0X1C56);
	MakeByte	(0X1C58);
	MakeByte	(0X1C59);
	MakeWord	(0X1C5A);
	MakeWord	(0X1C5C);
	MakeWord	(0X1C5E);
	MakeByte	(0X1C60);
	MakeByte	(0X1C61);
	MakeWord	(0X1C62);
	MakeWord	(0X1C64);
	MakeWord	(0X1C66);
	MakeByte	(0X1C68);
	MakeByte	(0X1C69);
	MakeWord	(0X1C6A);
	MakeWord	(0X1C6C);
	MakeWord	(0X1C6E);
	MakeByte	(0X1C70);
	MakeByte	(0X1C71);
	MakeWord	(0X1C72);
	MakeWord	(0X1C74);
	MakeWord	(0X1C76);
	MakeByte	(0X1C78);
	MakeByte	(0X1C79);
	MakeWord	(0X1C7A);
	MakeWord	(0X1C7C);
	MakeWord	(0X1C7E);
	MakeByte	(0X1C80);
	MakeByte	(0X1C81);
	MakeWord	(0X1C82);
	MakeWord	(0X1C84);
	MakeWord	(0X1C86);
	MakeByte	(0X1C88);
	MakeByte	(0X1C89);
	MakeWord	(0X1C8A);
	MakeWord	(0X1C8C);
	MakeWord	(0X1C8E);
	MakeByte	(0X1C90);
	MakeByte	(0X1C91);
	MakeWord	(0X1C92);
	MakeWord	(0X1C94);
	MakeWord	(0X1C96);
	MakeByte	(0X1C98);
	MakeByte	(0X1C99);
	MakeWord	(0X1C9A);
	MakeWord	(0X1C9C);
	MakeWord	(0X1C9E);
	MakeByte	(0X1CA0);
	MakeByte	(0X1CA1);
	MakeWord	(0X1CA2);
	MakeWord	(0X1CA4);
	MakeWord	(0X1CA6);
	MakeByte	(0X1CA8);
	MakeByte	(0X1CA9);
	MakeWord	(0X1CAA);
	MakeWord	(0X1CAC);
	MakeWord	(0X1CAE);
	MakeByte	(0X1CB0);
	MakeByte	(0X1CB1);
	MakeWord	(0X1CB2);
	MakeWord	(0X1CB4);
	MakeWord	(0X1CB6);
	MakeByte	(0X1CB8);
	MakeByte	(0X1CB9);
	MakeWord	(0X1CBA);
	MakeWord	(0X1CBC);
	MakeWord	(0X1CBE);
	MakeByte	(0X1CC0);
	MakeByte	(0X1CC1);
	MakeWord	(0X1CC2);
	MakeWord	(0X1CC4);
	MakeCode	(0X1CC6);
	MakeCode	(x=0X1CCC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1CD8);
	MakeCode	(x=0X1CF8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1CFE);
	MakeCode	(x=0X1D04);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1D10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1D20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1D2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1D36);
	MakeCode	(0X1D4A);
	MakeCode	(x=0X1D52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1D6A);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D6C);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D6E);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D70);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D72);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D74);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D76);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D78);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D7A);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D7C);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D7E);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D80);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D82);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D84);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D86);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D88);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D8A);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D8C);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeWord	(x=0X1D8E);
	OpOff		(x,	0,	0X1D6A);
	OpOff		(x,	128,	0X1D6A);
	OpOff		(x,	1,	0X1D6A);
	OpOff		(x,	129,	0X1D6A);
	MakeCode	(0X1D90);
	MakeCode	(0X1D96);
	MakeCode	(0X1D9E);
	MakeCode	(0X1DA6);
	MakeCode	(0X1DB2);
	MakeCode	(0X1DBE);
	MakeCode	(0X1DCA);
	MakeCode	(0X1DD6);
	MakeCode	(0X1DE2);
	MakeCode	(0X1DEE);
	MakeCode	(0X1DFA);
	MakeCode	(0X1E06);
	MakeCode	(0X1E14);
	MakeCode	(0X1E22);
	MakeCode	(0X1E30);
	MakeCode	(0X1E3E);
	MakeCode	(0X1E4C);
	MakeCode	(0X1E5A);
	MakeCode	(0X1E68);
	MakeCode	(0X1E76);
	MakeCode	(x=0X1E84);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1E9A);
	MakeByte	(0X1E9E);
	MakeByte	(0X1E9F);
	MakeByte	(0X1EA0);
	MakeByte	(0X1EA1);
	MakeByte	(0X1EA2);
	MakeByte	(0X1EA3);
	MakeByte	(0X1EA4);
	MakeByte	(0X1EA5);
	MakeByte	(0X1EA6);
	MakeByte	(0X1EA7);
	MakeByte	(0X1EA8);
	MakeByte	(0X1EA9);
	MakeByte	(0X1EAA);
	MakeByte	(0X1EAB);
	MakeByte	(0X1EAC);
	MakeByte	(0X1EAD);
	MakeByte	(0X1EAE);
	MakeByte	(0X1EAF);
	MakeByte	(0X1EB0);
	MakeByte	(0X1EB1);
	MakeByte	(0X1EB2);
	MakeByte	(0X1EB3);
	MakeByte	(0X1EB4);
	MakeByte	(0X1EB5);
	MakeByte	(0X1EB6);
	MakeByte	(0X1EB7);
	MakeByte	(0X1EB8);
	MakeByte	(0X1EB9);
	MakeByte	(0X1EBA);
	MakeByte	(0X1EBB);
	MakeByte	(0X1EBC);
	MakeByte	(0X1EBD);
	MakeByte	(0X1EBE);
	MakeByte	(0X1EBF);
	MakeByte	(0X1EC0);
	MakeByte	(0X1EC1);
	MakeByte	(0X1EC2);
	MakeByte	(0X1EC3);
	MakeByte	(0X1EC4);
	MakeByte	(0X1EC5);
	MakeByte	(0X1EC6);
	MakeByte	(0X1EC7);
	MakeByte	(0X1EC8);
	MakeByte	(0X1EC9);
	MakeByte	(0X1ECA);
	MakeByte	(0X1ECB);
	MakeByte	(0X1ECC);
	MakeByte	(0X1ECD);
	MakeByte	(0X1ECE);
	MakeByte	(0X1ECF);
	MakeByte	(0X1ED0);
	MakeByte	(0X1ED1);
	MakeByte	(0X1ED2);
	MakeByte	(0X1ED3);
	MakeByte	(0X1ED4);
	MakeByte	(0X1ED5);
	MakeByte	(0X1ED6);
	MakeByte	(0X1ED7);
	MakeByte	(0X1ED8);
	MakeByte	(0X1ED9);
	MakeByte	(0X1EDA);
	MakeByte	(0X1EDB);
	MakeByte	(0X1EDC);
	MakeByte	(0X1EDD);
	MakeByte	(0X1EDE);
	MakeByte	(0X1EDF);
	MakeByte	(0X1EE0);
	MakeByte	(0X1EE1);
	MakeByte	(0X1EE2);
	MakeByte	(0X1EE3);
	MakeByte	(0X1EE4);
	MakeByte	(0X1EE5);
	MakeByte	(0X1EE6);
	MakeByte	(0X1EE7);
	MakeByte	(0X1EE8);
	MakeByte	(0X1EE9);
	MakeByte	(0X1EEA);
	MakeByte	(0X1EEB);
	MakeByte	(0X1EEC);
	MakeByte	(0X1EED);
	MakeByte	(0X1EEE);
	MakeByte	(0X1EEF);
	MakeByte	(0X1EF0);
	MakeByte	(0X1EF1);
	MakeByte	(0X1EF2);
	MakeByte	(0X1EF3);
	MakeByte	(0X1EF4);
	MakeByte	(0X1EF5);
	MakeByte	(0X1EF6);
	MakeByte	(0X1EF7);
	MakeByte	(0X1EF8);
	MakeByte	(0X1EF9);
	MakeByte	(0X1EFA);
	MakeByte	(0X1EFB);
	MakeByte	(0X1EFC);
	MakeByte	(0X1EFD);
	MakeByte	(0X1EFE);
	MakeByte	(0X1EFF);
	MakeByte	(0X1F00);
	MakeByte	(0X1F01);
	MakeByte	(0X1F02);
	MakeByte	(0X1F03);
	MakeByte	(0X1F04);
	MakeByte	(0X1F05);
	MakeByte	(0X1F06);
	MakeByte	(0X1F07);
	MakeByte	(0X1F08);
	MakeByte	(0X1F09);
	MakeByte	(0X1F0A);
	MakeByte	(0X1F0B);
	MakeByte	(0X1F0C);
	MakeByte	(0X1F0D);
	MakeByte	(0X1F0E);
	MakeByte	(0X1F0F);
	MakeByte	(0X1F10);
	MakeByte	(0X1F11);
	MakeByte	(0X1F12);
	MakeByte	(0X1F13);
	MakeByte	(0X1F14);
	MakeByte	(0X1F15);
	MakeByte	(0X1F16);
	MakeByte	(0X1F17);
	MakeByte	(0X1F18);
	MakeByte	(0X1F19);
	MakeByte	(0X1F1A);
	MakeByte	(0X1F1B);
	MakeByte	(0X1F1C);
	MakeByte	(0X1F1D);
	MakeByte	(0X1F1E);
	MakeByte	(0X1F1F);
	MakeByte	(0X1F20);
	MakeByte	(0X1F21);
	MakeByte	(0X1F22);
	MakeByte	(0X1F23);
	MakeByte	(0X1F24);
	MakeByte	(0X1F25);
	MakeByte	(0X1F26);
	MakeByte	(0X1F27);
	MakeByte	(0X1F28);
	MakeByte	(0X1F29);
	MakeByte	(0X1F2A);
	MakeByte	(0X1F2B);
	MakeByte	(0X1F2C);
	MakeByte	(0X1F2D);
	MakeByte	(0X1F2E);
	MakeByte	(0X1F2F);
	MakeByte	(0X1F30);
	MakeByte	(0X1F31);
	MakeByte	(0X1F32);
	MakeByte	(0X1F33);
	MakeByte	(0X1F34);
	MakeByte	(0X1F35);
	MakeByte	(0X1F36);
	MakeByte	(0X1F37);
	MakeByte	(0X1F38);
	MakeByte	(0X1F39);
	MakeByte	(0X1F3A);
	MakeByte	(0X1F3B);
	MakeByte	(0X1F3C);
	MakeByte	(0X1F3D);
	MakeByte	(0X1F3E);
	MakeByte	(0X1F3F);
	MakeByte	(0X1F40);
	MakeByte	(0X1F41);
	MakeByte	(0X1F42);
	MakeByte	(0X1F43);
	MakeByte	(0X1F44);
	MakeByte	(0X1F45);
	MakeByte	(0X1F46);
	MakeByte	(0X1F47);
	MakeByte	(0X1F48);
	MakeByte	(0X1F49);
	MakeByte	(0X1F4A);
	MakeByte	(0X1F4B);
	MakeByte	(0X1F4C);
	MakeByte	(0X1F4D);
	MakeByte	(0X1F4E);
	MakeByte	(0X1F4F);
	MakeByte	(0X1F50);
	MakeByte	(0X1F51);
	MakeByte	(0X1F52);
	MakeByte	(0X1F53);
	MakeByte	(0X1F54);
	MakeByte	(0X1F55);
	MakeByte	(0X1F56);
	MakeByte	(0X1F57);
	MakeByte	(0X1F58);
	MakeByte	(0X1F59);
	MakeByte	(0X1F5A);
	MakeByte	(0X1F5B);
	MakeByte	(0X1F5C);
	MakeByte	(0X1F5D);
	MakeByte	(0X1F5E);
	MakeByte	(0X1F5F);
	MakeByte	(0X1F60);
	MakeByte	(0X1F61);
	MakeByte	(0X1F62);
	MakeByte	(0X1F63);
	MakeByte	(0X1F64);
	MakeByte	(0X1F65);
	MakeByte	(0X1F66);
	MakeByte	(0X1F67);
	MakeByte	(0X1F68);
	MakeByte	(0X1F69);
	MakeByte	(0X1F6A);
	MakeByte	(0X1F6B);
	MakeByte	(0X1F6C);
	MakeByte	(0X1F6D);
	MakeByte	(0X1F6E);
	MakeByte	(0X1F6F);
	MakeByte	(0X1F70);
	MakeByte	(0X1F71);
	MakeByte	(0X1F72);
	MakeByte	(0X1F73);
	MakeByte	(0X1F74);
	MakeByte	(0X1F75);
	MakeByte	(0X1F76);
	MakeByte	(0X1F77);
	MakeByte	(0X1F78);
	MakeByte	(0X1F79);
	MakeByte	(0X1F7A);
	MakeByte	(0X1F7B);
	MakeByte	(0X1F7C);
	MakeByte	(0X1F7D);
	MakeByte	(0X1F7E);
	MakeByte	(0X1F7F);
	MakeByte	(0X1F80);
	MakeByte	(0X1F81);
	MakeByte	(0X1F82);
	MakeByte	(0X1F83);
	MakeByte	(0X1F84);
	MakeByte	(0X1F85);
	MakeByte	(0X1F86);
	MakeByte	(0X1F87);
	MakeByte	(0X1F88);
	MakeByte	(0X1F89);
	MakeByte	(0X1F8A);
	MakeByte	(0X1F8B);
	MakeByte	(0X1F8C);
	MakeByte	(0X1F8D);
	MakeByte	(0X1F8E);
	MakeByte	(0X1F8F);
	MakeByte	(0X1F90);
	MakeByte	(0X1F91);
	MakeByte	(0X1F92);
	MakeByte	(0X1F93);
	MakeByte	(0X1F94);
	MakeByte	(0X1F95);
	MakeByte	(0X1F96);
	MakeByte	(0X1F97);
	MakeByte	(0X1F98);
	MakeByte	(0X1F99);
	MakeByte	(0X1F9A);
	MakeByte	(0X1F9B);
	MakeByte	(0X1F9C);
	MakeByte	(0X1F9D);
	MakeByte	(0X1F9E);
	MakeByte	(0X1F9F);
	MakeByte	(0X1FA0);
	MakeByte	(0X1FA1);
	MakeByte	(0X1FA2);
	MakeByte	(0X1FA3);
	MakeByte	(0X1FA4);
	MakeByte	(0X1FA5);
	MakeByte	(0X1FA6);
	MakeByte	(0X1FA7);
	MakeByte	(0X1FA8);
	MakeByte	(0X1FA9);
	MakeByte	(0X1FAA);
	MakeByte	(0X1FAB);
	MakeByte	(0X1FAC);
	MakeByte	(0X1FAD);
	MakeByte	(0X1FAE);
	MakeByte	(0X1FAF);
	MakeByte	(0X1FB0);
	MakeByte	(0X1FB1);
	MakeByte	(0X1FB2);
	MakeByte	(0X1FB3);
	MakeByte	(0X1FB4);
	MakeByte	(0X1FB5);
	MakeByte	(0X1FB6);
	MakeByte	(0X1FB7);
	MakeByte	(0X1FB8);
	MakeByte	(0X1FB9);
	MakeByte	(0X1FBA);
	MakeByte	(0X1FBB);
	MakeByte	(0X1FBC);
	MakeByte	(0X1FBD);
	MakeByte	(0X1FBE);
	MakeByte	(0X1FBF);
	MakeByte	(0X1FC0);
	MakeByte	(0X1FC1);
	MakeByte	(0X1FC2);
	MakeByte	(0X1FC3);
	MakeByte	(0X1FC4);
	MakeByte	(0X1FC5);
	MakeByte	(0X1FC6);
	MakeByte	(0X1FC7);
	MakeByte	(0X1FC8);
	MakeByte	(0X1FC9);
	MakeByte	(0X1FCA);
	MakeByte	(0X1FCB);
	MakeByte	(0X1FCC);
	MakeByte	(0X1FCD);
	MakeByte	(0X1FCE);
	MakeByte	(0X1FCF);
	MakeByte	(0X1FD0);
	MakeByte	(0X1FD1);
	MakeByte	(0X1FD2);
	MakeByte	(0X1FD3);
	MakeByte	(0X1FD4);
	MakeByte	(0X1FD5);
	MakeByte	(0X1FD6);
	MakeByte	(0X1FD7);
	MakeByte	(0X1FD8);
	MakeByte	(0X1FD9);
	MakeByte	(0X1FDA);
	MakeByte	(0X1FDB);
	MakeByte	(0X1FDC);
	MakeByte	(0X1FDD);
	MakeByte	(0X1FDE);
	MakeByte	(0X1FDF);
	MakeByte	(0X1FE0);
	MakeByte	(0X1FE1);
	MakeByte	(0X1FE2);
	MakeByte	(0X1FE3);
	MakeByte	(0X1FE4);
	MakeByte	(0X1FE5);
	MakeByte	(0X1FE6);
	MakeByte	(0X1FE7);
	MakeByte	(0X1FE8);
	MakeByte	(0X1FE9);
	MakeByte	(0X1FEA);
	MakeByte	(0X1FEB);
	MakeByte	(0X1FEC);
	MakeByte	(0X1FED);
	MakeByte	(0X1FEE);
	MakeByte	(0X1FEF);
	MakeByte	(0X1FF0);
	MakeByte	(0X1FF1);
	MakeByte	(0X1FF2);
	MakeByte	(0X1FF3);
	MakeByte	(0X1FF4);
	MakeByte	(0X1FF5);
	MakeByte	(0X1FF6);
	MakeByte	(0X1FF7);
	MakeByte	(0X1FF8);
	MakeByte	(0X1FF9);
	MakeByte	(0X1FFA);
	MakeByte	(0X1FFB);
	MakeByte	(0X1FFC);
	MakeByte	(0X1FFD);
	MakeByte	(0X1FFE);
	MakeByte	(0X1FFF);
	MakeByte	(0X2000);
	MakeByte	(0X2001);
	MakeByte	(0X2002);
	MakeByte	(0X2003);
	MakeByte	(0X2004);
	MakeByte	(0X2005);
	MakeByte	(0X2006);
	MakeByte	(0X2007);
	MakeByte	(0X2008);
	MakeByte	(0X2009);
	MakeByte	(0X200A);
	MakeByte	(0X200B);
	MakeByte	(0X200C);
	MakeByte	(0X200D);
	MakeByte	(0X200E);
	MakeByte	(0X200F);
	MakeByte	(0X2010);
	MakeByte	(0X2011);
	MakeByte	(0X2012);
	MakeByte	(0X2013);
	MakeByte	(0X2014);
	MakeByte	(0X2015);
	MakeByte	(0X2016);
	MakeByte	(0X2017);
	MakeByte	(0X2018);
	MakeByte	(0X2019);
	MakeByte	(0X201A);
	MakeByte	(0X201B);
	MakeByte	(0X201C);
	MakeByte	(0X201D);
	MakeByte	(0X201E);
	MakeByte	(0X201F);
	MakeByte	(0X2020);
	MakeByte	(0X2021);
	MakeByte	(0X2022);
	MakeByte	(0X2023);
	MakeByte	(0X2024);
	MakeByte	(0X2025);
	MakeByte	(0X2026);
	MakeByte	(0X2027);
	MakeByte	(0X2028);
	MakeByte	(0X2029);
	MakeByte	(0X202A);
	MakeByte	(0X202B);
	MakeByte	(0X202C);
	MakeByte	(0X202D);
	MakeByte	(0X202E);
	MakeByte	(0X202F);
	MakeByte	(0X2030);
	MakeByte	(0X2031);
	MakeByte	(0X2032);
	MakeByte	(0X2033);
	MakeByte	(0X2034);
	MakeByte	(0X2035);
	MakeByte	(0X2036);
	MakeByte	(0X2037);
	MakeByte	(0X2038);
	MakeByte	(0X2039);
	MakeByte	(0X203A);
	MakeByte	(0X203B);
	MakeByte	(0X203C);
	MakeByte	(0X203D);
	MakeByte	(0X203E);
	MakeByte	(0X203F);
	MakeByte	(0X2040);
	MakeByte	(0X2041);
	MakeByte	(0X2042);
	MakeByte	(0X2043);
	MakeByte	(0X2044);
	MakeByte	(0X2045);
	MakeCode	(0X2046);
	MakeName	(0X2046,	"LoadText");
	MakeRptCmt	(0X206C,	"keep string pointer");
	MakeCode	(0X208C);
	MakeCode	(0X20BA);
	MakeCode	(0X20DA);
	MakeCode	(0X20E0);
	MakeCode	(0X20FE);
	MakeCode	(0X2100);
	MakeRptCmt	(0X2112,	"keep length of current string");
	MakeCode	(x=0X2118);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X2124,	"save string index");
	MakeCode	(0X2124);
	MakeName	(0X2124,	"FindString");
	MakeRptCmt	(0X212A,	"string index -> bank pointer offset");
	MakeRptCmt	(0X212E,	"load script bank pointer");
	MakeRptCmt	(0X2138,	"restore string index");
	MakeRptCmt	(0X2142,	"first string byte : string length");
	MakeRptCmt	(0X2148,	"loop until wanted string reached");
	MakeCode	(0X214A);
	MakeCode	(0X214C);
	MakeName	(0X214C,	"GetNextTextSymbol");
	MakeCode	(x=0X217A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2184);
	MakeCode	(0X218A);
	MakeCode	(0X219A);
	MakeCode	(x=0X21AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21B8);
	MakeCode	(0X21C2);
	MakeCode	(0X21C8);
	MakeCode	(0X21D4);
	MakeCode	(0X21DE);
	MakeCode	(0X21E2);
	MakeCode	(0X21E6);
	MakeCode	(0X21EA);
	MakeCode	(0X21EE);
	MakeName	(0X21EE,	"j_nullsub_22A2");
	MakeCode	(0X21F2);
	MakeCode	(0X21F6);
	MakeCode	(0X21FA);
	MakeName	(0X21FA,	"j_nullsub_2318");
	MakeCode	(0X21FE);
	MakeCode	(0X2202);
	MakeCode	(0X2206);
	MakeCode	(0X220A);
	MakeCode	(0X220E);
	MakeCode	(0X2212);
	MakeCode	(0X2216);
	MakeCode	(0X221A);
	MakeCode	(0X221E);
	MakeByte	(0X2222);
	MakeArray	(0X2222,	0X10);
	MakeCode	(0X2232);
	MakeName	(0X2232,	"j_nullsub_2466");
	MakeByte	(0X2236);
	MakeArray	(0X2236,	0X4);
	MakeCode	(0X223A);
	MakeCode	(0X223E);
	MakeCode	(0X2242);
	MakeCode	(0X2246);
	MakeCode	(0X224C);
	MakeCode	(0X2270);
	MakeCode	(0X2280);
	MakeCode	(0X2296);
	MakeCode	(0X22A2);
	MakeName	(0X22A2,	"nullsub_22A2");
	MakeCode	(0X22A4);
	MakeCode	(0X22B0);
	MakeCode	(0X22BC);
	MakeCode	(0X22C8);
	MakeCode	(x=0X22D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X22F2);
	MakeCode	(0X22FC);
	MakeCode	(0X2308);
	MakeCode	(0X230A);
	MakeCode	(0X2318);
	MakeName	(0X2318,	"nullsub_2318");
	MakeCode	(0X231A);
	MakeCode	(x=0X2334);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(0X234E);
	MakeCode	(0X2354);
	MakeCode	(x=0X235A);
	OpDecimal	(x,	0);
	MakeCode	(0X237E);
	MakeCode	(x=0X238A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2396);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23B4);
	MakeByte	(0X23D2);
	MakeArray	(0X23D2,	0X4);
	MakeCode	(0X23D6);
	MakeCode	(0X23DE);
	MakeCode	(x=0X23E6);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(x=0X23EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2404);
	MakeCode	(0X241A);
	MakeCode	(0X2430);
	MakeCode	(0X244C);
	MakeCode	(x=0X2452);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(0X2458);
	MakeCode	(0X2466);
	MakeName	(0X2466,	"nullsub_2466");
	MakeCode	(0X2468);
	MakeCode	(0X2478);
	MakeCode	(0X247E);
	MakeCode	(0X2486);
	MakeCode	(x=0X248E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X24AA);
	MakeWord	(0X24AC);
	MakeWord	(0X24AE);
	MakeWord	(0X24B0);
	MakeWord	(0X24B2);
	MakeWord	(0X24B4);
	MakeWord	(0X24B6);
	MakeWord	(0X24B8);
	MakeWord	(0X24BA);
	MakeWord	(0X24BC);
	MakeWord	(0X24BE);
	MakeWord	(0X24C0);
	MakeWord	(0X24C2);
	MakeWord	(0X24C4);
	MakeWord	(0X24C6);
	MakeWord	(0X24C8);
	MakeWord	(0X24CA);
	MakeWord	(0X24CC);
	MakeWord	(0X24CE);
	MakeByte	(0X24D0);
	MakeByte	(0X24D1);
	MakeByte	(0X24D2);
	MakeByte	(0X24D3);
	MakeByte	(0X24D4);
	MakeByte	(0X24D5);
	MakeByte	(0X24D6);
	MakeByte	(0X24D7);
	MakeByte	(0X24D8);
	MakeByte	(0X24D9);
	MakeByte	(0X24DA);
	MakeByte	(0X24DB);
	MakeByte	(0X24DC);
	MakeByte	(0X24DD);
	MakeByte	(0X24DE);
	MakeByte	(0X24DF);
	MakeByte	(0X24E0);
	MakeByte	(0X24E1);
	MakeByte	(0X24E2);
	MakeByte	(0X24E3);
	MakeByte	(0X24E4);
	MakeByte	(0X24E5);
	MakeByte	(0X24E6);
	MakeByte	(0X24E7);
	MakeByte	(0X24E8);
	MakeByte	(0X24E9);
	MakeByte	(0X24EA);
	MakeByte	(0X24EB);
	MakeByte	(0X24EC);
	MakeByte	(0X24ED);
	MakeByte	(0X24EE);
	MakeByte	(0X24EF);
	MakeByte	(0X24F0);
	MakeByte	(0X24F1);
	MakeByte	(0X24F2);
	MakeByte	(0X24F3);
	MakeByte	(0X24F4);
	MakeByte	(0X24F5);
	MakeByte	(0X24F6);
	MakeByte	(0X24F7);
	MakeByte	(0X24F8);
	MakeByte	(0X24F9);
	MakeByte	(0X24FA);
	MakeByte	(0X24FB);
	MakeByte	(0X24FC);
	MakeByte	(0X24FD);
	MakeByte	(0X24FE);
	MakeByte	(0X24FF);
	MakeByte	(0X2500);
	MakeByte	(0X2501);
	MakeByte	(0X2502);
	MakeByte	(0X2503);
	MakeByte	(0X2504);
	MakeByte	(0X2505);
	MakeByte	(0X2506);
	MakeByte	(0X2507);
	MakeByte	(0X2508);
	MakeByte	(0X2509);
	MakeByte	(0X250A);
	MakeByte	(0X250B);
	MakeByte	(0X250C);
	MakeByte	(0X250D);
	MakeByte	(0X250E);
	MakeByte	(0X250F);
	MakeByte	(0X2510);
	MakeByte	(0X2511);
	MakeByte	(0X2512);
	MakeByte	(0X2513);
	MakeByte	(0X2514);
	MakeByte	(0X2515);
	MakeByte	(0X2516);
	MakeByte	(0X2517);
	MakeByte	(0X2518);
	MakeByte	(0X2519);
	MakeByte	(0X251A);
	MakeByte	(0X251B);
	MakeByte	(0X251C);
	MakeByte	(0X251D);
	MakeByte	(0X251E);
	MakeByte	(0X251F);
	MakeByte	(0X2520);
	MakeByte	(0X2521);
	MakeByte	(0X2522);
	MakeByte	(0X2523);
	MakeByte	(0X2524);
	MakeByte	(0X2525);
	MakeByte	(0X2526);
	MakeByte	(0X2527);
	MakeByte	(0X2528);
	MakeByte	(0X2529);
	MakeByte	(0X252A);
	MakeByte	(0X252B);
	MakeByte	(0X252C);
	MakeByte	(0X252D);
	MakeByte	(0X252E);
	MakeByte	(0X252F);
	MakeByte	(0X2530);
	MakeByte	(0X2531);
	MakeByte	(0X2532);
	MakeByte	(0X2533);
	MakeByte	(0X2534);
	MakeByte	(0X2535);
	MakeByte	(0X2536);
	MakeByte	(0X2537);
	MakeByte	(0X2538);
	MakeByte	(0X2539);
	MakeByte	(0X253A);
	MakeByte	(0X253B);
	MakeByte	(0X253C);
	MakeByte	(0X253D);
	MakeByte	(0X253E);
	MakeByte	(0X253F);
	MakeByte	(0X2540);
	MakeByte	(0X2541);
	MakeByte	(0X2542);
	MakeByte	(0X2543);
	MakeByte	(0X2544);
	MakeByte	(0X2545);
	MakeByte	(0X2546);
	MakeByte	(0X2547);
	MakeByte	(0X2548);
	MakeByte	(0X2549);
	MakeByte	(0X254A);
	MakeByte	(0X254B);
	MakeByte	(0X254C);
	MakeByte	(0X254D);
	MakeByte	(0X254E);
	MakeByte	(0X254F);
	MakeByte	(0X2550);
	MakeByte	(0X2551);
	MakeByte	(0X2552);
	MakeByte	(0X2553);
	MakeByte	(0X2554);
	MakeByte	(0X2555);
	MakeByte	(0X2556);
	MakeByte	(0X2557);
	MakeByte	(0X2558);
	MakeByte	(0X2559);
	MakeByte	(0X255A);
	MakeByte	(0X255B);
	MakeByte	(0X255C);
	MakeByte	(0X255D);
	MakeByte	(0X255E);
	MakeByte	(0X255F);
	MakeByte	(0X2560);
	MakeByte	(0X2561);
	MakeByte	(0X2562);
	MakeByte	(0X2563);
	MakeByte	(0X2564);
	MakeByte	(0X2565);
	MakeByte	(0X2566);
	MakeByte	(0X2567);
	MakeByte	(0X2568);
	MakeByte	(0X2569);
	MakeByte	(0X256A);
	MakeByte	(0X256B);
	MakeByte	(0X256C);
	MakeByte	(0X256D);
	MakeByte	(0X256E);
	MakeByte	(0X256F);
	MakeByte	(0X2570);
	MakeByte	(0X2571);
	MakeByte	(0X2572);
	MakeByte	(0X2573);
	MakeByte	(0X2574);
	MakeByte	(0X2575);
	MakeByte	(0X2576);
	MakeByte	(0X2577);
	MakeByte	(0X2578);
	MakeByte	(0X2579);
	MakeByte	(0X257A);
	MakeByte	(0X257B);
	MakeByte	(0X257C);
	MakeByte	(0X257D);
	MakeByte	(0X257E);
	MakeByte	(0X257F);
	MakeByte	(0X2580);
	MakeByte	(0X2581);
	MakeByte	(0X2582);
	MakeByte	(0X2583);
	MakeByte	(0X2584);
	MakeByte	(0X2585);
	MakeByte	(0X2586);
	MakeByte	(0X2587);
	MakeByte	(0X2588);
	MakeByte	(0X2589);
	MakeByte	(0X258A);
	MakeByte	(0X258B);
	MakeByte	(0X258C);
	MakeByte	(0X258D);
	MakeByte	(0X258E);
	MakeByte	(0X258F);
	MakeByte	(0X2590);
	MakeByte	(0X2591);
	MakeByte	(0X2592);
	MakeByte	(0X2593);
	MakeByte	(0X2594);
	MakeByte	(0X2595);
	MakeByte	(0X2596);
	MakeByte	(0X2597);
	MakeByte	(0X2598);
	MakeByte	(0X2599);
	MakeByte	(0X259A);
	MakeByte	(0X259B);
	MakeByte	(0X259C);
	MakeByte	(0X259D);
	MakeByte	(0X259E);
	MakeByte	(0X259F);
	MakeByte	(0X25A0);
	MakeByte	(0X25A1);
	MakeByte	(0X25A2);
	MakeByte	(0X25A3);
	MakeByte	(0X25A4);
	MakeByte	(0X25A5);
	MakeByte	(0X25A6);
	MakeByte	(0X25A7);
	MakeByte	(0X25A8);
	MakeByte	(0X25A9);
	MakeByte	(0X25AA);
	MakeByte	(0X25AB);
	MakeByte	(0X25AC);
	MakeByte	(0X25AD);
	MakeByte	(0X25AE);
	MakeByte	(0X25AF);
	MakeByte	(0X25B0);
	MakeByte	(0X25B1);
	MakeByte	(0X25B2);
	MakeByte	(0X25B3);
	MakeByte	(0X25B4);
	MakeByte	(0X25B5);
	MakeByte	(0X25B6);
	MakeByte	(0X25B7);
	MakeByte	(0X25B8);
	MakeByte	(0X25B9);
	MakeByte	(0X25BA);
	MakeByte	(0X25BB);
	MakeByte	(0X25BC);
	MakeByte	(0X25BD);
	MakeByte	(0X25BE);
	MakeByte	(0X25BF);
	MakeByte	(0X25C0);
	MakeByte	(0X25C1);
	MakeByte	(0X25C2);
	MakeByte	(0X25C3);
	MakeByte	(0X25C4);
	MakeByte	(0X25C5);
	MakeByte	(0X25C6);
	MakeByte	(0X25C7);
	MakeByte	(0X25C8);
	MakeByte	(0X25C9);
	MakeByte	(0X25CA);
	MakeByte	(0X25CB);
	MakeByte	(0X25CC);
	MakeByte	(0X25CD);
	MakeByte	(0X25CE);
	MakeByte	(0X25CF);
	MakeCode	(0X25D0);
	MakeName	(0X25D0,	"DecompressGraphics");
	MakeCode	(x=0X25F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X25F8);
	OpHex		(x,	0);
	MakeCode	(0X261C);
	MakeCode	(0X2682);
	MakeCode	(0X26B0);
	MakeCode	(0X2706);
	MakeCode	(0X2736);
	MakeCode	(0X2754);
	MakeCode	(0X2784);
	MakeCode	(0X279E);
	MakeCode	(0X27CE);
	MakeCode	(0X27EC);
	MakeCode	(0X281C);
	MakeCode	(0X2848);
	MakeCode	(0X2878);
	MakeCode	(0X2896);
	MakeCode	(x=0X28C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2906);
	MakeCode	(0X292A);
	MakeCode	(x=0X2950);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2956);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X29F8);
	MakeCode	(x=0X2A10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2A16);
	OpHex		(x,	0);
	MakeCode	(0X2A9C);
	MakeCode	(0X2ACA);
	MakeCode	(0X2B20);
	MakeCode	(0X2B50);
	MakeCode	(0X2B6E);
	MakeCode	(0X2B9E);
	MakeCode	(0X2BB8);
	MakeCode	(0X2BE8);
	MakeCode	(0X2C06);
	MakeCode	(0X2C36);
	MakeCode	(0X2C62);
	MakeCode	(0X2C92);
	MakeCode	(0X2CB0);
	MakeCode	(x=0X2CE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2CE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2D42);
	MakeCode	(0X2D7E);
	MakeCode	(0X2DBC);
	MakeCode	(0X2DFA);
	MakeCode	(0X2E2E);
	MakeCode	(0X2E64);
	MakeCode	(0X2E9A);
	MakeCode	(0X2EC6);
	MakeCode	(0X2EF4);
	MakeCode	(0X2F22);
	MakeCode	(0X2F46);
	MakeCode	(0X2F6C);
	MakeCode	(0X2F72);
	MakeName	(0X2F72,	"Trap1_");
	MakeCode	(0X2F94);
	MakeName	(0X2F94,	"Trap2_");
	MakeCode	(0X2FB6);
	MakeName	(0X2FB6,	"Trap3_");
	MakeCode	(0X2FD8);
	MakeName	(0X2FD8,	"Trap4_");
	MakeCode	(0X2FFA);
	MakeCode	(0X300A);
	MakeCode	(0X3018);
	MakeCode	(0X3028);
	MakeCode	(x=0X3046);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X3046,	"GetEventFlagsAddress");
	MakeCode	(0X3054);
	MakeName	(0X3054,	"SetEventFlag");
	MakeCode	(0X3062);
	MakeName	(0X3062,	"ClearEventFlag");
	MakeCode	(0X3072);
	MakeName	(0X3072,	"CheckEventFlag");
	MakeCode	(x=0X3082);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X3082,	"GetEventFlag");
	MakeCode	(0X309A);
	MakeName	(0X309A,	"InitializeMain");
	MakeCode	(x=0X30AC);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(x=0X30B6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X30D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X30D8);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X30E4);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X30F0);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X30FC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X3124);
	MakeCode	(0X312A);
	MakeCode	(0X314E);
	MakeCode	(x=0X319E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X31A4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X31AE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X31C0);
	MakeCode	(x=0X31C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X31EE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3238);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3240);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3244);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3248);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X324C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X326A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X326E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3272);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X327C);
	MakeCode	(0X327E);
	MakeName	(0X327E,	"debugMode_PlayEnding");
	MakeCode	(0X3284);
	MakeByte	(0X3290);
	MakeArray	(0X3290,	0X4);
	MakeCode	(0X3294);
	MakeCode	(x=0X329E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X32B0);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X32B6,	"\"Done for now? That's OK. Get[Line]lots of rest, and I'll see[Line]you soon![Wait2]\"");
	MakeCode	(x=0X32BA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X32BC,	"\"Don't stay away too long,[Line]though. We need you here to[Line]lead the Shining Force![Wait2]\"");
	MakeCode	(x=0X32C0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X32CE);
	OpDecimal	(x,	0);
	MakeCode	(0X32EC);
	MakeByte	(0X32F8);
	MakeArray	(0X32F8,	0X4);
	MakeCode	(0X32FC);
	MakeCode	(x=0X3306);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3312);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3318,	"\"Swallowed by the murky brine,[Line]the Castle of the Ancients[Line]was lost forevermore.[Delay2][Delay2]\"");
	MakeCode	(x=0X331C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X3320,	"\"The battle over and Rune[Line]saved, the warriors of the[Line]Shining Force returned home.[Delay2][Delay2]\"");
	MakeCode	(x=0X3324);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X3328,	"\"Led by Mae, Guardiana was[Line]rebuilt and Anri inherited[Line]the throne.[Delay2][Delay2]\"");
	MakeCode	(x=0X332C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X3330,	"\"As for [Hero], he is[Line]believed to have perished at[Line]sea along with Dark Dragon.[Delay2][Delay2]\"");
	MakeCode	(x=0X3334);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X333E,	"\"And that is the official[Line]ending. But you and I know[Line]differently, don't we?[Delay2][Delay2]\"");
	MakeCode	(x=0X3342);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X3346,	"\"Somewhere, evil stirs in a[Line]land that has need of a[Line]hero.[Delay2][Delay2]\"");
	MakeCode	(x=0X334A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X334E,	"\"And I know you'll be up to[Line]the challenge, [Hero]![Delay2][Delay2]\"");
	MakeCode	(x=0X3352);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X3356,	"\"Well, goodbye for now. I have[Line]a feeling I'll be seeing you[Line]again.[Delay2][Delay2][Delay2]\"");
	MakeCode	(x=0X335A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X3364);
	MakeArray	(0X3364,	0X4);
	MakeCode	(0X3368);
	MakeByte	(0X3370);
	MakeArray	(0X3370,	0X4);
	MakeCode	(0X3374);
	MakeCode	(0X3380);
	MakeName	(0X3380,	"DisplayReaderScreen");
	MakeCode	(x=0X3384);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X338A);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(x=0X3394);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X339A);
	MakeArray	(0X339A,	0X4);
	MakeCode	(x=0X339E);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X33A8);
	MakeArray	(0X33A8,	0X4);
	MakeCode	(x=0X33AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X33B2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X33BC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X33CA);
	MakeCode	(x=0X33D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X33DC,	"\"Wow! Dark Dragon, Ancients...[Line]Let's see now, what else does[Line]this old book say?[Wait2][Line]Hmmm. One thousand years[Line]have passed since they[Line]vanquished Dark Dragon.[Wait2][Line]And this book says[Line]Dark Dragon threatened to[Line]return right about now.[Wait2][Line]I bet anything that Dark[Line]Dragon is behind the evil[Line]hordes of Runefaust![Wait2]\"");
	MakeCode	(x=0X33E0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X33E2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X33E8,	"\"I need to tell someone about[Line]this! But who would listen to[Line]a kid like me?[Wait2]\"");
	MakeCode	(x=0X33EC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X33EE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3402,	"\"Oh, hi! I didn't notice you[Line]there at first. Maybe you'll[Line]listen. Nobody else will.[Wait2]\"");
	MakeCode	(x=0X3406);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X3408,	"\"This book tells of an ancient[Line]evil that threatened our land[Line]long ago--Dark Dragon![Wait2]\"");
	MakeCode	(x=0X340C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X340E,	"\"I think Dark Dragon's coming[Line]back! Will you help us?[Line]C'mon, it'll be an adventure![Wait2]\"");
	MakeCode	(x=0X3412);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X3416);
	MakeRptCmt	(0X341C,	"\"Come on! Let's get on with[Line]your adventure!\"");
	MakeCode	(x=0X3420);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X343A);
	OpOff		(x,	0,	0X343A);
	OpOff		(x,	128,	0X343A);
	OpOff		(x,	1,	0X343A);
	OpOff		(x,	129,	0X343A);
	MakeName	(0X343A,	"rjt_ReaderScreenActions");
	MakeWord	(x=0X343C);
	OpOff		(x,	0,	0X343A);
	OpOff		(x,	128,	0X343A);
	OpOff		(x,	1,	0X343A);
	OpOff		(x,	129,	0X343A);
	MakeWord	(x=0X343E);
	OpOff		(x,	0,	0X343A);
	OpOff		(x,	128,	0X343A);
	OpOff		(x,	1,	0X343A);
	OpOff		(x,	129,	0X343A);
	MakeWord	(x=0X3440);
	OpOff		(x,	0,	0X343A);
	OpOff		(x,	128,	0X343A);
	OpOff		(x,	1,	0X343A);
	OpOff		(x,	129,	0X343A);
	MakeCode	(0X3442);
	MakeName	(0X3442,	"readerScreenAction_New");
	MakeRptCmt	(0X3448,	"\"Pick an adventure.\"");
	MakeCode	(x=0X344C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X345A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3460);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X346A,	"\"Say, what shall I call you?[Wait2]\"");
	MakeCode	(x=0X346E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3484);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(x=0X3490);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	MakeRptCmt	(0X34AC,	"\"Nice to meet you,[Line][Hero]! I'm Simone.[Wait2][Line]Come back often[Line]and tell me everything![Wait2]\"");
	MakeCode	(x=0X34B0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X34B2,	"\"You need to get going! Evil[Line]spreads farther across Rune[Line]with every passing day.[Wait2]\"");
	MakeCode	(x=0X34B6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X34B8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X34C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X34DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X34E0);
	MakeArray	(0X34E0,	0X4);
	MakeCode	(0X34E4);
	MakeCode	(0X34EC);
	MakeName	(0X34EC,	"readerScreenAction_Cont");
	MakeRptCmt	(0X34F2,	"\"Let's get going![Line]You're doing great so far![Wait2]\"");
	MakeCode	(x=0X34F6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X34FE,	"\"Which adventure would you[Line]like to continue?[Wait2]\"");
	MakeCode	(x=0X3502);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3510);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X351A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3526,	"\"Good luck! And be sure to[Line]stop by to let me know how[Line]you're doing, OK?[Wait2]\"");
	MakeCode	(x=0X352A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3532);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X3536);
	MakeArray	(0X3536,	0X4);
	MakeCode	(0X353A);
	MakeCode	(0X3542);
	MakeName	(0X3542,	"ReaderScreenAction_Del");
	MakeRptCmt	(0X3548,	"\"Really? Which adventure[Line]should I delete?[Wait2]\"");
	MakeCode	(x=0X354C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X355E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X356A,	"\"Are you sure?\"");
	MakeCode	(x=0X356E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3580);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X358E,	"\"OK, it's done![Wait2]\"");
	MakeCode	(x=0X3592);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3594);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X35AA);
	MakeName	(0X35AA,	"ReaderScreenAction_Copy");
	MakeRptCmt	(0X35B0,	"\"Which adventure do you wish[Line]to copy?\"");
	MakeCode	(x=0X35B4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X35C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X35D2,	"\"Where do you wish to copy it[Line]to?\"");
	MakeCode	(x=0X35D6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X35EA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X35F4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X35FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X360E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X361E,	"\"Done![Wait2]\"");
	MakeCode	(x=0X3622);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3628);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3634,	"\"Change your mind? No problem![Wait2]\"");
	MakeCode	(x=0X3638);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X363E);
	MakeRptCmt	(0X3644,	"\"Oh no! I can't find adventure[Line][Num]! I hope you're not too[Line]mad![Wait2]\"");
	MakeCode	(x=0X3648);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X364A,	"\"Done for now? That's OK. Get[Line]lots of rest, and I'll see[Line]you soon![Wait2]\"");
	MakeCode	(x=0X364E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X3652);
	MakeCode	(x=0X3658);
	OpDecimal	(x,	0);
	MakeComm	(0X3660,	"load SRAM string into RAM");
	MakeCode	(x=0X3660);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X3660,	"CheckSram");
	MakeCode	(x=0X3666);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X366C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3676);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X367C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3680);
	OpDecimal	(x,	0);
	ExtLinB		(0X3688,	0,	"                ");
	MakeCode	(x=0X36A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X36AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X36B2);
	OpEnumEx		(x,	0,	GetEnum("Sram"),0);
	MakeCode	(x=0X36BC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X36E4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X36EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X36F0);
	OpEnumEx		(x,	0,	GetEnum("Sram"),0);
	MakeCode	(x=0X36FA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3722);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3728);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X372E);
	OpEnumEx		(x,	0,	GetEnum("Sram"),0);
	MakeCode	(x=0X3738);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X3758);
	MakeByte	(0X375E);
	MakeArray	(0X375E,	0X4);
	MakeRptCmt	(0X3762,	"\"Oh no! I can't find adventure[Line][Num]! I hope you're not too[Line]mad![Wait2]\"");
	MakeCode	(0X3762);
	MakeCode	(x=0X3766);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeStr		(0X3774,	0X378A);
	MakeName	(0X3774,	"aYasuhirohiroko");
	MakeCode	(0X378A);
	MakeCode	(x=0X3790);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3796);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X379C);
	OpEnumEx		(x,	0,	GetEnum("Sram"),0);
	MakeCode	(x=0X37A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X37A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X37AE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X37B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X37B6,	"CopyBytesToSram");
	ExtLinB		(0X37CC,	0,	"                ");
	MakeCode	(0X37D6);
	MakeName	(0X37D6,	"CopyBytesFromSram");
	ExtLinB		(0X37E4,	0,	"                ");
	MakeCode	(0X37EE);
	MakeName	(0X37EE,	"SaveGame");
	MakeCode	(x=0X37F4);
	OpDecimal	(x,	0);
	MakeName	(0X37F4,	"DeleteGame");
	MakeCode	(x=0X37FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3800);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X3808);
	MakeCode	(x=0X380E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3816);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X381C);
	OpEnumEx		(x,	0,	GetEnum("Sram"),0);
	MakeCode	(x=0X3820);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3826);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X3826,	"LoadGame");
	MakeCode	(x=0X382C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X3834);
	MakeCode	(x=0X383A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3842);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3848);
	OpEnumEx		(x,	0,	GetEnum("Sram"),0);
	MakeCode	(x=0X384C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X3852);
	MakeName	(0X3852,	"InitializeReaderScreen");
	MakeRptCmt	(0X3860,	"H32 cell mode, no interlace");
	MakeRptCmt	(0X3868,	"scroll size : V32 cell, H64 cell");
	MakeRptCmt	(0X3870,	"scroll A table VRAM address : C000");
	MakeRptCmt	(0X3878,	"scroll B table VRAM address : E000");
	MakeRptCmt	(0X3880,	"disable external interrupt, full scrolls");
	MakeCode	(x=0X3896);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X389A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X38C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X38CC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X38D2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X38D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X38E4);
	MakeName	(0X38E4,	"DisplayShiningForceLogo");
	MakeCode	(x=0X38F4);
	OpHex		(x,	0);
	MakeCode	(x=0X3910);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(x=0X392E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X394C);
	MakeArray	(0X394C,	0X80);
	MakeName	(0X394C,	"ReaderScreenPalettes");
	MakeByte	(0X39CC);
	MakeArray	(0X39CC,	0X78);
	MakeName	(0X39CC,	"ShiningForceLogoLayout");
	MakeCode	(0X3A44);
	MakeName	(0X3A44,	"DisplayChapterScreen");
	MakeCode	(x=0X3A50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3A58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3A64);
	OpHex		(x,	0);
	MakeCode	(x=0X3A82);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3A92);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3AD2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X3ADA);
	MakeArray	(0X3ADA,	0X4);
	MakeCode	(0X3ADE);
	MakeByte	(0X3AE0);
	MakeArray	(0X3AE0,	0X4);
	MakeCode	(0X3AE4);
	MakeCode	(x=0X3AEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3AEE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3AF6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X3B06);
	OpOff		(x,	0,	0X3B06);
	OpOff		(x,	128,	0X3B06);
	OpOff		(x,	1,	0X3B06);
	OpOff		(x,	129,	0X3B06);
	MakeWord	(x=0X3B08);
	OpOff		(x,	0,	0X3B06);
	OpOff		(x,	128,	0X3B06);
	OpOff		(x,	1,	0X3B06);
	OpOff		(x,	129,	0X3B06);
	MakeWord	(x=0X3B0A);
	OpOff		(x,	0,	0X3B06);
	OpOff		(x,	128,	0X3B06);
	OpOff		(x,	1,	0X3B06);
	OpOff		(x,	129,	0X3B06);
	MakeWord	(x=0X3B0C);
	OpOff		(x,	0,	0X3B06);
	OpOff		(x,	128,	0X3B06);
	OpOff		(x,	1,	0X3B06);
	OpOff		(x,	129,	0X3B06);
	MakeWord	(x=0X3B0E);
	OpOff		(x,	0,	0X3B06);
	OpOff		(x,	128,	0X3B06);
	OpOff		(x,	1,	0X3B06);
	OpOff		(x,	129,	0X3B06);
	MakeWord	(x=0X3B10);
	OpOff		(x,	0,	0X3B06);
	OpOff		(x,	128,	0X3B06);
	OpOff		(x,	1,	0X3B06);
	OpOff		(x,	129,	0X3B06);
	MakeWord	(x=0X3B12);
	OpOff		(x,	0,	0X3B06);
	OpOff		(x,	128,	0X3B06);
	OpOff		(x,	1,	0X3B06);
	OpOff		(x,	129,	0X3B06);
	MakeWord	(x=0X3B14);
	OpOff		(x,	0,	0X3B06);
	OpOff		(x,	128,	0X3B06);
	OpOff		(x,	1,	0X3B06);
	OpOff		(x,	129,	0X3B06);
	MakeCode	(0X3B16);
	MakeCode	(x=0X3B20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3B24);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3B28);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3B2E,	"\"[Hero]? [Hero]?[Line]C'mon, kid, wake up![Line]I didn't hit you that hard.[Wait2]\"");
	MakeCode	(x=0X3B32);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X3B36);
	MakeArray	(0X3B36,	0X4);
	MakeCode	(0X3B3A);
	MakeByte	(0X3B42);
	MakeArray	(0X3B42,	0X4);
	MakeCode	(0X3B46);
	MakeByte	(0X3B4E);
	MakeArray	(0X3B4E,	0X4);
	MakeCode	(x=0X3B52);
	OpDecimal	(x,	0);
	MakeByte	(0X3B5A);
	MakeArray	(0X3B5A,	0X4);
	MakeRptCmt	(0X3B5E,	"\"Keep your guard up, kid.[Line]Those beasts of Runefaust[Line]will tear you to pieces![Wait2]\"");
	MakeCode	(0X3B5E);
	MakeCode	(x=0X3B62);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3B6A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3B70);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3B74);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3B86);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X3B8E);
	MakeCode	(x=0X3B9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3BA0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3BA4,	"\"[Hero] and the Shining[Line]Force followed Kane's trail[Line]to the town of Rindo....[Wait2]\"");
	MakeCode	(x=0X3BA8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3BB0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3BB4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3BB8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3BCA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X3BD2);
	MakeCode	(x=0X3BE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3BE4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3BE8,	"\"The Shining Force arrived in[Line]Bustoke, a town built into a[Line]mountainside.[Wait2]\"");
	MakeCode	(x=0X3BEC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3BF4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3BFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3BFE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3C10);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X3C18);
	MakeCode	(x=0X3C26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3C2A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3C2E,	"\"The Shining Force reached the[Line]Pao Prairie to discover that[Line]Pao was a town of wagons![Wait2]\"");
	MakeCode	(x=0X3C32);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3C3A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3C40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3C44);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3C56);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X3C5E);
	MakeCode	(x=0X3C6C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3C70);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3C74,	"\"After a week at sea, sentries[Line]spotted a horde of monsters[Line]approaching the ship....[Wait2]\"");
	MakeCode	(x=0X3C78);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3C80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3C84);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3C8A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3C90);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3CA2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X3CAA);
	MakeCode	(x=0X3CB8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3CBC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3CC0,	"\"The Shining Force finally[Line]reached the port of Rudo, far[Line]from Prompt.[Wait2]\"");
	MakeCode	(x=0X3CC4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3CCC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3CD2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3CD8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3CEA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X3CF2);
	MakeCode	(x=0X3D00);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3D04);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3D08,	"\"The Shining Force quickly[Line]reached Prompt, hoping[Line]that they had come in time.[Wait2]\"");
	MakeCode	(x=0X3D0C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3D14);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3D1A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3D20);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3D32);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X3D3A);
	MakeCode	(x=0X3D48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3D4C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X3D50,	"\"Runefaust at last! The long[Line]and perilous journey is near[Line]its end.[Wait2][Line]It is up to the Shining Force[Line]whether it ends as a[Line]triumph for Light or Darkness.[Wait2]\"");
	MakeCode	(x=0X3D54);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X3D5C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3D62);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3D66);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3D78);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3D80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3D84);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X3DAC,	"\"[Hero] and the Shining[Line]Force head toward Bustoke.[Line]What awaits them there?[Wait2][Line]The legacy of the Ancients[Line]is still a mystery. Will[Line]they ever solve it?[Wait2]\"");
	MakeCode	(x=0X3DB0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X3DBC);
	MakeRptCmt	(0X3DE0,	"\"The Shining Force is now in a[Line]desperate race against time.[Line]Dark Dragon is awakening![Wait2]\"");
	MakeCode	(x=0X3DE4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X3DEC);
	MakeArray	(0X3DEC,	0X4);
	MakeCode	(0X3DF0);
	MakeCode	(x=0X3DFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3E06);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3E12);
	OpHex		(x,	0);
	MakeCode	(x=0X3E28);
	OpHex		(x,	0);
	MakeByte	(0X3E38);
	MakeArray	(0X3E38,	0X4);
	MakeCode	(0X3E3C);
	MakeCode	(x=0X3E48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3E58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3E6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3EB6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3EBA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X3EC8);
	MakeCode	(x=0X3ECA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3ED8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X3EE4);
	MakeArray	(0X3EE4,	0X4);
	MakeCode	(0X3EE8);
	MakeRptCmt	(0X3EEE,	"\"Do you want to record your[Line]exploits so far?\"");
	MakeCode	(x=0X3EF2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X3F02);
	MakeArray	(0X3F02,	0X4);
	MakeCode	(0X3F06);
	MakeCode	(x=0X3F0E);
	OpSign		(x,	0);
	OpHex		(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X3F0E,	"ExecuteMapExitScript");
	MakeCode	(x=0X3F16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X3F26);
	OpOff		(x,	0,	0X3F26);
	OpOff		(x,	128,	0X3F26);
	OpOff		(x,	1,	0X3F26);
	OpOff		(x,	129,	0X3F26);
	MakeName	(0X3F26,	"rjt_MapExitScripts");
	MakeWord	(x=0X3F28);
	OpOff		(x,	0,	0X3F26);
	OpOff		(x,	128,	0X3F26);
	OpOff		(x,	1,	0X3F26);
	OpOff		(x,	129,	0X3F26);
	MakeWord	(x=0X3F2A);
	OpOff		(x,	0,	0X3F26);
	OpOff		(x,	128,	0X3F26);
	OpOff		(x,	1,	0X3F26);
	OpOff		(x,	129,	0X3F26);
	MakeWord	(x=0X3F2C);
	OpOff		(x,	0,	0X3F26);
	OpOff		(x,	128,	0X3F26);
	OpOff		(x,	1,	0X3F26);
	OpOff		(x,	129,	0X3F26);
	MakeWord	(x=0X3F2E);
	OpOff		(x,	0,	0X3F26);
	OpOff		(x,	128,	0X3F26);
	OpOff		(x,	1,	0X3F26);
	OpOff		(x,	129,	0X3F26);
	MakeWord	(x=0X3F30);
	OpOff		(x,	0,	0X3F26);
	OpOff		(x,	128,	0X3F26);
	OpOff		(x,	1,	0X3F26);
	OpOff		(x,	129,	0X3F26);
	MakeWord	(x=0X3F32);
	OpOff		(x,	0,	0X3F26);
	OpOff		(x,	128,	0X3F26);
	OpOff		(x,	1,	0X3F26);
	OpOff		(x,	129,	0X3F26);
	MakeWord	(x=0X3F34);
	OpOff		(x,	0,	0X3F26);
	OpOff		(x,	128,	0X3F26);
	OpOff		(x,	1,	0X3F26);
	OpOff		(x,	129,	0X3F26);
	MakeCode	(x=0X3F36);
	OpDecimal	(x,	0);
	MakeName	(0X3F36,	"mes0_Chapter1");
	MakeCode	(x=0X3F3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X3F4C);
	OpOff		(x,	0,	0X3F4C);
	OpOff		(x,	128,	0X3F4C);
	OpOff		(x,	1,	0X3F4C);
	OpOff		(x,	129,	0X3F4C);
	MakeName	(0X3F4C,	"rjt_MapExitScript0_Regions");
	MakeWord	(x=0X3F4E);
	OpOff		(x,	0,	0X3F4C);
	OpOff		(x,	128,	0X3F4C);
	OpOff		(x,	1,	0X3F4C);
	OpOff		(x,	129,	0X3F4C);
	MakeWord	(x=0X3F50);
	OpOff		(x,	0,	0X3F4C);
	OpOff		(x,	128,	0X3F4C);
	OpOff		(x,	1,	0X3F4C);
	OpOff		(x,	129,	0X3F4C);
	MakeWord	(x=0X3F52);
	OpOff		(x,	0,	0X3F4C);
	OpOff		(x,	128,	0X3F4C);
	OpOff		(x,	1,	0X3F4C);
	OpOff		(x,	129,	0X3F4C);
	MakeWord	(x=0X3F54);
	OpOff		(x,	0,	0X3F4C);
	OpOff		(x,	128,	0X3F4C);
	OpOff		(x,	1,	0X3F4C);
	OpOff		(x,	129,	0X3F4C);
	MakeWord	(x=0X3F56);
	OpOff		(x,	0,	0X3F4C);
	OpOff		(x,	128,	0X3F4C);
	OpOff		(x,	1,	0X3F4C);
	OpOff		(x,	129,	0X3F4C);
	MakeWord	(x=0X3F58);
	OpOff		(x,	0,	0X3F4C);
	OpOff		(x,	128,	0X3F4C);
	OpOff		(x,	1,	0X3F4C);
	OpOff		(x,	129,	0X3F4C);
	MakeCode	(0X3F5A);
	MakeName	(0X3F5A,	"mes0_Region0");
	MakeCode	(x=0X3F5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3F60);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X3F6E);
	OpOff		(x,	0,	0X3F6E);
	OpOff		(x,	128,	0X3F6E);
	OpOff		(x,	1,	0X3F6E);
	OpOff		(x,	129,	0X3F6E);
	MakeName	(0X3F6E,	"rjt_MapExitScript0_Region0_Exits");
	MakeWord	(x=0X3F70);
	OpOff		(x,	0,	0X3F6E);
	OpOff		(x,	128,	0X3F6E);
	OpOff		(x,	1,	0X3F6E);
	OpOff		(x,	129,	0X3F6E);
	MakeWord	(x=0X3F72);
	OpOff		(x,	0,	0X3F6E);
	OpOff		(x,	128,	0X3F6E);
	OpOff		(x,	1,	0X3F6E);
	OpOff		(x,	129,	0X3F6E);
	MakeWord	(x=0X3F74);
	OpOff		(x,	0,	0X3F6E);
	OpOff		(x,	128,	0X3F6E);
	OpOff		(x,	1,	0X3F6E);
	OpOff		(x,	129,	0X3F6E);
	MakeCode	(x=0X3F76);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X3F76,	"mes0_r0_Exit0");
	MakeCode	(x=0X3F7E);
	OpDecimal	(x,	0);
	MakeName	(0X3F7E,	"mes0_r0_Exit1");
	MakeCode	(x=0X3F84);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3F8A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3F92);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3F98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3F9E);
	OpSign		(x,	0);
	OpHex		(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3FA6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X3FA6,	"mes0_r0_Exit2");
	MakeCode	(x=0X3FAE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X3FAE,	"mes0_r0_Exit3");
	MakeCode	(x=0X3FB6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X3FB6,	"mes0_Region1");
	MakeCode	(x=0X3FBC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3FC2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3FC8);
	OpSign		(x,	0);
	OpHex		(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3FCE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3FD6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3FDA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3FE2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3FE8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X3FEC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X3FF4);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3FFC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4004);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X400A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4012);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X4012,	"mes0_Region2");
	MakeCode	(x=0X401A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X401A,	"mes0_Region3");
	MakeCode	(x=0X401E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4032);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X4032,	"mes0_Region4");
	MakeCode	(x=0X403A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X403A,	"mes0_Region5");
	MakeCode	(x=0X403E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4046);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4050);
	MakeCode	(x=0X4052);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4058);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X405E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4066);
	OpDecimal	(x,	0);
	MakeName	(0X4066,	"mes1_Chapter2");
	MakeCode	(x=0X406E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X407C);
	OpOff		(x,	0,	0X407C);
	OpOff		(x,	128,	0X407C);
	OpOff		(x,	1,	0X407C);
	OpOff		(x,	129,	0X407C);
	MakeWord	(x=0X407E);
	OpOff		(x,	0,	0X407C);
	OpOff		(x,	128,	0X407C);
	OpOff		(x,	1,	0X407C);
	OpOff		(x,	129,	0X407C);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	MakeWord	(x=0X4080);
	OpOff		(x,	0,	0X407C);
	OpOff		(x,	128,	0X407C);
	OpOff		(x,	1,	0X407C);
	OpOff		(x,	129,	0X407C);
	MakeWord	(x=0X4082);
	OpOff		(x,	0,	0X407C);
	OpOff		(x,	128,	0X407C);
	OpOff		(x,	1,	0X407C);
	OpOff		(x,	129,	0X407C);
	MakeWord	(x=0X4084);
	OpOff		(x,	0,	0X407C);
	OpOff		(x,	128,	0X407C);
	OpOff		(x,	1,	0X407C);
	OpOff		(x,	129,	0X407C);
	MakeWord	(x=0X4086);
	OpOff		(x,	0,	0X407C);
	OpOff		(x,	128,	0X407C);
	OpOff		(x,	1,	0X407C);
	OpOff		(x,	129,	0X407C);
	MakeWord	(x=0X4088);
	OpOff		(x,	0,	0X407C);
	OpOff		(x,	128,	0X407C);
	OpOff		(x,	1,	0X407C);
	OpOff		(x,	129,	0X407C);
	MakeWord	(x=0X408A);
	OpOff		(x,	0,	0X407C);
	OpOff		(x,	128,	0X407C);
	OpOff		(x,	1,	0X407C);
	OpOff		(x,	129,	0X407C);
	MakeWord	(x=0X408C);
	OpOff		(x,	0,	0X407C);
	OpOff		(x,	128,	0X407C);
	OpOff		(x,	1,	0X407C);
	OpOff		(x,	129,	0X407C);
	MakeCode	(0X408E);
	MakeCode	(x=0X4090);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4094);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X40A2);
	OpOff		(x,	0,	0X40A2);
	OpOff		(x,	128,	0X40A2);
	OpOff		(x,	1,	0X40A2);
	OpOff		(x,	129,	0X40A2);
	MakeWord	(x=0X40A4);
	OpOff		(x,	0,	0X40A2);
	OpOff		(x,	128,	0X40A2);
	OpOff		(x,	1,	0X40A2);
	OpOff		(x,	129,	0X40A2);
	MakeWord	(x=0X40A6);
	OpOff		(x,	0,	0X40A2);
	OpOff		(x,	128,	0X40A2);
	OpOff		(x,	1,	0X40A2);
	OpOff		(x,	129,	0X40A2);
	MakeCode	(x=0X40A8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X40B0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X40B8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X40C0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X40C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X40CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X40D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X40DC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X40E2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X40EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X40F2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X40F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4102);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4110);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4118);
	MakeCode	(x=0X4120);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X412E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4134);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X413A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4144);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4152);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X415A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4162);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X416A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4170);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X417A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4188);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4190);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4198);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X419E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X41A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X41B2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X41C0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X41C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X41CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X41D6);
	MakeName	(0X41D6,	"mes2_Chapter3");
	MakeCode	(x=0X41DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X41EC);
	OpOff		(x,	0,	0X41EC);
	OpOff		(x,	128,	0X41EC);
	OpOff		(x,	1,	0X41EC);
	OpOff		(x,	129,	0X41EC);
	MakeWord	(x=0X41EE);
	OpOff		(x,	0,	0X41EC);
	OpOff		(x,	128,	0X41EC);
	OpOff		(x,	1,	0X41EC);
	OpOff		(x,	129,	0X41EC);
	MakeWord	(x=0X41F0);
	OpOff		(x,	0,	0X41EC);
	OpOff		(x,	128,	0X41EC);
	OpOff		(x,	1,	0X41EC);
	OpOff		(x,	129,	0X41EC);
	MakeWord	(x=0X41F2);
	OpOff		(x,	0,	0X41EC);
	OpOff		(x,	128,	0X41EC);
	OpOff		(x,	1,	0X41EC);
	OpOff		(x,	129,	0X41EC);
	MakeCode	(0X41F4);
	MakeCode	(x=0X41F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X41FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X4208);
	OpOff		(x,	0,	0X4208);
	OpOff		(x,	128,	0X4208);
	OpOff		(x,	1,	0X4208);
	OpOff		(x,	129,	0X4208);
	MakeWord	(x=0X420A);
	OpOff		(x,	0,	0X4208);
	OpOff		(x,	128,	0X4208);
	OpOff		(x,	1,	0X4208);
	OpOff		(x,	129,	0X4208);
	MakeCode	(x=0X420C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4212);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X421A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X422E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4236);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X423E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4244);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X424C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4250);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4264);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X426A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4272);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X427A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4282);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4286);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4298);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X429E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X42A6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X42AE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X42B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X42C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X42CC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X42D4);
	MakeName	(0X42D4,	"mes3_Chapter4");
	MakeCode	(x=0X42DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X42EA);
	OpOff		(x,	0,	0X42EA);
	OpOff		(x,	128,	0X42EA);
	OpOff		(x,	1,	0X42EA);
	OpOff		(x,	129,	0X42EA);
	MakeWord	(x=0X42EC);
	OpOff		(x,	0,	0X42EA);
	OpOff		(x,	128,	0X42EA);
	OpOff		(x,	1,	0X42EA);
	OpOff		(x,	129,	0X42EA);
	MakeWord	(x=0X42EE);
	OpOff		(x,	0,	0X42EA);
	OpOff		(x,	128,	0X42EA);
	OpOff		(x,	1,	0X42EA);
	OpOff		(x,	129,	0X42EA);
	MakeWord	(x=0X42F0);
	OpOff		(x,	0,	0X42EA);
	OpOff		(x,	128,	0X42EA);
	OpOff		(x,	1,	0X42EA);
	OpOff		(x,	129,	0X42EA);
	MakeWord	(x=0X42F2);
	OpOff		(x,	0,	0X42EA);
	OpOff		(x,	128,	0X42EA);
	OpOff		(x,	1,	0X42EA);
	OpOff		(x,	129,	0X42EA);
	MakeWord	(x=0X42F4);
	OpOff		(x,	0,	0X42EA);
	OpOff		(x,	128,	0X42EA);
	OpOff		(x,	1,	0X42EA);
	OpOff		(x,	129,	0X42EA);
	MakeWord	(x=0X42F6);
	OpOff		(x,	0,	0X42EA);
	OpOff		(x,	128,	0X42EA);
	OpOff		(x,	1,	0X42EA);
	OpOff		(x,	129,	0X42EA);
	MakeWord	(x=0X42F8);
	OpOff		(x,	0,	0X42EA);
	OpOff		(x,	128,	0X42EA);
	OpOff		(x,	1,	0X42EA);
	OpOff		(x,	129,	0X42EA);
	MakeWord	(x=0X42FA);
	OpOff		(x,	0,	0X42EA);
	OpOff		(x,	128,	0X42EA);
	OpOff		(x,	1,	0X42EA);
	OpOff		(x,	129,	0X42EA);
	MakeCode	(0X42FC);
	MakeCode	(x=0X42FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4302);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X4310);
	OpOff		(x,	0,	0X4310);
	OpOff		(x,	128,	0X4310);
	OpOff		(x,	1,	0X4310);
	OpOff		(x,	129,	0X4310);
	MakeWord	(x=0X4312);
	OpOff		(x,	0,	0X4310);
	OpOff		(x,	128,	0X4310);
	OpOff		(x,	1,	0X4310);
	OpOff		(x,	129,	0X4310);
	MakeWord	(x=0X4314);
	OpOff		(x,	0,	0X4310);
	OpOff		(x,	128,	0X4310);
	OpOff		(x,	1,	0X4310);
	OpOff		(x,	129,	0X4310);
	MakeCode	(x=0X4316);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X431C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4324);
	MakeCode	(x=0X4332);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4338);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4340);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X434E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4356);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X435E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4366);
	MakeCode	(x=0X4368);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X436C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X437A);
	OpOff		(x,	0,	0X437A);
	OpOff		(x,	128,	0X437A);
	OpOff		(x,	1,	0X437A);
	OpOff		(x,	129,	0X437A);
	MakeWord	(x=0X437C);
	OpOff		(x,	0,	0X437A);
	OpOff		(x,	128,	0X437A);
	OpOff		(x,	1,	0X437A);
	OpOff		(x,	129,	0X437A);
	MakeWord	(x=0X437E);
	OpOff		(x,	0,	0X437A);
	OpOff		(x,	128,	0X437A);
	OpOff		(x,	1,	0X437A);
	OpOff		(x,	129,	0X437A);
	MakeCode	(x=0X4380);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4388);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X438E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4396);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X43AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X43AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X43B2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X43BA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X43C0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X43C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X43CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X43D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X43DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X43E2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X43EA);
	MakeCode	(x=0X43EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X43F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X43FE);
	OpOff		(x,	0,	0X43FE);
	OpOff		(x,	128,	0X43FE);
	OpOff		(x,	1,	0X43FE);
	OpOff		(x,	129,	0X43FE);
	MakeWord	(x=0X4400);
	OpOff		(x,	0,	0X43FE);
	OpOff		(x,	128,	0X43FE);
	OpOff		(x,	1,	0X43FE);
	OpOff		(x,	129,	0X43FE);
	MakeWord	(x=0X4402);
	OpOff		(x,	0,	0X43FE);
	OpOff		(x,	128,	0X43FE);
	OpOff		(x,	1,	0X43FE);
	OpOff		(x,	129,	0X43FE);
	MakeWord	(x=0X4404);
	OpOff		(x,	0,	0X43FE);
	OpOff		(x,	128,	0X43FE);
	OpOff		(x,	1,	0X43FE);
	OpOff		(x,	129,	0X43FE);
	MakeCode	(x=0X4406);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X441A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4420);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4428);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X442E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4436);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X444A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4450);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4458);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X445E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4466);
	MakeCode	(x=0X446C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X447A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4482);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X448A);
	MakeName	(0X448A,	"mes4_Chapter5");
	MakeCode	(x=0X4492);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X44A0);
	OpOff		(x,	0,	0X44A0);
	OpOff		(x,	128,	0X44A0);
	OpOff		(x,	1,	0X44A0);
	OpOff		(x,	129,	0X44A0);
	MakeWord	(x=0X44A2);
	OpOff		(x,	0,	0X44A0);
	OpOff		(x,	128,	0X44A0);
	OpOff		(x,	1,	0X44A0);
	OpOff		(x,	129,	0X44A0);
	MakeWord	(x=0X44A4);
	OpOff		(x,	0,	0X44A0);
	OpOff		(x,	128,	0X44A0);
	OpOff		(x,	1,	0X44A0);
	OpOff		(x,	129,	0X44A0);
	MakeWord	(x=0X44A6);
	OpOff		(x,	0,	0X44A0);
	OpOff		(x,	128,	0X44A0);
	OpOff		(x,	1,	0X44A0);
	OpOff		(x,	129,	0X44A0);
	MakeWord	(x=0X44A8);
	OpOff		(x,	0,	0X44A0);
	OpOff		(x,	128,	0X44A0);
	OpOff		(x,	1,	0X44A0);
	OpOff		(x,	129,	0X44A0);
	MakeWord	(x=0X44AA);
	OpOff		(x,	0,	0X44A0);
	OpOff		(x,	128,	0X44A0);
	OpOff		(x,	1,	0X44A0);
	OpOff		(x,	129,	0X44A0);
	MakeWord	(x=0X44AC);
	OpOff		(x,	0,	0X44A0);
	OpOff		(x,	128,	0X44A0);
	OpOff		(x,	1,	0X44A0);
	OpOff		(x,	129,	0X44A0);
	MakeCode	(0X44AE);
	MakeCode	(x=0X44B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X44B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X44C2);
	OpOff		(x,	0,	0X44C2);
	OpOff		(x,	128,	0X44C2);
	OpOff		(x,	1,	0X44C2);
	OpOff		(x,	129,	0X44C2);
	MakeWord	(x=0X44C4);
	OpOff		(x,	0,	0X44C2);
	OpOff		(x,	128,	0X44C2);
	OpOff		(x,	1,	0X44C2);
	OpOff		(x,	129,	0X44C2);
	MakeWord	(x=0X44C6);
	OpOff		(x,	0,	0X44C2);
	OpOff		(x,	128,	0X44C2);
	OpOff		(x,	1,	0X44C2);
	OpOff		(x,	129,	0X44C2);
	MakeCode	(0X44C8);
	MakeCode	(x=0X44CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X44D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X44DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X44E0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X44E6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X44EE);
	MakeCode	(x=0X44F4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X44FA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4500);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4508);
	MakeCode	(x=0X4516);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X451A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4520);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4526);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X452E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4534);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X453A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4540);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4546);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X454C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X4552);
	MakeCode	(x=0X4558);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X455E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4562);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4568);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X456E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4576);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X457C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4580);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X458E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4596);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X459E);
	MakeCode	(x=0X45A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X45A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X45AC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X45B4);
	MakeCode	(x=0X45BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X45BE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X45C4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X45CC);
	MakeName	(0X45CC,	"mes5_Chapter6");
	MakeCode	(x=0X45D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X45E2);
	OpOff		(x,	0,	0X45E2);
	OpOff		(x,	128,	0X45E2);
	OpOff		(x,	1,	0X45E2);
	OpOff		(x,	129,	0X45E2);
	MakeWord	(x=0X45E4);
	OpOff		(x,	0,	0X45E2);
	OpOff		(x,	128,	0X45E2);
	OpOff		(x,	1,	0X45E2);
	OpOff		(x,	129,	0X45E2);
	MakeWord	(x=0X45E6);
	OpOff		(x,	0,	0X45E2);
	OpOff		(x,	128,	0X45E2);
	OpOff		(x,	1,	0X45E2);
	OpOff		(x,	129,	0X45E2);
	MakeWord	(x=0X45E8);
	OpOff		(x,	0,	0X45E2);
	OpOff		(x,	128,	0X45E2);
	OpOff		(x,	1,	0X45E2);
	OpOff		(x,	129,	0X45E2);
	MakeWord	(x=0X45EA);
	OpOff		(x,	0,	0X45E2);
	OpOff		(x,	128,	0X45E2);
	OpOff		(x,	1,	0X45E2);
	OpOff		(x,	129,	0X45E2);
	MakeWord	(x=0X45EC);
	OpOff		(x,	0,	0X45E2);
	OpOff		(x,	128,	0X45E2);
	OpOff		(x,	1,	0X45E2);
	OpOff		(x,	129,	0X45E2);
	MakeCode	(0X45EE);
	MakeCode	(x=0X45F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X45F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X4602);
	OpOff		(x,	0,	0X4602);
	OpOff		(x,	128,	0X4602);
	OpOff		(x,	1,	0X4602);
	OpOff		(x,	129,	0X4602);
	MakeWord	(x=0X4604);
	OpOff		(x,	0,	0X4602);
	OpOff		(x,	128,	0X4602);
	OpOff		(x,	1,	0X4602);
	OpOff		(x,	129,	0X4602);
	MakeWord	(x=0X4606);
	OpOff		(x,	0,	0X4602);
	OpOff		(x,	128,	0X4602);
	OpOff		(x,	1,	0X4602);
	OpOff		(x,	129,	0X4602);
	MakeCode	(x=0X4608);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4610);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4618);
	MakeCode	(x=0X461E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X462C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4634);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X463C);
	MakeCode	(x=0X4644);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X464C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4652);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X465A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4666);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X466C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4678);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4686);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X468C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4694);
	MakeCode	(x=0X469C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X46A0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X46A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X46AE);
	MakeCode	(x=0X46BC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X46CA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X46D2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X46DA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X46E4);
	MakeName	(0X46E4,	"mes6_Chapter7");
	MakeCode	(x=0X46EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X46FA);
	OpOff		(x,	0,	0X46FA);
	OpOff		(x,	128,	0X46FA);
	OpOff		(x,	1,	0X46FA);
	OpOff		(x,	129,	0X46FA);
	MakeWord	(x=0X46FC);
	OpOff		(x,	0,	0X46FA);
	OpOff		(x,	128,	0X46FA);
	OpOff		(x,	1,	0X46FA);
	OpOff		(x,	129,	0X46FA);
	MakeWord	(x=0X46FE);
	OpOff		(x,	0,	0X46FA);
	OpOff		(x,	128,	0X46FA);
	OpOff		(x,	1,	0X46FA);
	OpOff		(x,	129,	0X46FA);
	MakeWord	(x=0X4700);
	OpOff		(x,	0,	0X46FA);
	OpOff		(x,	128,	0X46FA);
	OpOff		(x,	1,	0X46FA);
	OpOff		(x,	129,	0X46FA);
	MakeWord	(x=0X4702);
	OpOff		(x,	0,	0X46FA);
	OpOff		(x,	128,	0X46FA);
	OpOff		(x,	1,	0X46FA);
	OpOff		(x,	129,	0X46FA);
	MakeWord	(x=0X4704);
	OpOff		(x,	0,	0X46FA);
	OpOff		(x,	128,	0X46FA);
	OpOff		(x,	1,	0X46FA);
	OpOff		(x,	129,	0X46FA);
	MakeCode	(0X4706);
	MakeCode	(x=0X4708);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X470C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X471A);
	MakeCode	(x=0X471E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4726);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X472E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4734);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X473A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4742);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X474A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4750);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4758);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4762);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X476C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4772);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X477E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X478C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4794);
	MakeCode	(x=0X479C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X47A0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X47A8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X47AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X47C0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X47C8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X47D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X47D8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X47E0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X47E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X47F8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X47FE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4804);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X480C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4814);
	MakeName	(0X4814,	"mes7_Chapter8");
	MakeCode	(x=0X481C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X482A);
	OpOff		(x,	0,	0X482A);
	OpOff		(x,	128,	0X482A);
	OpOff		(x,	1,	0X482A);
	OpOff		(x,	129,	0X482A);
	MakeWord	(x=0X482C);
	OpOff		(x,	0,	0X482A);
	OpOff		(x,	128,	0X482A);
	OpOff		(x,	1,	0X482A);
	OpOff		(x,	129,	0X482A);
	MakeWord	(x=0X482E);
	OpOff		(x,	0,	0X482A);
	OpOff		(x,	128,	0X482A);
	OpOff		(x,	1,	0X482A);
	OpOff		(x,	129,	0X482A);
	MakeWord	(x=0X4830);
	OpOff		(x,	0,	0X482A);
	OpOff		(x,	128,	0X482A);
	OpOff		(x,	1,	0X482A);
	OpOff		(x,	129,	0X482A);
	MakeWord	(x=0X4832);
	OpOff		(x,	0,	0X482A);
	OpOff		(x,	128,	0X482A);
	OpOff		(x,	1,	0X482A);
	OpOff		(x,	129,	0X482A);
	MakeWord	(x=0X4834);
	OpOff		(x,	0,	0X482A);
	OpOff		(x,	128,	0X482A);
	OpOff		(x,	1,	0X482A);
	OpOff		(x,	129,	0X482A);
	MakeWord	(x=0X4836);
	OpOff		(x,	0,	0X482A);
	OpOff		(x,	128,	0X482A);
	OpOff		(x,	1,	0X482A);
	OpOff		(x,	129,	0X482A);
	MakeWord	(x=0X4838);
	OpOff		(x,	0,	0X482A);
	OpOff		(x,	128,	0X482A);
	OpOff		(x,	1,	0X482A);
	OpOff		(x,	129,	0X482A);
	MakeWord	(x=0X483A);
	OpOff		(x,	0,	0X482A);
	OpOff		(x,	128,	0X482A);
	OpOff		(x,	1,	0X482A);
	OpOff		(x,	129,	0X482A);
	MakeWord	(x=0X483C);
	OpOff		(x,	0,	0X482A);
	OpOff		(x,	128,	0X482A);
	OpOff		(x,	1,	0X482A);
	OpOff		(x,	129,	0X482A);
	MakeCode	(x=0X483E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4846);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X484E);
	MakeCode	(x=0X4854);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X485A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4866);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X486E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4876);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X487E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4884);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X488C);
	MakeCode	(x=0X4892);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4896);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X489C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X48A4);
	MakeCode	(x=0X48AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X48B0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X48B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X48BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X48C8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X48CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X48D6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X48DC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X48E4);
	MakeCode	(x=0X48EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X48F0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X48F6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X48FC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4904);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4910);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4916);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X491E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4924);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X492C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4938);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X493E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4944);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X494C);
	MakeCode	(x=0X4952);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4956);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X495C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X4964);
	MakeCode	(x=0X496A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4970);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4974);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X497C);
	MakeCode	(x=0X4982);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4988);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X498C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4990);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4998);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X49A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X49AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X49B0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X49B8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X49C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X49CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X49D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X49DC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X49E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X49E6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X49EE);
	MakeArray	(0X49EE,	0X200);
	MakeName	(0X49EE,	"ChapterScreenLayout");
	MakeByte	(0X4BEE);
	MakeArray	(0X4BEE,	0X20);
	MakeName	(0X4BEE,	"ChapterEndLayout");
	MakeCode	(0X4C0E);
	MakeWord	(x=0X4C22);
	OpOff		(x,	0,	0X4C22);
	OpOff		(x,	128,	0X4C22);
	OpOff		(x,	1,	0X4C22);
	OpOff		(x,	129,	0X4C22);
	MakeWord	(x=0X4C24);
	OpOff		(x,	0,	0X4C22);
	OpOff		(x,	128,	0X4C22);
	OpOff		(x,	1,	0X4C22);
	OpOff		(x,	129,	0X4C22);
	MakeWord	(x=0X4C26);
	OpOff		(x,	0,	0X4C22);
	OpOff		(x,	128,	0X4C22);
	OpOff		(x,	1,	0X4C22);
	OpOff		(x,	129,	0X4C22);
	MakeWord	(x=0X4C28);
	OpOff		(x,	0,	0X4C22);
	OpOff		(x,	128,	0X4C22);
	OpOff		(x,	1,	0X4C22);
	OpOff		(x,	129,	0X4C22);
	MakeWord	(x=0X4C2A);
	OpOff		(x,	0,	0X4C22);
	OpOff		(x,	128,	0X4C22);
	OpOff		(x,	1,	0X4C22);
	OpOff		(x,	129,	0X4C22);
	MakeWord	(x=0X4C2C);
	OpOff		(x,	0,	0X4C22);
	OpOff		(x,	128,	0X4C22);
	OpOff		(x,	1,	0X4C22);
	OpOff		(x,	129,	0X4C22);
	MakeWord	(x=0X4C2E);
	OpOff		(x,	0,	0X4C22);
	OpOff		(x,	128,	0X4C22);
	OpOff		(x,	1,	0X4C22);
	OpOff		(x,	129,	0X4C22);
	MakeWord	(x=0X4C30);
	OpOff		(x,	0,	0X4C22);
	OpOff		(x,	128,	0X4C22);
	OpOff		(x,	1,	0X4C22);
	OpOff		(x,	129,	0X4C22);
	MakeCode	(0X4C32);
	MakeCode	(0X4C6C);
	MakeCode	(0X4C70);
	MakeCode	(0X4C7A);
	MakeCode	(0X4C8E);
	MakeCode	(0X4C92);
	MakeCode	(0X4CAA);
	MakeCode	(0X4CBA);
	MakeCode	(0X4CC6);
	MakeCode	(0X4CD8);
	MakeCode	(0X4CF2);
	MakeCode	(0X4CFC);
	MakeCode	(0X4D00);
	MakeCode	(0X4D12);
	MakeCode	(0X4D1C);
	MakeCode	(0X4D20);
	MakeCode	(0X4D3A);
	MakeCode	(0X4D46);
	MakeCode	(0X4D4A);
	MakeCode	(0X4D4E);
	MakeCode	(0X4D60);
	MakeCode	(0X4D64);
	MakeCode	(0X4D80);
	MakeCode	(0X4D84);
	MakeCode	(0X4D88);
	MakeCode	(0X4D96);
	MakeCode	(x=0X4D9A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X4D9A,	"debugMode_ChapterTest");
	MakeCode	(x=0X4DA0);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DA8);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DB0);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DB8);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DC0);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DC8);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DD0);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DD8);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DE0);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DE8);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DF0);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DF8);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4DFA);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),1);
	ExtLinB		(0X4E04,	0,	"                ");
	MakeCode	(x=0X4E24);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4E28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4E3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4E5E);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X4E72);
	MakeArray	(0X4E72,	0X4);
	MakeCode	(x=0X4E76);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X4E86);
	MakeArray	(0X4E86,	0X4);
	MakeCode	(x=0X4E8A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X4E96);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X4EA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4EAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4EBE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4ECC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4EF2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X4F00);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X4F00,	"debugMode_BattleTest");
	MakeCode	(x=0X4F06);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F0E);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F16);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F1E);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F26);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F2E);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F36);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F3E);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F46);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F4E);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F56);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F5E);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X4F60);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),1);
	MakeCode	(x=0X4F8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4F8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4FA0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X4FCC);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X4FE0);
	MakeArray	(0X4FE0,	0X4);
	MakeCode	(x=0X4FE4);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X4FF4);
	MakeArray	(0X4FF4,	0X4);
	MakeCode	(x=0X4FF8);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X5004);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X5010);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X5038);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X503C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5052);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5060);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5086);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X508E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5094);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5098);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X509C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X50A0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X50E2);
	MakeArray	(0X50E2,	0XF0);
	MakeName	(0X50E2,	"tbl_BattleTestTargets");
	MakeCode	(x=0X51D2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeName	(0X51D2,	"DebugModeMessageTest");
	MakeCode	(0X51DE);
	MakeCode	(x=0X51FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X51FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5210);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5236);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X524C);
	MakeArray	(0X524C,	0X4);
	MakeCode	(x=0X5250);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X5260);
	MakeArray	(0X5260,	0X4);
	MakeCode	(x=0X5264);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X527C);
	MakeArray	(0X527C,	0X4);
	MakeCode	(x=0X5280);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X5292);
	MakeArray	(0X5292,	0X4);
	MakeCode	(x=0X5296);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X52A2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X52B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X52B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X52CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X52D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X52FE);
	MakeCode	(x=0X5304);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X530E);
	MakeArray	(0X530E,	0XAA);
	MakeName	(0X530E,	"wl_BattleTest");
	MakeByte	(0X53B8);
	MakeArray	(0X53B8,	0XAA);
	MakeName	(0X53B8,	"wl_ChapterTest");
	MakeByte	(0X5462);
	MakeArray	(0X5462,	0XAA);
	MakeName	(0X5462,	"wl_MessageTest");
	MakeCode	(0X550C);
	MakeCode	(0X5532);
	MakeCode	(0X5544);
	MakeCode	(0X5556);
	MakeName	(0X5556,	"DisplayGoldWindow");
	MakeCode	(0X5568);
	MakeName	(0X5568,	"HideGoldWindow");
	MakeCode	(0X557A);
	MakeCode	(0X558E);
	MakeName	(0X558E,	"CreateGoldWindow");
	MakeCode	(x=0X5592);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5596);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X55B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X55C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X55CC);
	MakeArray	(0X55CC,	0X40);
	MakeName	(0X55CC,	"wl_Gold");
	MakeCode	(0X560C);
	MakeName	(0X560C,	"YesNoPrompt");
	MakeCode	(0X5616);
	MakeName	(0X5616,	"YesNoChoiceBox");
	MakeCode	(x=0X561A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X5624);
	MakeArray	(0X5624,	0X4);
	MakeCode	(0X5628);
	MakeCode	(x=0X5674);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X5686);
	MakeArray	(0X5686,	0X4);
	MakeCode	(0X568A);
	MakeCode	(x=0X568E);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X56A2);
	MakeArray	(0X56A2,	0X4);
	MakeCode	(0X56A6);
	MakeCode	(x=0X56AA);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X56C2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X56DA);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0X56F2);
	MakeByte	(0X5702);
	MakeArray	(0X5702,	0X4);
	MakeCode	(0X5706);
	MakeCode	(x=0X5744);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X575E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X579A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X57A0);
	OpHex		(x,	0);
	MakeCode	(x=0X57BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X57EA);
	MakeArray	(0X57EA,	0X22E);
	MakeName	(0X57EA,	"MenuTiles_YesNo");
	MakeCode	(x=0X5A18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X5A18,	"ExecuteMainMenu");
	MakeCode	(x=0X5A1C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5A22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5A26);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5A30);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5A3E);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5A6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X5A78);
	OpOff		(x,	0,	0X5A78);
	OpOff		(x,	128,	0X5A78);
	OpOff		(x,	1,	0X5A78);
	OpOff		(x,	129,	0X5A78);
	MakeName	(0X5A78,	"rjt_MainMenuActions");
	MakeWord	(x=0X5A7A);
	OpOff		(x,	0,	0X5A78);
	OpOff		(x,	128,	0X5A78);
	OpOff		(x,	1,	0X5A78);
	OpOff		(x,	129,	0X5A78);
	MakeWord	(x=0X5A7C);
	OpOff		(x,	0,	0X5A78);
	OpOff		(x,	128,	0X5A78);
	OpOff		(x,	1,	0X5A78);
	OpOff		(x,	129,	0X5A78);
	MakeWord	(x=0X5A7E);
	OpOff		(x,	0,	0X5A78);
	OpOff		(x,	128,	0X5A78);
	OpOff		(x,	1,	0X5A78);
	OpOff		(x,	129,	0X5A78);
	MakeCode	(0X5A80);
	MakeCode	(0X5A82);
	MakeName	(0X5A82,	"j_j_MainMenuAction_Search");
	MakeCode	(x=0X5A88);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X5A88,	"mainMenuAction_Talk");
	MakeCode	(0X5A96);
	MakeCode	(0X5A98);
	MakeCode	(x=0X5A9E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X5A9E,	"MainMenuAction_Magic");
	MakeCode	(x=0X5AA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X5AB4,	"\"No magic.\" refusal text");
	MakeCode	(x=0X5ABE);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5AD8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5AE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X5AF6,	"\"Not enough MP.\" refusal text");
	MakeCode	(0X5B00);
	MakeCode	(x=0X5B02);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5B06);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5B0C);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeCode	(x=0X5B10);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5B1C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X5B22,	"\"[Name] casts [Spell][Line]level [Num]!\"");
	MakeCode	(x=0X5B26);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X5B28);
	MakeArray	(0X5B28,	0X4);
	MakeRptCmt	(0X5B2C,	"\"[Dict][Line]\"");
	MakeCode	(0X5B2C);
	MakeCode	(x=0X5B30);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X5B34,	"\"But nothing happens.\"");
	MakeCode	(x=0X5B38);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X5B3A,	"\"[Dict][Line]\"");
	MakeCode	(x=0X5B3E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X5B4A);
	MakeName	(0X5B4A,	"MainMenuAction_Item");
	MakeCode	(x=0X5B54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X5B54,	"ExecuteItemMenu");
	MakeCode	(x=0X5B62);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5B66);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X5B7A);
	MakeWord	(x=0X5B84);
	OpOff		(x,	0,	0X5B84);
	OpOff		(x,	128,	0X5B84);
	OpOff		(x,	1,	0X5B84);
	OpOff		(x,	129,	0X5B84);
	MakeName	(0X5B84,	"rjt_ItemMenuActions");
	MakeWord	(x=0X5B86);
	OpOff		(x,	0,	0X5B84);
	OpOff		(x,	128,	0X5B84);
	OpOff		(x,	1,	0X5B84);
	OpOff		(x,	129,	0X5B84);
	MakeWord	(x=0X5B88);
	OpOff		(x,	0,	0X5B84);
	OpOff		(x,	128,	0X5B84);
	OpOff		(x,	1,	0X5B84);
	OpOff		(x,	129,	0X5B84);
	MakeWord	(x=0X5B8A);
	OpOff		(x,	0,	0X5B84);
	OpOff		(x,	128,	0X5B84);
	OpOff		(x,	1,	0X5B84);
	OpOff		(x,	129,	0X5B84);
	MakeCode	(0X5B8C);
	MakeName	(0X5B8C,	"itemMenuAction_Use");
	MakeRptCmt	(0X5B98,	"\"Use whose item?\"");
	MakeCode	(x=0X5B9C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5BA8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5BB4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5BBC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5BC6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5BCE);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X5BD2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5BD6);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X5BDE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5BE8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5BF0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X5C16,	"\"[Hero] uses the[Line][Item].[Wait2]\"");
	MakeCode	(x=0X5C1A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5C1E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5C24);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5C2E);
	MakeCode	(x=0X5C30);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeRptCmt	(0X5C3A,	"\"Who will use the[Line][Item]?\"");
	MakeCode	(x=0X5C3E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X5C50,	"\"[Hero] uses the[Line][Item].[Wait2]\"");
	MakeCode	(x=0X5C54);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5C64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5C6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5C70);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5C74);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5C7E);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X5C86);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeRptCmt	(0X5C90,	"\"Who will use the[Line][Item]?\"");
	MakeCode	(x=0X5C94);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X5CA8,	"\"[Hero] uses the[Line][Item].[Wait2]\"");
	MakeCode	(x=0X5CAC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5CB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5CC2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5CC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5CCE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5CD2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X5CE0);
	MakeComm	(0X5CE6,	"\"[Dict][Line]\"");
	MakeCode	(0X5CE6);
	MakeCode	(x=0X5CEA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5CEC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5CF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5CFC);
	MakeName	(0X5CFC,	"nullsub_5CFC");
	MakeCode	(0X5CFE);
	MakeName	(0X5CFE,	"itemMenuAction_Give");
	MakeRptCmt	(0X5D04,	"\"Transfer whose item?\"");
	MakeCode	(x=0X5D08);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5D10);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5D20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5D24);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X5D28,	"D1 = selected item index");
	MakeRptCmt	(0X5D2C,	"save selected item index");
	MakeCode	(x=0X5D2E);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X5D32);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X5D36,	"restore selected item index -> D1");
	MakeCode	(x=0X5D38);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeRptCmt	(0X5D3C,	"branch if item is not equipped");
	MakeCode	(x=0X5D44);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X5D48,	"branch if item can be unequipped");
	MakeRptCmt	(0X5D52,	"\"The [Item] is cursed[Line]and can't be given away.[Wait2]\"");
	MakeCode	(x=0X5D56);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X5D5C);
	MakeRptCmt	(0X5D5E,	"\"Who gets the [Item]?\"");
	MakeCode	(x=0X5D62);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X5D7E);
	MakeCode	(x=0X5D84);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X5D8E,	"branch if member has an empty item slot");
	MakeCode	(x=0X5D9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5DA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5DAC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5DB0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5DB4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X5DBE,	"D1 = item index to give");
	MakeCode	(x=0X5DC2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X5DCC,	"branch is item has successfully been given");
	MakeCode	(x=0X5DD0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5DDA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5DE4);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X5DE8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5DEE);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeCode	(x=0X5DFC);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X5E0A,	"\"The [Item] is cursed[Line]and can't be unequipped.[Wait2]\"");
	MakeCode	(x=0X5E0E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5E14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5E18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5E20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5E40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5E58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5E5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5E72);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5E7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5E8C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5E90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5EA0);
	MakeName	(0X5EA0,	"itemMenuAction_Equip");
	MakeRptCmt	(0X5EA6,	"\"Who do you wish to equip?\"");
	MakeCode	(x=0X5EAA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5EB2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5EC2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5EC8);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeRptCmt	(0X5ED6,	"\"[Name] can't be[Line]equipped with anything![Wait2]\"");
	MakeCode	(x=0X5EDA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5EE0);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X5EE4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5EF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5F08);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X5F0C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5F1A);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5F28);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X5F2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5F42);
	MakeCode	(0X5F4C);
	MakeName	(0X5F4C,	"itemMenuAction_Drop");
	MakeRptCmt	(0X5F52,	"\"Discard whose item?\"");
	MakeCode	(x=0X5F56);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X5F6C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X5F70);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5F7A);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X5F7E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X5F92);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X5FA0,	"\"The [Item] is cursed[Line]and can't be given away.[Wait2]\"");
	MakeCode	(x=0X5FA4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X5FAA);
	MakeCode	(x=0X5FBC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X5FC8);
	MakeRptCmt	(0X5FCA,	"\"[Hero] keeps the[Line][Item].[Wait2]\"");
	MakeCode	(x=0X5FCE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X5FD6);
	MakeRptCmt	(0X5FD8,	"\"A change of heart, eh?[Wait2]\"");
	MakeCode	(x=0X5FDC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X5FE2);
	MakeName	(0X5FE2,	"DisplayAdvisorPortrait");
	MakeCode	(x=0X5FEC);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(0X5FF8);
	MakeName	(0X5FF8,	"ExecuteHeadquartersMenu");
	MakeRptCmt	(0X6002,	"\"Well, [Hero],[Line]are you ready to[Line]face the enemy?[Wait2]\"");
	MakeCode	(x=0X6006);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X600A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X600E);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X6020,	"\"If that is all, then go now,[Line]for the hordes of Runefaust[Line]are still on the attack![Wait2]\"");
	MakeCode	(x=0X6024);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X6028);
	MakeCode	(x=0X602A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X6038);
	OpOff		(x,	0,	0X6038);
	OpOff		(x,	128,	0X6038);
	OpOff		(x,	1,	0X6038);
	OpOff		(x,	129,	0X6038);
	MakeName	(0X6038,	"rjt_HeadquartersMenuActions");
	MakeWord	(x=0X603A);
	OpOff		(x,	0,	0X6038);
	OpOff		(x,	128,	0X6038);
	OpOff		(x,	1,	0X6038);
	OpOff		(x,	129,	0X6038);
	MakeWord	(x=0X603C);
	OpOff		(x,	0,	0X6038);
	OpOff		(x,	128,	0X6038);
	OpOff		(x,	1,	0X6038);
	OpOff		(x,	129,	0X6038);
	MakeWord	(x=0X603E);
	OpOff		(x,	0,	0X6038);
	OpOff		(x,	128,	0X6038);
	OpOff		(x,	1,	0X6038);
	OpOff		(x,	129,	0X6038);
	MakeCode	(0X6040);
	MakeRptCmt	(0X6042,	"\"Anything else, [Hero]?\"");
	MakeCode	(x=0X6046);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X604E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X605A);
	MakeRptCmt	(0X605E,	"\"A change of heart, eh?[Wait2]\"");
	MakeCode	(x=0X6062);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X6068);
	MakeName	(0X6068,	"headquartersMenuAction_Advice");
	MakeRptCmt	(0X606E,	"\"A word of advice.[Line]Seek the hermit who lives by[Line]the Gate of the Ancients![Wait2]\"");
	MakeCode	(x=0X606E);
	OpEnumEx		(x,	0,	GetEnum("Messages"),0);
	MakeCode	(x=0X6072);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X6078);
	MakeName	(0X6078,	"GetAdviceMessageOffset");
	MakeCode	(x=0X607A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X608A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X6098);
	ExtLinA		(0X609E,	0,	"; Base advice message offsets for each chapter");
	ExtLinA		(0X609E,	1,	"                ");
	MakeByte	(0X609E);
	MakeName	(0X609E,	"tbl_AdviceMessageOffsets");
	MakeByte	(0X609F);
	MakeByte	(0X60A0);
	MakeByte	(x=0X60A1);
	OpDecimal	(x,	0);
	MakeByte	(x=0X60A2);
	OpDecimal	(x,	0);
	MakeByte	(x=0X60A3);
	OpDecimal	(x,	0);
	MakeByte	(x=0X60A4);
	OpDecimal	(x,	0);
	ExtLinB		(0X60A5,	0,	"                ");
	ExtLinB		(0X60A5,	1,	"                ");
	MakeByte	(x=0X60A5);
	OpDecimal	(x,	0);
	ExtLinA		(0X60A6,	0,	"; Number of advice messages per chapter");
	ExtLinA		(0X60A6,	1,	"                ");
	MakeByte	(0X60A6);
	MakeName	(0X60A6,	"tbl_AdviceMessageNumbers");
	MakeByte	(0X60A7);
	MakeByte	(0X60A8);
	MakeByte	(0X60A9);
	MakeByte	(0X60AA);
	MakeByte	(0X60AB);
	MakeByte	(0X60AC);
	MakeByte	(0X60AD);
	MakeCode	(0X60AE);
	MakeName	(0X60AE,	"headquartersMenuAction_Join");
	MakeCode	(x=0X60B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X60BE,	"\"[Hero], no one[Line]is waiting![Delay1]\"");
	MakeCode	(x=0X60C2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X60CA,	"\"Who do you wish to take?\"");
	MakeCode	(0X60CA);
	MakeCode	(x=0X60CE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X60D6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X60E6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X60F8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X60FE,	"\"Are you sure? After all,[Line][Name] needs to[Line]be revived.\"");
	MakeCode	(x=0X6102);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X610C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X6114,	"\"Who will you leave behind?\"");
	MakeCode	(x=0X6118);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X6126);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6136);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X6142,	"\"Without you, [Hero], who[Line]will lead the Shining Force?[Wait2]\"");
	MakeCode	(x=0X6146);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X614A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6154);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6158);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeRptCmt	(0X6162,	"\"Anyone else to replace?\"");
	MakeCode	(x=0X6166);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X6170);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X617C,	"load \"Fw\" VDP tile entry");
	MakeCode	(x=0X617C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6188);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6194);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6198);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X619E);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(x=0X61B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X61BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X61D0);
	MakeName	(0X61D0,	"headquartersMenuAction_Status");
	MakeRptCmt	(0X61D4,	"\"View whose status?\"");
	MakeCode	(x=0X61D8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X61E6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X61F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6202);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X620C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X622A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X624E,	"\"Check someone else's status?\"");
	MakeCode	(x=0X6252);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X625C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6268);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X6268,	"headquartersMenuAction_Item");
	MakeCode	(x=0X626C);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeWord	(x=0X628A);
	OpOff		(x,	0,	0X628A);
	OpOff		(x,	128,	0X628A);
	OpOff		(x,	1,	0X628A);
	OpOff		(x,	129,	0X628A);
	MakeWord	(x=0X628C);
	OpOff		(x,	0,	0X628A);
	OpOff		(x,	128,	0X628A);
	OpOff		(x,	1,	0X628A);
	OpOff		(x,	129,	0X628A);
	MakeWord	(x=0X628E);
	OpOff		(x,	0,	0X628A);
	OpOff		(x,	128,	0X628A);
	OpOff		(x,	1,	0X628A);
	OpOff		(x,	129,	0X628A);
	MakeWord	(x=0X6290);
	OpOff		(x,	0,	0X628A);
	OpOff		(x,	128,	0X628A);
	OpOff		(x,	1,	0X628A);
	OpOff		(x,	129,	0X628A);
	MakeCode	(0X6292);
	MakeRptCmt	(0X629E,	"\"Use whose item?\"");
	MakeCode	(x=0X62A2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X62BA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X62C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X62D0);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X62D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X62E2,	"\"Who will use the[Line][Item]?\"");
	MakeCode	(x=0X62E6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X62FC,	"\"[Hero] uses the[Line][Item].[Wait2]\"");
	MakeCode	(x=0X6300);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X6310);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6316);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X631C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6320);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X632A);
	MakeRptCmt	(0X633C,	"\"Who will use the[Line][Item]?\"");
	MakeCode	(x=0X6340);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X635A,	"\"[Hero] uses the[Line][Item].[Wait2]\"");
	MakeCode	(x=0X635E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X6368);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6374);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X637A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6380);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6384);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X6392,	"\"[Hero]! What are you[Line]trying to do with that?[Wait2]\"");
	MakeCode	(0X6392);
	MakeCode	(x=0X6396);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X639A,	"\"Any other item to use?\"");
	MakeCode	(x=0X639E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X63A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X63B4);
	MakeRptCmt	(0X63BA,	"\"Transfer whose item?\"");
	MakeCode	(x=0X63BE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X63D0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X63E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X63E4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X63EE);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X63F2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6406);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X6414,	"\"The [Item] is cursed[Line]and can't be unequipped.[Wait2]\"");
	MakeCode	(x=0X6418);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X641E);
	MakeRptCmt	(0X6420,	"\"Now, who gets it?\"");
	MakeCode	(x=0X6424);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X644A);
	MakeCode	(x=0X6450);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6468);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X647A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X647E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6482);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6486);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6494);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X64A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X64AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X64B6);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X64BA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X64CE);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X64DC,	"\"The [Item] is cursed[Line]and can't be unequipped.[Wait2]\"");
	MakeCode	(x=0X64E0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X64E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X64EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X64F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6512);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X652A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X652E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6544);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6550);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X655E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6562);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X656E,	"\"Anything else to transfer?\"");
	MakeCode	(x=0X6572);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X657C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X6588);
	MakeRptCmt	(0X658E,	"\"Who do you wish to equip?\"");
	MakeCode	(x=0X6592);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X65A0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X65AE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X65B2);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeRptCmt	(0X65C4,	"\"[Name] can't be[Line]equipped with anything![Wait2]\"");
	MakeCode	(x=0X65C8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X65CE);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X65D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X65E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X65F4);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X65F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6606);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6614);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X6618);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X662C);
	MakeRptCmt	(0X6636,	"\"Anyone else to equip?\"");
	MakeCode	(x=0X663A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X6644);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X6650);
	MakeRptCmt	(0X6656,	"\"Discard whose item?\"");
	MakeCode	(x=0X665A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X667A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X667E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6688);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X668C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X66A0);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X66AE,	"\"The [Item] is cursed[Line]and can't be unequipped.[Wait2]\"");
	MakeCode	(x=0X66B2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X66B8);
	MakeCode	(x=0X66BE);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X66CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X66D6);
	MakeRptCmt	(0X66D8,	"\"[Hero]! It would be[Line]foolish to discard the[Line][Item].[Wait2]\"");
	MakeCode	(x=0X66DC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X66E0,	"\"Anything else to discard?\"");
	MakeCode	(x=0X66E4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X66EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X66FA);
	MakeCode	(0X6706);
	MakeCode	(0X679A);
	MakeName	(0X679A,	"InitializeHeadquarters");
	MakeCode	(x=0X67BC);
	OpSign		(x,	0);
	OpHex		(x,	0);
	MakeName	(0X67BC,	"PositionHeadquartersMembers");
	MakeCode	(x=0X67BE);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	ExtLinB		(0X67CA,	0,	"                ");
	ExtLinA		(0X67CE,	0,	"                ; Position advisor");
	MakeCode	(x=0X67D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X67DA,	"FORCE_MEMBERS_LIST+1");
	MakeCode	(x=0X67DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X67E0);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(0X682C);
	MakeCode	(x=0X6832);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X6860);
	MakeCode	(0X688C);
	MakeCode	(0X6894);
	MakeName	(0X689C,	"LoadHeadquartersMapsprite");
	MakeCode	(x=0X68A8);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X68C0);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(x=0X68C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X68F4);
	MakeCode	(0X690A);
	MakeWord	(x=0X6916);
	OpOff		(x,	0,	0X6916);
	OpOff		(x,	128,	0X6916);
	OpOff		(x,	1,	0X6916);
	OpOff		(x,	129,	0X6916);
	MakeWord	(x=0X6918);
	OpOff		(x,	0,	0X6916);
	OpOff		(x,	128,	0X6916);
	OpOff		(x,	1,	0X6916);
	OpOff		(x,	129,	0X6916);
	MakeWord	(x=0X691A);
	OpOff		(x,	0,	0X6916);
	OpOff		(x,	128,	0X6916);
	OpOff		(x,	1,	0X6916);
	OpOff		(x,	129,	0X6916);
	MakeWord	(x=0X691C);
	OpOff		(x,	0,	0X6916);
	OpOff		(x,	128,	0X6916);
	OpOff		(x,	1,	0X6916);
	OpOff		(x,	129,	0X6916);
	MakeCode	(0X691E);
	MakeCode	(0X6932);
	MakeCode	(0X693A);
	MakeCode	(x=0X693E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X69AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X69B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X69CA);
	MakeByte	(0X69D4);
	MakeName	(0X69D4,	"HeadquartersMembersPositions");
	MakeByte	(0X69D5);
	MakeByte	(0X69D6);
	MakeByte	(0X69D7);
	MakeByte	(0X69D8);
	MakeByte	(0X69D9);
	MakeByte	(0X69DA);
	MakeByte	(0X69DB);
	MakeByte	(0X69DC);
	MakeByte	(0X69DD);
	MakeByte	(0X69DE);
	MakeByte	(0X69DF);
	MakeByte	(0X69E0);
	MakeByte	(0X69E1);
	MakeByte	(0X69E2);
	MakeByte	(0X69E3);
	MakeByte	(0X69E4);
	MakeByte	(0X69E5);
	MakeByte	(0X69E6);
	MakeByte	(0X69E7);
	MakeByte	(0X69E8);
	MakeByte	(0X69E9);
	MakeByte	(0X69EA);
	MakeByte	(0X69EB);
	MakeByte	(0X69EC);
	MakeByte	(0X69ED);
	MakeByte	(0X69EE);
	MakeByte	(0X69EF);
	MakeByte	(0X69F0);
	MakeByte	(0X69F1);
	MakeByte	(0X69F2);
	MakeByte	(0X69F3);
	MakeByte	(0X69F4);
	MakeByte	(0X69F5);
	MakeByte	(0X69F6);
	MakeByte	(0X69F7);
	MakeByte	(0X69F8);
	MakeByte	(0X69F9);
	MakeByte	(0X69FA);
	MakeByte	(0X69FB);
	MakeByte	(0X69FC);
	MakeByte	(0X69FD);
	MakeByte	(0X69FE);
	MakeByte	(0X69FF);
	MakeByte	(0X6A00);
	MakeByte	(0X6A01);
	MakeByte	(0X6A02);
	MakeByte	(0X6A03);
	MakeByte	(0X6A04);
	MakeByte	(0X6A05);
	MakeByte	(0X6A06);
	MakeByte	(0X6A07);
	MakeByte	(0X6A08);
	MakeByte	(0X6A09);
	MakeByte	(0X6A0A);
	MakeByte	(0X6A0B);
	MakeByte	(0X6A0C);
	MakeByte	(0X6A0D);
	MakeByte	(0X6A0E);
	MakeByte	(0X6A0F);
	MakeByte	(0X6A10);
	MakeByte	(0X6A11);
	MakeByte	(0X6A12);
	MakeByte	(0X6A13);
	MakeByte	(0X6A14);
	MakeByte	(0X6A15);
	MakeByte	(0X6A16);
	MakeByte	(0X6A17);
	MakeByte	(0X6A18);
	MakeByte	(0X6A19);
	MakeByte	(0X6A1A);
	MakeByte	(0X6A1B);
	MakeByte	(0X6A1C);
	MakeByte	(0X6A1D);
	MakeByte	(0X6A1E);
	MakeByte	(0X6A1F);
	MakeByte	(0X6A20);
	MakeByte	(0X6A21);
	MakeByte	(0X6A22);
	MakeByte	(0X6A23);
	MakeByte	(0X6A24);
	MakeByte	(0X6A25);
	MakeByte	(0X6A26);
	MakeByte	(0X6A27);
	MakeByte	(0X6A28);
	MakeByte	(0X6A29);
	MakeByte	(0X6A2A);
	MakeByte	(0X6A2B);
	MakeByte	(0X6A2C);
	MakeByte	(0X6A2D);
	MakeCode	(0X6A2E);
	MakeCode	(0X6A7E);
	MakeName	(0X6A7E,	"LoadEndingCutsceneCombatantData");
	MakeCode	(x=0X6A9E);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X6AA0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6AA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(0X6AB8);
	MakeDword	(0X6ABC);
	MakeDword	(0X6AC0);
	MakeDword	(0X6AC4);
	MakeDword	(0X6AC8);
	MakeDword	(0X6ACC);
	MakeDword	(0X6AD0);
	MakeDword	(0X6AD4);
	MakeDword	(0X6AD8);
	MakeDword	(0X6ADC);
	MakeDword	(0X6AE0);
	MakeDword	(0X6AE4);
	MakeDword	(0X6AE8);
	MakeDword	(0X6AEC);
	MakeDword	(0X6AF0);
	MakeDword	(0X6AF4);
	MakeDword	(0X6AF8);
	MakeDword	(0X6AFC);
	MakeDword	(0X6B00);
	MakeDword	(0X6B04);
	MakeDword	(0X6B08);
	MakeDword	(0X6B0C);
	MakeDword	(0X6B10);
	MakeDword	(0X6B14);
	MakeDword	(0X6B18);
	MakeDword	(0X6B1C);
	MakeDword	(0X6B20);
	MakeDword	(0X6B24);
	MakeDword	(0X6B28);
	MakeDword	(0X6B2C);
	MakeDword	(0X6B30);
	MakeDword	(0X6B34);
	MakeCode	(0X6B38);
	MakeCode	(x=0X6B3C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6B40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6B4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6B52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X6B84,	"\"No one is in that direction.[Wait2]\"");
	MakeCode	(x=0X6B88);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X6B9A);
	MakeCode	(x=0X6BBE);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(x=0X6BC2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X6BCE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X6BD8,	"Advisor's entity index (HQ)");
	MakeCode	(0X6BF6);
	MakeCode	(x=0X6C04);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(x=0X6C08);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X6C56,	"\"....[Wait2]\"");
	MakeCode	(0X6C56);
	MakeCode	(x=0X6C5A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X6C6E);
	MakeCode	(x=0X6C72);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6C90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X6CB6);
	MakeCode	(0X6CC4);
	MakeCode	(0X6CEE);
	MakeCode	(0X6D02);
	MakeCode	(0X6D08);
	MakeCode	(x=0X6D0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X6D1E);
	MakeCode	(x=0X6D56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6D74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6DA0);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X6DBC);
	MakeArray	(0X6DBC,	0X4);
	MakeCode	(0X6DC0);
	MakeCode	(x=0X6DC4);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X6DE0);
	MakeArray	(0X6DE0,	0X4);
	MakeCode	(0X6DE4);
	MakeCode	(x=0X6DE8);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X6DF8);
	MakeArray	(0X6DF8,	0X4);
	MakeCode	(0X6DFC);
	MakeCode	(x=0X6E00);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X6E12);
	MakeArray	(0X6E12,	0X4);
	MakeCode	(0X6E16);
	MakeCode	(x=0X6E1A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X6E42);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X6E58);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0X6E70);
	MakeCode	(0X6EA4);
	MakeCode	(0X6EB8);
	MakeCode	(x=0X6ECE);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X6F28,	"\"The [Item] is cursed[Line]and can't be unequipped.[Wait2]\"");
	MakeCode	(x=0X6F2C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X6F3C);
	MakeCode	(x=0X6F48);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X6F6A,	"\"[Name] has been cursed....[Wait2]\"");
	MakeCode	(x=0X6F6E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X6F82);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeCode	(0X6FA0);
	MakeCode	(x=0X6FB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X6FCC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X6FE4);
	MakeCode	(0X6FE6);
	MakeCode	(x=0X6FEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7006);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7020);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X703A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7054);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X705A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7076);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0X7090);
	MakeName	(0X70A4,	"nullsub_70A4");
	MakeCode	(x=0X70A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X70D6);
	MakeByte	(0X70E0);
	MakeByte	(0X70E1);
	MakeByte	(0X70E2);
	MakeByte	(0X70E3);
	MakeByte	(0X70E4);
	MakeByte	(0X70E5);
	MakeByte	(0X70E6);
	MakeByte	(0X70E7);
	MakeCode	(0X70E8);
	MakeCode	(x=0X70EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X70F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7104);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X7104,	"BuildEquipMenuStatsWindow");
	MakeCode	(x=0X7108);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7128);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X714A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X716C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X718E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X71A2);
	MakeCode	(0X71B0);
	MakeCode	(0X71C0);
	MakeCode	(x=0X71CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X71D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7274);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7282);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7288);
	OpHex		(x,	0);
	MakeCode	(0X72A0);
	MakeCode	(0X72C2);
	MakeCode	(x=0X72C8);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(0X72D8);
	MakeCode	(x=0X72DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X72E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X72F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X72F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X730C);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X732E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7338);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X734C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7352);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(0X735A);
	MakeCode	(x=0X735E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7362);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7376);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X738A);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X73AE);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X73B6);
	OpHex		(x,	0);
	MakeCode	(x=0X73C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X73D4);
	MakeName	(0X73D4,	"FindCombatantSlot");
	MakeCode	(x=0X73D6);
	OpDecimal	(x,	0);
	ExtLinB		(0X73E6,	0,	"                ");
	MakeCode	(x=0X73EA);
	OpSign		(x,	0);
	OpHex		(x,	0);
	ExtLinA		(0X73EE,	0,	"; sprite properties data");
	ExtLinA		(0X73EE,	1,	"                ");
	MakeWord	(0X73EE);
	MakeByte	(0X73F0);
	MakeByte	(0X73F1);
	MakeWord	(0X73F2);
	MakeWord	(0X73F4);
	MakeWord	(0X73F6);
	MakeByte	(0X73F8);
	MakeByte	(0X73F9);
	MakeWord	(0X73FA);
	MakeWord	(0X73FC);
	MakeWord	(0X73FE);
	MakeByte	(0X7400);
	MakeByte	(0X7401);
	MakeWord	(0X7402);
	MakeWord	(0X7404);
	MakeWord	(0X7406);
	MakeByte	(0X7408);
	MakeByte	(0X7409);
	MakeWord	(0X740A);
	MakeWord	(0X740C);
	MakeByte	(0X740E);
	MakeName	(0X740E,	"IconHighlightTiles_Equip");
	MakeByte	(0X740F);
	MakeByte	(0X7410);
	MakeByte	(0X7411);
	MakeByte	(0X7412);
	MakeByte	(0X7413);
	MakeByte	(0X7414);
	MakeByte	(0X7415);
	MakeByte	(0X7416);
	MakeByte	(0X7417);
	MakeByte	(0X7418);
	MakeByte	(0X7419);
	MakeByte	(0X741A);
	MakeByte	(0X741B);
	MakeByte	(0X741C);
	MakeByte	(0X741D);
	MakeByte	(0X741E);
	MakeByte	(0X741F);
	MakeByte	(0X7420);
	MakeByte	(0X7421);
	MakeByte	(0X7422);
	MakeByte	(0X7423);
	MakeByte	(0X7424);
	MakeByte	(0X7425);
	MakeByte	(0X7426);
	MakeByte	(0X7427);
	MakeByte	(0X7428);
	MakeByte	(0X7429);
	MakeByte	(0X742A);
	MakeByte	(0X742B);
	MakeByte	(0X742C);
	MakeByte	(0X742D);
	MakeByte	(0X742E);
	MakeByte	(0X742F);
	MakeByte	(0X7430);
	MakeByte	(0X7431);
	MakeByte	(0X7432);
	MakeByte	(0X7433);
	MakeByte	(0X7434);
	MakeByte	(0X7435);
	MakeByte	(0X7436);
	MakeByte	(0X7437);
	MakeByte	(0X7438);
	MakeByte	(0X7439);
	MakeByte	(0X743A);
	MakeByte	(0X743B);
	MakeByte	(0X743C);
	MakeByte	(0X743D);
	MakeByte	(0X743E);
	MakeByte	(0X743F);
	MakeByte	(0X7440);
	MakeByte	(0X7441);
	MakeByte	(0X7442);
	MakeByte	(0X7443);
	MakeByte	(0X7444);
	MakeByte	(0X7445);
	MakeByte	(0X7446);
	MakeByte	(0X7447);
	MakeByte	(0X7448);
	MakeByte	(0X7449);
	MakeByte	(0X744A);
	MakeByte	(0X744B);
	MakeByte	(0X744C);
	MakeByte	(0X744D);
	MakeByte	(0X744E);
	MakeByte	(0X744F);
	MakeByte	(0X7450);
	MakeByte	(0X7451);
	MakeByte	(0X7452);
	MakeByte	(0X7453);
	MakeByte	(0X7454);
	MakeByte	(0X7455);
	MakeByte	(0X7456);
	MakeByte	(0X7457);
	MakeByte	(0X7458);
	MakeByte	(0X7459);
	MakeByte	(0X745A);
	MakeByte	(0X745B);
	MakeByte	(0X745C);
	MakeByte	(0X745D);
	MakeByte	(0X745E);
	MakeByte	(0X745F);
	MakeByte	(0X7460);
	MakeByte	(0X7461);
	MakeByte	(0X7462);
	MakeByte	(0X7463);
	MakeByte	(0X7464);
	MakeByte	(0X7465);
	MakeByte	(0X7466);
	MakeByte	(0X7467);
	MakeByte	(0X7468);
	MakeByte	(0X7469);
	MakeByte	(0X746A);
	MakeByte	(0X746B);
	MakeByte	(0X746C);
	MakeByte	(0X746D);
	MakeByte	(0X746E);
	MakeByte	(0X746F);
	MakeByte	(0X7470);
	MakeByte	(0X7471);
	MakeByte	(0X7472);
	MakeByte	(0X7473);
	MakeByte	(0X7474);
	MakeByte	(0X7475);
	MakeByte	(0X7476);
	MakeByte	(0X7477);
	MakeByte	(0X7478);
	MakeByte	(0X7479);
	MakeByte	(0X747A);
	MakeByte	(0X747B);
	MakeByte	(0X747C);
	MakeByte	(0X747D);
	MakeByte	(0X747E);
	MakeByte	(0X747F);
	MakeByte	(0X7480);
	MakeByte	(0X7481);
	MakeByte	(0X7482);
	MakeByte	(0X7483);
	MakeByte	(0X7484);
	MakeByte	(0X7485);
	MakeByte	(0X7486);
	MakeByte	(0X7487);
	MakeByte	(0X7488);
	MakeByte	(0X7489);
	MakeByte	(0X748A);
	MakeByte	(0X748B);
	MakeByte	(0X748C);
	MakeByte	(0X748D);
	MakeByte	(0X748E);
	MakeByte	(0X748F);
	MakeByte	(0X7490);
	MakeByte	(0X7491);
	MakeByte	(0X7492);
	MakeByte	(0X7493);
	MakeByte	(0X7494);
	MakeByte	(0X7495);
	MakeByte	(0X7496);
	MakeByte	(0X7497);
	MakeByte	(0X7498);
	MakeByte	(0X7499);
	MakeByte	(0X749A);
	MakeByte	(0X749B);
	MakeByte	(0X749C);
	MakeByte	(0X749D);
	MakeByte	(0X749E);
	MakeByte	(0X749F);
	MakeByte	(0X74A0);
	MakeByte	(0X74A1);
	MakeByte	(0X74A2);
	MakeByte	(0X74A3);
	MakeByte	(0X74A4);
	MakeByte	(0X74A5);
	MakeByte	(0X74A6);
	MakeByte	(0X74A7);
	MakeByte	(0X74A8);
	MakeByte	(0X74A9);
	MakeByte	(0X74AA);
	MakeByte	(0X74AB);
	MakeByte	(0X74AC);
	MakeByte	(0X74AD);
	MakeByte	(0X74AE);
	MakeByte	(0X74AF);
	MakeByte	(0X74B0);
	MakeByte	(0X74B1);
	MakeByte	(0X74B2);
	MakeByte	(0X74B3);
	MakeByte	(0X74B4);
	MakeByte	(0X74B5);
	MakeByte	(0X74B6);
	MakeByte	(0X74B7);
	MakeByte	(0X74B8);
	MakeByte	(0X74B9);
	MakeByte	(0X74BA);
	MakeByte	(0X74BB);
	MakeByte	(0X74BC);
	MakeByte	(0X74BD);
	MakeByte	(0X74BE);
	MakeByte	(0X74BF);
	MakeByte	(0X74C0);
	MakeByte	(0X74C1);
	MakeByte	(0X74C2);
	MakeByte	(0X74C3);
	MakeByte	(0X74C4);
	MakeByte	(0X74C5);
	MakeByte	(0X74C6);
	MakeByte	(0X74C7);
	MakeByte	(0X74C8);
	MakeByte	(0X74C9);
	MakeByte	(0X74CA);
	MakeByte	(0X74CB);
	MakeByte	(0X74CC);
	MakeByte	(0X74CD);
	MakeByte	(0X74CE);
	MakeByte	(0X74CF);
	MakeByte	(0X74D0);
	MakeByte	(0X74D1);
	MakeByte	(0X74D2);
	MakeByte	(0X74D3);
	MakeByte	(0X74D4);
	MakeByte	(0X74D5);
	MakeByte	(0X74D6);
	MakeByte	(0X74D7);
	MakeByte	(0X74D8);
	MakeByte	(0X74D9);
	MakeByte	(0X74DA);
	MakeByte	(0X74DB);
	MakeByte	(0X74DC);
	MakeByte	(0X74DD);
	MakeByte	(0X74DE);
	MakeByte	(0X74DF);
	MakeByte	(0X74E0);
	MakeByte	(0X74E1);
	MakeByte	(0X74E2);
	MakeByte	(0X74E3);
	MakeByte	(0X74E4);
	MakeByte	(0X74E5);
	MakeByte	(0X74E6);
	MakeByte	(0X74E7);
	MakeByte	(0X74E8);
	MakeByte	(0X74E9);
	MakeByte	(0X74EA);
	MakeByte	(0X74EB);
	MakeByte	(0X74EC);
	MakeByte	(0X74ED);
	MakeByte	(0X74EE);
	MakeByte	(0X74EF);
	MakeByte	(0X74F0);
	MakeByte	(0X74F1);
	MakeByte	(0X74F2);
	MakeByte	(0X74F3);
	MakeByte	(0X74F4);
	MakeByte	(0X74F5);
	MakeByte	(0X74F6);
	MakeByte	(0X74F7);
	MakeByte	(0X74F8);
	MakeByte	(0X74F9);
	MakeByte	(0X74FA);
	MakeByte	(0X74FB);
	MakeByte	(0X74FC);
	MakeByte	(0X74FD);
	MakeByte	(0X74FE);
	MakeByte	(0X74FF);
	MakeByte	(0X7500);
	MakeByte	(0X7501);
	MakeByte	(0X7502);
	MakeByte	(0X7503);
	MakeByte	(0X7504);
	MakeByte	(0X7505);
	MakeByte	(0X7506);
	MakeByte	(0X7507);
	MakeByte	(0X7508);
	MakeByte	(0X7509);
	MakeByte	(0X750A);
	MakeByte	(0X750B);
	MakeByte	(0X750C);
	MakeByte	(0X750D);
	MakeByte	(0X750E);
	MakeByte	(0X750F);
	MakeByte	(0X7510);
	MakeByte	(0X7511);
	MakeByte	(0X7512);
	MakeByte	(0X7513);
	MakeByte	(0X7514);
	MakeByte	(0X7515);
	MakeByte	(0X7516);
	MakeByte	(0X7517);
	MakeByte	(0X7518);
	MakeByte	(0X7519);
	MakeByte	(0X751A);
	MakeByte	(0X751B);
	MakeByte	(0X751C);
	MakeByte	(0X751D);
	MakeByte	(0X751E);
	MakeByte	(0X751F);
	MakeByte	(0X7520);
	MakeByte	(0X7521);
	MakeByte	(0X7522);
	MakeByte	(0X7523);
	MakeByte	(0X7524);
	MakeByte	(0X7525);
	MakeByte	(0X7526);
	MakeByte	(0X7527);
	MakeByte	(0X7528);
	MakeByte	(0X7529);
	MakeByte	(0X752A);
	MakeByte	(0X752B);
	MakeByte	(0X752C);
	MakeByte	(0X752D);
	MakeByte	(0X752E);
	MakeByte	(0X752F);
	MakeByte	(0X7530);
	MakeByte	(0X7531);
	MakeByte	(0X7532);
	MakeByte	(0X7533);
	MakeByte	(0X7534);
	MakeByte	(0X7535);
	MakeByte	(0X7536);
	MakeByte	(0X7537);
	MakeByte	(0X7538);
	MakeByte	(0X7539);
	MakeByte	(0X753A);
	MakeByte	(0X753B);
	MakeByte	(0X753C);
	MakeByte	(0X753D);
	MakeByte	(0X753E);
	MakeByte	(0X753F);
	MakeByte	(0X7540);
	MakeByte	(0X7541);
	MakeByte	(0X7542);
	MakeByte	(0X7543);
	MakeByte	(0X7544);
	MakeByte	(0X7545);
	MakeByte	(0X7546);
	MakeByte	(0X7547);
	MakeByte	(0X7548);
	MakeByte	(0X7549);
	MakeByte	(0X754A);
	MakeByte	(0X754B);
	MakeByte	(0X754C);
	MakeByte	(0X754D);
	MakeByte	(0X754E);
	MakeByte	(0X754F);
	MakeByte	(0X7550);
	MakeByte	(0X7551);
	MakeByte	(0X7552);
	MakeByte	(0X7553);
	MakeByte	(0X7554);
	MakeByte	(0X7555);
	MakeByte	(0X7556);
	MakeByte	(0X7557);
	MakeByte	(0X7558);
	MakeByte	(0X7559);
	MakeByte	(0X755A);
	MakeByte	(0X755B);
	MakeByte	(0X755C);
	MakeByte	(0X755D);
	MakeByte	(0X755E);
	MakeByte	(0X755F);
	MakeByte	(0X7560);
	MakeByte	(0X7561);
	MakeByte	(0X7562);
	MakeByte	(0X7563);
	MakeByte	(0X7564);
	MakeByte	(0X7565);
	MakeByte	(0X7566);
	MakeByte	(0X7567);
	MakeByte	(0X7568);
	MakeByte	(0X7569);
	MakeByte	(0X756A);
	MakeByte	(0X756B);
	MakeByte	(0X756C);
	MakeByte	(0X756D);
	MakeByte	(0X756E);
	MakeByte	(0X756F);
	MakeByte	(0X7570);
	MakeByte	(0X7571);
	MakeByte	(0X7572);
	MakeByte	(0X7573);
	MakeByte	(0X7574);
	MakeByte	(0X7575);
	MakeByte	(0X7576);
	MakeByte	(0X7577);
	MakeByte	(0X7578);
	MakeByte	(0X7579);
	MakeByte	(0X757A);
	MakeByte	(0X757B);
	MakeByte	(0X757C);
	MakeByte	(0X757D);
	MakeByte	(0X757E);
	MakeByte	(0X757F);
	MakeByte	(0X7580);
	MakeByte	(0X7581);
	MakeByte	(0X7582);
	MakeByte	(0X7583);
	MakeByte	(0X7584);
	MakeByte	(0X7585);
	MakeByte	(0X7586);
	MakeByte	(0X7587);
	MakeByte	(0X7588);
	MakeByte	(0X7589);
	MakeByte	(0X758A);
	MakeByte	(0X758B);
	MakeByte	(0X758C);
	MakeByte	(0X758D);
	MakeByte	(x=0X758E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(x=0X758F);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(x=0X7590);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(x=0X7591);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(x=0X7592);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(x=0X7593);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeStr		(0X7594,	0X75A0);
	MakeName	(0X7594,	"aWeaponring");
	MakeWord	(0X75A0);
	MakeName	(0X75A0,	"wl_75A0");
	MakeWord	(0X75A2);
	MakeWord	(0X75A4);
	MakeWord	(0X75A6);
	MakeWord	(0X75A8);
	MakeWord	(0X75AA);
	MakeWord	(0X75AC);
	MakeWord	(0X75AE);
	MakeWord	(0X75B0);
	MakeWord	(0X75B2);
	MakeWord	(0X75B4);
	MakeWord	(0X75B6);
	MakeWord	(0X75B8);
	MakeWord	(0X75BA);
	MakeWord	(0X75BC);
	MakeWord	(0X75BE);
	MakeWord	(0X75C0);
	MakeWord	(0X75C2);
	MakeWord	(0X75C4);
	MakeWord	(0X75C6);
	MakeWord	(0X75C8);
	MakeWord	(0X75CA);
	MakeWord	(0X75CC);
	MakeWord	(0X75CE);
	MakeWord	(0X75D0);
	MakeWord	(0X75D2);
	MakeWord	(0X75D4);
	MakeWord	(0X75D6);
	MakeWord	(0X75D8);
	MakeWord	(0X75DA);
	MakeWord	(0X75DC);
	MakeWord	(0X75DE);
	MakeWord	(0X75E0);
	MakeWord	(0X75E2);
	MakeWord	(0X75E4);
	MakeWord	(0X75E6);
	MakeWord	(x=0X75E8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0X75E8,	"wl_EquipMenu_Stats");
	MakeWord	(x=0X75EA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X75EC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X75EE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X75F0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X75F2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X75F4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X75F6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X75F8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X75FA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X75FC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X75FE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7600);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7602);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7604);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7606);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7608);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X760A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X760C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X760E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7610);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7612);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7614);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7616);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7618);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X761A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X761C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X761E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7620);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7622);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7624);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7626);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7628);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X762A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X762C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X762E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7630);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7632);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7634);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7636);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7638);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X763A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X763C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X763E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7640);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7642);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7644);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7646);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7648);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X764A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X764C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X764E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7650);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7652);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7654);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7656);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7658);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X765A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X765C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X765E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7660);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7662);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7664);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7666);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7668);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X766A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X766C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X766E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7670);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7672);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7674);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7676);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7678);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X767A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X767C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X767E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7680);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7682);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7684);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7686);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7688);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X768A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X768C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X768E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7690);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7692);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7694);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7696);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7698);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X769A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X769C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X769E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76A0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76A2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76A4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76A6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76A8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76AA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76AC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76AE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76B0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76B2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76B4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76B6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76B8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76BA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76BC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76BE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76C0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0X76C0,	"wl_EquipMenu_MemberName");
	MakeWord	(x=0X76C2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76C4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76C6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76C8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76CA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76CC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76CE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76D0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76D2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76D4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76D6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76D8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76DA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76DC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76DE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76E0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76E2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76E4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76E6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76E8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76EA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76EC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76EE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76F0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76F2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76F4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76F6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76F8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76FA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76FC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X76FE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7700);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7702);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7704);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7706);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7708);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X770A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X770C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X770E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7710);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7712);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7714);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7716);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7718);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X771A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X771C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X771E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7720);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7722);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7724);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7726);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7728);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X772A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X772C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0X772C,	"wl_EquipMenu_ItemName");
	MakeWord	(x=0X772E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7730);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7732);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7734);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7736);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7738);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X773A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X773C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X773E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7740);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7742);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7744);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7746);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7748);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X774A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X774C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X774E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7750);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7752);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7754);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7756);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7758);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X775A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X775C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X775E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7760);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7762);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7764);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7766);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7768);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X776A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X776C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X776E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7770);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7772);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7774);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7776);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7778);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X777A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X777C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X777E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7780);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7782);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7784);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7786);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7788);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X778A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X778C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X778E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7790);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7792);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7794);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7796);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7798);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X779A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X779C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X779E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X77A0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X77A2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(0X77A4);
	MakeCode	(x=0X77AA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X77C4);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X77CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X77D2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X77D6);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X77DE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X77E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X77F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X77F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X7806);
	MakeArray	(0X7806,	0X4);
	MakeRptCmt	(0X780A,	"\"[Name] discovers a[Line][Item]![Wait2]\"");
	MakeCode	(0X780A);
	MakeCode	(x=0X780E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X781A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7828);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X7850,	"\"Will Darksol release Dark[Line]Dragon from the bonds of the[Line]Ancients?[Wait2][Line]Or will [Hero] stop[Line]Darksol and save all of[Line]Rune from the ultimate evil?[Wait2][Line]The Shining Force hurries[Line]on to Prompt....[Wait2]\"");
	MakeCode	(x=0X7854);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X7872);
	MakeRptCmt	(0X7876,	"\"[Name] discovers a[Line][Item]![Wait2]\"");
	MakeCode	(x=0X787A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X787C,	"\"But can't carry it![Wait2]\"");
	MakeCode	(x=0X7880);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X7898);
	MakeRptCmt	(0X789E,	"\"The treasure chest is empty.[Wait2]\"");
	MakeCode	(x=0X78A2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X78A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X78B0);
	MakeCode	(x=0X78BC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X78CC);
	MakeArray	(0X78CC,	0X4);
	MakeRptCmt	(0X78D0,	"\"[Name] gains [Num] coins.[Wait2]\"");
	MakeCode	(0X78D0);
	MakeCode	(x=0X78D4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X78DC);
	MakeArray	(0X78DC,	0X4);
	MakeCode	(0X78E0);
	MakeWord	(x=0X78E2);
	OpDecimal	(x,	0);
	MakeName	(0X78E2,	"tbl_BattleChestGoldAmounts");
	MakeWord	(x=0X78E4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X78E6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X78E8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X78EA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X78EC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X78EE);
	OpDecimal	(x,	0);
	MakeWord	(x=0X78F0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X78F2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X78F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X7900,	"\"Nothing is found.[Wait2]\"");
	MakeCode	(x=0X7904);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X790A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X790A,	"optionMenu_Speed");
	MakeCode	(x=0X7924);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X792A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X793A);
	MakeArray	(0X793A,	0X4);
	MakeCode	(x=0X793E);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X794E);
	MakeArray	(0X794E,	0X4);
	MakeCode	(x=0X7952);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X795E);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X796A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X7982);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X798C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X79A8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X79B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X79D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X79D6,	"optionMenuAction_Message");
	MakeCode	(x=0X79F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X79F6);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X7A06);
	MakeArray	(0X7A06,	0X4);
	MakeCode	(x=0X7A0A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X7A1A);
	MakeArray	(0X7A1A,	0X4);
	MakeCode	(x=0X7A1E);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X7A2A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X7A36);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X7A52);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X7A5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7A78);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X7A84);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7AA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X7AA6,	"optionMenuAction_Quit");
	MakeCode	(x=0X7AC4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7ACC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X7AE4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X7AEE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X7B12);
	MakeArray	(0X7B12,	0X4);
	MakeCode	(0X7B16);
	MakeCode	(x=0X7B1A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X7B32);
	MakeWord	(x=0X7B58);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0X7B58,	"wl_BattleOption_Speed");
	MakeWord	(x=0X7B5A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B5C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B5E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B60);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B62);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B64);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B66);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B68);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B6A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B6C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B6E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B70);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B72);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B74);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B76);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B78);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B7A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B7C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B7E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B80);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B82);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B84);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B86);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B88);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B8A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B8C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B8E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B90);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B92);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B94);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B96);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B98);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B9A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B9C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7B9E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BA0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BA2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BA4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BA6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BA8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BAA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BAC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BAE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BB0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BB2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BB4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BB6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BB8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BBA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BBC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BBE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BC0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BC2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BC4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BC6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BC8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BCA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BCC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BCE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BD0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BD2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BD4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BD6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BD8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BDA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BDC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BDE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BE0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BE2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BE4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BE6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BE8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BEA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BEC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BEE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BF0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BF2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BF4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BF6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BF8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BFA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BFC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7BFE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C00);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C02);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C04);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C06);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C08);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C0A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C0C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C0E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C10);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C12);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C14);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C16);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C18);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C1A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C1C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C1E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C20);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C22);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C24);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C26);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C28);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C2A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C2C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C2E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C30);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C32);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C34);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C36);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C38);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C3A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C3C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C3E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C40);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C42);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C44);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C46);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0X7C46,	"wl_BattleOption_Message");
	MakeWord	(x=0X7C48);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C4A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C4C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C4E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C50);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C52);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C54);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C56);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C58);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C5A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C5C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C5E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C60);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C62);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C64);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C66);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C68);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C6A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C6C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C6E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C70);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C72);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C74);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C76);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C78);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C7A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C7C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C7E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C80);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C82);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C84);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C86);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C88);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C8A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C8C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C8E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C90);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C92);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C94);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C96);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C98);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C9A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C9C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7C9E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CA0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CA2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CA4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CA6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CA8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CAA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CAC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CAE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CB0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CB2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CB4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CB6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CB8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CBA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CBC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CBE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CC0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CC2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CC4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CC6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CC8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CCA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CCC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CCE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CD0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CD2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CD4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CD6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CD8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CDA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CDC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CDE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CE0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CE2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CE4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CE6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CE8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CEA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CEC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CEE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CF0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CF2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CF4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CF6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CF8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CFA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CFC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7CFE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D00);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D02);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D04);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D06);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	MakeWord	(x=0X7D08);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D0A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D0C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D0E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D10);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D12);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D14);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D16);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D18);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D1A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D1C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D1E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D20);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D22);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D24);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D26);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D28);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D2A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D2C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D2E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D30);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D32);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D34);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0X7D34,	"layout_BattlefieldQuitWindow");
	MakeWord	(x=0X7D36);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D38);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D3A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D3C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D3E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D40);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D42);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D44);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D46);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D48);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D4A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D4C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D4E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D50);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D52);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D54);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D56);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D58);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D5A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D5C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D5E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D60);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D62);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D64);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D66);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D68);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D6A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D6C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D6E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D70);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D72);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D74);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D76);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D78);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D7A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D7C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D7E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D80);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D82);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D84);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D86);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D88);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D8A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D8C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D8E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D90);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D92);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D94);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D96);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D98);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D9A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D9C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7D9E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DA0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DA2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DA4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DA6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DA8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DAA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DAC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DAE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DB0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DB2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DB4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DB6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DB8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DBA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DBC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DBE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DC0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DC2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DC4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DC6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DC8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DCA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DCC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DCE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DD0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DD2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DD4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DD6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DD8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DDA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DDC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DDE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DE0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DE2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DE4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DE6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DE8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DEA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DEC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DEE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DF0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DF2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DF4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DF6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DF8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DFA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DFC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7DFE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E00);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E02);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E04);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E06);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E08);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E0A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E0C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E0E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E10);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E12);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E14);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E16);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E18);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E1A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E1C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E1E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0X7E20);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeArray	(0X7E22,	0X1DE);
	MakeCode	(0X8000);
	MakeName	(0X8000,	"j_BattleLoop");
	MakeCode	(0X8004);
	MakeCode	(0X8008);
	MakeName	(0X8008,	"j_nullsub_8DDE");
	MakeCode	(0X800C);
	MakeCode	(0X8010);
	MakeCode	(0X8014);
	MakeCode	(0X8018);
	MakeCode	(0X801C);
	MakeName	(0X801C,	"j_CreateWindow");
	MakeCode	(0X8020);
	MakeName	(0X8020,	"j_MoveWindowWithSfx");
	MakeCode	(0X8024);
	MakeCode	(0X8028);
	MakeCode	(0X802C);
	MakeName	(0X802C,	"j_OpenPortraitWindow");
	MakeCode	(0X8030);
	MakeName	(0X8030,	"j_ClosePortraitWindow");
	MakeCode	(0X8034);
	MakeCode	(0X8038);
	MakeCode	(0X803C);
	MakeCode	(0X8040);
	MakeName	(0X8040,	"j_CreateMembersListScreen");
	MakeCode	(0X8044);
	MakeCode	(0X8048);
	MakeCode	(0X804C);
	MakeName	(0X804C,	"j_WriteTilesFromAscii");
	MakeCode	(0X8050);
	MakeName	(0X8050,	"j_WriteTilesFromNumber");
	MakeCode	(0X8054);
	MakeCode	(0X8058);
	MakeName	(0X8058,	"j_BuildMemberStatusWindow");
	MakeCode	(0X805C);
	MakeName	(0X805C,	"j_PlayCursedItemMusic");
	MakeCode	(0X8060);
	MakeCode	(0X8064);
	MakeCode	(0X8068);
	MakeCode	(0X806C);
	MakeName	(0X806C,	"j_PickItemSlot");
	MakeCode	(0X8070);
	MakeName	(0X8070,	"j_OpenMiniStatusWindow");
	MakeCode	(0X8074);
	MakeName	(0X8074,	"j_CloseMiniStatusWindow");
	MakeCode	(0X8078);
	MakeCode	(0X807C);
	MakeCode	(0X8080);
	MakeCode	(0X8084);
	MakeCode	(0X8088);
	MakeCode	(0X808C);
	MakeCode	(0X8090);
	MakeCode	(0X8094);
	MakeName	(0X8094,	"j_LoadCursorTiles");
	MakeCode	(0X8098);
	MakeCode	(0X809C);
	MakeCode	(0X80A0);
	MakeName	(0X80A0,	"j_nullsub_8DE0");
	MakeCode	(0X80A4);
	MakeCode	(0X80A8);
	MakeCode	(0X80AC);
	MakeCode	(0X80B0);
	MakeCode	(0X80B4);
	MakeCode	(0X80B8);
	MakeName	(0X80B8,	"j_UpdateBattlefieldSprites");
	MakeCode	(0X80BC);
	MakeName	(0X80BC,	"j_nullsub_80E0");
	MakeCode	(0X80C0);
	MakeName	(0X80C0,	"j_MoveWindow");
	MakeCode	(0X80C4);
	MakeCode	(0X80C8);
	MakeCode	(0X80CC);
	MakeCode	(0X80D0);
	MakeCode	(0X80D4);
	MakeCode	(0X80D8);
	MakeCode	(0X80DC);
	MakeCode	(0X80E0);
	MakeName	(0X80E0,	"nullsub_80E0");
	MakeCode	(0X80E2);
	MakeCode	(x=0X80E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8108);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X810C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8110);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X811A);
	MakeName	(0X811A,	"BattleLoop");
	MakeCode	(x=0X8120);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8124);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X812A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X812E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8132);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8156);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8160);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X816E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X817A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8184);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8192);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8196);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X81A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X81AE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X81B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X81C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X81D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X81D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X81DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X81E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X81EA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X821C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X822C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8234);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8238);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8244);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X824E);
	OpSign		(x,	0);
	OpHex		(x,	0);
	MakeCode	(x=0X825A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X825E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X826A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X8280,	"Check D0 for battle end\n    0 = not done\n    1 = win\n    2 = lose");
	MakeCode	(x=0X8284);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8288);
	OpEnumEx		(x,	0,	GetEnum("TurnOrderProperties"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X8296);
	MakeByte	(0X82AA);
	MakeArray	(0X82AA,	0X4);
	MakeCode	(0X82AE);
	MakeRptCmt	(0X82B8,	"\"[Hero] has been[Line]defeated...[Wait2]\"");
	MakeCode	(x=0X82BC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X82C8);
	MakeArray	(0X82C8,	0X4);
	MakeCode	(0X82CC);
	MakeCode	(0X82DC);
	MakeCode	(x=0X82DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X830A);
	MakeCode	(0X8332);
	MakeCode	(x=0X8338);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8348);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8356);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8362);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8370);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8390);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X83BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X83D4,	"\"[Name] appears![Wait2]\"");
	MakeCode	(x=0X83D8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X83E4);
	MakeCode	(x=0X83E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X83F4);
	MakeCode	(x=0X83F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8410);
	OpSign		(x,	0);
	OpHex		(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X841C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X8430);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8436);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8448);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X8460);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X8476);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0X8488);
	MakeCode	(0X8492);
	MakeCode	(0X849C);
	MakeCode	(x=0X84A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X84AE);
	MakeCode	(x=0X8522);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X852C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X853E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8544);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X854E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8558);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8560);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8582);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8588);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8598);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X859C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X85A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X85A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X85B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X85B6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X85BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X85C2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X85C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X85CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X85D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X85E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X85E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X860A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8610);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X861E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8622);
	OpSign		(x,	0);
	OpHex		(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8628);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X862C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8636);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X863E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8644);
	OpSign		(x,	0);
	OpHex		(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X864A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8650);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8656);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X865C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8664);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X866E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8676);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8698);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X86A8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X86AC);
	OpSign		(x,	0);
	OpHex		(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X86B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X86B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X86C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X86C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X86CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X86D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X86DA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X86E0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X86EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X86F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X86FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X871E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X872E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8732);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8738);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X873C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8746);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X874E);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8754);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X875A);
	MakeCode	(x=0X8770);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X8770,	"LoadCursorTiles");
	MakeCode	(x=0X8778);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8786);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X87A2,	"unknown tiles");
	MakeByte	(0X87A2);
	MakeName	(0X87A2,	"til_87A2");
	MakeByte	(0X87A3);
	MakeByte	(0X87A4);
	MakeByte	(0X87A5);
	MakeByte	(0X87A6);
	MakeByte	(0X87A7);
	MakeByte	(0X87A8);
	MakeByte	(0X87A9);
	MakeCode	(0X87AA);
	MakeCode	(x=0X87AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X87B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X87B8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X87BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X87C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X87CA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X87D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X87D2,	"LoadCursorSpriteData");
	MakeCode	(x=0X87DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X87E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X87EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X87F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8804);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8814);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X881C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8820);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8830);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X883E);
	OpHex		(x,	0);
	MakeCode	(x=0X8844);
	OpHex		(x,	0);
	MakeRptCmt	(0X8854,	"sprite properties");
	MakeWord	(0X8854);
	MakeName	(0X8854,	"spr_TargetingCursors");
	MakeWord	(0X8856);
	MakeWord	(0X8858);
	MakeWord	(0X885A);
	MakeWord	(0X885C);
	MakeWord	(0X885E);
	MakeWord	(0X8860);
	MakeWord	(0X8862);
	MakeWord	(0X8864);
	MakeWord	(0X8866);
	MakeWord	(0X8868);
	MakeWord	(0X886A);
	MakeWord	(0X886C);
	MakeWord	(0X886E);
	MakeWord	(0X8870);
	MakeWord	(0X8872);
	MakeWord	(0X8874);
	MakeWord	(0X8876);
	MakeWord	(0X8878);
	MakeWord	(0X887A);
	MakeWord	(0X887C);
	MakeWord	(0X887E);
	MakeWord	(0X8880);
	MakeWord	(0X8882);
	MakeWord	(0X8884);
	MakeWord	(0X8886);
	MakeWord	(0X8888);
	MakeWord	(0X888A);
	MakeWord	(0X888C);
	MakeWord	(0X888E);
	MakeWord	(0X8890);
	MakeWord	(0X8892);
	MakeWord	(0X8894);
	MakeWord	(0X8896);
	MakeWord	(0X8898);
	MakeWord	(0X889A);
	MakeWord	(0X889C);
	MakeWord	(0X889E);
	MakeWord	(0X88A0);
	MakeWord	(0X88A2);
	MakeWord	(0X88A4);
	MakeWord	(0X88A6);
	MakeWord	(0X88A8);
	MakeWord	(0X88AA);
	MakeWord	(0X88AC);
	MakeWord	(0X88AE);
	MakeWord	(0X88B0);
	MakeWord	(0X88B2);
	MakeWord	(0X88B4);
	MakeWord	(0X88B6);
	MakeWord	(0X88B8);
	MakeWord	(0X88BA);
	MakeWord	(0X88BC);
	MakeWord	(0X88BE);
	MakeWord	(0X88C0);
	MakeWord	(0X88C2);
	MakeWord	(0X88C4);
	MakeWord	(0X88C6);
	MakeWord	(0X88C8);
	MakeWord	(0X88CA);
	MakeWord	(0X88CC);
	MakeWord	(0X88CE);
	MakeWord	(0X88D0);
	MakeWord	(0X88D2);
	MakeWord	(0X88D4);
	MakeWord	(0X88D6);
	MakeWord	(0X88D8);
	MakeWord	(0X88DA);
	MakeWord	(0X88DC);
	MakeWord	(0X88DE);
	MakeWord	(0X88E0);
	MakeWord	(0X88E2);
	MakeWord	(0X88E4);
	MakeWord	(0X88E6);
	MakeWord	(0X88E8);
	MakeWord	(0X88EA);
	MakeWord	(0X88EC);
	MakeWord	(0X88EE);
	MakeWord	(0X88F0);
	MakeWord	(0X88F2);
	MakeWord	(0X88F4);
	MakeWord	(0X88F6);
	MakeWord	(0X88F8);
	MakeWord	(0X88FA);
	MakeWord	(0X88FC);
	MakeWord	(0X88FE);
	MakeWord	(0X8900);
	MakeWord	(0X8902);
	MakeWord	(0X8904);
	MakeWord	(0X8906);
	MakeWord	(0X8908);
	MakeWord	(0X890A);
	MakeWord	(0X890C);
	MakeWord	(0X890E);
	MakeWord	(0X8910);
	MakeWord	(0X8912);
	MakeWord	(0X8914);
	MakeName	(0X8914,	"spr_DefaultTargetingCursor");
	MakeWord	(0X8916);
	MakeWord	(0X8918);
	MakeWord	(0X891A);
	MakeCode	(x=0X891C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8920);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8926);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X893A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8952);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X896C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X897A);
	OpHex		(x,	0);
	MakeCode	(0X8986);
	MakeCode	(x=0X898E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8992);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X899E);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X89A2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X89A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X89C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X89E2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X89FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X89FE,	"UpdateCursorSpriteData");
	MakeCode	(x=0X8A06);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8A20);
	MakeCode	(x=0X8A22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8A3C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8A46);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8A4A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X8A52);
	MakeCode	(x=0X8A60);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8A6A);
	MakeCode	(x=0X8A6E);
	OpSign		(x,	0);
	OpHex		(x,	0);
	MakeCode	(x=0X8A76);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8A7E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8A82);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8A8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8AA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8AB0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8AB4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X8ABC);
	MakeCode	(x=0X8ACA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8AD4);
	MakeCode	(x=0X8AE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8AE8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8AEC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X8AF4);
	MakeName	(0X8AF4,	"UpdateBattlefieldCamera");
	MakeCode	(x=0X8AFC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8B04);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8B0E);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X8B12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8B1A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8B24);
	OpDecimal	(x,	0);
	MakeCode	(x=0X8B28);
	OpDecimal	(x,	0);
	MakeCode	(x=0X8B2A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8B4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8B64);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8B80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X8B80,	"UpdateCursorSpriteData_0");
	MakeCode	(x=0X8B8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8BA6);
	MakeCode	(x=0X8BA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X8BA8,	"UpdateBackgroundHScrollForBattlefieldCamera");
	MakeCode	(x=0X8BC4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8BCE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8BD2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X8BDA);
	MakeCode	(x=0X8BE8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8BF2);
	MakeCode	(x=0X8BFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8C06);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8C0A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8C12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X8C12,	"UpdateBackgroundVScrollForBattlefieldCamera");
	MakeCode	(x=0X8C2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8C38);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8C3C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X8C44);
	MakeCode	(x=0X8C52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8C5C);
	MakeCode	(x=0X8C68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8C70);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8C74);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8C7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8C80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8C88);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X8C96);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X8CA4);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X8CB2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X8CC0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X8CC6);
	MakeArray	(0X8CC6,	0X4);
	MakeCode	(0X8CCA);
	MakeCode	(0X8CD4);
	MakeCode	(x=0X8CD6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8CDC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8CE4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8CEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8CF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8CF8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8CFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8D04);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8D0C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X8D1C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X8D2C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X8D3C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X8D4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8D50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X8D56);
	MakeArray	(0X8D56,	0X4);
	MakeCode	(0X8D5A);
	MakeCode	(x=0X8D66);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8D6E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8D7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8D88);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8D8C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8D92);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8D98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X8DB8);
	OpOff		(x,	0,	0X8DB8);
	OpOff		(x,	128,	0X8DB8);
	OpOff		(x,	1,	0X8DB8);
	OpOff		(x,	129,	0X8DB8);
	MakeWord	(x=0X8DBA);
	OpOff		(x,	0,	0X8DB8);
	OpOff		(x,	128,	0X8DB8);
	OpOff		(x,	1,	0X8DB8);
	OpOff		(x,	129,	0X8DB8);
	MakeWord	(x=0X8DBC);
	OpOff		(x,	0,	0X8DB8);
	OpOff		(x,	128,	0X8DB8);
	OpOff		(x,	1,	0X8DB8);
	OpOff		(x,	129,	0X8DB8);
	MakeWord	(x=0X8DBE);
	OpOff		(x,	0,	0X8DB8);
	OpOff		(x,	128,	0X8DB8);
	OpOff		(x,	1,	0X8DB8);
	OpOff		(x,	129,	0X8DB8);
	MakeCode	(x=0X8DC0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8DC6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X8DCC);
	MakeArray	(0X8DCC,	0X4);
	MakeCode	(0X8DD0);
	MakeCode	(0X8DDE);
	MakeName	(0X8DDE,	"nullsub_8DDE");
	MakeCode	(0X8DE0);
	MakeName	(0X8DE0,	"nullsub_8DE0");
	MakeCode	(x=0X8DE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X8DE2,	"UpdateScreenAfterTileChange");
	MakeCode	(x=0X8DE8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8DF6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8DFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8E0C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8E14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8E34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8E3A);
	OpHex		(x,	0);
	MakeCode	(x=0X8E52);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8E58);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X8E5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8E64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8E68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8E76);
	MakeCode	(x=0X8E7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8E80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8E8C);
	MakeCode	(x=0X8E92);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8EA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8EAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8EAE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8EB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8EBC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X8EBC,	"PopulateTurnOrder");
	MakeCode	(x=0X8EC2);
	OpEnumEx		(x,	0,	GetEnum("TurnOrderProperties"),0);
	ExtLinA		(0X8ECA,	0,	"                ");
	MakeCode	(x=0X8ECE);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeRptCmt	(0X8ED0,	"save loop counter");
	MakeCode	(x=0X8ED8);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	ExtLinA		(0X8EE0,	0,	"                ");
	ExtLinA		(0X8EE0,	1,	"                ; Do not get a turn if agility = 255");
	MakeCode	(x=0X8EE2);
	OpSign		(x,	0);
	OpHex		(x,	0);
	MakeCode	(0X8EE8);
	MakeRptCmt	(0X8EEA,	"fall back to default randomization if agility is 0 or less");
	ExtLinA		(0X8EEE,	0,	"                ");
	ExtLinA		(0X8EEE,	1,	"                ; Regular randomization method");
	MakeCode	(x=0X8EF0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X8EF4);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X8EF8,	"D6 = (agility * 51 + 128) / 256");
	MakeCode	(0X8F18);
	MakeRptCmt	(0X8F26,	"restore loop counter -> D7");
	MakeCode	(x=0X8F2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8F38);
	OpEnumEx		(x,	0,	GetEnum("TurnOrderProperties"),0);
	MakeCode	(x=0X8F3A);
	OpEnumEx		(x,	0,	GetEnum("TurnOrderProperties"),0);
	MakeCode	(x=0X8F3C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8F42);
	OpEnumEx		(x,	0,	GetEnum("TurnOrderProperties"),1);
	MakeCode	(x=0X8F4C);
	OpEnumEx		(x,	1,	GetEnum("TurnOrderProperties"),1);
	MakeCode	(x=0X8F50);
	OpEnumEx		(x,	0,	GetEnum("TurnOrderProperties"),0);
	MakeCode	(x=0X8F5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X8F64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X8F7A);
	MakeCode	(x=0X8F7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X8F90);
	MakeArray	(0X8F90,	0X4);
	MakeCode	(0X8F94);
	MakeDword	(x=0X8F9E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8FA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8FA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8FAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8FAE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8FB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8FB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8FBA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0X8FBE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X8FBF);
	MakeWord	(0X8FC0);
	MakeWord	(0X8FC2);
	MakeWord	(0X8FC4);
	MakeByte	(x=0X8FC6);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X8FC7);
	MakeWord	(0X8FC8);
	MakeWord	(0X8FCA);
	MakeWord	(0X8FCC);
	MakeByte	(x=0X8FCE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X8FCF);
	MakeWord	(0X8FD0);
	MakeWord	(0X8FD2);
	MakeWord	(0X8FD4);
	MakeByte	(x=0X8FD6);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X8FD7);
	MakeWord	(0X8FD8);
	MakeWord	(0X8FDA);
	MakeWord	(0X8FDC);
	MakeByte	(x=0X8FDE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X8FDF);
	MakeWord	(0X8FE0);
	MakeWord	(0X8FE2);
	MakeWord	(0X8FE4);
	MakeByte	(x=0X8FE6);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X8FE7);
	MakeWord	(0X8FE8);
	MakeWord	(0X8FEA);
	MakeWord	(0X8FEC);
	MakeByte	(x=0X8FEE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X8FEF);
	MakeWord	(0X8FF0);
	MakeWord	(0X8FF2);
	MakeWord	(0X8FF4);
	MakeByte	(x=0X8FF6);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X8FF7);
	MakeWord	(0X8FF8);
	MakeWord	(0X8FFA);
	MakeWord	(0X8FFC);
	MakeByte	(x=0X8FFE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X8FFF);
	MakeWord	(0X9000);
	MakeWord	(0X9002);
	MakeWord	(0X9004);
	MakeByte	(x=0X9006);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9007);
	MakeWord	(0X9008);
	MakeWord	(0X900A);
	MakeWord	(0X900C);
	MakeByte	(x=0X900E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X900F);
	MakeWord	(0X9010);
	MakeWord	(0X9012);
	MakeWord	(0X9014);
	MakeByte	(x=0X9016);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9017);
	MakeWord	(0X9018);
	MakeWord	(0X901A);
	MakeWord	(0X901C);
	MakeByte	(x=0X901E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X901F);
	MakeWord	(0X9020);
	MakeWord	(0X9022);
	MakeWord	(0X9024);
	MakeByte	(x=0X9026);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9027);
	MakeWord	(0X9028);
	MakeWord	(0X902A);
	MakeWord	(0X902C);
	MakeByte	(x=0X902E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X902F);
	MakeWord	(0X9030);
	MakeWord	(0X9032);
	MakeWord	(0X9034);
	MakeByte	(x=0X9036);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9037);
	MakeWord	(0X9038);
	MakeWord	(0X903A);
	MakeWord	(0X903C);
	MakeByte	(x=0X903E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X903F);
	MakeWord	(0X9040);
	MakeWord	(0X9042);
	MakeWord	(0X9044);
	MakeByte	(x=0X9046);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9047);
	MakeWord	(0X9048);
	MakeWord	(0X904A);
	MakeWord	(0X904C);
	MakeByte	(x=0X904E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X904F);
	MakeWord	(0X9050);
	MakeWord	(0X9052);
	MakeWord	(0X9054);
	MakeByte	(x=0X9056);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9057);
	MakeWord	(0X9058);
	MakeWord	(0X905A);
	MakeWord	(0X905C);
	MakeByte	(x=0X905E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X905F);
	MakeWord	(0X9060);
	MakeWord	(0X9062);
	MakeWord	(0X9064);
	MakeByte	(x=0X9066);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9067);
	MakeWord	(0X9068);
	MakeWord	(0X906A);
	MakeWord	(0X906C);
	MakeByte	(x=0X906E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X906F);
	MakeWord	(0X9070);
	MakeWord	(0X9072);
	MakeWord	(0X9074);
	MakeByte	(x=0X9076);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9077);
	MakeWord	(0X9078);
	MakeWord	(0X907A);
	MakeWord	(0X907C);
	MakeByte	(x=0X907E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X907F);
	MakeWord	(0X9080);
	MakeWord	(0X9082);
	MakeWord	(0X9084);
	MakeByte	(x=0X9086);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9087);
	MakeWord	(0X9088);
	MakeWord	(0X908A);
	MakeWord	(0X908C);
	MakeByte	(x=0X908E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X908F);
	MakeWord	(0X9090);
	MakeWord	(0X9092);
	MakeWord	(0X9094);
	MakeByte	(x=0X9096);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9097);
	MakeWord	(0X9098);
	MakeWord	(0X909A);
	MakeWord	(0X909C);
	MakeByte	(x=0X909E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X909F);
	MakeWord	(0X90A0);
	MakeWord	(0X90A2);
	MakeWord	(0X90A4);
	MakeByte	(x=0X90A6);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90A7);
	MakeWord	(0X90A8);
	MakeWord	(0X90AA);
	MakeWord	(0X90AC);
	MakeByte	(x=0X90AE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90AF);
	MakeWord	(0X90B0);
	MakeWord	(0X90B2);
	MakeWord	(0X90B4);
	MakeByte	(x=0X90B6);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90B7);
	MakeWord	(0X90B8);
	MakeWord	(0X90BA);
	MakeWord	(0X90BC);
	MakeByte	(x=0X90BE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90BF);
	MakeWord	(0X90C0);
	MakeWord	(0X90C2);
	MakeWord	(0X90C4);
	MakeByte	(x=0X90C6);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90C7);
	MakeWord	(0X90C8);
	MakeWord	(0X90CA);
	MakeWord	(0X90CC);
	MakeByte	(x=0X90CE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90CF);
	MakeWord	(0X90D0);
	MakeWord	(0X90D2);
	MakeWord	(0X90D4);
	MakeByte	(x=0X90D6);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90D7);
	MakeWord	(0X90D8);
	MakeWord	(0X90DA);
	MakeWord	(0X90DC);
	MakeByte	(x=0X90DE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90DF);
	MakeWord	(0X90E0);
	MakeWord	(0X90E2);
	MakeWord	(0X90E4);
	MakeByte	(x=0X90E6);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90E7);
	MakeWord	(0X90E8);
	MakeWord	(0X90EA);
	MakeWord	(0X90EC);
	MakeByte	(x=0X90EE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90EF);
	MakeWord	(0X90F0);
	MakeWord	(0X90F2);
	MakeWord	(0X90F4);
	MakeByte	(x=0X90F6);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90F7);
	MakeWord	(0X90F8);
	MakeWord	(0X90FA);
	MakeWord	(0X90FC);
	MakeByte	(x=0X90FE);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X90FF);
	MakeWord	(0X9100);
	MakeWord	(0X9102);
	MakeWord	(0X9104);
	MakeByte	(x=0X9106);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9107);
	MakeWord	(0X9108);
	MakeWord	(0X910A);
	MakeWord	(0X910C);
	MakeByte	(x=0X910E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X910F);
	MakeWord	(0X9110);
	MakeWord	(0X9112);
	MakeWord	(0X9114);
	MakeByte	(x=0X9116);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X9117);
	MakeWord	(0X9118);
	MakeWord	(0X911A);
	MakeWord	(0X911C);
	MakeByte	(x=0X911E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeByte	(0X911F);
	MakeWord	(0X9120);
	MakeWord	(0X9122);
	MakeWord	(0X9124);
	MakeCode	(0X9126);
	MakeCode	(x=0X912E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9132);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9136);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X914A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9150);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9158);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9178);
	OpHex		(x,	0);
	MakeCode	(x=0X91A6);
	OpHex		(x,	0);
	MakeCode	(x=0X91BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X91D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X91F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X91F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X923E);
	MakeCode	(x=0X927A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X9286);
	MakeCode	(x=0X9288);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X928E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9296);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X92A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X92C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X92C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X92DA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X92DE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X92E2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X92E6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X92EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X92F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X92FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9308);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeDword	(x=0X930E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X9312);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X9316);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X931A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X931E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X9322);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X9326);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X932A);
	MakeWord	(0X932C);
	MakeWord	(0X932E);
	MakeWord	(0X9330);
	MakeWord	(0X9332);
	MakeWord	(0X9334);
	MakeWord	(0X9336);
	MakeWord	(0X9338);
	MakeWord	(0X933A);
	MakeWord	(0X933C);
	MakeWord	(0X933E);
	MakeWord	(0X9340);
	MakeWord	(0X9342);
	MakeWord	(0X9344);
	MakeWord	(0X9346);
	MakeWord	(0X9348);
	MakeWord	(0X934A);
	MakeWord	(0X934C);
	MakeWord	(0X934E);
	MakeWord	(0X9350);
	MakeWord	(0X9352);
	MakeWord	(0X9354);
	MakeWord	(0X9356);
	MakeWord	(0X9358);
	MakeWord	(0X935A);
	MakeWord	(0X935C);
	MakeWord	(0X935E);
	MakeWord	(0X9360);
	MakeWord	(0X9362);
	MakeWord	(0X9364);
	MakeWord	(0X9366);
	MakeWord	(0X9368);
	MakeWord	(0X936A);
	MakeWord	(0X936C);
	MakeWord	(0X936E);
	MakeWord	(0X9370);
	MakeWord	(0X9372);
	MakeWord	(0X9374);
	MakeWord	(0X9376);
	MakeWord	(0X9378);
	MakeWord	(0X937A);
	MakeWord	(0X937C);
	MakeWord	(0X937E);
	MakeWord	(0X9380);
	MakeWord	(0X9382);
	MakeWord	(0X9384);
	MakeWord	(0X9386);
	MakeWord	(0X9388);
	MakeByte	(0X938A);
	MakeByte	(0X938B);
	MakeByte	(0X938C);
	MakeByte	(0X938D);
	MakeByte	(0X938E);
	MakeByte	(0X938F);
	MakeByte	(0X9390);
	MakeByte	(0X9391);
	MakeByte	(0X9392);
	MakeByte	(0X9393);
	MakeByte	(0X9394);
	MakeByte	(0X9395);
	MakeByte	(0X9396);
	MakeByte	(0X9397);
	MakeByte	(0X9398);
	MakeByte	(0X9399);
	MakeByte	(0X939A);
	MakeByte	(0X939B);
	MakeByte	(0X939C);
	MakeByte	(0X939D);
	MakeByte	(0X939E);
	MakeByte	(0X939F);
	MakeByte	(0X93A0);
	MakeByte	(0X93A1);
	MakeByte	(0X93A2);
	MakeByte	(0X93A3);
	MakeByte	(0X93A4);
	MakeByte	(0X93A5);
	MakeByte	(0X93A6);
	MakeByte	(0X93A7);
	MakeByte	(0X93A8);
	MakeByte	(0X93A9);
	MakeByte	(0X93AA);
	MakeByte	(0X93AB);
	MakeByte	(0X93AC);
	MakeByte	(0X93AD);
	MakeByte	(0X93AE);
	MakeByte	(0X93AF);
	MakeByte	(0X93B0);
	MakeByte	(0X93B1);
	MakeByte	(0X93B2);
	MakeByte	(0X93B3);
	MakeByte	(0X93B4);
	MakeByte	(0X93B5);
	MakeByte	(0X93B6);
	MakeByte	(0X93B7);
	MakeByte	(0X93B8);
	MakeByte	(0X93B9);
	MakeByte	(0X93BA);
	MakeByte	(0X93BB);
	MakeByte	(0X93BC);
	MakeByte	(0X93BD);
	MakeByte	(0X93BE);
	MakeByte	(0X93BF);
	MakeByte	(0X93C0);
	MakeByte	(0X93C1);
	MakeByte	(0X93C2);
	MakeByte	(0X93C3);
	MakeCode	(0X93C4);
	MakeCode	(x=0X93C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X93D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X93E4);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93E6);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93E8);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93EA);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93EC);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93EE);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93F0);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93F2);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93F4);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93F6);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93F8);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93FA);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93FC);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X93FE);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9400);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9402);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9404);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9406);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9408);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X940A);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X940C);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X940E);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9410);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9412);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9414);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9416);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9418);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X941A);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X941C);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X941E);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9420);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9422);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9424);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9426);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9428);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X942A);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X942C);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X942E);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9430);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9432);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9434);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9436);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9438);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X943A);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X943C);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X943E);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9440);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9442);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9444);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9446);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X9448);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeWord	(x=0X944A);
	OpOff		(x,	0,	0X93E4);
	OpOff		(x,	128,	0X93E4);
	OpOff		(x,	1,	0X93E4);
	OpOff		(x,	129,	0X93E4);
	MakeCode	(0X944C);
	MakeCode	(0X945C);
	MakeCode	(0X9478);
	MakeCode	(0X9486);
	MakeName	(0X9486,	"nullsub_9486");
	MakeCode	(0X9488);
	MakeCode	(0X94A8);
	MakeName	(0X94A8,	"nullsub_94A8");
	MakeCode	(0X94AA);
	MakeName	(0X94AA,	"nullsub_94AA");
	MakeCode	(0X94AC);
	MakeCode	(0X94BC);
	MakeName	(0X94BC,	"nullsub_94BC");
	MakeCode	(0X94BE);
	MakeCode	(0X94CE);
	MakeCode	(0X94DE);
	MakeCode	(0X94EE);
	MakeName	(0X94EE,	"nullsub_94EE");
	MakeCode	(0X94F0);
	MakeCode	(0X9500);
	MakeName	(0X9500,	"nullsub_9500");
	MakeCode	(0X9502);
	MakeCode	(0X9512);
	MakeCode	(0X9542);
	MakeName	(0X9542,	"nullsub_9542");
	MakeCode	(0X9544);
	MakeCode	(0X9554);
	MakeCode	(0X9564);
	MakeName	(0X9564,	"nullsub_9564");
	MakeCode	(0X9566);
	MakeCode	(0X9576);
	MakeName	(0X9576,	"nullsub_9576");
	MakeCode	(0X9578);
	MakeCode	(0X95E2);
	MakeName	(0X95E2,	"nullsub_95E2");
	MakeCode	(0X95E4);
	MakeCode	(0X9602);
	MakeCode	(0X960A);
	MakeCode	(x=0X960E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9626);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9634);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X963A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X965C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9662);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X968A);
	MakeCode	(x=0X968E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9692);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X96AE);
	MakeCode	(x=0X96B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X96C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X96FC);
	MakeCode	(0X9718);
	MakeCode	(x=0X9734);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X973C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9742);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X9754);
	MakeName	(0X9754,	"plt_DarkDragonMap");
	MakeWord	(0X9756);
	MakeWord	(0X9758);
	MakeWord	(0X975A);
	MakeWord	(0X975C);
	MakeWord	(0X975E);
	MakeWord	(0X9760);
	MakeWord	(0X9762);
	MakeWord	(0X9764);
	MakeWord	(0X9766);
	MakeWord	(0X9768);
	MakeWord	(0X976A);
	MakeWord	(0X976C);
	MakeWord	(0X976E);
	MakeWord	(0X9770);
	MakeWord	(0X9772);
	MakeWord	(0X9774);
	MakeWord	(0X9776);
	MakeWord	(0X9778);
	MakeWord	(0X977A);
	MakeWord	(0X977C);
	MakeWord	(0X977E);
	MakeWord	(0X9780);
	MakeWord	(0X9782);
	MakeWord	(0X9784);
	MakeWord	(0X9786);
	MakeWord	(0X9788);
	MakeWord	(0X978A);
	MakeWord	(0X978C);
	MakeWord	(0X978E);
	MakeWord	(0X9790);
	MakeWord	(0X9792);
	MakeWord	(0X9794);
	MakeWord	(0X9796);
	MakeWord	(0X9798);
	MakeWord	(0X979A);
	MakeWord	(0X979C);
	MakeWord	(0X979E);
	MakeWord	(0X97A0);
	MakeWord	(0X97A2);
	MakeWord	(0X97A4);
	MakeWord	(0X97A6);
	MakeWord	(0X97A8);
	MakeWord	(0X97AA);
	MakeWord	(0X97AC);
	MakeWord	(0X97AE);
	MakeWord	(0X97B0);
	MakeWord	(0X97B2);
	MakeWord	(0X97B4);
	MakeWord	(0X97B6);
	MakeWord	(0X97B8);
	MakeWord	(0X97BA);
	MakeWord	(0X97BC);
	MakeWord	(0X97BE);
	MakeWord	(0X97C0);
	MakeWord	(0X97C2);
	MakeWord	(0X97C4);
	MakeWord	(0X97C6);
	MakeWord	(0X97C8);
	MakeWord	(0X97CA);
	MakeWord	(0X97CC);
	MakeWord	(0X97CE);
	MakeWord	(0X97D0);
	MakeWord	(0X97D2);
	MakeWord	(0X97D4);
	MakeWord	(0X97D6);
	MakeWord	(0X97D8);
	MakeWord	(0X97DA);
	MakeWord	(0X97DC);
	MakeWord	(0X97DE);
	MakeWord	(0X97E0);
	MakeWord	(0X97E2);
	MakeWord	(0X97E4);
	MakeWord	(0X97E6);
	MakeWord	(0X97E8);
	MakeWord	(0X97EA);
	MakeWord	(0X97EC);
	MakeWord	(0X97EE);
	MakeWord	(0X97F0);
	MakeWord	(0X97F2);
	MakeCode	(x=0X97F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X981E);
	MakeName	(0X981E,	"und_981E");
	MakeByte	(0X981F);
	MakeByte	(0X9820);
	MakeByte	(0X9821);
	MakeByte	(0X9822);
	MakeByte	(0X9823);
	MakeCode	(x=0X9824);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X9850);
	MakeCode	(0X9872);
	MakeCode	(x=0X9888);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X98A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X98AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X98C2);
	MakeCode	(x=0X98C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X98E8);
	MakeCode	(x=0X9910);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X9932);
	MakeCode	(x=0X9940);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X9940,	"UpdateBattlefieldSprites");
	MakeCode	(x=0X9944);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X995C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X9966);
	MakeCode	(x=0X996A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9994);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X99CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X99CC,	"UpdateBattlefieldCameraPosition");
	MakeCode	(x=0X99D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X99E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X99FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9A00);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X9A0E);
	MakeArray	(0X9A0E,	0X40);
	MakeName	(0X9A0E,	"MapSpritePalettes");
	MakeByte	(0X9A4E);
	MakeName	(0X9A4E,	"defined_byte_9A4E");
	MakeByte	(0X9A4F);
	MakeByte	(0X9A50);
	MakeByte	(0X9A51);
	MakeByte	(0X9A52);
	MakeByte	(0X9A53);
	MakeByte	(0X9A54);
	MakeByte	(0X9A55);
	MakeByte	(0X9A56);
	MakeByte	(0X9A57);
	MakeByte	(0X9A58);
	MakeByte	(0X9A59);
	MakeByte	(0X9A5A);
	MakeByte	(0X9A5B);
	MakeByte	(0X9A5C);
	MakeByte	(0X9A5D);
	MakeByte	(0X9A5E);
	MakeByte	(0X9A5F);
	MakeByte	(0X9A60);
	MakeByte	(0X9A61);
	MakeByte	(0X9A62);
	MakeByte	(0X9A63);
	MakeByte	(0X9A64);
	MakeByte	(0X9A65);
	MakeByte	(0X9A66);
	MakeByte	(0X9A67);
	MakeByte	(0X9A68);
	MakeByte	(0X9A69);
	MakeByte	(0X9A6A);
	MakeByte	(0X9A6B);
	MakeByte	(0X9A6C);
	MakeByte	(0X9A6D);
	MakeByte	(0X9A6E);
	MakeByte	(0X9A6F);
	MakeByte	(0X9A70);
	MakeByte	(0X9A71);
	MakeByte	(0X9A72);
	MakeByte	(0X9A73);
	MakeByte	(0X9A74);
	MakeByte	(0X9A75);
	MakeByte	(0X9A76);
	MakeByte	(0X9A77);
	MakeByte	(0X9A78);
	MakeByte	(0X9A79);
	MakeByte	(0X9A7A);
	MakeByte	(0X9A7B);
	MakeByte	(0X9A7C);
	MakeByte	(0X9A7D);
	MakeByte	(0X9A7E);
	MakeByte	(0X9A7F);
	MakeByte	(0X9A80);
	MakeByte	(0X9A81);
	MakeByte	(0X9A82);
	MakeByte	(0X9A83);
	MakeByte	(0X9A84);
	MakeByte	(0X9A85);
	MakeByte	(0X9A86);
	MakeByte	(0X9A87);
	MakeByte	(0X9A88);
	MakeByte	(0X9A89);
	MakeCode	(0X9A8A);
	MakeCode	(0X9A9A);
	MakeCode	(x=0X9AA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9AA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X9ACC);
	MakeCode	(x=0X9B08);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9B1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9B2A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9B3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9B4E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9B56);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9B5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9B62);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9B66);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9B7C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9B80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9B86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9B90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X9B94,	"Controlling scroll effect of water tiles?");
	MakeCode	(0X9BA8);
	MakeCode	(x=0X9BAA);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0X9BBA);
	MakeByte	(0X9BCA);
	MakeName	(0X9BCA,	"defined_byte_9BCA");
	MakeByte	(0X9BCB);
	MakeByte	(0X9BCC);
	MakeByte	(0X9BCD);
	MakeByte	(0X9BCE);
	MakeByte	(0X9BCF);
	MakeCode	(0X9BD0);
	MakeCode	(0X9BF6);
	MakeCode	(x=0X9BFC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9C18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9C1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9C32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9C4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9C52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9C66);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9C80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9C86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9C9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X9D08);
	MakeCode	(x=0X9D0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9D14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9D1A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9D28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9D2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9D30);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X9D54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9D58);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9D66);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9D7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9D80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9D8C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9D90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9D98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9DB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X9DC4);
	MakeCode	(x=0X9DC6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9DCA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9DD8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9DE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9DE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X9DFA);
	MakeCode	(x=0X9E02);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E0A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E0E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9E1C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E30);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9E34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E52);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9E5E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9E64);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X9E70);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X9E7C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0X9E8A);
	MakeCode	(x=0X9EA4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9EAE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9EB8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9EC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9ECC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9ED4);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X9EE0);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9EE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9EEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X9EF0,	"\"[Hero]! You've reached[Line]your destination, but some[Line]enemies remain.[Wait2][Line]Will you leave them?\"");
	MakeCode	(x=0X9EF4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X9EF8,	"\"[Hero]! Do you really[Line]want to retreat from this[Line]battle?\"");
	MakeCode	(0X9EF8);
	MakeCode	(x=0X9EFC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X9F12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9F28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9F34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9F38);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9F40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X9F54);
	MakeArray	(0X9F54,	0X4);
	MakeCode	(0X9F58);
	MakeByte	(0X9F68);
	MakeArray	(0X9F68,	0X4);
	MakeCode	(0X9F6C);
	MakeByte	(0X9F88);
	MakeArray	(0X9F88,	0X4);
	MakeCode	(0X9F8C);
	MakeCode	(0X9FB0);
	MakeCode	(x=0X9FB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9FBE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9FC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9FD6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9FE4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X9FEE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X9FFC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA006);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA016);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA01C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA020);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA026);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA036);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA03A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA03E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA042);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA054);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA05E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA062);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA066);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA070);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA074);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA092);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA098);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA09C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA0A0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA0B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA0B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XA0DE);
	MakeCode	(x=0XA0EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA0F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA106);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA110);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA120);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA128);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA12C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA132);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA136);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA140);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA144);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA15C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA160);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA168);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA17E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA182);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA186);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XA19C);
	MakeWord	(x=0XA1A6);
	OpOff		(x,	0,	0XA1A6);
	OpOff		(x,	128,	0XA1A6);
	OpOff		(x,	1,	0XA1A6);
	OpOff		(x,	129,	0XA1A6);
	MakeName	(0XA1A6,	"rjt_BattleMenuActions");
	MakeWord	(x=0XA1A8);
	OpOff		(x,	0,	0XA1A6);
	OpOff		(x,	128,	0XA1A6);
	OpOff		(x,	1,	0XA1A6);
	OpOff		(x,	129,	0XA1A6);
	MakeWord	(x=0XA1AA);
	OpOff		(x,	0,	0XA1A6);
	OpOff		(x,	128,	0XA1A6);
	OpOff		(x,	1,	0XA1A6);
	OpOff		(x,	129,	0XA1A6);
	MakeWord	(x=0XA1AC);
	OpOff		(x,	0,	0XA1A6);
	OpOff		(x,	128,	0XA1A6);
	OpOff		(x,	1,	0XA1A6);
	OpOff		(x,	129,	0XA1A6);
	MakeCode	(x=0XA1AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XA1AE,	"BattleMenuAction_Attack");
	MakeCode	(x=0XA1B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA1CC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA1DC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XA1E4);
	MakeRptCmt	(0XA1EA,	"\"No target.\" refusal text");
	MakeCode	(x=0XA202);
	OpEnumEx		(x,	0,	GetEnum("BattleActionTypes"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0XA202,	"BattleMenuAction_Magic");
	MakeCode	(x=0XA208);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA210);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA220,	"\"No magic.\" refusal text");
	MakeCode	(x=0XA22A);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA24A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA24E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA25A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA26A,	"\"Not enough MP.\" refusal text");
	MakeCode	(x=0XA274);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA280);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA284);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA28C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA292);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA296,	"\"[Name] casts [Spell][Line]level [Num]!\"");
	MakeCode	(x=0XA29A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0XA29C);
	MakeArray	(0XA29C,	0X4);
	MakeRptCmt	(0XA2A0,	"\"[Dict][Line]\"");
	MakeCode	(0XA2A0);
	MakeCode	(x=0XA2A4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0XA2A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA2AE,	"\"But nothing happens.\"");
	MakeCode	(x=0XA2B2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0XA2B4,	"\"[Dict][Line]\"");
	MakeCode	(x=0XA2B8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0XA2CC);
	MakeCode	(0XA2D0);
	MakeCode	(x=0XA2D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA2DE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA302);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA30A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XA30A,	"BattleMenuAction_Item");
	MakeCode	(0XA32A);
	MakeCode	(x=0XA32C);
	OpEnumEx		(x,	0,	GetEnum("BattleActionTypes"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA332);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA33A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA34A,	"\"No item.\" refusal text");
	MakeCode	(x=0XA354);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA358);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeWord	(x=0XA374);
	OpOff		(x,	0,	0XA374);
	OpOff		(x,	128,	0XA374);
	OpOff		(x,	1,	0XA374);
	OpOff		(x,	129,	0XA374);
	MakeWord	(x=0XA376);
	OpOff		(x,	0,	0XA374);
	OpOff		(x,	128,	0XA374);
	OpOff		(x,	1,	0XA374);
	OpOff		(x,	129,	0XA374);
	MakeWord	(x=0XA378);
	OpOff		(x,	0,	0XA374);
	OpOff		(x,	128,	0XA374);
	OpOff		(x,	1,	0XA374);
	OpOff		(x,	129,	0XA374);
	MakeWord	(x=0XA37A);
	OpOff		(x,	0,	0XA374);
	OpOff		(x,	128,	0XA374);
	OpOff		(x,	1,	0XA374);
	OpOff		(x,	129,	0XA374);
	MakeCode	(x=0XA37C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA382);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA3A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA3A6,	"\"You can't use it.\" refusal text");
	MakeCode	(x=0XA3AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA3BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA3C2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA3E4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA3EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA40A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA412);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA432);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA43E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA442);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA44A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA44E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA458);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA474);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA478);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA486);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA48E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA494);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA49A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA4A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA4A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA4B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA4C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA4C4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA4CC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA4D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA4E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA4E4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA4EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA500);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA508);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA50C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA526);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA530);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA536);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0XA53C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA548,	"\"No equippable item.\" refusal text");
	MakeCode	(x=0XA552);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0XA558);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA566);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA58C);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0XA592);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA5A0);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA5BC);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0XA5C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XA5D6);
	MakeCode	(x=0XA5EA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA5FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA608);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA60C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA61A);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0XA620);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA626);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XA644,	"\"No! Keep the item.\" refusal text");
	MakeCode	(0XA644);
	MakeCode	(0XA64C);
	MakeCode	(0XA650);
	MakeName	(0XA650,	"BattleMenuAction_Stay");
	MakeCode	(x=0XA656);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA65C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA660);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA664);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA682);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA68A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA6A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA6AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA6CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA6DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA6E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA6E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA6F2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA6FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA70E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA71E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA722);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA726);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA736);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA740);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA744);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA760);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA770);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA776);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA78A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA794);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA7AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA7AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA7B2);
	OpEnumEx		(x,	0,	GetEnum("BattleActionTypes"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA7BC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA7D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA7E2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA7EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA7FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA808);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XA82E);
	MakeCode	(0XA83E);
	MakeCode	(0XA860);
	MakeCode	(x=0XA868);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA894);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA8A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA8AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA8B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA8C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA8C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XA8D4);
	MakeCode	(x=0XA8DA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XA8E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA8F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA900);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XA926);
	MakeCode	(0XA936);
	MakeCode	(0XA958);
	MakeCode	(x=0XA960);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA98C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA99A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA9A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA9A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA9B8);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XA9C4);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XA9D0);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XA9DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA9E2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0XA9EE);
	MakeArray	(0XA9EE,	0X4);
	MakeCode	(x=0XA9F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XA9FE);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0XAA0A);
	MakeArray	(0XAA0A,	0X4);
	MakeCode	(x=0XAA0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAA1A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0XAA26);
	MakeArray	(0XAA26,	0X4);
	MakeCode	(0XAA2A);
	MakeCode	(x=0XAA2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAA36);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0XAA42);
	MakeArray	(0XAA42,	0X4);
	MakeCode	(0XAA46);
	MakeCode	(x=0XAA4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XAA52);
	MakeCode	(0XAA56);
	MakeCode	(x=0XAA58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAA5E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAA68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XAA76);
	MakeArray	(0XAA76,	0X4);
	MakeCode	(0XAA7A);
	MakeCode	(x=0XAA7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XAA82);
	MakeArray	(0XAA82,	0X4);
	MakeCode	(x=0XAA86);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XAA8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAA94);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAA9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAAAC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAAB0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XAAC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAAD0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XAAE4);
	MakeCode	(x=0XAAE8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAAEC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XAB08);
	OpOff		(x,	0,	0XAB08);
	OpOff		(x,	128,	0XAB08);
	OpOff		(x,	1,	0XAB08);
	OpOff		(x,	129,	0XAB08);
	MakeWord	(x=0XAB0A);
	OpOff		(x,	0,	0XAB08);
	OpOff		(x,	128,	0XAB08);
	OpOff		(x,	1,	0XAB08);
	OpOff		(x,	129,	0XAB08);
	MakeWord	(x=0XAB0C);
	OpOff		(x,	0,	0XAB08);
	OpOff		(x,	128,	0XAB08);
	OpOff		(x,	1,	0XAB08);
	OpOff		(x,	129,	0XAB08);
	MakeWord	(x=0XAB0E);
	OpOff		(x,	0,	0XAB08);
	OpOff		(x,	128,	0XAB08);
	OpOff		(x,	1,	0XAB08);
	OpOff		(x,	129,	0XAB08);
	MakeCode	(0XAB10);
	MakeName	(0XAB10,	"j_j_optionMenu_Speed");
	MakeCode	(0XAB16);
	MakeName	(0XAB16,	"j_j_optionMenuAction_Message");
	MakeCode	(0XAB1C);
	MakeName	(0XAB1C,	"j_j_optionMenuAction_Quit");
	MakeCode	(0XAB22);
	MakeCode	(0XAB2C);
	MakeCode	(x=0XAB34);
	OpHex		(x,	0);
	MakeCode	(0XAB40);
	MakeCode	(x=0XAB44);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAB48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAB4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAB52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAB5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAB68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAB72);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAB84);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XAB90);
	MakeCode	(x=0XAB94);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XAB9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XABAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XABBE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XABC2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XABC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XABCE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XABDA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XABEE);
	OpOff		(x,	0,	0XABEE);
	OpOff		(x,	128,	0XABEE);
	OpOff		(x,	1,	0XABEE);
	OpOff		(x,	129,	0XABEE);
	MakeWord	(x=0XABF0);
	OpOff		(x,	0,	0XABEE);
	OpOff		(x,	128,	0XABEE);
	OpOff		(x,	1,	0XABEE);
	OpOff		(x,	129,	0XABEE);
	MakeWord	(x=0XABF2);
	OpOff		(x,	0,	0XABEE);
	OpOff		(x,	128,	0XABEE);
	OpOff		(x,	1,	0XABEE);
	OpOff		(x,	129,	0XABEE);
	MakeWord	(x=0XABF4);
	OpOff		(x,	0,	0XABEE);
	OpOff		(x,	128,	0XABEE);
	OpOff		(x,	1,	0XABEE);
	OpOff		(x,	129,	0XABEE);
	MakeCode	(0XABF6);
	MakeCode	(0XAC44);
	MakeWord	(x=0XAC78);
	OpOff		(x,	0,	0XAC78);
	OpOff		(x,	128,	0XAC78);
	OpOff		(x,	1,	0XAC78);
	OpOff		(x,	129,	0XAC78);
	MakeWord	(x=0XAC7A);
	OpOff		(x,	0,	0XAC78);
	OpOff		(x,	128,	0XAC78);
	OpOff		(x,	1,	0XAC78);
	OpOff		(x,	129,	0XAC78);
	MakeWord	(x=0XAC7C);
	OpOff		(x,	0,	0XAC78);
	OpOff		(x,	128,	0XAC78);
	OpOff		(x,	1,	0XAC78);
	OpOff		(x,	129,	0XAC78);
	MakeWord	(x=0XAC7E);
	OpOff		(x,	0,	0XAC78);
	OpOff		(x,	128,	0XAC78);
	OpOff		(x,	1,	0XAC78);
	OpOff		(x,	129,	0XAC78);
	MakeCode	(0XAC80);
	MakeName	(0XAC80,	"j_UpdateScreenAfterTileChange");
	MakeCode	(0XAC84);
	MakeCode	(x=0XAC86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAC8C);
	OpHex		(x,	0);
	MakeCode	(x=0XACD4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XACE4);
	MakeName	(0XACE4,	"CheckBattleEnd");
	MakeRptCmt	(0XACE8,	"combatants counter");
	MakeCode	(0XAD04);
	MakeCode	(x=0XAD0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAD20);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XAD30,	"check if hero dead");
	MakeCode	(x=0XAD3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XAD3A,	"ParseBattleExits");
	MakeCode	(x=0XAD42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAD48);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XAD54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAD58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAD64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XAD6C,	"get battle exits for current chapter");
	MakeRptCmt	(0XAD78,	"compare to current region");
	MakeRptCmt	(0XAD7C,	"compare to current X position");
	MakeRptCmt	(0XAD82,	"compare to current Y position");
	MakeRptCmt	(0XAD8A,	"get destination map index");
	MakeCode	(0XAD98);
	MakeCode	(0XAD9C);
	MakeCode	(x=0XADA0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XADA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XADAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XADAE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XADB8);
	MakeCode	(x=0XADBA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0XADC8);
	OpOff		(x,	0,	0XADC8);
	OpOff		(x,	128,	0XADC8);
	OpOff		(x,	1,	0XADC8);
	OpOff		(x,	129,	0XADC8);
	MakeWord	(x=0XADCA);
	OpOff		(x,	0,	0XADC8);
	OpOff		(x,	128,	0XADC8);
	OpOff		(x,	1,	0XADC8);
	OpOff		(x,	129,	0XADC8);
	MakeWord	(x=0XADCC);
	OpOff		(x,	0,	0XADC8);
	OpOff		(x,	128,	0XADC8);
	OpOff		(x,	1,	0XADC8);
	OpOff		(x,	129,	0XADC8);
	MakeWord	(x=0XADCE);
	OpOff		(x,	0,	0XADC8);
	OpOff		(x,	128,	0XADC8);
	OpOff		(x,	1,	0XADC8);
	OpOff		(x,	129,	0XADC8);
	MakeCode	(0XADD0);
	MakeCode	(0XADD4);
	MakeCode	(0XADD8);
	MakeCode	(0XADDC);
	MakeCode	(x=0XADE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XADE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XADEC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XADF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAE1A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XAE2A);
	MakeCode	(x=0XAE36);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0XAE36,	"MoveWindowWithSfx");
	MakeWord	(x=0XAE38);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0XAE3A);
	MakeName	(0XAE3A,	"MoveWindow");
	MakeRptCmt	(0XAE3E,	"swap initial window position into low-order word");
	MakeRptCmt	(0XAE62,	"D4 = initial window position");
	MakeRptCmt	(0XAE64,	"swap destination window position into low-order word");
	MakeCode	(x=0XAEA8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0XAEA8,	"CreateWindow");
	MakeCode	(x=0XAEAC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XAEB0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XAEB6,	"push window size");
	MakeCode	(x=0XAEB8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XAEBE,	"push window position");
	MakeRptCmt	(0XAEC4,	"D1 = X postion * 2");
	MakeRptCmt	(0XAEC6,	"pull window position -> D0");
	MakeRptCmt	(0XAEC8,	"D0 = Y position");
	MakeRptCmt	(0XAED6,	"D0 = Y position * 128");
	MakeRptCmt	(0XAEE0,	"pull window size -> D6");
	MakeRptCmt	(0XAEE4,	"D7 = height");
	MakeRptCmt	(0XAEE8,	"D6 = width");
	MakeRptCmt	(0XAEF2,	"push width-1");
	MakeRptCmt	(0XAF08,	"pull width-1 -> D6");
	MakeCode	(x=0XAF10);
	OpHex		(x,	0);
	MakeCode	(0XAF1C);
	MakeRptCmt	(0XAF22,	"D0 = Y position * 64");
	MakeCode	(0XAF22);
	MakeRptCmt	(0XAF2A,	"pull window size -> D6");
	MakeRptCmt	(0XAF2E,	"D7 = height");
	MakeRptCmt	(0XAF32,	"D6 = width");
	MakeRptCmt	(0XAF3C,	"push width-1");
	MakeRptCmt	(0XAF4C,	"pull width-1 -> D6");
	MakeCode	(x=0XAF54);
	OpHex		(x,	0);
	MakeCode	(0XAF60);
	MakeCode	(x=0XAF66);
	OpHex		(x,	0);
	MakeCode	(x=0XAF70);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XAF84);
	MakeCode	(x=0XAF88);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XAF8C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XAF90,	"push window size");
	MakeCode	(x=0XAF92);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XAF98,	"push window position");
	MakeRptCmt	(0XAF9E,	"D1 = X postion * 2");
	MakeRptCmt	(0XAFA0,	"pull window position -> D0");
	MakeRptCmt	(0XAFA2,	"D0 = Y position");
	MakeRptCmt	(0XAFB0,	"D0 = Y position * 128");
	MakeRptCmt	(0XAFBA,	"pull window size -> D6");
	MakeRptCmt	(0XAFBE,	"D7 = height");
	MakeRptCmt	(0XAFC2,	"D6 = width");
	MakeRptCmt	(0XAFCC,	"push width-1");
	MakeRptCmt	(0XAFE2,	"pull width-1 -> D6");
	MakeCode	(0XAFF0);
	MakeRptCmt	(0XAFF4,	"D0 = Y position * 64");
	MakeCode	(0XAFF4);
	MakeRptCmt	(0XAFFC,	"pull window size -> D6");
	MakeRptCmt	(0XB000,	"D7 = height");
	MakeRptCmt	(0XB004,	"D6 = width");
	MakeRptCmt	(0XB00E,	"push width-1");
	MakeRptCmt	(0XB01E,	"pull width-1 -> D6");
	MakeCode	(0XB02C);
	MakeCode	(x=0XB030);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XB042);
	MakeName	(0XB042,	"WriteTilesFromNumber");
	MakeCode	(x=0XB048);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XB054,	"WriteTilesFromAscii");
	MakeCode	(x=0XB062);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(0XB070);
	MakeCode	(0XB084);
	MakeCode	(0XB092);
	MakeByte	(0XB096);
	MakeArray	(0XB096,	0X4);
	MakeCode	(0XB09A);
	MakeCode	(0XB0B8);
	MakeName	(0XB0B8,	"BuildMemberStatusScreen");
	MakeByte	(0XB0BE);
	MakeArray	(0XB0BE,	0X4);
	MakeCode	(0XB0C2);
	MakeCode	(x=0XB0C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XB0D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB0F8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XB0FC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XB10A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XB10E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XB112);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XB11A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB128);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB142);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB152);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB156);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB168);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB17C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB180);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB19A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB1A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB1BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB1D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB1D8);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0XB1E6);
	MakeCode	(x=0XB1EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB1EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XB1F4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XB1F8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XB1FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB20C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB210);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB22A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB240);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XB274);
	MakeName	(0XB274,	"BuildMemberStatusWindow");
	MakeCode	(x=0XB278);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB27C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XB29C);
	MakeName	(0XB29C,	"WriteStatusEffectTiles");
	MakeCode	(x=0XB2A0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0XB2A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB2AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XB2AC,	"WriteMemberStatusWindowNameAndStats");
	MakeCode	(x=0XB2BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB2C2);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	ExtLinA		(0XB2C8,	0,	"                ");
	ExtLinA		(0XB2C8,	1,	"                ; Write member's name");
	MakeCode	(x=0XB2C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB2D4);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB2D6);
	OpDecimal	(x,	0);
	ExtLinA		(0XB2DC,	0,	"                ");
	ExtLinA		(0XB2DC,	1,	"                ; Write status effects tiles");
	MakeCode	(x=0XB2DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB2E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB2EA);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0XB2F0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles_StatusEffects"),0);
	MakeCode	(x=0XB2F8);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0XB2FE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles_StatusEffects"),0);
	MakeCode	(x=0XB306);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0XB30C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles_StatusEffects"),0);
	MakeCode	(x=0XB314);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0XB31A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles_StatusEffects"),0);
	MakeCode	(x=0XB324);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0XB32A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles_StatusEffects"),0);
	MakeCode	(x=0XB334);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB33E);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB344);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB352);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB35C);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB362);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB372);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB37C);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB382);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB390);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB39A);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB3A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB3B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XB3BC,	"write \"N/A\" if enemy");
	MakeCode	(x=0XB3C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB3D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB3DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB3EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB3F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB3FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB3FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB408);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB412);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB420);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB42A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB438);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB442);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB450);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB45A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0XB46A);
	OpChr		(x,	0);
	MakeName	(0XB46A,	"aNA");
	MakeByte	(x=0XB46B);
	OpChr		(x,	0);
	MakeByte	(x=0XB46C);
	OpChr		(x,	0);
	MakeByte	(x=0XB46D);
	OpChr		(x,	0);
	MakeCode	(x=0XB46E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB474);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB488);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB48E);
	OpHex		(x,	0);
	MakeCode	(x=0XB4A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB4AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XB4E8);
	MakeCode	(0XB4F8);
	MakeCode	(x=0XB4FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB500);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB506);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB50C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB512);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB518);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB52C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB542);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB548);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB54C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB552);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XB5B0);
	MakeCode	(x=0XB5B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB5B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB5E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB5EA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeComm	(0XB5F2,	"spell icons VDP tiles start");
	MakeCode	(0XB5F2);
	MakeName	(0XB5F2,	"WriteMemberStatusWindowSpellsAndItems");
	MakeCode	(x=0XB5F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XB606,	"skip writing spells if first spell slot is empty");
	MakeCode	(x=0XB60A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XB60E,	"iterate 4 spell slots");
	ExtLinA		(0XB61E,	0,	"                ");
	ExtLinA		(0XB61E,	1,	"                ; Write spell name");
	MakeRptCmt	(0XB622,	"-> stash spell entry and layout position addresses");
	MakeRptCmt	(0XB630,	"spell name position relative to spells start address");
	MakeCode	(x=0XB630);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB634);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeRptCmt	(0XB63A,	"A0, A1 <- pop spell entry and layout position addresses");
	ExtLinA		(0XB642,	0,	"                ");
	ExtLinA		(0XB642,	1,	"                ; Write spell level tiles");
	MakeCode	(x=0XB64A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XB65C,	"spell level tiles position relative to spells start address");
	MakeCode	(x=0XB65C);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB660);
	OpDecimal	(x,	0);
	ExtLinA		(0XB670,	0,	"                ");
	MakeCode	(x=0XB670);
	OpDecimal	(x,	0);
	ExtLinB		(0XB674,	0,	"                ");
	MakeByte	(x=0XB67C);
	OpHex		(x,	0);
	MakeByte	(x=0XB67D);
	OpHex		(x,	0);
	MakeByte	(x=0XB67E);
	OpHex		(x,	0);
	MakeByte	(x=0XB67F);
	OpHex		(x,	0);
	MakeByte	(x=0XB680);
	OpHex		(x,	0);
	MakeByte	(x=0XB681);
	OpHex		(x,	0);
	MakeByte	(x=0XB682);
	OpHex		(x,	0);
	MakeByte	(x=0XB683);
	OpHex		(x,	0);
	MakeByte	(x=0XB684);
	OpHex		(x,	0);
	MakeByte	(x=0XB685);
	OpHex		(x,	0);
	MakeByte	(x=0XB686);
	OpHex		(x,	0);
	MakeByte	(x=0XB687);
	OpHex		(x,	0);
	MakeByte	(0XB688);
	MakeByte	(0XB689);
	MakeByte	(0XB68A);
	MakeByte	(0XB68B);
	MakeByte	(0XB68C);
	MakeByte	(0XB68D);
	MakeByte	(0XB68E);
	MakeByte	(0XB68F);
	MakeByte	(0XB690);
	MakeByte	(0XB691);
	MakeByte	(0XB692);
	MakeByte	(0XB693);
	MakeByte	(0XB694);
	MakeByte	(0XB695);
	MakeByte	(0XB696);
	MakeByte	(0XB697);
	MakeByte	(0XB698);
	MakeByte	(0XB699);
	MakeByte	(0XB69A);
	MakeByte	(0XB69B);
	MakeByte	(0XB69C);
	MakeByte	(0XB69D);
	MakeByte	(0XB69E);
	MakeByte	(0XB69F);
	MakeByte	(0XB6A0);
	MakeByte	(0XB6A1);
	MakeByte	(0XB6A2);
	MakeByte	(0XB6A3);
	MakeByte	(0XB6A4);
	MakeByte	(0XB6A5);
	MakeByte	(0XB6A6);
	MakeByte	(0XB6A7);
	MakeByte	(0XB6A8);
	MakeByte	(0XB6A9);
	MakeByte	(0XB6AA);
	MakeByte	(0XB6AB);
	MakeByte	(0XB6AC);
	MakeByte	(0XB6AD);
	MakeByte	(0XB6AE);
	MakeByte	(0XB6AF);
	MakeByte	(0XB6B0);
	MakeByte	(0XB6B1);
	MakeByte	(0XB6B2);
	MakeByte	(0XB6B3);
	MakeByte	(0XB6B4);
	MakeByte	(0XB6B5);
	MakeByte	(0XB6B6);
	MakeByte	(0XB6B7);
	MakeByte	(0XB6B8);
	MakeByte	(0XB6B9);
	MakeByte	(0XB6BA);
	MakeByte	(0XB6BB);
	MakeByte	(0XB6BC);
	MakeByte	(0XB6BD);
	MakeByte	(0XB6BE);
	MakeByte	(0XB6BF);
	MakeByte	(0XB6C0);
	MakeByte	(0XB6C1);
	MakeByte	(0XB6C2);
	MakeByte	(0XB6C3);
	MakeByte	(0XB6C4);
	MakeByte	(0XB6C5);
	MakeByte	(0XB6C6);
	MakeByte	(0XB6C7);
	MakeByte	(0XB6C8);
	MakeByte	(0XB6C9);
	MakeByte	(0XB6CA);
	MakeByte	(0XB6CB);
	MakeByte	(0XB6CC);
	MakeByte	(0XB6CD);
	MakeByte	(0XB6CE);
	MakeByte	(0XB6CF);
	MakeByte	(0XB6D0);
	MakeByte	(0XB6D1);
	MakeByte	(0XB6D2);
	MakeByte	(0XB6D3);
	MakeByte	(0XB6D4);
	MakeByte	(0XB6D5);
	MakeByte	(0XB6D6);
	MakeByte	(0XB6D7);
	MakeByte	(0XB6D8);
	MakeByte	(0XB6D9);
	MakeByte	(0XB6DA);
	MakeByte	(0XB6DB);
	MakeByte	(0XB6DC);
	MakeByte	(0XB6DD);
	MakeByte	(0XB6DE);
	MakeByte	(0XB6DF);
	MakeByte	(0XB6E0);
	MakeByte	(0XB6E1);
	MakeByte	(0XB6E2);
	MakeByte	(0XB6E3);
	MakeByte	(0XB6E4);
	MakeByte	(0XB6E5);
	MakeByte	(0XB6E6);
	MakeByte	(0XB6E7);
	MakeByte	(0XB6E8);
	MakeByte	(0XB6E9);
	MakeByte	(0XB6EA);
	MakeByte	(0XB6EB);
	MakeByte	(0XB6EC);
	MakeByte	(0XB6ED);
	MakeByte	(0XB6EE);
	MakeByte	(0XB6EF);
	MakeByte	(0XB6F0);
	MakeByte	(0XB6F1);
	MakeByte	(0XB6F2);
	MakeByte	(0XB6F3);
	MakeByte	(0XB6F4);
	MakeByte	(0XB6F5);
	MakeByte	(0XB6F6);
	MakeByte	(0XB6F7);
	MakeByte	(0XB6F8);
	MakeByte	(0XB6F9);
	MakeByte	(0XB6FA);
	MakeByte	(0XB6FB);
	MakeCode	(0XB6FC);
	MakeCode	(x=0XB6FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB702);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB706);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB710);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB724);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XB730,	"return if there are no more items");
	ExtLinA		(0XB738,	0,	"                ");
	ExtLinA		(0XB738,	1,	"                ; Write item name");
	MakeCode	(x=0XB74C);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	ExtLinA		(0XB75A,	0,	"                ");
	ExtLinA		(0XB75A,	1,	"                ; Write 'EQUIPPED' string");
	MakeCode	(x=0XB75A);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeRptCmt	(0XB75E,	"move on to next item if current one is not equipped");
	MakeCode	(x=0XB76A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB76E);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB772);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB782);
	OpDecimal	(x,	0);
	MakeByte	(0XB78C);
	MakeByte	(0XB78D);
	MakeByte	(x=0XB78E);
	OpHex		(x,	0);
	MakeByte	(x=0XB78F);
	OpHex		(x,	0);
	MakeByte	(x=0XB790);
	OpHex		(x,	0);
	MakeByte	(x=0XB791);
	OpHex		(x,	0);
	MakeByte	(x=0XB792);
	OpHex		(x,	0);
	MakeByte	(x=0XB793);
	OpHex		(x,	0);
	MakeByte	(0XB794);
	MakeByte	(0XB795);
	MakeByte	(0XB796);
	MakeByte	(0XB797);
	MakeByte	(0XB798);
	MakeByte	(0XB799);
	MakeByte	(0XB79A);
	MakeByte	(0XB79B);
	MakeCode	(0XB79C);
	MakeCode	(x=0XB79E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB7A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB7A6);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeByte	(0XB7B2);
	MakeByte	(0XB7B3);
	MakeCode	(0XB7B4);
	MakeName	(0XB7B4,	"WriteSpellIconTiles");
	MakeCode	(x=0XB7D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XB7D8,	"WriteMemberStatusWindowIcons");
	MakeCode	(x=0XB7DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB832);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0XB85A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB860);
	OpHex		(x,	0);
	MakeCode	(0XB87A);
	MakeCode	(x=0XB880);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB886);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB8DE);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(x=0XB900);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(0XB926);
	MakeCode	(0XB936);
	MakeCode	(x=0XB938);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB93C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB944);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB94A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XB950);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XB982);
	MakeArray	(0XB982,	0X478);
	MakeName	(0XB982,	"wl_StatusMain");
	MakeByte	(0XBDFA);
	MakeArray	(0XBDFA,	0X40);
	MakeName	(0XBDFA,	"wl_StatusGold");
	MakeCode	(x=0XBE3A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XBE50);
	MakeCode	(x=0XBE52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XBE5E);
	MakeDword	(x=0XBE6C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XBE6C,	"pt_MenuTiles");
	MakeDword	(x=0XBE70);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBE74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBE78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBE7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBE80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBE84);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBE88);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBE8C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBE90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XBE94);
	MakeCode	(x=0XBE9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBEA6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XBEC0);
	MakeCode	(x=0XBEC4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XBEE0);
	MakeCode	(x=0XBEE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBEF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XBEFC);
	MakeCode	(x=0XBEFE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XBF02);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XBF08);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XBF10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBF14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBF18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBF1C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XBF30);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBF38);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XBF40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XBF4E);
	MakeCode	(0XBF56);
	MakeCode	(x=0XBF6A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XBF7E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XBF84);
	MakeArray	(0XBF84,	0X4);
	MakeCode	(0XBF88);
	MakeCode	(x=0XBF8C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XBF9E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XBFA4);
	MakeArray	(0XBFA4,	0X4);
	MakeCode	(0XBFA8);
	MakeCode	(x=0XBFAC);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XBFB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XBFBA);
	MakeArray	(0XBFBA,	0X4);
	MakeCode	(0XBFBE);
	MakeCode	(x=0XBFC2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XBFD4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XBFDA);
	MakeArray	(0XBFDA,	0X4);
	MakeCode	(0XBFDE);
	MakeCode	(x=0XBFE2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XBFF2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XBFFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC006);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XC012);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XC01A);
	MakeCode	(x=0XC02E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XC042);
	MakeCode	(x=0XC050);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XC05A);
	MakeArray	(0XC05A,	0X4);
	MakeCode	(0XC05E);
	MakeCode	(x=0XC066);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC072);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XC084);
	MakeArray	(0XC084,	0X4);
	MakeCode	(0XC088);
	MakeCode	(x=0XC09E);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC0A8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC0B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC0C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC0CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC0E4);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0XC0EE,	"\"The item loves you.\" refusal text");
	MakeCode	(0XC100);
	MakeCode	(0XC102);
	MakeCode	(x=0XC112);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC128);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XC136);
	MakeCode	(x=0XC13C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC154);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC154,	"CreateMagicMenuWindow");
	MakeCode	(x=0XC16A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC170);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC190);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XC1A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC1AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC1B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC1C6);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XC1DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC1DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC1E6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC1EA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC1F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC1FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC200);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC204);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC20C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XC226);
	MakeCode	(x=0XC244);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC248);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XC250);
	MakeCode	(x=0XC262);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC26C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC270);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XC280);
	MakeCode	(0XC298);
	MakeCode	(0XC29C);
	MakeName	(0XC29C,	"ExecuteMagicMenu");
	MakeCode	(x=0XC2A2);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeCode	(x=0XC2AC);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XC2C4);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XC2DA);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XC2E8);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XC2F6);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0XC308);
	MakeArray	(0XC308,	0X4);
	MakeCode	(0XC30C);
	MakeCode	(x=0XC316);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC320);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC32E);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeDword	(x=0XC362);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC366);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC36A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC36E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC372);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC376);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC37A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC37E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC382);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC386);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC38A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC38E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC392);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC396);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC39A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC39E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0XC3A2);
	MakeName	(0XC3A2,	"defined_word_C3A2");
	MakeWord	(0XC3A4);
	MakeWord	(0XC3A6);
	MakeWord	(0XC3A8);
	MakeCode	(0XC3AA);
	MakeCode	(x=0XC3AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XC3B0,	"-> stash current menu index");
	MakeCode	(0XC3C2);
	MakeCode	(x=0XC3C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC3CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XC3D8,	"D0 <- pop current menu index");
	MakeCode	(x=0XC3DA);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	MakeCode	(x=0XC3F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC400);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC408);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC410);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC418);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC420);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC428);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC42C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC434);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC43C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC440);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC448);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC450);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC458);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC460);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XC46A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC470);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC47A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XC480);
	MakeCode	(x=0XC482);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC48E);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC49E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC4A6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC4B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC4C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC4E6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC4FC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC542);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC582);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC594);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XC5AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC5B4);
	OpHex		(x,	0);
	MakeCode	(0XC5CC);
	MakeCode	(x=0XC5D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XC5E4);
	MakeCode	(x=0XC5EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC5FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC602);
	OpEnumEx		(x,	0,	GetEnum("IconTiles_Properties"),0);
	MakeCode	(x=0XC60C);
	OpEnumEx		(x,	0,	GetEnum("IconTiles_Properties"),0);
	MakeCode	(x=0XC68C);
	OpEnumEx		(x,	0,	GetEnum("IconTiles_Properties"),0);
	MakeCode	(x=0XC696);
	OpEnumEx		(x,	0,	GetEnum("IconTiles_Properties"),0);
	MakeCode	(x=0XC69A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC6A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC6AE);
	OpHex		(x,	0);
	MakeCode	(0XC6C6);
	MakeName	(0XC6C6,	"GetIconTilesAddress");
	MakeCode	(x=0XC6CA);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0XC6CE);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinA		(0XC6D4,	0,	"                ");
	ExtLinA		(0XC6D4,	1,	"                ; Get empty slot icon address");
	MakeCode	(x=0XC6DA);
	OpEnumEx		(x,	0,	GetEnum("IconTiles_Properties"),0);
	MakeCode	(0XC6E0);
	MakeCode	(x=0XC6EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC6FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC70C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC710);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	ExtLinA		(0XC718,	0,	"                ");
	ExtLinA		(0XC718,	1,	"                ; Write spell level tiles");
	MakeCode	(x=0XC71A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC72C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC73A,	"WriteMpCost");
	MakeCode	(x=0XC740);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC74E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC75A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC76C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC770);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XC77E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC782);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XC78A);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	ExtLinA		(0XC792,	0,	"; icon highlight sprite properties");
	ExtLinA		(0XC792,	1,	"                ");
	MakeWord	(0XC792);
	MakeName	(0XC792,	"spr_C792");
	MakeByte	(0XC794);
	MakeByte	(0XC795);
	MakeWord	(0XC796);
	MakeWord	(0XC798);
	MakeWord	(0XC79A);
	MakeByte	(0XC79C);
	MakeByte	(0XC79D);
	MakeWord	(0XC79E);
	MakeWord	(0XC7A0);
	MakeWord	(0XC7A2);
	MakeByte	(0XC7A4);
	MakeByte	(0XC7A5);
	MakeWord	(0XC7A6);
	MakeWord	(0XC7A8);
	MakeWord	(0XC7AA);
	MakeByte	(0XC7AC);
	MakeByte	(0XC7AD);
	MakeWord	(0XC7AE);
	MakeWord	(0XC7B0);
	MakeWord	(0XC7B2);
	MakeName	(0XC7B2,	"spr_C7B2");
	MakeByte	(0XC7B4);
	MakeByte	(0XC7B5);
	MakeWord	(0XC7B6);
	MakeWord	(0XC7B8);
	MakeWord	(0XC7BA);
	MakeByte	(0XC7BC);
	MakeByte	(0XC7BD);
	MakeWord	(0XC7BE);
	MakeWord	(0XC7C0);
	MakeDword	(x=0XC7C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC7C2,	"pt_MenuActionStrings");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_3(void) {
        auto x;
#define id x

	MakeDword	(x=0XC7C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC7FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC802);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC806);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC80A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC80E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC812);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC816);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC81A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC81E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC822);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC826);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC82A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC82E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC832);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC836);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC83A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC83E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC842);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC846);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC84A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC84E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC852);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC856);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC85A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC85E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeStr		(0XC862,	0XC86B);
	MakeName	(0XC862,	"aMapdisp");
	MakeStr		(0XC86B,	0XC871);
	MakeName	(0XC86B,	"aSpeed");
	MakeStr		(0XC871,	0XC879);
	MakeName	(0XC871,	"aMessage");
	MakeStr		(0XC879,	0XC87E);
	MakeName	(0XC879,	"aQuit");
	MakeStr		(0XC87E,	0XC885);
	MakeName	(0XC87E,	"aAttack");
	MakeStr		(0XC885,	0XC88B);
	MakeName	(0XC885,	"aMagic");
	MakeStr		(0XC88B,	0XC890);
	MakeName	(0XC88B,	"aItem");
	MakeStr		(0XC890,	0XC895);
	MakeName	(0XC890,	"aStay");
	MakeStr		(0XC895,	0XC89C);
	MakeName	(0XC895,	"aSearch");
	MakeStr		(0XC89C,	0XC8A1);
	MakeName	(0XC89C,	"aTalk");
	MakeStr		(0XC8A1,	0XC8A6);
	MakeName	(0XC8A1,	"aGold");
	MakeStr		(0XC8A6,	0XC8AA);
	MakeName	(0XC8A6,	"aUse");
	MakeStr		(0XC8AA,	0XC8AF);
	MakeName	(0XC8AA,	"aGive");
	MakeStr		(0XC8AF,	0XC8B5);
	MakeName	(0XC8AF,	"aEquip");
	MakeStr		(0XC8B5,	0XC8BA);
	MakeName	(0XC8B5,	"aDrop");
	MakeStr		(0XC8BA,	0XC8BE);
	MakeName	(0XC8BA,	"aBuy");
	MakeStr		(0XC8BE,	0XC8C3);
	MakeName	(0XC8BE,	"aSell");
	MakeStr		(0XC8C3,	0XC8C9);
	MakeName	(0XC8C3,	"aDeals");
	MakeStr		(0XC8C9,	0XC8D0);
	MakeName	(0XC8C9,	"aRepair");
	MakeStr		(0XC8D0,	0XC8D7);
	MakeName	(0XC8D0,	"aAdvice");
	MakeStr		(0XC8D7,	0XC8DC);
	MakeName	(0XC8D7,	"aJoin");
	MakeStr		(0XC8DC,	0XC8E1);
	MakeName	(0XC8DC,	"aItem_0");
	MakeStr		(0XC8E1,	0XC8E8);
	MakeName	(0XC8E1,	"aStatus");
	MakeStr		(0XC8E8,	0XC8ED);
	MakeName	(0XC8E8,	"aSave");
	MakeStr		(0XC8ED,	0XC8F2);
	MakeName	(0XC8ED,	"aCure");
	MakeStr		(0XC8F2,	0XC8F8);
	MakeName	(0XC8F2,	"aRaise");
	MakeStr		(0XC8F8,	0XC900);
	MakeName	(0XC8F8,	"aPromote");
	MakeRptCmt	(0XC900,	"main menu window start");
	MakeWord	(0XC900);
	MakeName	(0XC900,	"wl_C900");
	MakeWord	(0XC902);
	MakeWord	(0XC904);
	MakeWord	(0XC906);
	MakeWord	(0XC908);
	MakeWord	(0XC90A);
	MakeWord	(0XC90C);
	MakeWord	(0XC90E);
	MakeWord	(0XC910);
	MakeWord	(0XC912);
	MakeWord	(0XC914);
	MakeWord	(0XC916);
	MakeWord	(0XC918);
	MakeWord	(0XC91A);
	MakeWord	(0XC91C);
	MakeWord	(0XC91E);
	MakeWord	(0XC920);
	MakeWord	(0XC922);
	MakeWord	(0XC924);
	MakeWord	(0XC926);
	MakeWord	(0XC928);
	MakeWord	(0XC92A);
	MakeWord	(0XC92C);
	MakeWord	(0XC92E);
	MakeWord	(0XC930);
	MakeWord	(0XC932);
	MakeWord	(0XC934);
	MakeWord	(0XC936);
	MakeWord	(0XC938);
	MakeWord	(0XC93A);
	MakeWord	(0XC93C);
	MakeWord	(0XC93E);
	MakeWord	(0XC940);
	MakeWord	(0XC942);
	MakeWord	(0XC944);
	MakeWord	(0XC946);
	MakeWord	(0XC948);
	MakeWord	(0XC94A);
	MakeWord	(0XC94C);
	MakeWord	(0XC94E);
	MakeWord	(0XC950);
	MakeWord	(0XC952);
	MakeWord	(0XC954);
	MakeWord	(0XC956);
	MakeWord	(0XC958);
	MakeWord	(0XC95A);
	MakeWord	(0XC95C);
	MakeWord	(0XC95E);
	MakeWord	(0XC960);
	MakeWord	(0XC962);
	MakeWord	(0XC964);
	MakeWord	(0XC966);
	MakeWord	(0XC968);
	MakeWord	(0XC96A);
	MakeWord	(0XC96C);
	MakeWord	(0XC96E);
	MakeWord	(0XC970);
	MakeWord	(0XC972);
	MakeWord	(0XC974);
	MakeWord	(0XC976);
	MakeWord	(0XC978);
	MakeWord	(0XC97A);
	MakeWord	(0XC97C);
	MakeWord	(0XC97E);
	MakeWord	(0XC980);
	MakeWord	(0XC982);
	MakeWord	(0XC984);
	MakeWord	(0XC986);
	MakeWord	(0XC988);
	MakeWord	(0XC98A);
	MakeWord	(0XC98C);
	MakeWord	(0XC98E);
	MakeWord	(0XC990);
	MakeWord	(0XC992);
	MakeWord	(0XC994);
	MakeWord	(0XC996);
	MakeWord	(0XC998);
	MakeWord	(0XC99A);
	MakeWord	(0XC99C);
	MakeWord	(0XC99E);
	MakeWord	(0XC9A0);
	MakeWord	(0XC9A2);
	MakeWord	(0XC9A4);
	MakeWord	(0XC9A6);
	MakeWord	(0XC9A8);
	MakeWord	(0XC9AA);
	MakeWord	(0XC9AC);
	MakeWord	(0XC9AE);
	MakeWord	(0XC9B0);
	MakeWord	(0XC9B2);
	MakeWord	(0XC9B4);
	MakeWord	(0XC9B6);
	MakeWord	(0XC9B8);
	MakeWord	(0XC9BA);
	MakeWord	(0XC9BC);
	MakeWord	(0XC9BE);
	MakeWord	(0XC9C0);
	MakeWord	(0XC9C2);
	MakeWord	(0XC9C4);
	MakeWord	(0XC9C6);
	MakeWord	(0XC9C8);
	MakeWord	(0XC9CA);
	MakeWord	(0XC9CC);
	MakeWord	(0XC9CE);
	MakeWord	(0XC9D0);
	MakeWord	(0XC9D2);
	MakeWord	(0XC9D4);
	MakeWord	(0XC9D6);
	MakeWord	(0XC9D8);
	MakeWord	(0XC9DA);
	MakeWord	(0XC9DC);
	MakeWord	(0XC9DE);
	MakeWord	(0XC9E0);
	MakeWord	(0XC9E2);
	MakeRptCmt	(0XC9E4,	"menu window 1 start");
	MakeWord	(0XC9E4);
	MakeWord	(0XC9E6);
	MakeWord	(0XC9E8);
	MakeWord	(0XC9EA);
	MakeWord	(0XC9EC);
	MakeWord	(0XC9EE);
	MakeWord	(0XC9F0);
	MakeWord	(0XC9F2);
	MakeWord	(0XC9F4);
	MakeWord	(0XC9F6);
	MakeWord	(0XC9F8);
	MakeWord	(0XC9FA);
	MakeWord	(0XC9FC);
	MakeWord	(0XC9FE);
	MakeWord	(0XCA00);
	MakeWord	(0XCA02);
	MakeWord	(0XCA04);
	MakeWord	(0XCA06);
	MakeWord	(0XCA08);
	MakeWord	(0XCA0A);
	MakeWord	(0XCA0C);
	MakeWord	(0XCA0E);
	MakeWord	(0XCA10);
	MakeWord	(0XCA12);
	MakeWord	(0XCA14);
	MakeWord	(0XCA16);
	MakeWord	(0XCA18);
	MakeWord	(0XCA1A);
	MakeWord	(0XCA1C);
	MakeWord	(0XCA1E);
	MakeWord	(0XCA20);
	MakeWord	(0XCA22);
	MakeWord	(0XCA24);
	MakeWord	(0XCA26);
	MakeWord	(0XCA28);
	MakeWord	(0XCA2A);
	MakeWord	(0XCA2C);
	MakeWord	(0XCA2E);
	MakeWord	(0XCA30);
	MakeWord	(0XCA32);
	MakeWord	(0XCA34);
	MakeWord	(0XCA36);
	MakeWord	(0XCA38);
	MakeWord	(0XCA3A);
	MakeWord	(0XCA3C);
	MakeWord	(0XCA3E);
	MakeWord	(0XCA40);
	MakeWord	(0XCA42);
	MakeWord	(0XCA44);
	MakeWord	(0XCA46);
	MakeWord	(0XCA48);
	MakeWord	(0XCA4A);
	MakeWord	(0XCA4C);
	MakeWord	(0XCA4E);
	MakeWord	(0XCA50);
	MakeWord	(0XCA52);
	MakeWord	(0XCA54);
	MakeWord	(0XCA56);
	MakeWord	(0XCA58);
	MakeWord	(0XCA5A);
	MakeWord	(0XCA5C);
	MakeWord	(0XCA5E);
	MakeWord	(0XCA60);
	MakeWord	(0XCA62);
	MakeWord	(0XCA64);
	MakeWord	(0XCA66);
	MakeWord	(0XCA68);
	MakeWord	(0XCA6A);
	MakeWord	(0XCA6C);
	MakeWord	(0XCA6E);
	MakeWord	(0XCA70);
	MakeWord	(0XCA72);
	MakeWord	(0XCA74);
	MakeWord	(0XCA76);
	MakeWord	(0XCA78);
	MakeWord	(0XCA7A);
	MakeWord	(0XCA7C);
	MakeWord	(0XCA7E);
	MakeWord	(0XCA80);
	MakeWord	(0XCA82);
	MakeWord	(0XCA84);
	MakeWord	(0XCA86);
	MakeWord	(0XCA88);
	MakeWord	(0XCA8A);
	MakeWord	(0XCA8C);
	MakeWord	(0XCA8E);
	MakeWord	(0XCA90);
	MakeWord	(0XCA92);
	MakeWord	(0XCA94);
	MakeWord	(0XCA96);
	MakeWord	(0XCA98);
	MakeWord	(0XCA9A);
	MakeWord	(0XCA9C);
	MakeWord	(0XCA9E);
	MakeWord	(0XCAA0);
	MakeWord	(0XCAA2);
	MakeWord	(0XCAA4);
	MakeWord	(0XCAA6);
	MakeWord	(0XCAA8);
	MakeWord	(0XCAAA);
	MakeWord	(0XCAAC);
	MakeWord	(0XCAAE);
	MakeWord	(0XCAB0);
	MakeWord	(0XCAB2);
	MakeWord	(0XCAB4);
	MakeWord	(0XCAB6);
	MakeWord	(0XCAB8);
	MakeWord	(0XCABA);
	MakeWord	(0XCABC);
	MakeWord	(0XCABE);
	MakeWord	(0XCAC0);
	MakeWord	(0XCAC2);
	MakeWord	(0XCAC4);
	MakeWord	(0XCAC6);
	MakeRptCmt	(0XCAC8,	"magic menu window start");
	MakeWord	(0XCAC8);
	MakeWord	(0XCACA);
	MakeWord	(0XCACC);
	MakeWord	(0XCACE);
	MakeWord	(0XCAD0);
	MakeWord	(0XCAD2);
	MakeWord	(0XCAD4);
	MakeWord	(0XCAD6);
	MakeWord	(0XCAD8);
	MakeWord	(0XCADA);
	MakeWord	(0XCADC);
	MakeWord	(0XCADE);
	MakeWord	(0XCAE0);
	MakeWord	(0XCAE2);
	MakeWord	(0XCAE4);
	MakeWord	(0XCAE6);
	MakeWord	(0XCAE8);
	MakeWord	(0XCAEA);
	MakeWord	(0XCAEC);
	MakeWord	(0XCAEE);
	MakeWord	(0XCAF0);
	MakeWord	(0XCAF2);
	MakeWord	(0XCAF4);
	MakeWord	(0XCAF6);
	MakeWord	(0XCAF8);
	MakeWord	(0XCAFA);
	MakeWord	(0XCAFC);
	MakeWord	(0XCAFE);
	MakeWord	(0XCB00);
	MakeWord	(0XCB02);
	MakeWord	(0XCB04);
	MakeWord	(0XCB06);
	MakeWord	(0XCB08);
	MakeWord	(0XCB0A);
	MakeWord	(0XCB0C);
	MakeWord	(0XCB0E);
	MakeWord	(0XCB10);
	MakeWord	(0XCB12);
	MakeWord	(0XCB14);
	MakeWord	(0XCB16);
	MakeWord	(0XCB18);
	MakeWord	(0XCB1A);
	MakeWord	(0XCB1C);
	MakeWord	(0XCB1E);
	MakeWord	(0XCB20);
	MakeWord	(0XCB22);
	MakeWord	(0XCB24);
	MakeWord	(0XCB26);
	MakeWord	(0XCB28);
	MakeWord	(0XCB2A);
	MakeWord	(0XCB2C);
	MakeWord	(0XCB2E);
	MakeWord	(0XCB30);
	MakeWord	(0XCB32);
	MakeWord	(0XCB34);
	MakeWord	(0XCB36);
	MakeWord	(0XCB38);
	MakeWord	(0XCB3A);
	MakeWord	(0XCB3C);
	MakeWord	(0XCB3E);
	MakeWord	(0XCB40);
	MakeWord	(0XCB42);
	MakeWord	(0XCB44);
	MakeWord	(0XCB46);
	MakeWord	(0XCB48);
	MakeWord	(0XCB4A);
	MakeWord	(0XCB4C);
	MakeWord	(0XCB4E);
	MakeWord	(0XCB50);
	MakeWord	(0XCB52);
	MakeWord	(0XCB54);
	MakeWord	(0XCB56);
	MakeWord	(0XCB58);
	MakeWord	(0XCB5A);
	MakeWord	(0XCB5C);
	MakeWord	(0XCB5E);
	MakeWord	(0XCB60);
	MakeWord	(0XCB62);
	MakeWord	(0XCB64);
	MakeWord	(0XCB66);
	MakeWord	(0XCB68);
	MakeWord	(0XCB6A);
	MakeWord	(0XCB6C);
	MakeWord	(0XCB6E);
	MakeWord	(0XCB70);
	MakeWord	(0XCB72);
	MakeWord	(0XCB74);
	MakeWord	(0XCB76);
	MakeWord	(0XCB78);
	MakeWord	(0XCB7A);
	MakeWord	(0XCB7C);
	MakeWord	(0XCB7E);
	MakeWord	(0XCB80);
	MakeWord	(0XCB82);
	MakeWord	(0XCB84);
	MakeWord	(0XCB86);
	MakeWord	(0XCB88);
	MakeWord	(0XCB8A);
	MakeWord	(0XCB8C);
	MakeWord	(0XCB8E);
	MakeWord	(0XCB90);
	MakeWord	(0XCB92);
	MakeWord	(0XCB94);
	MakeWord	(0XCB96);
	MakeWord	(0XCB98);
	MakeWord	(0XCB9A);
	MakeWord	(0XCB9C);
	MakeWord	(0XCB9E);
	MakeWord	(0XCBA0);
	MakeWord	(0XCBA2);
	MakeWord	(0XCBA4);
	MakeWord	(0XCBA6);
	MakeWord	(0XCBA8);
	MakeWord	(0XCBAA);
	MakeWord	(0XCBAC);
	MakeWord	(0XCBAE);
	MakeWord	(0XCBB0);
	MakeWord	(0XCBB2);
	MakeWord	(0XCBB4);
	MakeWord	(0XCBB6);
	MakeWord	(0XCBB8);
	MakeWord	(0XCBBA);
	MakeWord	(0XCBBC);
	MakeWord	(0XCBBE);
	MakeWord	(0XCBC0);
	MakeWord	(0XCBC2);
	MakeWord	(0XCBC4);
	MakeWord	(0XCBC6);
	MakeWord	(0XCBC8);
	MakeWord	(0XCBCA);
	MakeWord	(0XCBCC);
	MakeWord	(0XCBCE);
	MakeWord	(0XCBD0);
	MakeWord	(0XCBD2);
	MakeWord	(0XCBD4);
	MakeWord	(0XCBD6);
	MakeWord	(0XCBD8);
	MakeWord	(0XCBDA);
	MakeWord	(0XCBDC);
	MakeWord	(0XCBDE);
	MakeWord	(0XCBE0);
	MakeWord	(0XCBE2);
	MakeWord	(0XCBE4);
	MakeWord	(0XCBE6);
	MakeWord	(0XCBE8);
	MakeWord	(0XCBEA);
	MakeWord	(0XCBEC);
	MakeWord	(0XCBEE);
	MakeWord	(0XCBF0);
	MakeWord	(0XCBF2);
	MakeWord	(0XCBF4);
	MakeWord	(0XCBF6);
	MakeWord	(0XCBF8);
	MakeWord	(0XCBFA);
	MakeWord	(0XCBFC);
	MakeWord	(0XCBFE);
	MakeWord	(0XCC00);
	MakeWord	(0XCC02);
	MakeWord	(0XCC04);
	MakeWord	(0XCC06);
	MakeWord	(0XCC08);
	MakeWord	(0XCC0A);
	MakeWord	(0XCC0C);
	MakeWord	(0XCC0E);
	MakeWord	(0XCC10);
	MakeWord	(0XCC12);
	MakeWord	(0XCC14);
	MakeWord	(0XCC16);
	MakeWord	(0XCC18);
	MakeWord	(0XCC1A);
	MakeWord	(0XCC1C);
	MakeWord	(0XCC1E);
	MakeWord	(0XCC20);
	MakeWord	(0XCC22);
	MakeWord	(0XCC24);
	MakeWord	(0XCC26);
	MakeWord	(0XCC28);
	MakeWord	(0XCC2A);
	MakeWord	(0XCC2C);
	MakeWord	(0XCC2E);
	MakeWord	(0XCC30);
	MakeWord	(0XCC32);
	MakeWord	(0XCC34);
	MakeWord	(0XCC36);
	MakeWord	(0XCC38);
	MakeWord	(0XCC3A);
	MakeWord	(0XCC3C);
	MakeWord	(0XCC3E);
	MakeWord	(0XCC40);
	MakeWord	(0XCC42);
	MakeWord	(0XCC44);
	MakeWord	(0XCC46);
	MakeWord	(0XCC48);
	MakeWord	(0XCC4A);
	MakeWord	(0XCC4C);
	MakeWord	(0XCC4E);
	MakeWord	(0XCC50);
	MakeWord	(0XCC52);
	MakeWord	(0XCC54);
	MakeWord	(0XCC56);
	MakeWord	(0XCC58);
	MakeWord	(0XCC5A);
	MakeWord	(0XCC5C);
	MakeWord	(0XCC5E);
	MakeWord	(0XCC60);
	MakeWord	(0XCC62);
	MakeWord	(0XCC64);
	MakeWord	(0XCC66);
	MakeWord	(0XCC68);
	MakeWord	(0XCC6A);
	MakeWord	(0XCC6C);
	MakeWord	(0XCC6E);
	MakeWord	(0XCC70);
	MakeWord	(0XCC72);
	MakeWord	(0XCC74);
	MakeWord	(0XCC76);
	MakeWord	(0XCC78);
	MakeWord	(0XCC7A);
	MakeWord	(0XCC7C);
	MakeWord	(0XCC7E);
	MakeWord	(0XCC80);
	MakeWord	(0XCC82);
	MakeWord	(0XCC84);
	MakeWord	(0XCC86);
	MakeWord	(0XCC88);
	MakeWord	(0XCC8A);
	MakeWord	(0XCC8C);
	MakeWord	(0XCC8E);
	MakeWord	(0XCC90);
	MakeName	(0XCC90,	"wl_CC90");
	MakeWord	(0XCC92);
	MakeWord	(0XCC94);
	MakeWord	(0XCC96);
	MakeWord	(0XCC98);
	MakeWord	(0XCC9A);
	MakeWord	(0XCC9C);
	MakeWord	(0XCC9E);
	MakeWord	(0XCCA0);
	MakeWord	(0XCCA2);
	MakeWord	(0XCCA4);
	MakeWord	(0XCCA6);
	MakeWord	(0XCCA8);
	MakeWord	(0XCCAA);
	MakeWord	(0XCCAC);
	MakeWord	(0XCCAE);
	MakeWord	(0XCCB0);
	MakeWord	(0XCCB2);
	MakeWord	(0XCCB4);
	MakeWord	(0XCCB6);
	MakeWord	(0XCCB8);
	MakeWord	(0XCCBA);
	MakeWord	(0XCCBC);
	MakeWord	(0XCCBE);
	MakeWord	(0XCCC0);
	MakeWord	(0XCCC2);
	MakeWord	(0XCCC4);
	MakeWord	(0XCCC6);
	MakeWord	(0XCCC8);
	MakeWord	(0XCCCA);
	MakeWord	(0XCCCC);
	MakeWord	(0XCCCE);
	MakeWord	(0XCCD0);
	MakeWord	(0XCCD2);
	MakeWord	(0XCCD4);
	MakeWord	(0XCCD6);
	MakeByte	(0XCCD8);
	MakeArray	(0XCCD8,	0X200);
	MakeName	(0XCCD8,	"IconHighlightTiles");
	MakeCode	(0XCED8);
	MakeName	(0XCED8,	"OpenMiniStatusWindow");
	MakeCode	(x=0XCEE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCEE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCEF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCF08);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCF0E);
	OpHex		(x,	0);
	MakeCode	(0XCF1E);
	MakeName	(0XCF1E,	"CloseMiniStatusWindow");
	MakeCode	(x=0XCF26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCF2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCF3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCF50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCF56);
	OpHex		(x,	0);
	MakeCode	(0XCF66);
	MakeCode	(x=0XCF6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCF70);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCF7A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XCF8C);
	MakeCode	(x=0XCF90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCF96);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XCFA6);
	MakeName	(0XCFA6,	"CreateMiniStatusWindow");
	MakeName	(0XCFAC,	"BuildMiniStatusWindow");
	MakeCode	(x=0XCFAE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XCFC6,	"push current HP and max HP values");
	MakeRptCmt	(0XCFDA,	"pull current HP and max HP values -> D0 and D1");
	MakeRptCmt	(0XCFE8,	"keep highest of max hp or max mp");
	MakeRptCmt	(0XCFEE,	"max window width = 22 tiles");
	MakeRptCmt	(0XCFF4,	"push current HP, max HP and current MP values");
	MakeCode	(x=0XCFF8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XD002,	"D2 = displayed name length");
	MakeCode	(0XD00E);
	MakeRptCmt	(0XD012,	"branch if ally");
	MakeCode	(0XD018);
	MakeRptCmt	(0XD02E,	"pull current HP, max HP and current MP values -> D0, D1 and D2");
	MakeCode	(x=0XD032);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XD036);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD03A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD04C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD056);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD064);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD082);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XD090,	"branch if enemy");
	MakeCode	(0XD09C);
	MakeRptCmt	(0XD0A8,	"D7 = class name length");
	MakeCode	(x=0XD0AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD0B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD0B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinA		(0XD0BC,	0,	"                ");
	ExtLinA		(0XD0BC,	1,	"                ; Write combatant name");
	MakeCode	(x=0XD0C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XD0CC,	"'L'");
	MakeCode	(x=0XD0E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XD0FA);
	MakeRptCmt	(0XD0FE,	"in the NA version, simply cover the \"L?\" string in the enemies mini status window with two spaces");
	MakeCode	(x=0XD0FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD10E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD114);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD118);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD12A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XD132,	"small \"P\"");
	MakeCode	(x=0XD146);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD14C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD150);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD154);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD176);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XD19A);
	MakeCode	(0XD1A4);
	MakeCode	(x=0XD1A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XD1AE);
	MakeByte	(0XD1AF);
	MakeByte	(x=0XD1B0);
	OpChr		(x,	0);
	MakeName	(0XD1B0,	"aTwoSpaces");
	MakeByte	(x=0XD1B1);
	OpChr		(x,	0);
	MakeCode	(0XD1B2);
	MakeCode	(x=0XD1B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD1BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD1C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD1CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XD1D8);
	MakeCode	(x=0XD1F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XD214);
	MakeCode	(x=0XD21E);
	OpDecimal	(x,	0);
	MakeName	(0XD21E,	"CapMiniStatusBarLength");
	MakeCode	(x=0XD224);
	OpDecimal	(x,	0);
	MakeCode	(x=0XD226);
	OpDecimal	(x,	0);
	MakeCode	(x=0XD22C);
	OpDecimal	(x,	0);
	MakeWord	(x=0XD230);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0XD230,	"wl_D230");
	MakeWord	(x=0XD232);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD234);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD236);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD238);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD23A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD23C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD23E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD240);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD242);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD244);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD246);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD248);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD24A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD24C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD24E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0XD24E,	"wl_D24E");
	MakeWord	(x=0XD250);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD252);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD254);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD256);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD258);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0XD258,	"wl_D258");
	MakeWord	(x=0XD25A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD25C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD25E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD260);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD262);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD264);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD266);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD268);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD26A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD26C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD26E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD270);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD272);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD274);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD276);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD278);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD27A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD27C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD27E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD280);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD282);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD284);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD286);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD288);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD28A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0XD28A,	"wl_D28A");
	MakeWord	(x=0XD28C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD28E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD290);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD292);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD294);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD296);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD298);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD29A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD29C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD29E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2A0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2A2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2A4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2A6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2A8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2AA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2AC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2AE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2B0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2B2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2B4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2B6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2B8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2BA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2BC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2BE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2C0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2C2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2C4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2C6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2C8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2CA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2CC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2CE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2D0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2D2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2D4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2D6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2D8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2DA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2DC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2DE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2E0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2E2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2E4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2E6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2E8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2EA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2EC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2EE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2F0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2F2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2F4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2F6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2F8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2FA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2FC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD2FE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD300);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD302);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD304);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD306);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD308);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD30A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD30C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD30E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD310);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD312);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD314);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD316);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD318);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD31A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD31C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD31E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD320);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD322);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD324);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD326);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD328);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XD32A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(0XD32C);
	MakeCode	(x=0XD330);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD33C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD35E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XD374);
	MakeArray	(0XD374,	0X4);
	MakeCode	(0XD378);
	MakeDword	(x=0XD39A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XD39A,	"pt_MiscMessageWindowLayouts");
	MakeDword	(x=0XD39E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XD3BE,	"\"No target.\"");
	MakeByte	(0XD3BE);
	MakeArray	(0XD3BE,	0X4A);
	MakeName	(0XD3BE,	"MiscMessageWindowLayout0");
	MakeRptCmt	(0XD408,	"\"No magic.\"");
	MakeByte	(0XD408);
	MakeArray	(0XD408,	0X44);
	MakeName	(0XD408,	"MiscMessageWindowLayout1");
	MakeRptCmt	(0XD44C,	"\"No item.\"");
	MakeByte	(0XD44C);
	MakeArray	(0XD44C,	0X3E);
	MakeName	(0XD44C,	"MiscMessageWindowLayout2");
	MakeRptCmt	(0XD48A,	"\"Not enough MP.\"");
	MakeByte	(0XD48A);
	MakeArray	(0XD48A,	0X62);
	MakeName	(0XD48A,	"MiscMessageWindowLayout3");
	MakeRptCmt	(0XD4EC,	"\"No equippable item.\"");
	MakeByte	(0XD4EC);
	MakeArray	(0XD4EC,	0X80);
	MakeName	(0XD4EC,	"MiscMessageWindowLayout4");
	MakeRptCmt	(0XD56C,	"\"The item loves you.\"");
	MakeByte	(0XD56C);
	MakeArray	(0XD56C,	0X80);
	MakeName	(0XD56C,	"MiscMessageWindowLayout5");
	MakeRptCmt	(0XD5EC,	"\"The item is cursed.\"");
	MakeByte	(0XD5EC);
	MakeArray	(0XD5EC,	0X80);
	MakeName	(0XD5EC,	"MiscMessageWindowLayout6");
	MakeRptCmt	(0XD66C,	"\"No! Keep the item.\"");
	MakeByte	(0XD66C);
	MakeArray	(0XD66C,	0X7A);
	MakeName	(0XD66C,	"MiscMessageWindowLayout7");
	MakeRptCmt	(0XD6E6,	"\"You can't use it.\"");
	MakeByte	(0XD6E6);
	MakeArray	(0XD6E6,	0X74);
	MakeName	(0XD6E6,	"MiscMessageWindowLayout8");
	MakeCode	(0XD75A);
	MakeCode	(x=0XD75E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD774);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD77A);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0XD780);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0XD786);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD790);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XD794);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XD798);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XD7A4);
	MakeCode	(x=0XD7AA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XD7B6);
	MakeCode	(0XD7BC);
	MakeCode	(x=0XD7C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD7D0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XD7D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XD7D8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XD7E4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD7EC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XD7FC);
	MakeCode	(x=0XD818);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD83C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XD846);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XD84E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XD854);
	MakeArray	(0XD854,	0X4);
	MakeCode	(0XD858);
	MakeCode	(x=0XD85C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XD866);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XD86E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XD874);
	MakeArray	(0XD874,	0X4);
	MakeCode	(0XD878);
	MakeCode	(x=0XD87C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XD886);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XD88A);
	MakeArray	(0XD88A,	0X4);
	MakeCode	(0XD88E);
	MakeCode	(x=0XD892);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XD89C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XD8A2);
	MakeArray	(0XD8A2,	0X4);
	MakeCode	(0XD8A6);
	MakeCode	(x=0XD8AA);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XD8B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD8D0);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XD8DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD8E4);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XD8F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XD8FA);
	MakeCode	(0XD92E);
	MakeCode	(0XD942);
	MakeCode	(x=0XD946);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD950);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0XD956);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD95A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD960);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD96C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0XD99A,	"\"The item loves you.\" refusal text");
	MakeCode	(x=0XD9A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD9AC);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0XD9B6,	"\"The item is cursed.\" refusal text");
	MakeCode	(x=0XD9BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD9DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XD9F4);
	MakeCode	(x=0XD9FA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XDA12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDA28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDA3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDA44);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDA4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDA5E);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XDA78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDA7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDA82);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XDA86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDA8C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDA92);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDAAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDAB0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDAB6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XDAC0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDAC4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XDAD0);
	MakeByte	(0XDADA);
	MakeByte	(0XDADB);
	MakeByte	(0XDADC);
	MakeByte	(0XDADD);
	MakeByte	(0XDADE);
	MakeByte	(0XDADF);
	MakeByte	(0XDAE0);
	MakeByte	(0XDAE1);
	MakeCode	(0XDAE2);
	MakeCode	(x=0XDAE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDAEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDAFC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XDAFC,	"BuildBattleEquipStatsWindow");
	MakeCode	(x=0XDB00);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB14);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XDB1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB36);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB44);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB4E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB66);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB76);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB7C);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0XDB82);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0XDB88);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XDB92);
	MakeCode	(x=0XDB94);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDB9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDBA4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDBAA);
	OpEnumEx		(x,	0,	GetEnum("IconTiles_Properties"),0);
	MakeCode	(x=0XDBB4);
	OpEnumEx		(x,	0,	GetEnum("IconTiles_Properties"),0);
	MakeCode	(x=0XDC34);
	OpEnumEx		(x,	0,	GetEnum("IconTiles_Properties"),0);
	MakeCode	(x=0XDC3E);
	OpEnumEx		(x,	0,	GetEnum("IconTiles_Properties"),0);
	MakeCode	(x=0XDC42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDC50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDC56);
	OpHex		(x,	0);
	MakeCode	(0XDC6E);
	MakeCode	(x=0XDC74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XDC8E);
	MakeCode	(x=0XDC94);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0XDCA4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDCA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDCAC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XDCB8);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XDCC0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDCC4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XDCD4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDCDE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDCF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDCF4);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XDCFA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0XDCFA,	"PlayCursedItemMusic");
	MakeWord	(x=0XDCFC);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeCode	(0XDCFE);
	MakeByte	(x=0XDD0A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(x=0XDD0B);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(x=0XDD0C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(x=0XDD0D);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(x=0XDD0E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(x=0XDD0F);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeStr		(0XDD10,	0XDD1C);
	MakeName	(0XDD10,	"aWeaponring_0");
	MakeWord	(x=0XDD1C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0XDD1C,	"wl_BattleEquip_Stats");
	MakeWord	(x=0XDD1E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD20);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD22);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD24);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD26);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD28);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD2A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD2C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD2E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD30);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD32);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD34);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD36);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD38);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD3A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD3C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD3E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD40);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD42);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD44);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD46);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD48);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD4A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD4C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD4E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD50);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD52);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD54);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD56);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD58);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD5A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD5C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD5E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD60);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD62);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD64);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD66);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD68);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD6A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD6C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD6E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD70);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD72);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD74);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD76);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD78);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD7A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD7C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD7E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD80);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD82);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD84);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD86);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD88);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD8A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD8C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD8E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD90);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD92);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD94);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD96);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD98);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD9A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD9C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDD9E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDA0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDA2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDA4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDA6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDA8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDAA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDAC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDAE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDB0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDB2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDB4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDB6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDB8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDBA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDBC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDBE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDC0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDC2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDC4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDC6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDC8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDCA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDCC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDCE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDD0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDD2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDD4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDD6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDD8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDDA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDDC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDDE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDE0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDE2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDE4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDE6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDE8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDEA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDEC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDEE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDF0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XDDF2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(0XDDF4);
	MakeName	(0XDDF4,	"wl_BattleEquip_ItemName");
	MakeWord	(0XDDF6);
	MakeWord	(0XDDF8);
	MakeWord	(0XDDFA);
	MakeWord	(0XDDFC);
	MakeWord	(0XDDFE);
	MakeWord	(0XDE00);
	MakeWord	(0XDE02);
	MakeWord	(0XDE04);
	MakeWord	(0XDE06);
	MakeWord	(0XDE08);
	MakeWord	(0XDE0A);
	MakeWord	(0XDE0C);
	MakeWord	(0XDE0E);
	MakeWord	(0XDE10);
	MakeWord	(0XDE12);
	MakeWord	(0XDE14);
	MakeWord	(0XDE16);
	MakeWord	(0XDE18);
	MakeWord	(0XDE1A);
	MakeWord	(0XDE1C);
	MakeWord	(0XDE1E);
	MakeWord	(0XDE20);
	MakeWord	(0XDE22);
	MakeWord	(0XDE24);
	MakeWord	(0XDE26);
	MakeWord	(0XDE28);
	MakeWord	(0XDE2A);
	MakeWord	(0XDE2C);
	MakeWord	(0XDE2E);
	MakeWord	(0XDE30);
	MakeWord	(0XDE32);
	MakeWord	(0XDE34);
	MakeWord	(0XDE36);
	MakeWord	(0XDE38);
	MakeWord	(0XDE3A);
	MakeWord	(0XDE3C);
	MakeWord	(0XDE3E);
	MakeWord	(0XDE40);
	MakeWord	(0XDE42);
	MakeWord	(0XDE44);
	MakeWord	(0XDE46);
	MakeWord	(0XDE48);
	MakeWord	(0XDE4A);
	MakeWord	(0XDE4C);
	MakeWord	(0XDE4E);
	MakeWord	(0XDE50);
	MakeWord	(0XDE52);
	MakeWord	(0XDE54);
	MakeWord	(0XDE56);
	MakeWord	(0XDE58);
	MakeWord	(0XDE5A);
	MakeWord	(0XDE5C);
	MakeWord	(0XDE5E);
	MakeWord	(0XDE60);
	MakeWord	(0XDE62);
	MakeWord	(0XDE64);
	MakeWord	(0XDE66);
	MakeWord	(0XDE68);
	MakeWord	(0XDE6A);
	MakeWord	(0XDE6C);
	MakeWord	(0XDE6E);
	MakeWord	(0XDE70);
	MakeWord	(0XDE72);
	MakeWord	(0XDE74);
	MakeWord	(0XDE76);
	MakeWord	(0XDE78);
	MakeWord	(0XDE7A);
	MakeWord	(0XDE7C);
	MakeWord	(0XDE7E);
	MakeWord	(0XDE80);
	MakeWord	(0XDE82);
	MakeWord	(0XDE84);
	MakeWord	(0XDE86);
	MakeWord	(0XDE88);
	MakeWord	(0XDE8A);
	MakeWord	(0XDE8C);
	MakeWord	(0XDE8E);
	MakeWord	(0XDE90);
	MakeWord	(0XDE92);
	MakeWord	(0XDE94);
	MakeWord	(0XDE96);
	MakeWord	(0XDE98);
	MakeWord	(0XDE9A);
	MakeWord	(0XDE9C);
	MakeWord	(0XDE9E);
	MakeWord	(0XDEA0);
	MakeWord	(0XDEA2);
	MakeWord	(0XDEA4);
	MakeWord	(0XDEA6);
	MakeWord	(0XDEA8);
	MakeWord	(0XDEAA);
	MakeWord	(0XDEAC);
	MakeWord	(0XDEAE);
	MakeWord	(0XDEB0);
	MakeWord	(0XDEB2);
	MakeWord	(0XDEB4);
	MakeWord	(0XDEB6);
	MakeWord	(0XDEB8);
	MakeWord	(0XDEBA);
	MakeWord	(0XDEBC);
	MakeWord	(0XDEBE);
	MakeCode	(0XDEC0);
	MakeCode	(x=0XDEC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XDEE4);
	MakeCode	(x=0XDEEC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XDF08);
	MakeName	(0XDF08,	"CreateLandEffectWindow");
	MakeCode	(x=0XDF10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDF30);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XDF30,	"BuildLandEffectWindow");
	MakeCode	(x=0XDF34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDF48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDF4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDF50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDF5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDF60);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XDF64);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XDF74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeStr		(0XDF7E,	0XDF8C);
	MakeName	(0XDF7E,	"aLandEffect");
	MakeByte	(0XDF8C);
	MakeArray	(0XDF8C,	0X60);
	MakeName	(0XDF8C,	"wl_LandEffect");
	MakeCode	(x=0XDFEC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE002);
	MakeCode	(x=0XE004);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE008);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE01C);
	MakeCode	(x=0XE01E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE022);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE02C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE034);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE042);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE046);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE054);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE058);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE06E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE072);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE07C);
	MakeCode	(x=0XE086);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE08A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE098);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE09C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE0B4);
	MakeCode	(0XE0B8);
	MakeCode	(x=0XE0D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE0DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE0E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE156);
	MakeName	(0XE156,	"LoadPortrait");
	MakeCode	(x=0XE164);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE16C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE178);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE180);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE18A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE19E);
	OpHex		(x,	0);
	MakeCode	(x=0XE1B4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE1BA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE1C0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE1C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE1CC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE1D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE1DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE1EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE202);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XE20A);
	MakeName	(0XE20A,	"OpenPortraitWindow");
	MakeCode	(x=0XE216);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE21A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE22E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE234);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE23A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE240);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE246);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE250);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE254);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE266);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE27C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XE286);
	MakeName	(0XE286,	"ClosePortraitWindow");
	MakeCode	(x=0XE28A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE292);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE296);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE2A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE2C2);
	MakeCode	(0XE2D6);
	MakeCode	(x=0XE2DA);
	OpHex		(x,	0);
	MakeCode	(0XE2E8);
	MakeName	(0XE2E8,	"BuildSpeakerNameWindow");
	MakeCode	(x=0XE2EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE2F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE30A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE30E);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XE314);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XE322);
	MakeArray	(0XE322,	0XA0);
	MakeName	(0XE322,	"wl_Portrait1");
	MakeByte	(0XE3C2);
	MakeArray	(0XE3C2,	0XA0);
	MakeName	(0XE3C2,	"wl_Portrait2");
	MakeByte	(0XE462);
	MakeArray	(0XE462,	0X3C);
	MakeName	(0XE462,	"wl_SpeakerName");
	MakeCode	(x=0XE49E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE4A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE4AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE4AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE4C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE4DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE4DE);
	OpHex		(x,	0);
	MakeCode	(x=0XE4FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE4FE);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XE508);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE514);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XE51C);
	MakeArray	(0XE51C,	0X4);
	MakeCode	(x=0XE520);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE526);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE52A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE52E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE53A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE546);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE54A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XE554);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XE562);
	MakeArray	(0XE562,	0X4);
	MakeCode	(0XE566);
	MakeCode	(x=0XE568);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE56C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE572);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE580);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE58C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XE596);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE59C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XE5A0);
	MakeArray	(0XE5A0,	0X4);
	MakeCode	(x=0XE5A4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE5AE);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XE5B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE5C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE5C8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XE5CC);
	MakeArray	(0XE5CC,	0X4);
	MakeCode	(x=0XE5D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE5D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE5E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE5EE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE5FC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE600);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE608);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XE614);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XE620);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0XE63A);
	MakeCode	(x=0XE640);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE648);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XE64C,	"shop inventory");
	MakeCode	(x=0XE64C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XE656,	"save selected item index");
	MakeCode	(x=0XE660);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XE676,	"restore selected item index -> D0");
	MakeCode	(x=0XE67A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE692);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE6BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE6E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE6F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE71A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XE72E,	"shop inventory");
	MakeCode	(x=0XE72E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE732);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE742);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE750);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XE758);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE75E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE782);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE788);
	OpHex		(x,	0);
	MakeCode	(0XE7A2);
	MakeCode	(x=0XE7AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE7C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE7E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE7F2);
	MakeCode	(0XE802);
	MakeCode	(x=0XE83C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE848);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE850);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE85A);
	MakeCode	(x=0XE862);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE866);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE87C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE880);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE896);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE89A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE8B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE8C6);
	MakeCode	(x=0XE8CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE8CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE8E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE8EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE900);
	MakeCode	(x=0XE908);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE90C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE922);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE926);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE93C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE940);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE956);
	MakeCode	(x=0XE95A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE95E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE978);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE97C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE992);
	MakeCode	(x=0XE99A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE99E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE9B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE9BC);
	MakeCode	(x=0XE9C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE9C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XE9DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XE9EA);
	MakeCode	(0XE9F0);
	MakeCode	(x=0XE9F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEA08);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEA0C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEA2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEA32);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XEA42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEA4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEA54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XEA66);
	MakeName	(0XEA66,	"CreateMembersListScreen");
	MakeCode	(0XEA72);
	MakeCode	(x=0XEA98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XEAA2);
	MakeName	(0XEAA2,	"PickItemSlot");
	MakeCode	(x=0XEAA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEAC4);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XEAD6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XEADC);
	MakeArray	(0XEADC,	0X4);
	MakeCode	(0XEAE0);
	MakeCode	(x=0XEAE4);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XEAF6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XEAFC);
	MakeArray	(0XEAFC,	0X4);
	MakeCode	(0XEB00);
	MakeCode	(x=0XEB04);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XEB0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XEB12);
	MakeArray	(0XEB12,	0X4);
	MakeCode	(0XEB16);
	MakeCode	(x=0XEB1A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XEB2C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XEB32);
	MakeArray	(0XEB32,	0X4);
	MakeCode	(0XEB36);
	MakeCode	(x=0XEB3A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XEB44);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XEB4E);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XEB5C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0XEB6A);
	MakeCode	(0XEB94);
	MakeCode	(x=0XEB9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEBB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEBB8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0XEBC0);
	MakeWord	(0XEBC2);
	MakeWord	(0XEBC4);
	MakeWord	(0XEBC6);
	MakeWord	(0XEBC8);
	MakeWord	(0XEBCA);
	MakeWord	(0XEBCC);
	MakeWord	(0XEBCE);
	MakeWord	(0XEBD0);
	MakeWord	(0XEBD2);
	MakeWord	(0XEBD4);
	MakeWord	(0XEBD6);
	MakeWord	(0XEBD8);
	MakeWord	(0XEBDA);
	MakeWord	(0XEBDC);
	MakeWord	(0XEBDE);
	MakeCode	(0XEBE0);
	MakeCode	(x=0XEBE4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEBE8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEC04);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEC0C);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0XEC18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEC1C);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XEC22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XEC28);
	MakeCode	(x=0XEC2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEC32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEC36);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEC3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEC3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEC42);
	OpHex		(x,	0);
	MakeCode	(x=0XEC5E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEC84);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEC90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XECA6);
	MakeCode	(x=0XECAC);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XECB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XECC6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XECCC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XECD0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XECDA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XECDE);
	MakeArray	(0XECDE,	0X4);
	MakeCode	(0XECE2);
	MakeCode	(x=0XECE6);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XECF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XECF6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XED04);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XED0E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XED12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XED1A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0XED1E);
	MakeArray	(0XED1E,	0X4);
	MakeCode	(0XED22);
	MakeCode	(x=0XED26);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XED32);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XED3E);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0XED58);
	MakeCode	(0XED5C);
	MakeCode	(x=0XED64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XED7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XED94);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEDA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEDAE);
	OpHex		(x,	0);
	MakeCode	(0XEDCC);
	MakeCode	(x=0XEDCE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEDD4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XEDE4);
	MakeCode	(x=0XEDE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEDEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEE16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEE42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEE48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0XEE72);
	MakeWord	(0XEE74);
	MakeWord	(0XEE76);
	MakeWord	(0XEE78);
	MakeWord	(0XEE7A);
	MakeWord	(0XEE7C);
	MakeWord	(0XEE7E);
	MakeWord	(0XEE80);
	MakeWord	(0XEE82);
	MakeWord	(0XEE84);
	MakeWord	(0XEE86);
	MakeWord	(0XEE88);
	MakeWord	(0XEE8A);
	MakeWord	(0XEE8C);
	MakeWord	(0XEE8E);
	MakeWord	(0XEE90);
	MakeWord	(0XEE92);
	MakeWord	(0XEE94);
	MakeWord	(0XEE96);
	MakeWord	(0XEE98);
	MakeCode	(x=0XEE9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEE9E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XEEAC);
	MakeCode	(x=0XEECA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEECE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XEEEC);
	MakeCode	(x=0XEEF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEEFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEEFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEF14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEF18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XEF2C);
	MakeCode	(x=0XEF30);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEF34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEF4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEF4E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEF60);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEF7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEF98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XEF98,	"CreateMembersListWindow");
	MakeCode	(x=0XEF9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEFB4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEFCE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEFE4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEFE8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XEFEC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF000);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF016);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XF038);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeRptCmt	(0XF046,	"'L'");
	MakeDword	(0XF06A);
	MakeDword	(0XF06E);
	MakeDword	(0XF072);
	MakeDword	(0XF076);
	MakeDword	(0XF07A);
	MakeDword	(0XF07E);
	MakeDword	(0XF082);
	MakeDword	(0XF086);
	MakeDword	(0XF08A);
	MakeDword	(0XF08E);
	MakeDword	(0XF092);
	MakeDword	(0XF096);
	MakeDword	(0XF09A);
	MakeDword	(0XF09E);
	MakeDword	(0XF0A2);
	MakeDword	(0XF0A6);
	MakeDword	(0XF0AA);
	MakeDword	(0XF0AE);
	MakeDword	(0XF0B2);
	MakeDword	(0XF0B6);
	MakeDword	(0XF0BA);
	MakeDword	(0XF0BE);
	MakeDword	(0XF0C2);
	MakeDword	(0XF0C6);
	MakeDword	(0XF0CA);
	MakeDword	(0XF0CE);
	MakeDword	(0XF0D2);
	MakeDword	(0XF0D6);
	MakeDword	(0XF0DA);
	MakeDword	(0XF0DE);
	MakeDword	(0XF0E2);
	MakeDword	(0XF0E6);
	MakeDword	(0XF0EA);
	MakeDword	(0XF0EE);
	MakeDword	(0XF0F2);
	MakeDword	(0XF0F6);
	MakeDword	(0XF0FA);
	MakeDword	(0XF0FE);
	MakeDword	(0XF102);
	MakeDword	(0XF106);
	MakeDword	(0XF10A);
	MakeDword	(0XF10E);
	MakeDword	(0XF112);
	MakeDword	(0XF116);
	MakeDword	(0XF11A);
	MakeDword	(0XF11E);
	MakeDword	(0XF122);
	MakeDword	(0XF126);
	MakeDword	(0XF12A);
	MakeDword	(0XF12E);
	MakeDword	(0XF132);
	MakeDword	(0XF136);
	MakeDword	(0XF13A);
	MakeDword	(0XF13E);
	MakeDword	(0XF142);
	MakeDword	(0XF146);
	MakeDword	(0XF14A);
	MakeDword	(0XF14E);
	MakeDword	(0XF152);
	MakeDword	(0XF156);
	MakeDword	(0XF15A);
	MakeDword	(0XF15E);
	MakeDword	(0XF162);
	MakeDword	(0XF166);
	MakeDword	(0XF16A);
	MakeDword	(0XF16E);
	MakeDword	(0XF172);
	MakeDword	(0XF176);
	MakeDword	(0XF17A);
	MakeDword	(0XF17E);
	MakeDword	(0XF182);
	MakeDword	(0XF186);
	MakeDword	(0XF18A);
	MakeDword	(0XF18E);
	MakeDword	(0XF192);
	MakeDword	(0XF196);
	MakeDword	(0XF19A);
	MakeDword	(0XF19E);
	MakeDword	(0XF1A2);
	MakeDword	(0XF1A6);
	MakeDword	(0XF1AA);
	MakeDword	(0XF1AE);
	MakeDword	(0XF1B2);
	MakeDword	(0XF1B6);
	MakeDword	(0XF1BA);
	MakeDword	(0XF1BE);
	MakeDword	(0XF1C2);
	MakeDword	(0XF1C6);
	MakeWord	(0XF1CA);
	MakeName	(0XF1CA,	"wl_ShopInventory");
	MakeWord	(0XF1CC);
	MakeWord	(0XF1CE);
	MakeWord	(0XF1D0);
	MakeWord	(0XF1D2);
	MakeWord	(0XF1D4);
	MakeWord	(0XF1D6);
	MakeWord	(0XF1D8);
	MakeWord	(0XF1DA);
	MakeWord	(0XF1DC);
	MakeWord	(0XF1DE);
	MakeWord	(0XF1E0);
	MakeWord	(0XF1E2);
	MakeWord	(0XF1E4);
	MakeWord	(0XF1E6);
	MakeWord	(0XF1E8);
	MakeWord	(0XF1EA);
	MakeWord	(0XF1EC);
	MakeWord	(0XF1EE);
	MakeWord	(0XF1F0);
	MakeWord	(0XF1F2);
	MakeWord	(0XF1F4);
	MakeWord	(0XF1F6);
	MakeWord	(0XF1F8);
	MakeWord	(0XF1FA);
	MakeWord	(0XF1FC);
	MakeWord	(0XF1FE);
	MakeWord	(0XF200);
	MakeWord	(0XF202);
	MakeWord	(0XF204);
	MakeWord	(0XF206);
	MakeWord	(0XF208);
	MakeWord	(0XF20A);
	MakeWord	(0XF20C);
	MakeWord	(0XF20E);
	MakeWord	(0XF210);
	MakeWord	(0XF212);
	MakeWord	(0XF214);
	MakeWord	(0XF216);
	MakeWord	(0XF218);
	MakeWord	(0XF21A);
	MakeWord	(0XF21C);
	MakeWord	(0XF21E);
	MakeWord	(0XF220);
	MakeWord	(0XF222);
	MakeWord	(0XF224);
	MakeWord	(0XF226);
	MakeWord	(0XF228);
	MakeWord	(0XF22A);
	MakeWord	(0XF22C);
	MakeWord	(0XF22E);
	MakeWord	(0XF230);
	MakeWord	(0XF232);
	MakeWord	(0XF234);
	MakeWord	(0XF236);
	MakeWord	(0XF238);
	MakeWord	(0XF23A);
	MakeWord	(0XF23C);
	MakeWord	(0XF23E);
	MakeWord	(0XF240);
	MakeWord	(0XF242);
	MakeWord	(0XF244);
	MakeWord	(0XF246);
	MakeWord	(0XF248);
	MakeWord	(0XF24A);
	MakeWord	(0XF24C);
	MakeWord	(0XF24E);
	MakeWord	(0XF250);
	MakeWord	(0XF252);
	MakeWord	(0XF254);
	MakeWord	(0XF256);
	MakeWord	(0XF258);
	MakeWord	(0XF25A);
	MakeWord	(0XF25C);
	MakeWord	(0XF25E);
	MakeWord	(0XF260);
	MakeWord	(0XF262);
	MakeWord	(0XF264);
	MakeWord	(0XF266);
	MakeWord	(0XF268);
	MakeWord	(0XF26A);
	MakeWord	(0XF26C);
	MakeWord	(0XF26E);
	MakeWord	(0XF270);
	MakeWord	(0XF272);
	MakeWord	(0XF274);
	MakeWord	(0XF276);
	MakeWord	(0XF278);
	MakeWord	(0XF27A);
	MakeWord	(0XF27C);
	MakeWord	(0XF27E);
	MakeWord	(0XF280);
	MakeWord	(0XF282);
	MakeWord	(0XF284);
	MakeWord	(0XF286);
	MakeWord	(0XF288);
	MakeWord	(0XF28A);
	MakeWord	(0XF28C);
	MakeWord	(0XF28E);
	MakeWord	(0XF290);
	MakeWord	(0XF292);
	MakeWord	(0XF294);
	MakeWord	(0XF296);
	MakeWord	(0XF298);
	MakeWord	(0XF29A);
	MakeWord	(0XF29C);
	MakeWord	(0XF29E);
	MakeWord	(0XF2A0);
	MakeWord	(0XF2A2);
	MakeWord	(0XF2A4);
	MakeWord	(0XF2A6);
	MakeWord	(0XF2A8);
	MakeWord	(0XF2AA);
	MakeWord	(0XF2AC);
	MakeWord	(0XF2AE);
	MakeWord	(0XF2B0);
	MakeWord	(0XF2B2);
	MakeWord	(0XF2B4);
	MakeWord	(0XF2B6);
	MakeWord	(0XF2B8);
	MakeWord	(0XF2BA);
	MakeWord	(0XF2BC);
	MakeWord	(0XF2BE);
	MakeWord	(0XF2C0);
	MakeWord	(0XF2C2);
	MakeWord	(0XF2C4);
	MakeWord	(0XF2C6);
	MakeWord	(0XF2C8);
	MakeWord	(0XF2CA);
	MakeWord	(0XF2CC);
	MakeWord	(0XF2CE);
	MakeWord	(0XF2D0);
	MakeWord	(0XF2D2);
	MakeWord	(0XF2D4);
	MakeWord	(0XF2D6);
	MakeWord	(x=0XF2D8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0XF2D8,	"wl_F2D8");
	MakeWord	(x=0XF2DA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2DC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2DE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2E0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2E2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2E4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2E6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2E8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2EA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2EC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2EE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2F0);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2F2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2F4);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2F6);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2F8);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2FA);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2FC);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF2FE);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF300);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF302);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF304);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF306);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF308);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF30A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF30C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF30E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeName	(0XF30E,	"wl_F30E");
	MakeWord	(x=0XF310);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF312);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF314);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF316);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF318);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF31A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF31C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF31E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF320);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF322);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF324);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF326);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF328);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF32A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF32C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF32E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF330);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF332);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF334);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF336);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF338);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF33A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF33C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF33E);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF340);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeWord	(x=0XF342);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeByte	(0XF344);
	MakeArray	(0XF344,	0X20);
	MakeName	(0XF344,	"ShopIconHighlightTiles");
	MakeByte	(0XF364);
	MakeArray	(0XF364,	0X64);
	MakeName	(0XF364,	"wl_ShopItemNameAndPrice");
	MakeByte	(0XF3C8);
	MakeArray	(0XF3C8,	0X48);
	MakeName	(0XF3C8,	"wl_F3C8");
	MakeByte	(0XF410);
	MakeArray	(0XF410,	0X2A);
	MakeName	(0XF410,	"wl_MembersList1");
	MakeByte	(0XF43A);
	MakeArray	(0XF43A,	0X2A);
	MakeName	(0XF43A,	"wl_MembersList2");
	MakeByte	(0XF464);
	MakeArray	(0XF464,	0X2A);
	MakeName	(0XF464,	"wl_MembersList3");
	MakeByte	(0XF48E);
	MakeArray	(0XF48E,	0X50);
	MakeName	(0XF48E,	"wl_ItemMenuItemName");
	MakeByte	(0XF4DE);
	MakeByte	(0XF4DF);
	MakeByte	(0XF4E0);
	MakeByte	(0XF4E1);
	MakeByte	(0XF4E2);
	MakeByte	(0XF4E3);
	MakeByte	(0XF4E4);
	MakeByte	(0XF4E5);
	MakeByte	(0XF4E6);
	MakeByte	(0XF4E7);
	MakeByte	(0XF4E8);
	MakeByte	(0XF4E9);
	MakeByte	(0XF4EA);
	MakeByte	(0XF4EB);
	MakeByte	(0XF4EC);
	MakeByte	(0XF4ED);
	MakeByte	(0XF4EE);
	MakeByte	(0XF4EF);
	MakeByte	(0XF4F0);
	MakeByte	(0XF4F1);
	MakeByte	(0XF4F2);
	MakeByte	(0XF4F3);
	MakeByte	(0XF4F4);
	MakeByte	(0XF4F5);
	MakeByte	(0XF4F6);
	MakeByte	(0XF4F7);
	MakeByte	(0XF4F8);
	MakeByte	(0XF4F9);
	MakeByte	(0XF4FA);
	MakeByte	(0XF4FB);
	MakeByte	(0XF4FC);
	MakeByte	(0XF4FD);
	MakeByte	(0XF4FE);
	MakeByte	(0XF4FF);
	MakeByte	(0XF500);
	MakeByte	(0XF501);
	MakeByte	(0XF502);
	MakeByte	(0XF503);
	MakeByte	(0XF504);
	MakeByte	(0XF505);
	MakeByte	(0XF506);
	MakeByte	(0XF507);
	MakeByte	(0XF508);
	MakeByte	(0XF509);
	MakeByte	(0XF50A);
	MakeByte	(0XF50B);
	MakeByte	(0XF50C);
	MakeByte	(0XF50D);
	MakeByte	(0XF50E);
	MakeByte	(0XF50F);
	MakeByte	(0XF510);
	MakeByte	(0XF511);
	MakeByte	(0XF512);
	MakeByte	(0XF513);
	MakeByte	(0XF514);
	MakeByte	(0XF515);
	MakeByte	(0XF516);
	MakeByte	(0XF517);
	MakeByte	(0XF518);
	MakeByte	(0XF519);
	MakeByte	(0XF51A);
	MakeByte	(0XF51B);
	MakeByte	(0XF51C);
	MakeByte	(0XF51D);
	MakeByte	(0XF51E);
	MakeByte	(0XF51F);
	MakeByte	(0XF520);
	MakeByte	(0XF521);
	MakeByte	(0XF522);
	MakeByte	(0XF523);
	MakeByte	(0XF524);
	MakeByte	(0XF525);
	MakeByte	(0XF526);
	MakeByte	(0XF527);
	MakeByte	(0XF528);
	MakeByte	(0XF529);
	MakeByte	(0XF52A);
	MakeByte	(0XF52B);
	MakeByte	(0XF52C);
	MakeByte	(0XF52D);
	MakeByte	(0XF52E);
	MakeByte	(0XF52F);
	MakeByte	(0XF530);
	MakeByte	(0XF531);
	MakeByte	(0XF532);
	MakeByte	(0XF533);
	MakeByte	(0XF534);
	MakeByte	(0XF535);
	MakeByte	(0XF536);
	MakeByte	(0XF537);
	MakeByte	(0XF538);
	MakeByte	(0XF539);
	MakeByte	(0XF53A);
	MakeByte	(0XF53B);
	MakeByte	(0XF53C);
	MakeByte	(0XF53D);
	MakeByte	(0XF53E);
	MakeByte	(0XF53F);
	MakeByte	(0XF540);
	MakeByte	(0XF541);
	MakeByte	(0XF542);
	MakeByte	(0XF543);
	MakeByte	(0XF544);
	MakeByte	(0XF545);
	MakeByte	(0XF546);
	MakeByte	(0XF547);
	MakeByte	(0XF548);
	MakeByte	(0XF549);
	MakeByte	(0XF54A);
	MakeByte	(0XF54B);
	MakeByte	(0XF54C);
	MakeByte	(0XF54D);
	MakeByte	(0XF54E);
	MakeByte	(0XF54F);
	MakeByte	(0XF550);
	MakeByte	(0XF551);
	MakeByte	(0XF552);
	MakeByte	(0XF553);
	MakeByte	(0XF554);
	MakeByte	(0XF555);
	MakeByte	(0XF556);
	MakeByte	(0XF557);
	MakeByte	(0XF558);
	MakeByte	(0XF559);
	MakeByte	(0XF55A);
	MakeByte	(0XF55B);
	MakeByte	(0XF55C);
	MakeByte	(0XF55D);
	MakeByte	(0XF55E);
	MakeByte	(0XF55F);
	MakeByte	(0XF560);
	MakeByte	(0XF561);
	MakeByte	(0XF562);
	MakeByte	(0XF563);
	MakeByte	(0XF564);
	MakeByte	(0XF565);
	MakeByte	(0XF566);
	MakeByte	(0XF567);
	MakeByte	(0XF568);
	MakeByte	(0XF569);
	MakeByte	(0XF56A);
	MakeByte	(0XF56B);
	MakeByte	(0XF56C);
	MakeByte	(0XF56D);
	MakeByte	(0XF56E);
	MakeByte	(0XF56F);
	MakeByte	(0XF570);
	MakeByte	(0XF571);
	MakeByte	(0XF572);
	MakeByte	(0XF573);
	MakeByte	(0XF574);
	MakeByte	(0XF575);
	MakeByte	(0XF576);
	MakeByte	(0XF577);
	MakeByte	(0XF578);
	MakeByte	(0XF579);
	MakeByte	(0XF57A);
	MakeByte	(0XF57B);
	MakeByte	(0XF57C);
	MakeByte	(0XF57D);
	MakeByte	(0XF57E);
	MakeByte	(0XF57F);
	MakeByte	(0XF580);
	MakeByte	(0XF581);
	MakeByte	(0XF582);
	MakeByte	(0XF583);
	MakeByte	(0XF584);
	MakeByte	(0XF585);
	MakeByte	(0XF586);
	MakeByte	(0XF587);
	MakeByte	(0XF588);
	MakeByte	(0XF589);
	MakeByte	(0XF58A);
	MakeByte	(0XF58B);
	MakeByte	(0XF58C);
	MakeByte	(0XF58D);
	MakeByte	(0XF58E);
	MakeByte	(0XF58F);
	MakeByte	(0XF590);
	MakeByte	(0XF591);
	MakeByte	(0XF592);
	MakeByte	(0XF593);
	MakeByte	(0XF594);
	MakeByte	(0XF595);
	MakeByte	(0XF596);
	MakeByte	(0XF597);
	MakeByte	(0XF598);
	MakeByte	(0XF599);
	MakeByte	(0XF59A);
	MakeByte	(0XF59B);
	MakeByte	(0XF59C);
	MakeByte	(0XF59D);
	MakeByte	(0XF59E);
	MakeByte	(0XF59F);
	MakeByte	(0XF5A0);
	MakeByte	(0XF5A1);
	MakeByte	(0XF5A2);
	MakeByte	(0XF5A3);
	MakeByte	(0XF5A4);
	MakeByte	(0XF5A5);
	MakeByte	(0XF5A6);
	MakeByte	(0XF5A7);
	MakeByte	(0XF5A8);
	MakeByte	(0XF5A9);
	MakeByte	(0XF5AA);
	MakeByte	(0XF5AB);
	MakeByte	(0XF5AC);
	MakeByte	(0XF5AD);
	MakeByte	(0XF5AE);
	MakeByte	(0XF5AF);
	MakeByte	(0XF5B0);
	MakeByte	(0XF5B1);
	MakeByte	(0XF5B2);
	MakeByte	(0XF5B3);
	MakeByte	(0XF5B4);
	MakeByte	(0XF5B5);
	MakeByte	(0XF5B6);
	MakeByte	(0XF5B7);
	MakeByte	(0XF5B8);
	MakeByte	(0XF5B9);
	MakeByte	(0XF5BA);
	MakeByte	(0XF5BB);
	MakeByte	(0XF5BC);
	MakeByte	(0XF5BD);
	MakeByte	(0XF5BE);
	MakeByte	(0XF5BF);
	MakeByte	(0XF5C0);
	MakeByte	(0XF5C1);
	MakeByte	(0XF5C2);
	MakeByte	(0XF5C3);
	MakeByte	(0XF5C4);
	MakeByte	(0XF5C5);
	MakeByte	(0XF5C6);
	MakeByte	(0XF5C7);
	MakeByte	(0XF5C8);
	MakeByte	(0XF5C9);
	MakeByte	(0XF5CA);
	MakeByte	(0XF5CB);
	MakeByte	(0XF5CC);
	MakeByte	(0XF5CD);
	MakeByte	(0XF5CE);
	MakeByte	(0XF5CF);
	MakeByte	(0XF5D0);
	MakeByte	(0XF5D1);
	MakeByte	(0XF5D2);
	MakeByte	(0XF5D3);
	MakeByte	(0XF5D4);
	MakeByte	(0XF5D5);
	MakeByte	(0XF5D6);
	MakeByte	(0XF5D7);
	MakeByte	(0XF5D8);
	MakeByte	(0XF5D9);
	MakeByte	(0XF5DA);
	MakeByte	(0XF5DB);
	MakeByte	(0XF5DC);
	MakeByte	(0XF5DD);
	MakeByte	(0XF5DE);
	MakeByte	(0XF5DF);
	MakeByte	(0XF5E0);
	MakeByte	(0XF5E1);
	MakeByte	(0XF5E2);
	MakeByte	(0XF5E3);
	MakeByte	(0XF5E4);
	MakeByte	(0XF5E5);
	MakeByte	(0XF5E6);
	MakeByte	(0XF5E7);
	MakeByte	(0XF5E8);
	MakeByte	(0XF5E9);
	MakeByte	(0XF5EA);
	MakeByte	(0XF5EB);
	MakeByte	(0XF5EC);
	MakeByte	(0XF5ED);
	MakeByte	(0XF5EE);
	MakeByte	(0XF5EF);
	MakeByte	(0XF5F0);
	MakeByte	(0XF5F1);
	MakeByte	(0XF5F2);
	MakeByte	(0XF5F3);
	MakeByte	(0XF5F4);
	MakeByte	(0XF5F5);
	MakeByte	(0XF5F6);
	MakeByte	(0XF5F7);
	MakeByte	(0XF5F8);
	MakeByte	(0XF5F9);
	MakeByte	(0XF5FA);
	MakeByte	(0XF5FB);
	MakeByte	(0XF5FC);
	MakeByte	(0XF5FD);
	MakeByte	(0XF5FE);
	MakeByte	(0XF5FF);
	MakeByte	(0XF600);
	MakeByte	(0XF601);
	MakeByte	(0XF602);
	MakeByte	(0XF603);
	MakeByte	(0XF604);
	MakeByte	(0XF605);
	MakeByte	(0XF606);
	MakeByte	(0XF607);
	MakeByte	(0XF608);
	MakeByte	(0XF609);
	MakeByte	(0XF60A);
	MakeByte	(0XF60B);
	MakeByte	(0XF60C);
	MakeByte	(0XF60D);
	MakeByte	(0XF60E);
	MakeByte	(0XF60F);
	MakeByte	(0XF610);
	MakeByte	(0XF611);
	MakeByte	(0XF612);
	MakeByte	(0XF613);
	MakeByte	(0XF614);
	MakeByte	(0XF615);
	MakeByte	(0XF616);
	MakeByte	(0XF617);
	MakeByte	(0XF618);
	MakeByte	(0XF619);
	MakeByte	(0XF61A);
	MakeByte	(0XF61B);
	MakeByte	(0XF61C);
	MakeByte	(0XF61D);
	MakeCode	(x=0XF61E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF624);
	OpHex		(x,	1);
	MakeCode	(x=0XF63A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF640);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF6A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF6A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF6C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF6DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF700);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XF730);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(x=0XF742);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF750);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0XF764);
	MakeCode	(x=0XF76A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XF77E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF7A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF7CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF7D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF7DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF7E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF800);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF808);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF810);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XF81E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFA26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XFA32);
	MakeCode	(0XFA46);
	MakeCode	(x=0XFA6C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFA72);
	OpHex		(x,	0);
	MakeCode	(x=0XFAAE);
	OpHex		(x,	0);
	MakeCode	(x=0XFAC6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFACE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFAE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFAEE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFB1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFB38);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFB40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFB4E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFB56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XFB68);
	MakeCode	(x=0XFB6C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFBA0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XFBD6);
	MakeCode	(x=0XFBD8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFBE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFBF4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XFBFA);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0XFC00);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0XFC10);
	MakeCode	(x=0XFC12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFC18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFC3A);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0XFC42);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(x=0XFC50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFC5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFC64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFC72);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFC8C);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	MakeCode	(0XFC94);
	MakeCode	(x=0XFC96);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFC9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFCA2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XFCB0);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XFCBE);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XFCCC);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XFCDC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XFCE4);
	MakeArray	(0XFCE4,	0X4);
	MakeCode	(x=0XFCE8);
	OpDecimal	(x,	0);
	MakeCode	(x=0XFCF6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFCFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFD06);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0XFD0A);
	OpDecimal	(x,	0);
	MakeCode	(x=0XFD10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XFD24);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeArray	(0XFD58,	0X2A8);
	MakeCode	(0X10000);
	MakeCode	(0X10004);
	MakeName	(0X10004,	"j_ExecuteShopMenu");
	MakeCode	(0X10008);
	MakeCode	(0X1000C);
	MakeCode	(0X10010);
	MakeCode	(0X10014);
	MakeCode	(0X10018);
	MakeName	(0X10018,	"j_ExecuteChurchMenu");
	MakeDword	(x=0X1001C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1001C,	"p_SpriteTextSounds");
	MakeCode	(0X10020);
	MakeName	(0X10020,	"j_MainMenuAction_Search");
	MakeCode	(0X10024);
	MakeCode	(0X10028);
	MakeDword	(x=0X1002C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1002C,	"p_pt_BattleExits");
	MakeDword	(x=0X10030);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X10030,	"p_BattleChests");
	MakeDword	(x=0X10034);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X10038);
	MakeName	(0X10038,	"j_PlayEnding");
	MakeCode	(0X1003E);
	MakeName	(0X10040,	"j_InitDecoder");
	MakeCode	(0X10046);
	MakeName	(0X10048,	"j_HuffmanDecode");
	MakeCode	(0X1004E);
	MakeCode	(0X1005C);
	MakeCode	(0X100C2);
	MakeCode	(0X100EC);
	MakeCode	(0X100F2);
	MakeCode	(0X100F8);
	MakeByte	(0X10104);
	MakeArray	(0X10104,	0X4);
	MakeCode	(0X10108);
	MakeCode	(0X1010E);
	MakeCode	(x=0X1011C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1012C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10160);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1017C);
	MakeDword	(x=0X10180);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10184);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10188);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1018C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10190);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X10194);
	MakeByte	(0X10195);
	MakeByte	(0X10196);
	MakeByte	(0X10197);
	MakeByte	(0X10198);
	MakeByte	(0X10199);
	MakeByte	(0X1019A);
	MakeByte	(0X1019B);
	MakeByte	(0X1019C);
	MakeByte	(0X1019D);
	MakeByte	(0X1019E);
	MakeByte	(0X1019F);
	MakeByte	(0X101A0);
	MakeByte	(0X101A1);
	MakeByte	(0X101A2);
	MakeByte	(0X101A3);
	MakeByte	(0X101A4);
	MakeByte	(0X101A5);
	MakeByte	(0X101A6);
	MakeByte	(0X101A7);
	MakeByte	(0X101A8);
	MakeByte	(0X101A9);
	MakeByte	(0X101AA);
	MakeByte	(0X101AB);
	MakeByte	(0X101AC);
	MakeByte	(0X101AD);
	MakeByte	(0X101AE);
	MakeByte	(0X101AF);
	MakeByte	(0X101B0);
	MakeByte	(0X101B1);
	MakeByte	(0X101B2);
	MakeByte	(0X101B3);
	MakeByte	(0X101B4);
	MakeByte	(0X101B5);
	MakeByte	(0X101B6);
	MakeByte	(0X101B7);
	MakeByte	(0X101B8);
	MakeByte	(0X101B9);
	MakeByte	(0X101BA);
	MakeByte	(0X101BB);
	MakeByte	(0X101BC);
	MakeByte	(0X101BD);
	MakeByte	(0X101BE);
	MakeByte	(0X101BF);
	MakeByte	(0X101C0);
	MakeByte	(0X101C1);
	MakeByte	(0X101C2);
	MakeByte	(0X101C3);
	MakeByte	(0X101C4);
	MakeByte	(0X101C5);
	MakeByte	(0X101C6);
	MakeByte	(0X101C7);
	MakeByte	(0X101C8);
	MakeByte	(0X101C9);
	MakeByte	(0X101CA);
	MakeByte	(0X101CB);
	MakeByte	(0X101CC);
	MakeByte	(0X101CD);
	MakeByte	(0X101CE);
	MakeByte	(0X101CF);
	MakeByte	(0X101D0);
	MakeByte	(0X101D1);
	MakeByte	(0X101D2);
	MakeByte	(0X101D3);
	MakeByte	(0X101D4);
	MakeByte	(0X101D5);
	MakeByte	(0X101D6);
	MakeByte	(0X101D7);
	MakeByte	(0X101D8);
	MakeByte	(0X101D9);
	MakeByte	(0X101DA);
	MakeByte	(0X101DB);
	MakeByte	(0X101DC);
	MakeByte	(0X101DD);
	MakeByte	(0X101DE);
	MakeByte	(0X101DF);
	MakeByte	(0X101E0);
	MakeByte	(0X101E1);
	MakeByte	(0X101E2);
	MakeByte	(0X101E3);
	MakeByte	(0X101E4);
	MakeByte	(0X101E5);
	MakeByte	(0X101E6);
	MakeByte	(0X101E7);
	MakeByte	(0X101E8);
	MakeByte	(0X101E9);
	MakeByte	(0X101EA);
	MakeByte	(0X101EB);
	MakeByte	(0X101EC);
	MakeByte	(0X101ED);
	MakeByte	(0X101EE);
	MakeByte	(0X101EF);
	MakeByte	(0X101F0);
	MakeByte	(0X101F1);
	MakeByte	(0X101F2);
	MakeByte	(0X101F3);
	MakeByte	(0X101F4);
	MakeByte	(0X101F5);
	MakeByte	(0X101F6);
	MakeByte	(0X101F7);
	MakeByte	(0X101F8);
	MakeByte	(0X101F9);
	MakeByte	(0X101FA);
	MakeByte	(0X101FB);
	MakeByte	(0X101FC);
	MakeByte	(0X101FD);
	MakeByte	(0X101FE);
	MakeByte	(0X101FF);
	MakeByte	(0X10200);
	MakeByte	(0X10201);
	MakeByte	(0X10202);
	MakeByte	(0X10203);
	MakeByte	(0X10204);
	MakeByte	(0X10205);
	MakeByte	(0X10206);
	MakeByte	(0X10207);
	MakeByte	(0X10208);
	MakeByte	(0X10209);
	MakeByte	(0X1020A);
	MakeByte	(0X1020B);
	MakeByte	(0X1020C);
	MakeByte	(0X1020D);
	MakeByte	(0X1020E);
	MakeByte	(0X1020F);
	MakeByte	(0X10210);
	MakeByte	(0X10211);
	MakeByte	(0X10212);
	MakeByte	(0X10213);
	MakeByte	(0X10214);
	MakeByte	(0X10215);
	MakeByte	(0X10216);
	MakeByte	(0X10217);
	MakeByte	(0X10218);
	MakeByte	(0X10219);
	MakeByte	(0X1021A);
	MakeByte	(0X1021B);
	MakeByte	(0X1021C);
	MakeByte	(0X1021D);
	MakeByte	(0X1021E);
	MakeByte	(0X1021F);
	MakeByte	(0X10220);
	MakeByte	(0X10221);
	MakeByte	(0X10222);
	MakeByte	(0X10223);
	MakeByte	(0X10224);
	MakeByte	(0X10225);
	MakeByte	(0X10226);
	MakeByte	(0X10227);
	MakeByte	(0X10228);
	MakeByte	(0X10229);
	MakeByte	(0X1022A);
	MakeByte	(0X1022B);
	MakeByte	(0X1022C);
	MakeByte	(0X1022D);
	MakeByte	(0X1022E);
	MakeByte	(0X1022F);
	MakeByte	(0X10230);
	MakeByte	(0X10231);
	MakeByte	(0X10232);
	MakeByte	(0X10233);
	MakeByte	(0X10234);
	MakeByte	(0X10235);
	MakeByte	(0X10236);
	MakeByte	(0X10237);
	MakeByte	(0X10238);
	MakeByte	(0X10239);
	MakeByte	(0X1023A);
	MakeByte	(0X1023B);
	MakeByte	(0X1023C);
	MakeByte	(0X1023D);
	MakeByte	(0X1023E);
	MakeByte	(0X1023F);
	MakeByte	(0X10240);
	MakeByte	(0X10241);
	MakeByte	(0X10242);
	MakeByte	(0X10243);
	MakeByte	(0X10244);
	MakeByte	(0X10245);
	MakeByte	(0X10246);
	MakeByte	(0X10247);
	MakeByte	(0X10248);
	MakeByte	(0X10249);
	MakeByte	(0X1024A);
	MakeByte	(0X1024B);
	MakeByte	(0X1024C);
	MakeByte	(0X1024D);
	MakeByte	(0X1024E);
	MakeByte	(0X1024F);
	MakeByte	(0X10250);
	MakeByte	(0X10251);
	MakeByte	(0X10252);
	MakeByte	(0X10253);
	MakeByte	(0X10254);
	MakeByte	(0X10255);
	MakeByte	(0X10256);
	MakeByte	(0X10257);
	MakeByte	(0X10258);
	MakeByte	(0X10259);
	MakeByte	(0X1025A);
	MakeByte	(0X1025B);
	MakeByte	(0X1025C);
	MakeByte	(0X1025D);
	MakeByte	(0X1025E);
	MakeByte	(0X1025F);
	MakeByte	(0X10260);
	MakeByte	(0X10261);
	MakeByte	(0X10262);
	MakeByte	(0X10263);
	MakeByte	(0X10264);
	MakeByte	(0X10265);
	MakeByte	(0X10266);
	MakeByte	(0X10267);
	MakeByte	(0X10268);
	MakeByte	(0X10269);
	MakeByte	(0X1026A);
	MakeByte	(0X1026B);
	MakeByte	(0X1026C);
	MakeByte	(0X1026D);
	MakeByte	(0X1026E);
	MakeByte	(0X1026F);
	MakeByte	(0X10270);
	MakeByte	(0X10271);
	MakeByte	(0X10272);
	MakeByte	(0X10273);
	MakeByte	(0X10274);
	MakeByte	(0X10275);
	MakeByte	(0X10276);
	MakeByte	(0X10277);
	MakeByte	(0X10278);
	MakeByte	(0X10279);
	MakeByte	(0X1027A);
	MakeByte	(0X1027B);
	MakeByte	(0X1027C);
	MakeByte	(0X1027D);
	MakeByte	(0X1027E);
	MakeByte	(0X1027F);
	MakeByte	(0X10280);
	MakeByte	(0X10281);
	MakeByte	(0X10282);
	MakeByte	(0X10283);
	MakeByte	(0X10284);
	MakeByte	(0X10285);
	MakeByte	(0X10286);
	MakeByte	(0X10287);
	MakeByte	(0X10288);
	MakeByte	(0X10289);
	MakeByte	(0X1028A);
	MakeByte	(0X1028B);
	MakeByte	(0X1028C);
	MakeByte	(0X1028D);
	MakeByte	(0X1028E);
	MakeByte	(0X1028F);
	MakeByte	(0X10290);
	MakeByte	(0X10291);
	MakeByte	(0X10292);
	MakeByte	(0X10293);
	MakeByte	(0X10294);
	MakeByte	(0X10295);
	MakeByte	(0X10296);
	MakeByte	(0X10297);
	MakeByte	(0X10298);
	MakeByte	(0X10299);
	MakeByte	(0X1029A);
	MakeByte	(0X1029B);
	MakeByte	(0X1029C);
	MakeByte	(0X1029D);
	MakeByte	(0X1029E);
	MakeByte	(0X1029F);
	MakeByte	(0X102A0);
	MakeByte	(0X102A1);
	MakeByte	(0X102A2);
	MakeByte	(0X102A3);
	MakeByte	(0X102A4);
	MakeByte	(0X102A5);
	MakeByte	(0X102A6);
	MakeByte	(0X102A7);
	MakeByte	(0X102A8);
	MakeByte	(0X102A9);
	MakeByte	(0X102AA);
	MakeByte	(0X102AB);
	MakeByte	(0X102AC);
	MakeByte	(0X102AD);
	MakeByte	(0X102AE);
	MakeByte	(0X102AF);
	MakeByte	(0X102B0);
	MakeByte	(0X102B1);
	MakeByte	(0X102B2);
	MakeByte	(0X102B3);
	MakeByte	(0X102B4);
	MakeByte	(0X102B5);
	MakeByte	(0X102B6);
	MakeByte	(0X102B7);
	MakeByte	(0X102B8);
	MakeByte	(0X102B9);
	MakeByte	(0X102BA);
	MakeByte	(0X102BB);
	MakeByte	(0X102BC);
	MakeByte	(0X102BD);
	MakeByte	(0X102BE);
	MakeByte	(0X102BF);
	MakeByte	(0X102C0);
	MakeByte	(0X102C1);
	MakeByte	(0X102C2);
	MakeByte	(0X102C3);
	MakeByte	(0X102C4);
	MakeByte	(0X102C5);
	MakeByte	(0X102C6);
	MakeByte	(0X102C7);
	MakeByte	(0X102C8);
	MakeByte	(0X102C9);
	MakeByte	(0X102CA);
	MakeByte	(0X102CB);
	MakeByte	(0X102CC);
	MakeByte	(0X102CD);
	MakeByte	(0X102CE);
	MakeByte	(0X102CF);
	MakeByte	(0X102D0);
	MakeByte	(0X102D1);
	MakeByte	(0X102D2);
	MakeByte	(0X102D3);
	MakeByte	(0X102D4);
	MakeByte	(0X102D5);
	MakeCode	(0X102D6);
	MakeCode	(0X10310);
	MakeCode	(x=0X1031C);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(x=0X10346);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(x=0X1035A);
	OpHex		(x,	0);
	MakeCode	(0X1038C);
	MakeCode	(x=0X1039C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X103A6);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(0X103C8);
	MakeCode	(x=0X103E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X103F0);
	MakeCode	(0X103F4);
	MakeCode	(0X103F8);
	MakeCode	(0X103FC);
	MakeCode	(0X10400);
	MakeCode	(0X10404);
	MakeCode	(0X10408);
	MakeCode	(0X1040C);
	MakeCode	(0X10410);
	MakeCode	(0X10414);
	MakeCode	(0X10418);
	MakeCode	(0X1041C);
	MakeCode	(0X10420);
	MakeCode	(0X10424);
	MakeCode	(0X10428);
	MakeCode	(0X1042C);
	MakeCode	(0X10442);
	MakeCode	(0X10458);
	MakeCode	(0X1046C);
	MakeCode	(0X10482);
	MakeCode	(0X10498);
	MakeCode	(0X104AC);
	MakeCode	(0X104C2);
	MakeCode	(0X104D8);
	MakeCode	(0X104EC);
	MakeCode	(0X10502);
	MakeCode	(0X10518);
	MakeCode	(0X1052C);
	MakeCode	(0X10574);
	MakeCode	(0X105BA);
	MakeCode	(0X10606);
	MakeCode	(0X106D6);
	MakeCode	(0X106E4);
	MakeCode	(x=0X106EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X106F6);
	MakeCode	(0X1071E);
	MakeCode	(0X10756);
	MakeCode	(0X1077E);
	MakeCode	(x=0X10786);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1078E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X107A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X107B8);
	MakeCode	(0X107C0);
	MakeCode	(0X107C6);
	MakeCode	(x=0X107EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X107F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X10824);
	MakeCode	(0X1082C);
	MakeByte	(0X1083A);
	MakeByte	(0X1083B);
	MakeByte	(0X1083C);
	MakeByte	(0X1083D);
	MakeByte	(0X1083E);
	MakeByte	(0X1083F);
	MakeByte	(0X10840);
	MakeByte	(0X10841);
	MakeCode	(0X10842);
	MakeCode	(0X108A2);
	MakeCode	(0X108BC);
	MakeCode	(0X10936);
	MakeCode	(0X10966);
	MakeCode	(0X1096C);
	MakeCode	(0X1098E);
	MakeCode	(0X109B6);
	MakeCode	(0X109CA);
	MakeCode	(0X10A00);
	MakeCode	(0X10A14);
	MakeCode	(0X10A28);
	MakeCode	(0X10A3C);
	MakeCode	(0X10A58);
	MakeCode	(0X10A6C);
	MakeCode	(0X10A6E);
	MakeCode	(0X10AA0);
	MakeCode	(x=0X10ADC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X10AEE);
	MakeCode	(0X10AFC);
	MakeCode	(0X10B26);
	MakeCode	(0X10B46);
	MakeCode	(x=0X10B5A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X10B62);
	MakeCode	(0X10B66);
	MakeCode	(0X10B6A);
	MakeCode	(0X10B6E);
	MakeCode	(0X10B72);
	MakeCode	(0X10B76);
	MakeCode	(0X10B7A);
	MakeCode	(0X10B7E);
	MakeCode	(0X10B82);
	MakeCode	(0X10B86);
	MakeCode	(0X10B8A);
	MakeCode	(0X10B8E);
	MakeCode	(0X10B92);
	MakeCode	(0X10B96);
	MakeCode	(0X10B9A);
	MakeCode	(0X10B9E);
	MakeCode	(0X10BA4);
	MakeCode	(0X10BBC);
	MakeCode	(0X10C00);
	MakeCode	(0X10C22);
	MakeCode	(0X10C46);
	MakeCode	(0X10C56);
	MakeCode	(0X10C60);
	MakeCode	(x=0X10C74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10C7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10C84);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10C8C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10C94);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10C9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X10CA4);
	MakeCode	(0X10CBE);
	MakeCode	(0X10CCE);
	MakeCode	(0X10CE6);
	MakeByte	(0X10CF6);
	MakeByte	(0X10CF7);
	MakeByte	(0X10CF8);
	MakeByte	(0X10CF9);
	MakeByte	(0X10CFA);
	MakeByte	(0X10CFB);
	MakeByte	(0X10CFC);
	MakeByte	(0X10CFD);
	MakeCode	(0X10CFE);
	MakeCode	(x=0X10D18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10D1C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X10D26);
	MakeCode	(0X10D2C);
	MakeCode	(0X10D44);
	MakeCode	(0X10D8A);
	MakeCode	(x=0X10D92);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10DA0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10DAE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10DBC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10DCA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10DD8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10DE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10DF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10DFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10E0A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10E16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X10E22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X10E38);
	MakeCode	(0X10E60);
	MakeCode	(0X10E88);
	MakeCode	(0X10E9A);
	MakeCode	(0X10EA8);
	MakeCode	(0X10ED0);
	MakeCode	(0X10EE2);
	MakeCode	(0X10F14);
	MakeCode	(0X10F28);
	MakeCode	(0X10F2E);
	MakeCode	(0X10F40);
	MakeCode	(0X10F46);
	MakeCode	(0X10F64);
	MakeCode	(0X10F70);
	MakeCode	(0X10F7A);
	MakeCode	(x=0X10F84);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X10FA0);
	MakeCode	(0X10FB0);
	MakeCode	(0X10FEE);
	MakeCode	(0X10FFA);
	MakeCode	(x=0X1103C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1106C);
	MakeCode	(x=0X1107A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11092);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11098);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X110F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X1111E);
	MakeWord	(0X11120);
	MakeWord	(0X11122);
	MakeWord	(0X11124);
	MakeCode	(0X11126);
	MakeCode	(x=0X1112C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11132);
	OpHex		(x,	1);
	MakeCode	(x=0X11148);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1115E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11162);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11196);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1119A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1119E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X111C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X111C8,	"\"No one is in that direction.[Wait2]\"");
	MakeCode	(x=0X111CC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X111DC);
	MakeByte	(0X111DD);
	MakeByte	(0X111DE);
	MakeByte	(0X111DF);
	MakeByte	(0X111E0);
	MakeByte	(0X111E1);
	MakeByte	(0X111E2);
	MakeByte	(0X111E3);
	MakeCode	(0X111E4);
	MakeCode	(x=0X1120A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1125A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X112A4);
	MakeCode	(0X112BA);
	MakeByte	(0X112D0);
	MakeArray	(0X112D0,	0X4);
	MakeCode	(0X112D4);
	MakeByte	(0X112E0);
	MakeArray	(0X112E0,	0X4);
	MakeCode	(0X112E4);
	MakeCode	(0X11308);
	MakeCode	(x=0X11318);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1132A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1132E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X113B8);
	MakeCode	(x=0X113CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X113D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X113DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X113DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X113EE);
	MakeByte	(0X113F4);
	MakeByte	(0X113F5);
	MakeByte	(0X113F6);
	MakeByte	(0X113F7);
	MakeByte	(0X113F8);
	MakeByte	(0X113F9);
	MakeByte	(0X113FA);
	MakeByte	(0X113FB);
	MakeByte	(0X113FC);
	MakeByte	(0X113FD);
	MakeByte	(0X113FE);
	MakeByte	(0X113FF);
	MakeByte	(0X11400);
	MakeByte	(0X11401);
	MakeByte	(0X11402);
	MakeByte	(0X11403);
	MakeByte	(0X11404);
	MakeByte	(0X11405);
	MakeByte	(0X11406);
	MakeByte	(0X11407);
	MakeByte	(0X11408);
	MakeByte	(0X11409);
	MakeByte	(0X1140A);
	MakeByte	(0X1140B);
	MakeByte	(0X1140C);
	MakeByte	(0X1140D);
	MakeByte	(0X1140E);
	MakeByte	(0X1140F);
	MakeByte	(0X11410);
	MakeByte	(0X11411);
	MakeByte	(0X11412);
	MakeByte	(0X11413);
	MakeByte	(0X11414);
	MakeByte	(0X11415);
	MakeByte	(0X11416);
	MakeByte	(0X11417);
	MakeByte	(0X11418);
	MakeByte	(0X11419);
	MakeByte	(0X1141A);
	MakeByte	(0X1141B);
	MakeByte	(0X1141C);
	MakeByte	(0X1141D);
	MakeByte	(0X1141E);
	MakeByte	(0X1141F);
	MakeByte	(0X11420);
	MakeByte	(0X11421);
	MakeByte	(0X11422);
	MakeByte	(0X11423);
	MakeByte	(0X11424);
	MakeByte	(0X11425);
	MakeByte	(0X11426);
	MakeByte	(0X11427);
	MakeByte	(0X11428);
	MakeByte	(0X11429);
	MakeByte	(0X1142A);
	MakeByte	(0X1142B);
	MakeByte	(0X1142C);
	MakeByte	(0X1142D);
	MakeByte	(0X1142E);
	MakeByte	(0X1142F);
	MakeByte	(0X11430);
	MakeByte	(0X11431);
	MakeByte	(0X11432);
	MakeByte	(0X11433);
	MakeByte	(0X11434);
	MakeByte	(0X11435);
	MakeByte	(0X11436);
	MakeByte	(0X11437);
	MakeByte	(0X11438);
	MakeByte	(0X11439);
	MakeByte	(0X1143A);
	MakeByte	(0X1143B);
	MakeByte	(0X1143C);
	MakeByte	(0X1143D);
	MakeByte	(0X1143E);
	MakeByte	(0X1143F);
	MakeByte	(0X11440);
	MakeByte	(0X11441);
	MakeByte	(0X11442);
	MakeByte	(0X11443);
	MakeByte	(0X11444);
	MakeByte	(0X11445);
	MakeByte	(0X11446);
	MakeByte	(0X11447);
	MakeByte	(0X11448);
	MakeByte	(0X11449);
	MakeByte	(0X1144A);
	MakeByte	(0X1144B);
	MakeByte	(0X1144C);
	MakeByte	(0X1144D);
	MakeByte	(0X1144E);
	MakeByte	(0X1144F);
	MakeByte	(0X11450);
	MakeByte	(0X11451);
	MakeByte	(0X11452);
	MakeByte	(0X11453);
	MakeByte	(0X11454);
	MakeByte	(0X11455);
	MakeByte	(0X11456);
	MakeByte	(0X11457);
	MakeByte	(0X11458);
	MakeByte	(0X11459);
	MakeByte	(0X1145A);
	MakeByte	(0X1145B);
	MakeByte	(0X1145C);
	MakeByte	(0X1145D);
	MakeByte	(0X1145E);
	MakeByte	(0X1145F);
	MakeByte	(0X11460);
	MakeByte	(0X11461);
	MakeByte	(0X11462);
	MakeByte	(0X11463);
	MakeByte	(0X11464);
	MakeByte	(0X11465);
	MakeByte	(0X11466);
	MakeByte	(0X11467);
	MakeByte	(0X11468);
	MakeByte	(0X11469);
	MakeByte	(0X1146A);
	MakeByte	(0X1146B);
	MakeByte	(0X1146C);
	MakeByte	(0X1146D);
	MakeByte	(0X1146E);
	MakeByte	(0X1146F);
	MakeByte	(0X11470);
	MakeByte	(0X11471);
	MakeByte	(0X11472);
	MakeByte	(0X11473);
	MakeByte	(0X11474);
	MakeByte	(0X11475);
	MakeByte	(0X11476);
	MakeByte	(0X11477);
	MakeByte	(0X11478);
	MakeByte	(0X11479);
	MakeByte	(0X1147A);
	MakeByte	(0X1147B);
	MakeByte	(0X1147C);
	MakeByte	(0X1147D);
	MakeByte	(0X1147E);
	MakeByte	(0X1147F);
	MakeByte	(0X11480);
	MakeByte	(0X11481);
	MakeByte	(0X11482);
	MakeByte	(0X11483);
	MakeByte	(0X11484);
	MakeByte	(0X11485);
	MakeByte	(0X11486);
	MakeByte	(0X11487);
	MakeByte	(0X11488);
	MakeByte	(0X11489);
	MakeByte	(0X1148A);
	MakeByte	(0X1148B);
	MakeByte	(0X1148C);
	MakeByte	(0X1148D);
	MakeByte	(0X1148E);
	MakeByte	(0X1148F);
	MakeByte	(0X11490);
	MakeByte	(0X11491);
	MakeByte	(0X11492);
	MakeByte	(0X11493);
	MakeByte	(0X11494);
	MakeByte	(0X11495);
	MakeByte	(0X11496);
	MakeByte	(0X11497);
	MakeByte	(0X11498);
	MakeByte	(0X11499);
	MakeByte	(0X1149A);
	MakeByte	(0X1149B);
	MakeByte	(0X1149C);
	MakeByte	(0X1149D);
	MakeByte	(0X1149E);
	MakeByte	(0X1149F);
	MakeByte	(0X114A0);
	MakeByte	(0X114A1);
	MakeByte	(0X114A2);
	MakeByte	(0X114A3);
	MakeByte	(0X114A4);
	MakeByte	(0X114A5);
	MakeByte	(0X114A6);
	MakeByte	(0X114A7);
	MakeByte	(0X114A8);
	MakeByte	(0X114A9);
	MakeByte	(0X114AA);
	MakeByte	(0X114AB);
	MakeByte	(0X114AC);
	MakeByte	(0X114AD);
	MakeByte	(0X114AE);
	MakeByte	(0X114AF);
	MakeByte	(0X114B0);
	MakeByte	(0X114B1);
	MakeByte	(0X114B2);
	MakeByte	(0X114B3);
	MakeByte	(0X114B4);
	MakeByte	(0X114B5);
	MakeByte	(0X114B6);
	MakeByte	(0X114B7);
	MakeByte	(0X114B8);
	MakeByte	(0X114B9);
	MakeByte	(0X114BA);
	MakeByte	(0X114BB);
	MakeByte	(0X114BC);
	MakeByte	(0X114BD);
	MakeByte	(0X114BE);
	MakeByte	(0X114BF);
	MakeByte	(0X114C0);
	MakeByte	(0X114C1);
	MakeByte	(0X114C2);
	MakeByte	(0X114C3);
	MakeByte	(0X114C4);
	MakeByte	(0X114C5);
	MakeByte	(0X114C6);
	MakeByte	(0X114C7);
	MakeByte	(0X114C8);
	MakeByte	(0X114C9);
	MakeByte	(0X114CA);
	MakeByte	(0X114CB);
	MakeByte	(0X114CC);
	MakeByte	(0X114CD);
	MakeByte	(0X114CE);
	MakeByte	(0X114CF);
	MakeByte	(0X114D0);
	MakeByte	(0X114D1);
	MakeByte	(0X114D2);
	MakeByte	(0X114D3);
	MakeByte	(0X114D4);
	MakeByte	(0X114D5);
	MakeByte	(0X114D6);
	MakeByte	(0X114D7);
	MakeByte	(0X114D8);
	MakeByte	(0X114D9);
	MakeByte	(0X114DA);
	MakeByte	(0X114DB);
	MakeByte	(0X114DC);
	MakeByte	(0X114DD);
	MakeByte	(0X114DE);
	MakeByte	(0X114DF);
	MakeByte	(0X114E0);
	MakeByte	(0X114E1);
	MakeByte	(0X114E2);
	MakeByte	(0X114E3);
	MakeByte	(0X114E4);
	MakeByte	(0X114E5);
	MakeByte	(0X114E6);
	MakeByte	(0X114E7);
	MakeByte	(0X114E8);
	MakeByte	(0X114E9);
	MakeByte	(0X114EA);
	MakeByte	(0X114EB);
	MakeCode	(0X114EC);
	MakeCode	(0X114F2);
	MakeCode	(0X114F8);
	MakeCode	(x=0X11506);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1151A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11530);
	MakeCode	(x=0X1153E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11548);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11554);
	MakeCode	(0X11570);
	MakeCode	(0X1158E);
	MakeCode	(0X115A4);
	MakeCode	(0X115F2);
	MakeCode	(0X115F8);
	MakeCode	(0X11634);
	MakeCode	(0X11686);
	MakeCode	(0X1169E);
	MakeCode	(0X116F0);
	MakeCode	(x=0X116F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11776);
	MakeCode	(0X1181E);
	MakeCode	(0X118C6);
	MakeCode	(0X1190A);
	MakeCode	(x=0X11940);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1195C);
	MakeCode	(0X1197A);
	MakeCode	(0X11994);
	MakeCode	(x=0X119E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X119FC);
	MakeCode	(0X11A10);
	MakeCode	(0X11A30);
	MakeCode	(0X11A46);
	MakeCode	(0X11A5C);
	MakeCode	(0X11A62);
	MakeCode	(0X11A76);
	MakeCode	(0X11A8E);
	MakeCode	(0X11AA4);
	MakeCode	(0X11ABA);
	MakeCode	(0X11AD0);
	MakeCode	(0X11AE6);
	MakeCode	(0X11AFC);
	MakeCode	(0X11B12);
	MakeByte	(x=0X11B14);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeName	(0X11B14,	"MapDialogs");
	MakeByte	(0X11B15);
	MakeByte	(x=0X11B16);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B17);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B18);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(0X11B19);
	MakeByte	(x=0X11B1A);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B1B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B1C);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(0X11B1D);
	MakeByte	(x=0X11B1E);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B1F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B20);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(0X11B21);
	MakeByte	(x=0X11B22);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(0X11B23);
	MakeByte	(x=0X11B24);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(0X11B25);
	MakeByte	(x=0X11B26);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B27);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B28);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B29);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B2A);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(0X11B2B);
	MakeByte	(x=0X11B2C);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B2D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B2E);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B2F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B30);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B31);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B32);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B33);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B34);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B35);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B36);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B37);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B38);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B39);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B3A);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(0X11B3B);
	MakeByte	(x=0X11B3C);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B3D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B3E);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B3F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B40);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B41);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B42);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B43);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B44);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B45);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11B46);
	OpEnumEx		(x,	0,	GetEnum("Maps"),0);
	MakeByte	(x=0X11B47);
	OpDecimal	(x,	0);
	MakeWord	(0X11B48);
	MakeCode	(0X11B4A);
	MakeCode	(x=0X11B62);
	OpHex		(x,	0);
	MakeCode	(x=0X11B8C);
	OpHex		(x,	0);
	MakeCode	(0X11BA0);
	MakeCode	(x=0X11BA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11C04);
	MakeCode	(0X11C0A);
	MakeCode	(0X11C0C);
	MakeCode	(x=0X11C5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11C62);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11C7C);
	OpDecimal	(x,	0);
	ExtLinB		(0X11C84,	0,	"                ");
	MakeCode	(x=0X11C88);
	OpDecimal	(x,	0);
	MakeCode	(x=0X11CBA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11CD4);
	MakeCode	(0X11CE2);
	MakeCode	(x=0X11CFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X11D2E);
	MakeByte	(0X11D2F);
	MakeByte	(0X11D30);
	MakeByte	(0X11D31);
	MakeByte	(0X11D32);
	MakeByte	(0X11D33);
	MakeByte	(0X11D34);
	MakeByte	(0X11D35);
	MakeCode	(x=0X11D36);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11D52);
	MakeCode	(0X11D84);
	MakeCode	(0X11DAA);
	MakeCode	(x=0X11DBE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11DE6);
	MakeCode	(0X11E0C);
	MakeCode	(x=0X11E20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11E4C);
	MakeCode	(0X11E72);
	MakeCode	(x=0X11E86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11EB2);
	MakeCode	(x=0X11EB8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11ECA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11ECE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X11EE0);
	MakeByte	(0X11EE1);
	MakeByte	(0X11EE2);
	MakeByte	(0X11EE3);
	MakeByte	(0X11EE4);
	MakeByte	(0X11EE5);
	MakeByte	(0X11EE6);
	MakeByte	(0X11EE7);
	MakeByte	(0X11EE8);
	MakeByte	(0X11EE9);
	MakeByte	(0X11EEA);
	MakeByte	(0X11EEB);
	MakeByte	(0X11EEC);
	MakeByte	(0X11EED);
	MakeByte	(0X11EEE);
	MakeByte	(0X11EEF);
	MakeByte	(0X11EF0);
	MakeByte	(0X11EF1);
	MakeByte	(0X11EF2);
	MakeByte	(0X11EF3);
	MakeByte	(0X11EF4);
	MakeByte	(0X11EF5);
	MakeByte	(0X11EF6);
	MakeByte	(0X11EF7);
	MakeByte	(0X11EF8);
	MakeByte	(0X11EF9);
	MakeByte	(0X11EFA);
	MakeByte	(0X11EFB);
	MakeByte	(0X11EFC);
	MakeByte	(0X11EFD);
	MakeByte	(0X11EFE);
	MakeByte	(0X11EFF);
	MakeCode	(x=0X11F00);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11F06);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11F0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11F14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11F1C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11F24);
	MakeCode	(0X11F2C);
	MakeCode	(0X11F3A);
	MakeCode	(0X11F4A);
	MakeCode	(x=0X11F7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11F82);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11F8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11F90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X11F98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X11FA0);
	MakeCode	(0X11FA8);
	MakeCode	(0X11FB6);
	MakeCode	(0X11FC6);
	MakeCode	(0X11FF8);
	MakeCode	(0X12008);
	MakeCode	(0X12058);
	MakeCode	(0X1207A);
	MakeCode	(0X120AC);
	MakeCode	(0X120F0);
	MakeCode	(0X1218A);
	MakeCode	(0X12194);
	MakeCode	(0X121E2);
	MakeCode	(0X121EC);
	MakeCode	(0X12232);
	MakeCode	(0X122AC);
	MakeCode	(0X122D8);
	MakeCode	(0X1231C);
	MakeCode	(0X12394);
	MakeCode	(0X123D4);
	MakeCode	(0X12414);
	MakeCode	(0X1244A);
	MakeCode	(0X12454);
	MakeCode	(0X12484);
	MakeCode	(0X124C6);
	MakeCode	(0X12500);
	MakeCode	(0X1254C);
	MakeCode	(0X12600);
	MakeCode	(0X1261A);
	MakeCode	(0X12634);
	MakeCode	(0X12698);
	MakeCode	(0X126BC);
	MakeCode	(0X126DA);
	MakeCode	(0X127B6);
	MakeCode	(0X127DA);
	MakeCode	(0X1286A);
	MakeCode	(0X128FA);
	MakeCode	(0X1292C);
	MakeCode	(0X129FA);
	MakeCode	(0X12A04);
	MakeCode	(0X12A22);
	MakeCode	(0X12A38);
	MakeCode	(0X12A3A);
	MakeCode	(0X12A7E);
	MakeCode	(0X12A88);
	MakeCode	(0X12AD2);
	MakeCode	(0X12B44);
	MakeCode	(0X12BD2);
	MakeCode	(0X12BDC);
	MakeCode	(0X12BFC);
	MakeByte	(0X12C00);
	MakeByte	(0X12C01);
	MakeByte	(0X12C02);
	MakeByte	(0X12C03);
	MakeByte	(0X12C04);
	MakeByte	(0X12C05);
	MakeByte	(0X12C06);
	MakeByte	(0X12C07);
	MakeByte	(0X12C08);
	MakeByte	(0X12C09);
	MakeByte	(0X12C0A);
	MakeByte	(0X12C0B);
	MakeByte	(0X12C0C);
	MakeByte	(0X12C0D);
	MakeByte	(0X12C0E);
	MakeByte	(0X12C0F);
	MakeByte	(0X12C10);
	MakeByte	(0X12C11);
	MakeByte	(0X12C12);
	MakeByte	(0X12C13);
	MakeByte	(0X12C14);
	MakeByte	(0X12C15);
	MakeByte	(0X12C16);
	MakeByte	(0X12C17);
	MakeByte	(0X12C18);
	MakeByte	(0X12C19);
	MakeByte	(0X12C1A);
	MakeByte	(0X12C1B);
	MakeByte	(0X12C1C);
	MakeByte	(0X12C1D);
	MakeByte	(0X12C1E);
	MakeByte	(0X12C1F);
	MakeByte	(0X12C20);
	MakeByte	(0X12C21);
	MakeByte	(0X12C22);
	MakeByte	(0X12C23);
	MakeByte	(0X12C24);
	MakeByte	(0X12C25);
	MakeByte	(0X12C26);
	MakeByte	(0X12C27);
	MakeByte	(0X12C28);
	MakeByte	(0X12C29);
	MakeByte	(0X12C2A);
	MakeByte	(0X12C2B);
	MakeByte	(0X12C2C);
	MakeByte	(0X12C2D);
	MakeByte	(0X12C2E);
	MakeByte	(0X12C2F);
	MakeByte	(0X12C30);
	MakeByte	(0X12C31);
	MakeByte	(0X12C32);
	MakeByte	(0X12C33);
	MakeByte	(0X12C34);
	MakeByte	(0X12C35);
	MakeByte	(0X12C36);
	MakeByte	(0X12C37);
	MakeByte	(0X12C38);
	MakeByte	(0X12C39);
	MakeByte	(0X12C3A);
	MakeByte	(0X12C3B);
	MakeByte	(0X12C3C);
	MakeByte	(0X12C3D);
	MakeByte	(0X12C3E);
	MakeByte	(0X12C3F);
	MakeByte	(0X12C40);
	MakeByte	(0X12C41);
	MakeByte	(0X12C42);
	MakeByte	(0X12C43);
	MakeByte	(0X12C44);
	MakeByte	(0X12C45);
	MakeByte	(0X12C46);
	MakeByte	(0X12C47);
	MakeByte	(0X12C48);
	MakeByte	(0X12C49);
	MakeByte	(0X12C4A);
	MakeByte	(0X12C4B);
	MakeByte	(0X12C4C);
	MakeByte	(0X12C4D);
	MakeByte	(0X12C4E);
	MakeByte	(0X12C4F);
	MakeByte	(0X12C50);
	MakeByte	(0X12C51);
	MakeByte	(0X12C52);
	MakeByte	(0X12C53);
	MakeByte	(0X12C54);
	MakeByte	(0X12C55);
	MakeByte	(0X12C56);
	MakeByte	(0X12C57);
	MakeByte	(0X12C58);
	MakeByte	(0X12C59);
	MakeByte	(0X12C5A);
	MakeByte	(0X12C5B);
	MakeByte	(0X12C5C);
	MakeByte	(0X12C5D);
	MakeByte	(0X12C5E);
	MakeByte	(0X12C5F);
	MakeByte	(0X12C60);
	MakeByte	(0X12C61);
	MakeCode	(x=0X12C62);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12CC6);
	MakeArray	(0X12CC6,	0X4);
	MakeCode	(0X12CCA);
	MakeCode	(0X12CCC);
	MakeByte	(0X12CD4);
	MakeArray	(0X12CD4,	0X4);
	MakeCode	(0X12CD8);
	MakeCode	(0X12D06);
	MakeByte	(0X12D24);
	MakeArray	(0X12D24,	0X4);
	MakeCode	(0X12D28);
	MakeCode	(0X12D2A);
	MakeByte	(0X12D32);
	MakeArray	(0X12D32,	0X4);
	MakeCode	(0X12D36);
	MakeCode	(0X12D3A);
	MakeCode	(0X12D40);
	MakeCode	(0X12D48);
	MakeCode	(x=0X12D52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12D56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12D5A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12D70);
	MakeByte	(0X12D71);
	MakeByte	(0X12D72);
	MakeByte	(0X12D73);
	MakeCode	(0X12D74);
	MakeCode	(0X12D88);
	MakeByte	(0X12D8A);
	MakeArray	(0X12D8A,	0X41A);
	MakeName	(0X12D8A,	"MapTeleports");
	MakeCode	(0X131A4);
	MakeCode	(0X131B2);
	MakeCode	(0X131BE);
	MakeCode	(x=0X131D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X131F8);
	MakeCode	(x=0X13208);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13214);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1321A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X13248);
	MakeCode	(0X132E8);
	MakeCode	(0X13340);
	MakeCode	(0X133B4);
	MakeCode	(0X13428);
	MakeCode	(0X134CE);
	MakeCode	(0X134EC);
	MakeCode	(0X1351E);
	MakeCode	(0X1355A);
	MakeCode	(0X1358C);
	MakeCode	(0X135CC);
	MakeCode	(0X13640);
	MakeCode	(0X13698);
	MakeCode	(0X1373C);
	MakeCode	(0X13794);
	MakeCode	(0X137C6);
	MakeCode	(0X137CA);
	MakeCode	(0X13804);
	MakeCode	(x=0X13812);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1381C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X13828);
	MakeRptCmt	(0X13840,	"\"[Hero] opens[Line]the treasure chest![Wait2]\"");
	MakeCode	(x=0X13844);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X13864);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X138A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X138CA);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(0X138EA);
	MakeArray	(0X138EA,	0X4);
	MakeRptCmt	(0X138EE,	"\"[Name] discovers a[Line][Item]![Wait2]\"");
	MakeCode	(0X138EE);
	MakeCode	(x=0X138F2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X13908,	"\"[Name] discovers a[Line][Item]![Wait2]\"");
	MakeCode	(0X13908);
	MakeCode	(x=0X1390C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1390E,	"\"But can't carry it![Wait2]\"");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_4(void) {
        auto x;
#define id x

	MakeCode	(x=0X13912);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X13918);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X13936);
	MakeArray	(0X13936,	0X4);
	MakeRptCmt	(0X1393A,	"\"[Name] gains [Num] coins.[Wait2]\"");
	MakeCode	(0X1393A);
	MakeCode	(x=0X1393E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X13966);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X13976);
	MakeCode	(0X1397E);
	MakeCode	(0X13996);
	MakeCode	(x=0X139A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X139B0,	"\"Nothing is found.[Wait2]\"");
	MakeCode	(x=0X139B4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X139BE);
	OpDecimal	(x,	0);
	MakeName	(0X139BE,	"tbl_ExplorationChestGoldAmounts");
	MakeWord	(x=0X139C0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X139C2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X139C4);
	OpDecimal	(x,	0);
	MakeDword	(x=0X139C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X139CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X139CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X139D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X139D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X139DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X139DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X139E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X139E6);
	MakeByte	(0X139E7);
	MakeByte	(0X139E8);
	MakeByte	(0X139E9);
	MakeByte	(0X139EA);
	MakeByte	(0X139EB);
	MakeByte	(0X139EC);
	MakeByte	(0X139ED);
	MakeByte	(0X139EE);
	MakeByte	(0X139EF);
	MakeByte	(0X139F0);
	MakeByte	(0X139F1);
	MakeByte	(0X139F2);
	MakeByte	(0X139F3);
	MakeByte	(0X139F4);
	MakeByte	(0X139F5);
	MakeByte	(0X139F6);
	MakeByte	(0X139F7);
	MakeByte	(0X139F8);
	MakeByte	(0X139F9);
	MakeByte	(0X139FA);
	MakeByte	(0X139FB);
	MakeByte	(0X139FC);
	MakeByte	(0X139FD);
	MakeByte	(0X139FE);
	MakeByte	(0X139FF);
	MakeByte	(0X13A00);
	MakeByte	(0X13A01);
	MakeByte	(0X13A02);
	MakeByte	(0X13A03);
	MakeByte	(0X13A04);
	MakeByte	(0X13A05);
	MakeByte	(0X13A06);
	MakeByte	(0X13A07);
	MakeByte	(0X13A08);
	MakeByte	(0X13A09);
	MakeByte	(0X13A0A);
	MakeByte	(0X13A0B);
	MakeByte	(0X13A0C);
	MakeWord	(0X13A0D);
	MakeByte	(0X13A0F);
	MakeByte	(0X13A10);
	MakeByte	(0X13A11);
	MakeByte	(0X13A12);
	MakeByte	(0X13A13);
	MakeByte	(0X13A14);
	MakeByte	(0X13A15);
	MakeByte	(0X13A16);
	MakeByte	(0X13A17);
	MakeByte	(0X13A18);
	MakeByte	(0X13A19);
	MakeByte	(0X13A1A);
	MakeByte	(0X13A1B);
	MakeByte	(0X13A1C);
	MakeByte	(0X13A1D);
	MakeByte	(0X13A1E);
	MakeByte	(0X13A1F);
	MakeByte	(0X13A20);
	MakeByte	(0X13A21);
	MakeByte	(0X13A22);
	MakeByte	(0X13A23);
	MakeByte	(0X13A24);
	MakeByte	(0X13A25);
	MakeByte	(0X13A26);
	MakeByte	(0X13A27);
	MakeByte	(0X13A28);
	MakeByte	(0X13A29);
	MakeByte	(0X13A2A);
	MakeByte	(0X13A2B);
	MakeByte	(0X13A2C);
	MakeByte	(0X13A2D);
	MakeByte	(0X13A2E);
	MakeByte	(0X13A2F);
	MakeCode	(0X13A30);
	MakeCode	(x=0X13A32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X13A3A);
	MakeCode	(0X13A3E);
	MakeCode	(0X13A42);
	MakeCode	(0X13A46);
	MakeCode	(0X13A4A);
	MakeCode	(0X13A4E);
	MakeCode	(0X13A52);
	MakeCode	(0X13A56);
	MakeCode	(0X13A5A);
	MakeCode	(0X13A5E);
	MakeCode	(0X13A62);
	MakeCode	(0X13A66);
	MakeCode	(0X13A6A);
	MakeCode	(0X13A6E);
	MakeCode	(0X13A72);
	MakeCode	(0X13A76);
	MakeCode	(0X13A7A);
	MakeCode	(0X13A7E);
	MakeCode	(0X13A82);
	MakeCode	(0X13A86);
	MakeCode	(0X13A8A);
	MakeCode	(0X13A8E);
	MakeCode	(0X13A92);
	MakeCode	(0X13A96);
	MakeCode	(0X13A9A);
	MakeCode	(0X13A9E);
	MakeCode	(0X13AA2);
	MakeCode	(0X13AA6);
	MakeCode	(0X13AAA);
	MakeCode	(0X13AAE);
	MakeCode	(0X13AB2);
	MakeCode	(0X13AB6);
	MakeCode	(0X13ABA);
	MakeCode	(0X13ABE);
	MakeCode	(0X13AC2);
	MakeCode	(0X13AC6);
	MakeCode	(0X13ACA);
	MakeCode	(0X13ACE);
	MakeCode	(0X13AD2);
	MakeCode	(0X13AD6);
	MakeCode	(0X13ADA);
	MakeCode	(0X13ADE);
	MakeCode	(0X13AE2);
	MakeCode	(0X13AE6);
	MakeCode	(0X13AEA);
	MakeCode	(0X13AEE);
	MakeCode	(0X13AF2);
	MakeCode	(0X13AF6);
	MakeCode	(0X13AFA);
	MakeCode	(0X13AFE);
	MakeCode	(0X13B02);
	MakeCode	(0X13B06);
	MakeCode	(0X13B0A);
	MakeCode	(0X13B0E);
	MakeCode	(0X13B12);
	MakeCode	(0X13B16);
	MakeCode	(0X13B1A);
	MakeCode	(0X13B1E);
	MakeCode	(0X13B22);
	MakeCode	(0X13B26);
	MakeCode	(0X13B2A);
	MakeCode	(0X13B2E);
	MakeCode	(0X13B32);
	MakeCode	(0X13B36);
	MakeCode	(0X13B3A);
	MakeCode	(0X13B3E);
	MakeCode	(0X13B42);
	MakeCode	(0X13B46);
	MakeCode	(0X13B4A);
	MakeCode	(0X13B4E);
	MakeCode	(0X13B52);
	MakeCode	(0X13B56);
	MakeCode	(0X13B5A);
	MakeCode	(0X13B5E);
	MakeCode	(0X13B62);
	MakeCode	(0X13B66);
	MakeCode	(0X13B6A);
	MakeCode	(0X13B6E);
	MakeCode	(0X13B72);
	MakeCode	(0X13B76);
	MakeCode	(0X13B7A);
	MakeCode	(0X13B7E);
	MakeCode	(0X13B82);
	MakeCode	(0X13B86);
	MakeCode	(0X13B8A);
	MakeCode	(0X13B8E);
	MakeCode	(0X13B92);
	MakeCode	(0X13B96);
	MakeCode	(0X13B9A);
	MakeCode	(0X13B9E);
	MakeCode	(0X13BA2);
	MakeCode	(0X13BA6);
	MakeCode	(0X13BAA);
	MakeCode	(0X13BAE);
	MakeCode	(0X13BB2);
	MakeCode	(0X13BB6);
	MakeCode	(0X13BBA);
	MakeCode	(0X13BBE);
	MakeCode	(0X13BC2);
	MakeCode	(0X13BC6);
	MakeCode	(0X13BCA);
	MakeCode	(0X13BCE);
	MakeCode	(0X13BD2);
	MakeCode	(0X13BD6);
	MakeCode	(0X13BDA);
	MakeCode	(0X13BDE);
	MakeCode	(0X13BE2);
	MakeCode	(0X13BE6);
	MakeCode	(0X13BEA);
	MakeCode	(0X13BEE);
	MakeCode	(0X13BF2);
	MakeCode	(0X13BF6);
	MakeCode	(0X13BFA);
	MakeCode	(0X13BFE);
	MakeCode	(0X13C02);
	MakeCode	(0X13C06);
	MakeCode	(0X13C0A);
	MakeCode	(0X13C0E);
	MakeCode	(0X13C12);
	MakeCode	(0X13C16);
	MakeCode	(0X13C1A);
	MakeCode	(0X13C1E);
	MakeCode	(0X13C22);
	MakeCode	(0X13C26);
	MakeCode	(0X13C2A);
	MakeCode	(0X13C2E);
	MakeCode	(0X13C32);
	MakeCode	(0X13C36);
	MakeCode	(0X13C3A);
	MakeCode	(0X13C3E);
	MakeCode	(0X13C42);
	MakeCode	(0X13C46);
	MakeCode	(0X13C4A);
	MakeCode	(0X13C4E);
	MakeCode	(0X13C52);
	MakeCode	(0X13C56);
	MakeCode	(0X13C5A);
	MakeCode	(0X13C5E);
	MakeCode	(0X13C62);
	MakeCode	(0X13C66);
	MakeCode	(0X13C6A);
	MakeCode	(0X13C6E);
	MakeCode	(0X13C72);
	MakeCode	(0X13C76);
	MakeCode	(0X13C7A);
	MakeCode	(0X13C7E);
	MakeCode	(0X13C82);
	MakeCode	(0X13C86);
	MakeCode	(0X13C8A);
	MakeCode	(0X13C8E);
	MakeCode	(0X13C92);
	MakeCode	(0X13C96);
	MakeCode	(0X13C9A);
	MakeCode	(0X13C9E);
	MakeCode	(0X13CA2);
	MakeCode	(0X13CA6);
	MakeCode	(0X13CAA);
	MakeCode	(0X13CAE);
	MakeCode	(0X13CB2);
	MakeCode	(0X13CB6);
	MakeCode	(0X13CBA);
	MakeCode	(0X13CBE);
	MakeCode	(0X13CC2);
	MakeCode	(0X13CC6);
	MakeCode	(0X13CCA);
	MakeCode	(0X13CCE);
	MakeCode	(0X13CD2);
	MakeCode	(0X13CD6);
	MakeCode	(0X13CDA);
	MakeCode	(0X13CDE);
	MakeCode	(0X13CE2);
	MakeCode	(0X13CE6);
	MakeCode	(0X13CEA);
	MakeCode	(0X13CEE);
	MakeCode	(0X13CF2);
	MakeCode	(0X13CF6);
	MakeCode	(0X13CFA);
	MakeCode	(0X13CFE);
	MakeCode	(0X13D02);
	MakeCode	(0X13D06);
	MakeCode	(0X13D0A);
	MakeCode	(0X13D0E);
	MakeCode	(0X13D12);
	MakeCode	(0X13D16);
	MakeCode	(0X13D1A);
	MakeCode	(0X13D1E);
	MakeCode	(0X13D2C);
	MakeCode	(0X13D38);
	MakeCode	(0X13D44);
	MakeCode	(0X13D54);
	MakeCode	(0X13DB0);
	MakeCode	(0X13DBE);
	MakeByte	(0X13DCA);
	MakeArray	(0X13DCA,	0X4);
	MakeCode	(0X13DCE);
	MakeCode	(x=0X13DD2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13DD8);
	OpOff		(x,	1,	0XFF5000);
	OpOff		(x,	129,	0XFF5000);
	MakeCode	(0X13EA0);
	MakeCode	(0X13ED2);
	MakeCode	(0X13F04);
	MakeCode	(0X13F60);
	MakeCode	(0X13F70);
	MakeCode	(0X13F80);
	MakeCode	(x=0X13F9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13FB0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13FB4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13FB8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X13FBC);
	MakeByte	(0X13FBD);
	MakeByte	(0X13FBE);
	MakeByte	(0X13FBF);
	MakeByte	(0X13FC0);
	MakeByte	(0X13FC1);
	MakeByte	(0X13FC2);
	MakeByte	(0X13FC3);
	MakeByte	(0X13FC4);
	MakeByte	(0X13FC5);
	MakeByte	(0X13FC6);
	MakeByte	(0X13FC7);
	MakeByte	(0X13FC8);
	MakeByte	(0X13FC9);
	MakeByte	(0X13FCA);
	MakeByte	(0X13FCB);
	MakeByte	(0X13FCC);
	MakeByte	(0X13FCD);
	MakeByte	(0X13FCE);
	MakeByte	(0X13FCF);
	MakeByte	(0X13FD0);
	MakeByte	(0X13FD1);
	MakeCode	(0X13FD2);
	MakeCode	(x=0X14038);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X1403A);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X1403C);
	MakeCode	(0X14090);
	MakeCode	(0X140B6);
	MakeCode	(0X14180);
	MakeCode	(x=0X1418C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X14198);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X1419A);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X1419C);
	MakeCode	(0X141AC);
	MakeCode	(0X141BC);
	MakeCode	(0X141C6);
	MakeCode	(0X141D6);
	MakeCode	(0X141F2);
	MakeCode	(0X14206);
	MakeCode	(0X14216);
	MakeByte	(0X1421A);
	MakeArray	(0X1421A,	0X4);
	MakeCode	(0X1421E);
	MakeCode	(0X1423E);
	MakeCode	(0X14262);
	MakeCode	(0X14292);
	MakeCode	(0X142D8);
	MakeCode	(0X14300);
	MakeByte	(0X14306);
	MakeArray	(0X14306,	0X4);
	MakeCode	(0X1430A);
	MakeCode	(0X14336);
	MakeCode	(0X14356);
	MakeCode	(0X14394);
	MakeCode	(0X1439E);
	MakeCode	(0X143AE);
	MakeCode	(0X143C0);
	MakeCode	(0X143D4);
	MakeCode	(0X143E0);
	MakeCode	(0X143EC);
	MakeCode	(0X143F6);
	MakeCode	(0X14402);
	MakeCode	(0X1440E);
	MakeCode	(0X14420);
	MakeCode	(0X1444A);
	MakeCode	(x=0X1444C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1445C);
	MakeCode	(0X1447E);
	MakeCode	(0X144C2);
	MakeCode	(0X144E0);
	MakeByte	(0X14520);
	MakeArray	(0X14520,	0X4);
	MakeCode	(0X14524);
	MakeCode	(0X14532);
	MakeCode	(0X14544);
	MakeCode	(0X1457E);
	MakeCode	(0X145A4);
	MakeCode	(0X145B0);
	MakeCode	(0X145BC);
	MakeCode	(x=0X145C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X145F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X145FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X14606);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1460E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X14616);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1461E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X14626);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X14648);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1467C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X14684);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1468C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X14694);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1469C);
	MakeCode	(x=0X146AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X146CA);
	MakeCode	(0X146D2);
	MakeCode	(0X146DA);
	MakeCode	(0X146E2);
	MakeCode	(0X146EA);
	MakeCode	(x=0X1470A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X1470C);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X1470E);
	MakeCode	(0X1472C);
	MakeCode	(0X14738);
	MakeCode	(x=0X14746);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(0X14770);
	MakeCode	(x=0X1477C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X1477E);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X14780);
	MakeCode	(0X1479A);
	MakeCode	(0X147A6);
	MakeCode	(0X147B2);
	MakeCode	(x=0X147BE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X147C0);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X147C2);
	MakeCode	(0X147D2);
	MakeCode	(0X147F2);
	MakeCode	(0X147FE);
	MakeCode	(x=0X1480A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X1480C);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X1480E);
	MakeCode	(0X1482E);
	MakeCode	(0X1483A);
	MakeCode	(0X14846);
	MakeByte	(0X1486E);
	MakeArray	(0X1486E,	0X4);
	MakeCode	(0X14872);
	MakeByte	(0X148BA);
	MakeArray	(0X148BA,	0X4);
	MakeCode	(0X148BE);
	MakeCode	(0X148C2);
	MakeCode	(0X148DE);
	MakeCode	(0X14928);
	MakeByte	(0X1494E);
	MakeArray	(0X1494E,	0X4);
	MakeCode	(0X14952);
	MakeCode	(0X14958);
	MakeCode	(0X14964);
	MakeCode	(0X14970);
	MakeCode	(0X149AE);
	MakeCode	(0X149B8);
	MakeCode	(0X149CC);
	MakeCode	(0X149E0);
	MakeCode	(0X14A64);
	MakeCode	(x=0X14A90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X14ABE);
	MakeCode	(0X14AE0);
	MakeCode	(0X14AFC);
	MakeCode	(0X14B0C);
	MakeCode	(0X14B22);
	MakeCode	(0X14B2C);
	MakeCode	(0X14B42);
	MakeCode	(0X14B62);
	MakeCode	(x=0X14B6E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X14B70);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X14B72);
	MakeCode	(0X14B82);
	MakeCode	(0X14B92);
	MakeCode	(0X14B9E);
	MakeCode	(x=0X14BB8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X14BBA);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeCode	(0X14BBC);
	MakeByte	(0X14BE2);
	MakeArray	(0X14BE2,	0X4);
	MakeCode	(x=0X14BE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X14BEC);
	OpHex		(x,	1);
	MakeByte	(0X14C0C);
	MakeArray	(0X14C0C,	0X4);
	MakeCode	(0X14C10);
	MakeCode	(0X14C14);
	MakeCode	(x=0X14C16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X14C3A);
	MakeCode	(0X14C5E);
	MakeCode	(0X14C90);
	MakeCode	(x=0X14CBE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X14CC0);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeCode	(0X14CC2);
	MakeCode	(x=0X14CE2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X14D08);
	OpDecimal	(x,	0);
	MakeByte	(0X14D2E);
	MakeArray	(0X14D2E,	0X4);
	MakeCode	(0X14D32);
	MakeCode	(0X14D36);
	MakeByte	(0X14D5C);
	MakeArray	(0X14D5C,	0X4);
	MakeCode	(0X14D60);
	MakeCode	(0X14D78);
	MakeByte	(0X14D82);
	MakeArray	(0X14D82,	0X4);
	MakeCode	(0X14D86);
	MakeCode	(0X14D9A);
	MakeByte	(0X14DA4);
	MakeArray	(0X14DA4,	0X4);
	MakeCode	(0X14DA8);
	MakeCode	(0X14DBC);
	MakeCode	(0X14DE6);
	MakeByte	(0X14E04);
	MakeArray	(0X14E04,	0X4);
	MakeCode	(0X14E08);
	MakeCode	(0X14E18);
	MakeCode	(0X14E30);
	MakeCode	(0X14E48);
	MakeCode	(0X14E74);
	MakeCode	(0X14E80);
	MakeCode	(0X14E8A);
	MakeCode	(0X14EAA);
	MakeCode	(0X14EC2);
	MakeCode	(0X14ECE);
	MakeCode	(0X14EF6);
	MakeCode	(0X14F2A);
	MakeCode	(0X14F5E);
	MakeCode	(x=0X14F6A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X14F6C);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X14F6E);
	MakeCode	(0X14F96);
	MakeCode	(x=0X14F98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X14FC4);
	MakeByte	(0X14FFC);
	MakeArray	(0X14FFC,	0X4);
	MakeCode	(0X15000);
	MakeCode	(0X15010);
	MakeCode	(0X15030);
	MakeCode	(x=0X15044);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X15062);
	MakeCode	(0X1506E);
	MakeCode	(0X15080);
	MakeCode	(0X15094);
	MakeByte	(0X1509C);
	MakeArray	(0X1509C,	0X4);
	MakeCode	(0X150A0);
	MakeCode	(x=0X150AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X150DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1511C);
	MakeCode	(0X15128);
	MakeByte	(0X15130);
	MakeArray	(0X15130,	0X4);
	MakeCode	(0X15134);
	MakeCode	(x=0X15154);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X15156);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X15158);
	MakeCode	(0X1518C);
	MakeCode	(0X151AC);
	MakeCode	(0X151B8);
	MakeCode	(0X151C4);
	MakeCode	(0X151D0);
	MakeCode	(x=0X151DC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X151DE);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X151E0);
	MakeCode	(x=0X151FC);
	OpDecimal	(x,	0);
	MakeByte	(0X15206);
	MakeArray	(0X15206,	0X4);
	MakeCode	(0X1520A);
	MakeCode	(x=0X1521E);
	OpDecimal	(x,	0);
	MakeByte	(0X15228);
	MakeArray	(0X15228,	0X4);
	MakeCode	(0X1522C);
	MakeCode	(x=0X15240);
	OpDecimal	(x,	0);
	MakeCode	(0X1524E);
	MakeCode	(x=0X15250);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X15278);
	MakeCode	(0X152E0);
	MakeByte	(0X152EC);
	MakeArray	(0X152EC,	0X4);
	MakeCode	(x=0X152F0);
	OpDecimal	(x,	0);
	MakeCode	(0X152FC);
	MakeCode	(0X15336);
	MakeCode	(x=0X15342);
	OpDecimal	(x,	0);
	MakeCode	(0X1534E);
	MakeCode	(x=0X15350);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X15374);
	MakeCode	(0X15380);
	MakeCode	(0X1538C);
	MakeCode	(x=0X15398);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X1539A);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X1539C);
	MakeCode	(0X153BC);
	MakeName	(0X153BC,	"j_SetCarryBit");
	MakeCode	(0X153C0);
	MakeCode	(x=0X153D8);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(x=0X1546E);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(x=0X154BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X154C2);
	OpOff		(x,	1,	0XFF5030);
	OpOff		(x,	129,	0XFF5030);
	MakeCode	(x=0X154F4);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(x=0X1557E);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(0X155B8);
	MakeCode	(x=0X155C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X155C8);
	OpHex		(x,	0);
	MakeCode	(0X155EC);
	MakeCode	(0X15600);
	MakeCode	(x=0X1560A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1562A);
	MakeCode	(0X15640);
	MakeCode	(x=0X15650);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(0X15680);
	MakeCode	(x=0X15690);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(0X156C0);
	MakeCode	(0X156D4);
	MakeCode	(x=0X156D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X156EE);
	MakeCode	(0X156FA);
	MakeCode	(x=0X1570E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X15734);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1574C);
	MakeCode	(x=0X15752);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1579E);
	MakeCode	(0X157C4);
	MakeCode	(0X157D0);
	MakeCode	(0X157DC);
	MakeCode	(0X15816);
	MakeCode	(0X1586E);
	MakeCode	(0X1588A);
	MakeCode	(0X158B4);
	MakeCode	(0X158D0);
	MakeCode	(0X158E6);
	MakeCode	(0X158F6);
	MakeCode	(x=0X15936);
	OpDecimal	(x,	0);
	MakeByte	(0X1595C);
	MakeArray	(0X1595C,	0X4);
	MakeCode	(0X15960);
	MakeCode	(x=0X1598A);
	OpDecimal	(x,	0);
	MakeCode	(0X159A8);
	MakeByte	(0X15A40);
	MakeArray	(0X15A40,	0X4);
	MakeCode	(0X15A44);
	MakeCode	(0X15A7E);
	MakeCode	(x=0X15A82);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X15A8C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X15AA6);
	MakeByte	(0X15AD6);
	MakeArray	(0X15AD6,	0X4);
	MakeCode	(0X15ADA);
	MakeCode	(0X15B40);
	MakeCode	(0X15B60);
	MakeCode	(0X15B6A);
	MakeCode	(0X15B8C);
	MakeCode	(x=0X15B8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X15BB6);
	MakeCode	(0X15BC2);
	MakeCode	(0X15BCE);
	MakeCode	(0X15BEA);
	MakeCode	(0X15C02);
	MakeCode	(0X15C06);
	MakeCode	(0X15C12);
	MakeCode	(0X15C1E);
	MakeCode	(0X15C30);
	MakeCode	(0X15C3C);
	MakeByte	(0X15C4C);
	MakeByte	(0X15C4D);
	MakeByte	(0X15C4E);
	MakeByte	(0X15C4F);
	MakeByte	(0X15C50);
	MakeByte	(0X15C51);
	MakeByte	(0X15C52);
	MakeByte	(0X15C53);
	MakeByte	(0X15C54);
	MakeByte	(0X15C55);
	MakeByte	(0X15C56);
	MakeByte	(0X15C57);
	MakeByte	(0X15C58);
	MakeByte	(0X15C59);
	MakeByte	(0X15C5A);
	MakeByte	(0X15C5B);
	MakeByte	(0X15C5C);
	MakeByte	(0X15C5D);
	MakeByte	(0X15C5E);
	MakeByte	(0X15C5F);
	MakeByte	(0X15C60);
	MakeByte	(0X15C61);
	MakeByte	(0X15C62);
	MakeByte	(0X15C63);
	MakeByte	(0X15C64);
	MakeByte	(0X15C65);
	MakeByte	(0X15C66);
	MakeByte	(0X15C67);
	MakeByte	(0X15C68);
	MakeByte	(0X15C69);
	MakeByte	(0X15C6A);
	MakeByte	(0X15C6B);
	MakeByte	(0X15C6C);
	MakeByte	(0X15C6D);
	MakeByte	(0X15C6E);
	MakeByte	(0X15C6F);
	MakeByte	(0X15C70);
	MakeByte	(0X15C71);
	MakeByte	(0X15C72);
	MakeByte	(0X15C73);
	MakeByte	(0X15C74);
	MakeByte	(0X15C75);
	MakeByte	(0X15C76);
	MakeByte	(0X15C77);
	MakeByte	(0X15C78);
	MakeByte	(0X15C79);
	MakeByte	(0X15C7A);
	MakeByte	(0X15C7B);
	MakeByte	(0X15C7C);
	MakeByte	(0X15C7D);
	MakeByte	(0X15C7E);
	MakeByte	(0X15C7F);
	MakeByte	(0X15C80);
	MakeByte	(0X15C81);
	MakeByte	(0X15C82);
	MakeByte	(0X15C83);
	MakeByte	(0X15C84);
	MakeByte	(0X15C85);
	MakeByte	(0X15C86);
	MakeByte	(0X15C87);
	MakeByte	(0X15C88);
	MakeByte	(0X15C89);
	MakeByte	(0X15C8A);
	MakeByte	(0X15C8B);
	MakeByte	(0X15C8C);
	MakeByte	(0X15C8D);
	MakeByte	(0X15C8E);
	MakeByte	(0X15C8F);
	MakeByte	(0X15C90);
	MakeByte	(0X15C91);
	MakeByte	(0X15C92);
	MakeByte	(0X15C93);
	MakeByte	(0X15C94);
	MakeByte	(0X15C95);
	MakeByte	(0X15C96);
	MakeByte	(0X15C97);
	MakeByte	(0X15C98);
	MakeByte	(0X15C99);
	MakeByte	(0X15C9A);
	MakeByte	(0X15C9B);
	MakeByte	(0X15C9C);
	MakeByte	(0X15C9D);
	MakeByte	(0X15C9E);
	MakeByte	(0X15C9F);
	MakeByte	(0X15CA0);
	MakeByte	(0X15CA1);
	MakeByte	(0X15CA2);
	MakeByte	(0X15CA3);
	MakeByte	(0X15CA4);
	MakeByte	(0X15CA5);
	MakeByte	(0X15CA6);
	MakeByte	(0X15CA7);
	MakeByte	(0X15CA8);
	MakeByte	(0X15CA9);
	MakeByte	(0X15CAA);
	MakeByte	(0X15CAB);
	MakeByte	(0X15CAC);
	MakeByte	(0X15CAD);
	MakeByte	(0X15CAE);
	MakeByte	(0X15CAF);
	MakeByte	(0X15CB0);
	MakeByte	(0X15CB1);
	MakeByte	(0X15CB2);
	MakeByte	(0X15CB3);
	MakeByte	(0X15CB4);
	MakeByte	(0X15CB5);
	MakeByte	(0X15CB6);
	MakeByte	(0X15CB7);
	MakeByte	(0X15CB8);
	MakeByte	(0X15CB9);
	MakeByte	(0X15CBA);
	MakeByte	(0X15CBB);
	MakeByte	(0X15CBC);
	MakeByte	(0X15CBD);
	MakeByte	(0X15CBE);
	MakeByte	(0X15CBF);
	MakeCode	(0X15CC0);
	MakeName	(0X15CC0,	"SetCarryBit");
	MakeCode	(0X15CC6);
	MakeName	(0X15CC6,	"TestD0");
	MakeCode	(0X15CCA);
	MakeCode	(0X15CE6);
	MakeCode	(0X15D02);
	MakeCode	(0X15D0E);
	MakeCode	(x=0X15D2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X15D34);
	OpHex		(x,	0);
	MakeCode	(0X15D5C);
	MakeCode	(x=0X15D60);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X15D66);
	OpHex		(x,	1);
	MakeCode	(0X15D7E);
	MakeCode	(0X15D8A);
	MakeCode	(x=0X15D96);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X15D9C);
	OpHex		(x,	0);
	MakeCode	(x=0X15DBC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X15DE2);
	MakeCode	(0X15E38);
	MakeCode	(0X15E76);
	MakeCode	(x=0X15EB8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X15EBA);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X15EBC);
	MakeCode	(0X15EFE);
	MakeCode	(0X15F0E);
	MakeCode	(0X15F1C);
	MakeCode	(x=0X15F20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X15F58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X15FAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X15FAE);
	MakeCode	(0X15FC2);
	MakeCode	(0X15FD2);
	MakeCode	(0X15FD6);
	MakeCode	(0X15FDA);
	MakeCode	(0X15FDE);
	MakeCode	(0X15FE2);
	MakeCode	(0X15FE6);
	MakeCode	(0X15FEA);
	MakeCode	(0X15FEE);
	MakeCode	(0X15FF2);
	MakeCode	(0X15FF6);
	MakeCode	(0X15FFA);
	MakeCode	(0X15FFE);
	MakeCode	(0X16002);
	MakeCode	(0X16006);
	MakeCode	(0X1600A);
	MakeCode	(0X1600E);
	MakeCode	(0X16012);
	MakeCode	(0X16016);
	MakeCode	(0X1601A);
	MakeCode	(0X1601E);
	MakeCode	(0X16022);
	MakeCode	(0X16026);
	MakeCode	(0X1602A);
	MakeCode	(0X1602E);
	MakeCode	(0X16032);
	MakeCode	(0X16036);
	MakeCode	(0X1603A);
	MakeCode	(0X1603E);
	MakeCode	(0X16042);
	MakeCode	(0X16046);
	MakeCode	(0X1604A);
	MakeCode	(0X1605E);
	MakeCode	(x=0X16068);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1608C);
	MakeCode	(0X16098);
	MakeCode	(x=0X160A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X160B0);
	MakeCode	(x=0X160BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X160C8);
	MakeCode	(0X160CC);
	MakeCode	(0X160D4);
	MakeCode	(0X160EE);
	MakeCode	(0X160F8);
	MakeCode	(0X16102);
	MakeCode	(0X16112);
	MakeCode	(0X16122);
	MakeCode	(0X1612C);
	MakeCode	(0X16146);
	MakeCode	(0X16150);
	MakeCode	(0X1618E);
	MakeCode	(0X1619C);
	MakeCode	(0X161C8);
	MakeCode	(0X16204);
	MakeCode	(0X1621C);
	MakeCode	(0X16230);
	MakeCode	(0X16250);
	MakeCode	(0X1627C);
	MakeCode	(0X16284);
	MakeCode	(0X1628C);
	MakeCode	(0X16298);
	MakeCode	(0X162A2);
	MakeCode	(0X162AC);
	MakeCode	(0X162BC);
	MakeCode	(0X162E0);
	MakeCode	(x=0X162E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X16300);
	MakeCode	(x=0X16306);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1631A);
	MakeCode	(0X16324);
	MakeCode	(x=0X1634C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1638A);
	MakeCode	(x=0X1638E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16394);
	OpHex		(x,	1);
	MakeCode	(0X163A2);
	MakeCode	(x=0X163AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X163B4);
	MakeCode	(0X163BE);
	MakeCode	(x=0X163C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X16432);
	MakeCode	(0X1643E);
	MakeCode	(0X1644A);
	MakeCode	(0X16456);
	MakeCode	(0X16460);
	MakeCode	(x=0X1646A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X164D0);
	MakeCode	(0X164D6);
	MakeCode	(0X164DC);
	MakeCode	(0X164EC);
	MakeCode	(0X1652A);
	MakeCode	(0X16554);
	MakeCode	(0X1655C);
	MakeCode	(0X16560);
	MakeCode	(x=0X16564);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1656A);
	MakeCode	(x=0X1656E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X16584);
	MakeCode	(0X1658A);
	MakeByte	(0X16594);
	MakeByte	(0X16595);
	MakeByte	(0X16596);
	MakeByte	(0X16597);
	MakeByte	(0X16598);
	MakeByte	(0X16599);
	MakeByte	(0X1659A);
	MakeByte	(0X1659B);
	MakeByte	(0X1659C);
	MakeByte	(0X1659D);
	MakeByte	(0X1659E);
	MakeByte	(0X1659F);
	MakeByte	(0X165A0);
	MakeByte	(0X165A1);
	MakeByte	(0X165A2);
	MakeByte	(0X165A3);
	MakeByte	(0X165A4);
	MakeByte	(0X165A5);
	MakeByte	(0X165A6);
	MakeByte	(0X165A7);
	MakeByte	(0X165A8);
	MakeByte	(0X165A9);
	MakeByte	(0X165AA);
	MakeByte	(0X165AB);
	MakeByte	(0X165AC);
	MakeByte	(0X165AD);
	MakeByte	(0X165AE);
	MakeByte	(0X165AF);
	MakeByte	(0X165B0);
	MakeByte	(0X165B1);
	MakeByte	(0X165B2);
	MakeByte	(0X165B3);
	MakeByte	(0X165B4);
	MakeByte	(0X165B5);
	MakeByte	(0X165B6);
	MakeByte	(0X165B7);
	MakeByte	(0X165B8);
	MakeByte	(0X165B9);
	MakeByte	(0X165BA);
	MakeByte	(0X165BB);
	MakeCode	(x=0X165BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X165EC);
	MakeCode	(0X165FC);
	MakeCode	(0X16610);
	MakeCode	(0X16628);
	MakeDword	(x=0X16632);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16636);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1663A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1663E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16642);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16646);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1664A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1664E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16652);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16656);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1665A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1665E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16662);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16666);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1666A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1666E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16672);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16676);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1667A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1667E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16682);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16686);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1668A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1668E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16692);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16696);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1669A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1669E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X166E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X166E6);
	MakeByte	(0X166E8);
	MakeByte	(0X166E9);
	MakeWord	(0X166EA);
	MakeByte	(0X166EC);
	MakeByte	(0X166ED);
	MakeWord	(0X166EE);
	MakeByte	(0X166F0);
	MakeByte	(0X166F1);
	MakeByte	(0X166F2);
	MakeByte	(0X166F3);
	MakeWord	(0X166F4);
	MakeByte	(0X166F6);
	MakeByte	(0X166F7);
	MakeByte	(0X166F8);
	MakeByte	(0X166F9);
	MakeWord	(0X166FA);
	MakeByte	(0X166FC);
	MakeByte	(0X166FD);
	MakeByte	(0X166FE);
	MakeByte	(0X166FF);
	MakeWord	(0X16700);
	MakeByte	(0X16702);
	MakeByte	(0X16703);
	MakeByte	(0X16704);
	MakeByte	(0X16705);
	MakeByte	(0X16706);
	MakeByte	(0X16707);
	MakeWord	(0X16708);
	MakeByte	(0X1670A);
	MakeByte	(0X1670B);
	MakeByte	(0X1670C);
	MakeByte	(0X1670D);
	MakeByte	(0X1670E);
	MakeByte	(0X1670F);
	MakeByte	(0X16710);
	MakeByte	(0X16711);
	MakeByte	(0X16712);
	MakeByte	(0X16713);
	MakeByte	(0X16714);
	MakeByte	(0X16715);
	MakeWord	(0X16716);
	MakeByte	(0X16718);
	MakeByte	(0X16719);
	MakeByte	(0X1671A);
	MakeByte	(0X1671B);
	MakeByte	(0X1671C);
	MakeByte	(0X1671D);
	MakeByte	(0X1671E);
	MakeByte	(0X1671F);
	MakeByte	(0X16720);
	MakeByte	(0X16721);
	MakeWord	(0X16722);
	MakeByte	(0X16724);
	MakeByte	(0X16725);
	MakeByte	(0X16726);
	MakeByte	(0X16727);
	MakeWord	(0X16728);
	MakeByte	(0X1672A);
	MakeByte	(0X1672B);
	MakeByte	(0X1672C);
	MakeByte	(0X1672D);
	MakeByte	(0X1672E);
	MakeByte	(0X1672F);
	MakeByte	(0X16730);
	MakeByte	(0X16731);
	MakeByte	(0X16732);
	MakeByte	(0X16733);
	MakeByte	(0X16734);
	MakeByte	(0X16735);
	MakeByte	(0X16736);
	MakeByte	(0X16737);
	MakeByte	(0X16738);
	MakeByte	(0X16739);
	MakeByte	(0X1673A);
	MakeByte	(0X1673B);
	MakeByte	(0X1673C);
	MakeByte	(0X1673D);
	MakeByte	(0X1673E);
	MakeByte	(0X1673F);
	MakeByte	(0X16740);
	MakeByte	(0X16741);
	MakeByte	(0X16742);
	MakeByte	(0X16743);
	MakeByte	(0X16744);
	MakeByte	(0X16745);
	MakeWord	(0X16746);
	MakeByte	(0X16748);
	MakeByte	(0X16749);
	MakeByte	(0X1674A);
	MakeByte	(0X1674B);
	MakeByte	(0X1674C);
	MakeByte	(0X1674D);
	MakeWord	(0X1674E);
	MakeByte	(0X16750);
	MakeByte	(0X16751);
	MakeWord	(0X16752);
	MakeByte	(0X16754);
	MakeByte	(0X16755);
	MakeByte	(0X16756);
	MakeByte	(0X16757);
	MakeWord	(0X16758);
	MakeByte	(0X1675A);
	MakeByte	(0X1675B);
	MakeByte	(0X1675C);
	MakeByte	(0X1675D);
	MakeWord	(0X1675E);
	MakeByte	(0X16760);
	MakeByte	(0X16761);
	MakeByte	(0X16762);
	MakeByte	(0X16763);
	MakeWord	(0X16764);
	MakeByte	(0X16766);
	MakeByte	(0X16767);
	MakeByte	(0X16768);
	MakeByte	(0X16769);
	MakeWord	(0X1676A);
	MakeByte	(0X1676C);
	MakeByte	(0X1676D);
	MakeByte	(0X1676E);
	MakeByte	(0X1676F);
	MakeWord	(0X16770);
	MakeByte	(0X16772);
	MakeByte	(0X16773);
	MakeByte	(0X16774);
	MakeByte	(0X16775);
	MakeWord	(0X16776);
	MakeByte	(0X16778);
	MakeByte	(0X16779);
	MakeWord	(0X1677A);
	MakeByte	(0X1677C);
	MakeByte	(0X1677D);
	MakeByte	(0X1677E);
	MakeByte	(0X1677F);
	MakeByte	(0X16780);
	MakeByte	(0X16781);
	MakeWord	(0X16782);
	MakeByte	(0X16784);
	MakeByte	(0X16785);
	MakeByte	(0X16786);
	MakeByte	(0X16787);
	MakeByte	(0X16788);
	MakeByte	(0X16789);
	MakeByte	(0X1678A);
	MakeByte	(0X1678B);
	MakeWord	(0X1678C);
	MakeByte	(0X1678E);
	MakeByte	(0X1678F);
	MakeByte	(0X16790);
	MakeByte	(0X16791);
	MakeByte	(0X16792);
	MakeByte	(0X16793);
	MakeWord	(0X16794);
	MakeByte	(0X16796);
	MakeByte	(0X16797);
	MakeByte	(0X16798);
	MakeByte	(0X16799);
	MakeWord	(0X1679A);
	MakeByte	(0X1679C);
	MakeByte	(0X1679D);
	MakeByte	(0X1679E);
	MakeByte	(0X1679F);
	MakeWord	(0X167A0);
	MakeByte	(0X167A2);
	MakeByte	(0X167A3);
	MakeByte	(0X167A4);
	MakeByte	(0X167A5);
	MakeWord	(0X167A6);
	MakeByte	(0X167A8);
	MakeByte	(0X167A9);
	MakeByte	(0X167AA);
	MakeByte	(0X167AB);
	MakeByte	(0X167AC);
	MakeByte	(0X167AD);
	MakeByte	(0X167AE);
	MakeByte	(0X167AF);
	MakeByte	(0X167B0);
	MakeByte	(0X167B1);
	MakeByte	(0X167B2);
	MakeByte	(0X167B3);
	MakeWord	(0X167B4);
	MakeByte	(0X167B6);
	MakeByte	(0X167B7);
	MakeWord	(0X167B8);
	MakeByte	(0X167BA);
	MakeByte	(0X167BB);
	MakeByte	(0X167BC);
	MakeByte	(0X167BD);
	MakeWord	(0X167BE);
	MakeByte	(0X167C0);
	MakeByte	(0X167C1);
	MakeWord	(0X167C2);
	MakeByte	(0X167C4);
	MakeByte	(0X167C5);
	MakeByte	(0X167C6);
	MakeByte	(0X167C7);
	MakeByte	(0X167C8);
	MakeByte	(0X167C9);
	MakeByte	(0X167CA);
	MakeByte	(0X167CB);
	MakeWord	(0X167CC);
	MakeByte	(0X167CE);
	MakeByte	(0X167CF);
	MakeByte	(0X167D0);
	MakeByte	(0X167D1);
	MakeWord	(0X167D2);
	MakeByte	(0X167D4);
	MakeByte	(0X167D5);
	MakeByte	(0X167D6);
	MakeByte	(0X167D7);
	MakeByte	(0X167D8);
	MakeByte	(0X167D9);
	MakeWord	(0X167DA);
	MakeByte	(0X167DC);
	MakeByte	(0X167DD);
	MakeWord	(0X167DE);
	MakeByte	(0X167E0);
	MakeByte	(0X167E1);
	MakeByte	(0X167E2);
	MakeByte	(0X167E3);
	MakeByte	(0X167E4);
	MakeByte	(0X167E5);
	MakeByte	(0X167E6);
	MakeByte	(0X167E7);
	MakeByte	(0X167E8);
	MakeByte	(0X167E9);
	MakeByte	(0X167EA);
	MakeByte	(0X167EB);
	MakeWord	(0X167EC);
	MakeByte	(0X167EE);
	MakeByte	(0X167EF);
	MakeByte	(0X167F0);
	MakeByte	(0X167F1);
	MakeWord	(0X167F2);
	MakeByte	(0X167F4);
	MakeByte	(0X167F5);
	MakeByte	(0X167F6);
	MakeByte	(0X167F7);
	MakeByte	(0X167F8);
	MakeByte	(0X167F9);
	MakeByte	(0X167FA);
	MakeByte	(0X167FB);
	MakeByte	(0X167FC);
	MakeByte	(0X167FD);
	MakeWord	(0X167FE);
	MakeByte	(0X16800);
	MakeByte	(0X16801);
	MakeByte	(0X16802);
	MakeByte	(0X16803);
	MakeByte	(0X16804);
	MakeByte	(0X16805);
	MakeByte	(0X16806);
	MakeByte	(0X16807);
	MakeByte	(0X16808);
	MakeByte	(0X16809);
	MakeByte	(0X1680A);
	MakeByte	(0X1680B);
	MakeByte	(0X1680C);
	MakeByte	(0X1680D);
	MakeByte	(0X1680E);
	MakeByte	(0X1680F);
	MakeByte	(0X16810);
	MakeByte	(0X16811);
	MakeByte	(0X16812);
	MakeByte	(0X16813);
	MakeWord	(0X16814);
	MakeByte	(0X16816);
	MakeByte	(0X16817);
	MakeByte	(0X16818);
	MakeByte	(0X16819);
	MakeByte	(0X1681A);
	MakeByte	(0X1681B);
	MakeWord	(0X1681C);
	MakeByte	(0X1681E);
	MakeByte	(0X1681F);
	MakeByte	(0X16820);
	MakeByte	(0X16821);
	MakeWord	(0X16822);
	MakeByte	(0X16824);
	MakeByte	(0X16825);
	MakeByte	(0X16826);
	MakeByte	(0X16827);
	MakeByte	(0X16828);
	MakeByte	(0X16829);
	MakeByte	(0X1682A);
	MakeByte	(0X1682B);
	MakeByte	(0X1682C);
	MakeByte	(0X1682D);
	MakeByte	(0X1682E);
	MakeByte	(0X1682F);
	MakeByte	(0X16830);
	MakeByte	(0X16831);
	MakeByte	(0X16832);
	MakeByte	(0X16833);
	MakeByte	(0X16834);
	MakeByte	(0X16835);
	MakeWord	(0X16836);
	MakeByte	(0X16838);
	MakeByte	(0X16839);
	MakeByte	(0X1683A);
	MakeByte	(0X1683B);
	MakeByte	(0X1683C);
	MakeByte	(0X1683D);
	MakeWord	(0X1683E);
	MakeByte	(0X16840);
	MakeByte	(0X16841);
	MakeByte	(0X16842);
	MakeByte	(0X16843);
	MakeByte	(0X16844);
	MakeByte	(0X16845);
	MakeByte	(0X16846);
	MakeByte	(0X16847);
	MakeWord	(0X16848);
	MakeByte	(0X1684A);
	MakeByte	(0X1684B);
	MakeWord	(0X1684C);
	MakeByte	(0X1684E);
	MakeByte	(0X1684F);
	MakeByte	(0X16850);
	MakeByte	(0X16851);
	MakeWord	(0X16852);
	MakeByte	(0X16854);
	MakeByte	(0X16855);
	MakeByte	(0X16856);
	MakeByte	(0X16857);
	MakeByte	(0X16858);
	MakeByte	(0X16859);
	MakeByte	(0X1685A);
	MakeByte	(0X1685B);
	MakeByte	(0X1685C);
	MakeByte	(0X1685D);
	MakeByte	(0X1685E);
	MakeByte	(0X1685F);
	MakeCode	(0X16860);
	MakeName	(0X16860,	"DisplayMenuMessage");
	MakeCode	(x=0X16864);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16870);
	OpStkvar	(x,	1);
	MakeCode	(0X1687A);
	MakeCode	(x=0X16886);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16892);
	OpStkvar	(x,	1);
	MakeCode	(0X1689C);
	MakeCode	(x=0X168A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X168A8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X168B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X168B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X168C8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X168D8);
	OpStkvar	(x,	0);
	MakeName	(0X168D8,	"DisplayPortraitInMenu");
	MakeCode	(x=0X168DE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X168F4);
	OpStkvar	(x,	0);
	ExtLinA		(0X168FE,	0,	"        module");
	MakeCode	(0X168FE);
	MakeName	(0X168FE,	"ExecuteShopMenu");
	MakeCode	(x=0X16902);
	OpSign		(x,	1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X16906);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1690A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1690E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16912);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1691A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1691E);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16924,	"\"Welcome! Do come in! We've[Line]got the best, you know. Take[Line]your time, take your time![Wait2]\"");
	MakeCode	(x=0X16932);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16942,	"Buy");
	MakeCode	(x=0X16942);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16950,	"\"Sorry, no deals today.[Wait2]\"");
	MakeCode	(x=0X1695C);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16962,	"\"I have some great stuff here.[Line]See anything you like?\"");
	MakeRptCmt	(0X1696C,	"\"What would you like?\"");
	MakeCode	(0X1696C);
	MakeRptCmt	(0X16974,	"display shop inventory window");
	MakeRptCmt	(0X16978,	"branch if no item selected (i.e., canceling out of menu)");
	MakeRptCmt	(0X1697C,	"D1 = selected item index");
	MakeCode	(x=0X1697E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16982);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1698C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16992);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X16996,	"\"[Item], right?[Line]That comes to [Num] coins.[Line]OK?\"");
	MakeRptCmt	(0X1699E,	"display yes/no choice box");
	MakeRptCmt	(0X169A2,	"branch if yes selected");
	MakeRptCmt	(0X169A6,	"\"Rats! We almost had a deal.[Wait2]\"");
	MakeRptCmt	(0X169B2,	"\"Want anything else?\"");
	MakeCode	(0X169C4);
	MakeRptCmt	(0X169C6,	"D0 = item price");
	MakeCode	(x=0X169C6);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X169CE,	"branch if enough gold");
	MakeRptCmt	(0X169D0,	"\"You don't have enough money[Line]to buy that. Sorry.[Wait2]\"");
	MakeRptCmt	(0X169DA,	"\"Who do you wish to have it?\"");
	MakeCode	(0X169DA);
	MakeRptCmt	(0X169E2,	"load \"Eq\" VDP tile entry");
	MakeCode	(x=0X169E2);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X169EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X169F4,	"D2 = selected item index");
	MakeCode	(x=0X169F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X169F8);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X16A00);
	OpEnumEx		(x,	0,	GetEnum("ForceMemberEntry"),0);
	MakeRptCmt	(0X16A0A,	"branch if item can be equipped");
	MakeCode	(0X16A10);
	MakeCode	(x=0X16A18);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16A24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16A28);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X16A2C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16A3E);
	OpStkvar	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X16A44,	"\"[Name] can't use this. Do you[Line]still want it?\"");
	MakeCode	(x=0X16A54);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16A58);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16A66);
	OpStkvar	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X16A6C,	"\"[Name]'s hands are full. How[Line]about someone else?\"");
	MakeCode	(0X16A80);
	MakeCode	(x=0X16A88);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16A96,	"\"Here you go! Use it in good[Line]health, my friend.[Wait2]\"");
	MakeCode	(0X16AA2);
	MakeCode	(x=0X16AA6);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16AAE,	"\"Repair whose item?\"");
	MakeCode	(0X16AAE);
	MakeCode	(x=0X16ABE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16AC2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16AD0);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X16AD4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16ADC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16AEA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16AEE);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16AFA,	"\"Who are you trying to fool?[Line]That item's not damaged.[Wait2]\"");
	MakeRptCmt	(0X16B02,	"\"Anything else?\"");
	MakeCode	(x=0X16B18);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16B1E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X16B26,	"\"That'll cost [Num] coins. OK?\"");
	MakeCode	(0X16B38);
	MakeCode	(x=0X16B3A);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16B44,	"\"I'd like to repair it, but[Line]you seem to be a bit low on[Line]money. Sorry.[Wait2]\"");
	MakeCode	(x=0X16B4E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16B58);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X16B5E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16B62);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16B66);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeRptCmt	(0X16B6E,	"\"Whoa! I don't repair cursed[Line]items! Nope, not me. I'm[Line]nobody's fool![Wait2]\"");
	MakeRptCmt	(0X16B78,	"\"OK. Just a minute.[Wait2]\"");
	MakeCode	(0X16B78);
	MakeByte	(0X16B80);
	MakeArray	(0X16B80,	0X4);
	MakeCode	(0X16B84);
	MakeByte	(0X16B8C);
	MakeArray	(0X16B8C,	0X4);
	MakeCode	(0X16B90);
	MakeByte	(0X16B98);
	MakeArray	(0X16B98,	0X4);
	MakeCode	(0X16B9C);
	MakeByte	(0X16BA4);
	MakeArray	(0X16BA4,	0X4);
	MakeCode	(0X16BA8);
	MakeByte	(0X16BB0);
	MakeArray	(0X16BB0,	0X4);
	MakeCode	(0X16BB4);
	MakeByte	(0X16BBC);
	MakeArray	(0X16BBC,	0X4);
	MakeCode	(x=0X16BC0);
	OpDecimal	(x,	0);
	MakeByte	(0X16BC8);
	MakeArray	(0X16BC8,	0X4);
	MakeCode	(0X16BCC);
	MakeByte	(0X16BD4);
	MakeArray	(0X16BD4,	0X4);
	MakeCode	(0X16BD8);
	MakeRptCmt	(0X16BE0,	"\"I have it right here. It's as[Line]good as new! Try not to[Line]damage it again, OK?[Wait2]\"");
	MakeCode	(x=0X16BEA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16BF8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16BFC);
	OpStkvar	(x,	0);
	MakeCode	(0X16C0A);
	MakeRptCmt	(0X16C0E,	"\"Let's see. Who wants to sell,[Line]and which item?\"");
	ExtLinB		(0X16C1A,	0,	"                ");
	MakeCode	(x=0X16C1E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16C22);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16C2C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16C30);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X16C34);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16C3C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16C42);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X16C4A);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X16C52);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X16C5A);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X16C62);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X16C6A);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X16C80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16C84);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X16C8E,	"\"I'll give you [Num] coins[Line]for it. OK?\"");
	MakeRptCmt	(0X16C98,	"\"Say, that's nice! How about[Line][Num] coins for it?\"");
	MakeCode	(0X16C98);
	MakeRptCmt	(0X16CAC,	"\"Sorry we couldn't cut a deal.[Wait2]\"");
	MakeRptCmt	(0X16CB8,	"\"Anything else to sell?\"");
	MakeCode	(x=0X16CCC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16CD6);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X16CDC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16CE0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16CE4);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeRptCmt	(0X16CEC,	"\"Hey, wait a minute. I don't[Line]deal with cursed items! It's[Line]bad luck, you know.[Wait2]\"");
	MakeCode	(x=0X16CF6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16CFA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16D04);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16D10);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16D1E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16D28);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X16D2E);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16D34,	"\"Thanks, I don't sell this[Line]type of item, but I know[Line]someone who does.[Wait2]\"");
	MakeCode	(0X16D40);
	MakeCode	(x=0X16D42);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16D48,	"\"Thanks, I don't sell this[Line]type of item, but I know[Line]someone who does.[Wait2]\"");
	MakeRptCmt	(0X16D54,	"\"It's mine, all mine![Wait2]\"");
	MakeCode	(0X16D54);
	MakeRptCmt	(0X16D60,	"\"I'd like to help, but we[Line]don't deal with these.[Wait2]\"");
	MakeCode	(0X16D60);
	MakeCode	(0X16D6C);
	MakeRptCmt	(0X16D70,	"\"Anything else?\"");
	MakeRptCmt	(0X16D80,	"\"What do you need, then?[Wait2]\"");
	MakeRptCmt	(0X16D8C,	"\"Thank you. Do come again![Wait2]\"");
	MakeCode	(0X16D8C);
	MakeCode	(x=0X16D9A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16D9E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16DA2);
	OpStkvar	(x,	0);
	ExtLinB		(0X16DAC,	0,	"        modend");
	MakeCode	(0X16DAE);
	MakeName	(0X16DAE,	"CheckGold");
	MakeRptCmt	(0X16DB4,	"D2 = price");
	MakeCode	(0X16DC4);
	MakeCode	(0X16DCE);
	MakeName	(0X16DCE,	"OpenGoldWindowInMenu");
	MakeCode	(x=0X16DD0);
	OpStkvar	(x,	0);
	MakeCode	(0X16DE2);
	MakeCode	(x=0X16DEC);
	OpStkvar	(x,	0);
	MakeCode	(0X16DF4);
	MakeName	(0X16DF4,	"CloseGoldWindowInMenu");
	MakeCode	(x=0X16DF6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16DFC);
	OpStkvar	(x,	0);
	MakeCode	(0X16E12);
	MakeCode	(0X16E30);
	MakeCode	(0X16E48);
	MakeCode	(0X16E66);
	MakeCode	(0X16E7E);
	MakeName	(0X16E7E,	"DisplayYesNoPromptInMenu");
	MakeCode	(0X16E92);
	MakeCode	(x=0X16EA6);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X16EAE);
	OpEnumEx		(x,	0,	GetEnum("Menus"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X16EC6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X16ED4);
	MakeName	(0X16ED4,	"IsSellingRareItem");
	MakeCode	(x=0X16ED8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16EE2);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X16EEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16EF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16EF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16EFE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16F02);
	OpStkvar	(x,	0);
	MakeCode	(0X16F18);
	MakeCode	(0X16F1C);
	MakeName	(0X16F1C,	"LoadShopInventory");
	MakeCode	(x=0X16F1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16F24);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16F28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16F30);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16F34);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X16F3E,	"shop inventory");
	MakeCode	(x=0X16F3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16F50);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X16F56);
	MakeCode	(x=0X16F5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X16F62);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeName	(0X16F62,	"rpt_ShopInventories");
	MakeWord	(x=0X16F64);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F66);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F68);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F6A);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F6C);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F6E);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F70);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F72);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F74);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F76);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F78);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F7A);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F7C);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F7E);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F80);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F82);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F84);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F86);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F88);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F8A);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F8C);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeWord	(x=0X16F8E);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	ExtLinB		(0X16F90,	0,	"                ");
	MakeWord	(x=0X16F90);
	OpOff		(x,	0,	0X16F92);
	OpOff		(x,	128,	0X16F92);
	OpOff		(x,	1,	0X16F92);
	OpOff		(x,	129,	0X16F92);
	MakeByte	(x=0X16F92);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16F92,	"ShopInventory00");
	MakeByte	(x=0X16F93);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16F94);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16F95);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16F96);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16F97);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16F98,	0,	"                ");
	MakeByte	(0X16F98);
	MakeByte	(x=0X16F99);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16F99,	"ShopInventory01");
	MakeByte	(x=0X16F9A);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16F9B);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16F9C);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16F9D,	0,	"                ");
	MakeByte	(0X16F9D);
	MakeByte	(x=0X16F9E);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16F9E,	"ShopInventory02");
	MakeByte	(x=0X16F9F);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FA0);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FA1);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FA2);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FA3);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FA4,	0,	"                ");
	MakeByte	(0X16FA4);
	MakeByte	(x=0X16FA5);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FA5,	"ShopInventory03");
	MakeByte	(x=0X16FA6);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FA7);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FA8);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FA9,	0,	"                ");
	MakeByte	(0X16FA9);
	MakeByte	(x=0X16FAA);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FAA,	"ShopInventory04");
	MakeByte	(x=0X16FAB);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FAC);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FAD);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FAE);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FAF);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FB0);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FB1,	0,	"                ");
	MakeByte	(0X16FB1);
	MakeByte	(x=0X16FB2);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeName	(0X16FB2,	"ShopInventory05");
	MakeByte	(x=0X16FB3);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FB4);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FB5);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FB6);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FB7,	0,	"                ");
	MakeByte	(0X16FB7);
	MakeByte	(x=0X16FB8);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FB8,	"ShopInventory06");
	ExtLinB		(0X16FB9,	0,	"                ");
	MakeByte	(0X16FB9);
	MakeByte	(x=0X16FBA);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FBA,	"ShopInventory07");
	ExtLinB		(0X16FBB,	0,	"                ");
	MakeByte	(0X16FBB);
	MakeByte	(x=0X16FBC);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FBC,	"ShopInventory08");
	MakeByte	(x=0X16FBD);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FBE);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FBF);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FC0);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FC1);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FC2);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FC3,	0,	"                ");
	MakeByte	(0X16FC3);
	MakeByte	(x=0X16FC4);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FC4,	"ShopInventory09");
	MakeByte	(x=0X16FC5);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FC6);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FC7);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FC8);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FC9,	0,	"                ");
	MakeByte	(0X16FC9);
	MakeByte	(x=0X16FCA);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FCA,	"ShopInventory10");
	MakeByte	(x=0X16FCB);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FCC);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FCD);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FCE);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FCF);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FD0);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FD1,	0,	"                ");
	MakeByte	(0X16FD1);
	MakeByte	(x=0X16FD2);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FD2,	"ShopInventory11");
	MakeByte	(x=0X16FD3);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FD4);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FD5);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FD6);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FD7,	0,	"                ");
	MakeByte	(0X16FD7);
	MakeByte	(x=0X16FD8);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FD8,	"ShopInventory12");
	MakeByte	(x=0X16FD9);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FDA);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FDB);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FDC);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FDD);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FDE);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FDF,	0,	"                ");
	MakeByte	(0X16FDF);
	MakeByte	(x=0X16FE0);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FE0,	"ShopInventory13");
	MakeByte	(x=0X16FE1);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FE2);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FE3);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FE4);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FE5,	0,	"                ");
	MakeByte	(0X16FE5);
	MakeByte	(x=0X16FE6);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FE6,	"ShopInventory14");
	MakeByte	(x=0X16FE7);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FE8);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FE9);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FEA);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FEB);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FEC);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FED,	0,	"                ");
	MakeByte	(0X16FED);
	MakeByte	(x=0X16FEE);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FEE,	"ShopInventory15");
	MakeByte	(x=0X16FEF);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FF0);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FF1);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FF2);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FF3,	0,	"                ");
	MakeByte	(0X16FF3);
	MakeByte	(x=0X16FF4);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FF4,	"ShopInventory16");
	MakeByte	(x=0X16FF5);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FF6);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FF7);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FF8);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FF9);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X16FFA,	0,	"                ");
	MakeByte	(0X16FFA);
	MakeByte	(x=0X16FFB);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X16FFB,	"ShopInventory17");
	MakeByte	(x=0X16FFC);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FFD);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FFE);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X16FFF);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X17000,	0,	"                ");
	MakeByte	(0X17000);
	MakeByte	(x=0X17001);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X17001,	"ShopInventory18");
	MakeByte	(x=0X17002);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17003);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17004);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17005);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17006);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X17007,	0,	"                ");
	MakeByte	(0X17007);
	MakeByte	(x=0X17008);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X17008,	"ShopInventory19");
	MakeByte	(x=0X17009);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X1700A);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X1700B);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X1700C);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X1700D,	0,	"                ");
	MakeByte	(0X1700D);
	MakeByte	(x=0X1700E);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X1700E,	"ShopInventory20");
	MakeByte	(x=0X1700F);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17010);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17011);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17012);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17013);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X17014,	0,	"                ");
	MakeByte	(0X17014);
	MakeByte	(x=0X17015);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X17015,	"ShopInventory21");
	MakeByte	(x=0X17016);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17017);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17018);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17019);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X1701A,	0,	"                ");
	MakeByte	(0X1701A);
	MakeByte	(x=0X1701B);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X1701B,	"ShopInventory22");
	MakeByte	(x=0X1701C);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X1701D);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X1701E);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X1701F);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17020);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	ExtLinB		(0X17021,	0,	"                ");
	MakeByte	(0X17021);
	MakeByte	(x=0X17022);
	OpEnumEx		(x,	0,	GetEnum("ShopTypes"),0);
	MakeName	(0X17022,	"ShopInventory23");
	MakeByte	(x=0X17023);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17024);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17025);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X17026);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(0X17027);
	ExtLinA		(0X17028,	0,	"                module");
	MakeCode	(0X17028);
	MakeName	(0X17028,	"ExecuteChurchMenu");
	MakeCode	(x=0X1702C);
	OpSign		(x,	1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X17030);
	OpStkvar	(x,	1);
	MakeCode	(x=0X17034);
	OpStkvar	(x,	1);
	MakeCode	(x=0X17038);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1703C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17040);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X17046,	"\"Welcome, [Hero]![Line]I've been expecting you.[Wait2][Line]How can I help you[Line]and the Shining Force?[Wait2]\"");
	MakeCode	(x=0X17054);
	OpStkvar	(x,	0);
	ExtLinB		(0X17060,	0,	"                ");
	ExtLinA		(0X17064,	0,	"                ; Save action");
	MakeRptCmt	(0X1706A,	"\"Shall I make a record of your[Line]adventures thus far?\"");
	MakeRptCmt	(0X1707A,	"\"Remember that I'm always[Line]willing to record your deeds.[Wait2]\"");
	MakeCode	(0X17086);
	MakeCode	(x=0X1708A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X170A4);
	MakeArray	(0X170A4,	0X4);
	MakeCode	(x=0X170A8);
	OpEnumEx		(x,	0,	GetEnum("SoundCommands"),0);
	MakeRptCmt	(0X170B2,	"\"There, my record of your[Line]exploits is complete.[Wait2]\"");
	MakeRptCmt	(0X170BA,	"\"Will you continue your[Line]journey?\"");
	MakeRptCmt	(0X170CA,	"\"Yes, you should rest before[Line]continuing. Remember, a tired[Line]warrior is soon a dead one![Wait2]\"");
	MakeByte	(0X170D6);
	MakeArray	(0X170D6,	0X4);
	MakeCode	(0X170DA);
	ExtLinB		(0X170E6,	0,	"                ");
	MakeCode	(0X170E6);
	ExtLinA		(0X170EA,	0,	"                ; Cure action");
	MakeCode	(x=0X170F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X170F4,	"\"Well, let's just see who[Line]needs my help.[Wait2]\"");
	MakeCode	(x=0X170FC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17100);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17104);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1710C);
	OpEnumEx		(x,	0,	GetEnum("ForceMemberEntry"),0);
	MakeCode	(x=0X17110);
	OpStkvar	(x,	1);
	ExtLinA		(0X17114,	0,	"                ");
	ExtLinA		(0X17114,	1,	"                ; Is poisoned?");
	MakeCode	(x=0X17114);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1711E);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X17126);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1712A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1712E);
	OpStkvar	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X17134,	"\"Oh, my![Line][Name] is poisoned![Wait2]\"");
	MakeCode	(x=0X1713C);
	OpEnumEx		(x,	0,	GetEnum("MenuActions"),0);
	MakeCode	(x=0X1713E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X17142,	"\"I can heal [Name],[Line]but it'll cost [Num] coins.[Line]Agreed?\"");
	MakeRptCmt	(0X17156,	"\"Remember that I'm always[Line]willing to record your deeds.[Wait2]\"");
	MakeCode	(x=0X17162);
	OpEnumEx		(x,	0,	GetEnum("MenuActions"),0);
	MakeRptCmt	(0X1716C,	"\"Sorry. I'm afraid I can't heal[Line][Name]. Union rules,[Line]you know.[Wait2]\"");
	MakeCode	(0X17178);
	MakeCode	(x=0X1717A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1717E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X17188);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X17192);
	OpEnumEx		(x,	0,	GetEnum("MenuActions"),0);
	MakeByte	(0X1719E);
	MakeArray	(0X1719E,	0X4);
	MakeCode	(x=0X171A2);
	OpEnumEx		(x,	0,	GetEnum("SoundCommands"),0);
	MakeRptCmt	(0X171AC,	"\"Done. [Name] is cured![Wait2]\"");
	MakeCode	(x=0X171B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X171BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X171BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X171C6);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X171CC,	"\"Hmmm...no one's poisoned.[Wait2]\"");
	MakeCode	(x=0X171D4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X171D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X171DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X171E4);
	OpEnumEx		(x,	0,	GetEnum("ForceMemberEntry"),0);
	MakeCode	(x=0X171E8);
	OpStkvar	(x,	1);
	ExtLinA		(0X171EC,	0,	"                ");
	ExtLinA		(0X171EC,	1,	"                ; Is cursed?");
	MakeCode	(x=0X171F4);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X171FC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17200);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17204);
	OpStkvar	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X1720A,	"\"Oh, my![Line][Name] is cursed![Wait2]\"");
	MakeCode	(x=0X17212);
	OpEnumEx		(x,	0,	GetEnum("MenuActions"),0);
	MakeCode	(x=0X17214);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X17218,	"\"I can heal [Name],[Line]but it'll cost [Num] coins.[Line]Agreed?\"");
	MakeRptCmt	(0X1722C,	"\"Remember that I'm always[Line]willing to record your deeds.[Wait2]\"");
	MakeCode	(x=0X17238);
	OpEnumEx		(x,	0,	GetEnum("MenuActions"),0);
	MakeRptCmt	(0X17242,	"\"Sorry. I'm afraid I can't heal[Line][Name]. Union rules,[Line]you know.[Wait2]\"");
	MakeCode	(0X1724E);
	MakeCode	(x=0X17250);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17254);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1725E);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X17268);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X1727C);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X17288);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeCode	(x=0X1728E);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X172A2);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X172AE);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeCode	(x=0X172BA);
	OpEnumEx		(x,	0,	GetEnum("MenuActions"),0);
	MakeByte	(0X172C6);
	MakeArray	(0X172C6,	0X4);
	MakeCode	(x=0X172CA);
	OpEnumEx		(x,	0,	GetEnum("SoundCommands"),0);
	MakeRptCmt	(0X172D4,	"\"Done. [Name] is cured![Wait2]\"");
	MakeCode	(x=0X172DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X172E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X172E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X172EE);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X172F4,	"\"No one's cursed![Wait2]\"");
	ExtLinB		(0X17300,	0,	"                ");
	MakeCode	(0X17300);
	ExtLinA		(0X17304,	0,	"                ; Revive action");
	MakeCode	(x=0X1730A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1730E,	"\"Well, let's just see who[Line]needs my help.[Wait2]\"");
	MakeCode	(x=0X17316);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1731A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1731E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17326);
	OpStkvar	(x,	1);
	MakeCode	(x=0X17336);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1733A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1733E);
	OpStkvar	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X17344,	"\"Oh, my! [Name] is in bad[Line]shape. I'll see if I can help.[Wait2]\"");
	MakeCode	(x=0X1734E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17352);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17360);
	OpEnumEx		(x,	0,	GetEnum("MenuActions"),2);
	MakeCode	(x=0X1736A);
	OpEnumEx		(x,	0,	GetEnum("MenuActions"),1);
	MakeCode	(x=0X1736E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X17372);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X17376,	"\"I can revive [Name], but it[Line]will cost [Num] coins.[Line]Agreed?\"");
	MakeRptCmt	(0X1738A,	"\"Remember that I'm always[Line]willing to record your deeds.[Wait2]\"");
	MakeCode	(0X17396);
	MakeCode	(x=0X17398);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X173A4,	"\"Sorry. I'm afraid I can't heal[Line][Name]. Union rules,[Line]you know.[Wait2]\"");
	MakeCode	(0X173B0);
	MakeCode	(x=0X173B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X173B6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X173C8);
	OpStkvar	(x,	0);
	MakeByte	(0X173D6);
	MakeArray	(0X173D6,	0X4);
	MakeCode	(x=0X173DA);
	OpEnumEx		(x,	0,	GetEnum("SoundCommands"),0);
	MakeRptCmt	(0X173E4,	"\"[Name] has revived![Wait2]\"");
	MakeCode	(x=0X173EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X173F2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X173F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X173FE);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X17404,	"\"Hmm...everyone seems OK.[Wait2]\"");
	ExtLinA		(0X17410,	0,	"                ; Promote action");
	MakeCode	(0X17410);
	MakeCode	(x=0X17416);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1741A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1741E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17422);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1742A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1742E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X17432);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X1743E);
	OpEnumEx		(x,	0,	GetEnum("MenuActions"),2);
	MakeCode	(x=0X17446);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17450);
	OpEnumEx		(x,	0,	GetEnum("ClassEntryProperties"),0);
	MakeCode	(x=0X1745A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1745E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17462);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17466);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17470);
	OpStkvar	(x,	1);
	MakeCode	(x=0X17474);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17478);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1747E);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X17484,	"\"I'm sorry, but no one has[Line]earned a promotion.[Wait2]\"");
	MakeRptCmt	(0X17490,	"\"Does anyone want to be[Line]promoted?\"");
	MakeCode	(0X17490);
	MakeCode	(x=0X17498);
	OpEnumEx		(x,	0,	GetEnum("VdpTiles"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X174B6,	"\"Changed your mind?[Line]\"");
	MakeCode	(x=0X174C2);
	OpEnumEx		(x,	0,	GetEnum("ForceMemberEntry"),0);
	MakeCode	(x=0X174C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X174D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X174D8,	"\"[Name] needs to be revived[Line]before being promoted.[Wait2]\"");
	MakeCode	(x=0X174E4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X174EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X174F0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X174FA);
	OpEnumEx		(x,	0,	GetEnum("ClassEntryProperties"),0);
	MakeCode	(x=0X17500);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X17504,	"\"Hmm...[Line]I think [Name] should[Line]stay as [Class].[Wait2]\"");
	MakeRptCmt	(0X17510,	"\"Hmm...[Name] needs some more[Line]training. Come back[Line]later.[Wait2]\"");
	MakeCode	(0X17510);
	MakeCode	(0X1751C);
	MakeCode	(x=0X1751E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17522);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X17526,	"\"[Name] wants[Line]a promotion?\"");
	MakeRptCmt	(0X17536,	"\"Changed your mind?[Line]\"");
	MakeCode	(0X17542);
	MakeCode	(x=0X17544);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17548);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X17552);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X17556);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X17568);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X1756C,	"\"I hereby make a promotion.[Line]Now, [Class] [Name] shall[Line]be known as a [Class]![Wait2]\"");
	MakeByte	(0X17574);
	MakeArray	(0X17574,	0X4);
	MakeCode	(x=0X17578);
	OpEnumEx		(x,	0,	GetEnum("SoundCommands"),0);
	MakeRptCmt	(0X17586,	"Update Max's map sprite after promoting");
	MakeCode	(x=0X17590);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17594);
	OpStkvar	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1759A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X175A0,	"\"Congratulations, [Name]![Wait2]\"");
	MakeRptCmt	(0X175AC,	"\"Can I help in some other way?\"");
	MakeRptCmt	(0X175BC,	"\"May the Powers of Light be[Line]always with you, [Hero]![Wait2]\"");
	MakeCode	(x=0X175CA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X175CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X175D2);
	OpStkvar	(x,	0);
	ExtLinB		(0X175DC,	0,	"                modend");
	MakeCode	(0X175DE);
	MakeCode	(x=0X175E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X175F2);
	MakeCode	(x=0X17632);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X17668);
	MakeCode	(0X1766E);
	MakeCode	(0X17676);
	MakeCode	(0X176A6);
	MakeCode	(0X176F2);
	MakeCode	(0X17700);
	MakeCode	(0X1771E);
	MakeCode	(0X17738);
	MakeCode	(0X17770);
	MakeCode	(0X17780);
	MakeCode	(0X1779C);
	MakeCode	(0X177A6);
	MakeCode	(0X177DE);
	MakeCode	(0X177E6);
	MakeCode	(x=0X177EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X17802);
	MakeCode	(0X1781E);
	MakeCode	(0X17832);
	MakeCode	(0X17858);
	MakeCode	(0X1787C);
	MakeCode	(0X178E0);
	MakeCode	(x=0X178E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X178FC);
	MakeCode	(0X17918);
	MakeCode	(0X1792C);
	MakeCode	(0X17952);
	MakeCode	(0X17976);
	MakeCode	(0X179B6);
	MakeCode	(x=0X179E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X17A28);
	MakeCode	(0X17A2E);
	MakeName	(0X17A2E,	"MainMenuAction_Search");
	MakeCode	(0X17A66);
	MakeCode	(0X17A6E);
	MakeCode	(0X17A76);
	MakeCode	(x=0X17A78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X17A9E);
	MakeCode	(0X17AC4);
	MakeCode	(0X17AE6);
	MakeCode	(0X17B10);
	MakeCode	(0X17B46);
	MakeCode	(0X17B4E);
	MakeCode	(0X17B56);
	MakeCode	(x=0X17B58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X17B8A);
	MakeByte	(0X17BBC);
	MakeArray	(0X17BBC,	0XA2);
	MakeName	(0X17BBC,	"SpriteTextSounds");
	MakeCode	(0X17C5E);
	MakeName	(0X17C5E,	"j_j_SetEventFlag");
	MakeCode	(0X17C64);
	MakeName	(0X17C64,	"j_j_ClearEventFlag");
	MakeCode	(0X17C6A);
	MakeName	(0X17C6A,	"j_j_CheckEventFlag");
	MakeCode	(0X17C70);
	MakeCode	(x=0X17C78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17C82);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X17CA6);
	MakeCode	(0X17CCA);
	MakeCode	(x=0X17CCE);
	OpSign		(x,	1);
	MakeCode	(x=0X17CD2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17CD6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17CDE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17CE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17CE8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17CEC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17CF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17CF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17CF8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17CFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X17D0A,	0,	"                ");
	MakeCode	(x=0X17D3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17D44);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17D4A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17D56);
	OpStkvar	(x,	0);
	MakeWord	(0X17D62);
	MakeName	(0X17D62,	"DialogHeader");
	MakeWord	(x=0X17D64);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17D66);
	MakeWord	(0X17D68);
	MakeWord	(x=0X17D6A);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17D6C);
	MakeWord	(0X17D6E);
	MakeWord	(x=0X17D70);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17D72);
	MakeWord	(0X17D74);
	MakeWord	(x=0X17D76);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17D78);
	MakeWord	(0X17D7A);
	MakeWord	(x=0X17D7C);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17D7E);
	MakeWord	(0X17D80);
	MakeWord	(x=0X17D82);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17D84);
	MakeWord	(0X17D86);
	MakeWord	(x=0X17D88);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17D8A);
	MakeWord	(0X17D8C);
	MakeWord	(x=0X17D8E);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17D90);
	MakeWord	(0X17D92);
	MakeWord	(x=0X17D94);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17D96);
	MakeWord	(0X17D98);
	MakeWord	(x=0X17D9A);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17D9C);
	MakeWord	(0X17D9E);
	MakeWord	(x=0X17DA0);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DA2);
	MakeWord	(0X17DA4);
	MakeWord	(x=0X17DA6);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DA8);
	MakeWord	(0X17DAA);
	MakeWord	(x=0X17DAC);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DAE);
	MakeWord	(0X17DB0);
	MakeWord	(x=0X17DB2);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DB4);
	MakeWord	(0X17DB6);
	MakeWord	(x=0X17DB8);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DBA);
	MakeWord	(0X17DBC);
	MakeWord	(x=0X17DBE);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DC0);
	MakeWord	(0X17DC2);
	MakeWord	(x=0X17DC4);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DC6);
	MakeWord	(0X17DC8);
	MakeWord	(x=0X17DCA);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DCC);
	MakeWord	(0X17DCE);
	MakeWord	(x=0X17DD0);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DD2);
	MakeWord	(0X17DD4);
	MakeWord	(x=0X17DD6);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DD8);
	MakeWord	(0X17DDA);
	MakeWord	(x=0X17DDC);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DDE);
	MakeWord	(0X17DE0);
	MakeWord	(x=0X17DE2);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DE4);
	MakeWord	(0X17DE6);
	MakeWord	(x=0X17DE8);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DEA);
	MakeWord	(0X17DEC);
	MakeWord	(x=0X17DEE);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DF0);
	MakeWord	(0X17DF2);
	MakeWord	(x=0X17DF4);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DF6);
	MakeWord	(0X17DF8);
	MakeWord	(x=0X17DFA);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17DFC);
	MakeWord	(0X17DFE);
	MakeWord	(x=0X17E00);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17E02);
	MakeWord	(0X17E04);
	MakeWord	(x=0X17E06);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17E08);
	MakeWord	(0X17E0A);
	MakeWord	(x=0X17E0C);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17E0E);
	MakeWord	(0X17E10);
	MakeWord	(x=0X17E12);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17E14);
	MakeWord	(0X17E16);
	MakeWord	(x=0X17E18);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17E1A);
	MakeWord	(0X17E1C);
	MakeWord	(x=0X17E1E);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17E20);
	MakeWord	(0X17E22);
	MakeWord	(x=0X17E24);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17E26);
	MakeWord	(0X17E28);
	MakeWord	(x=0X17E2A);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17E2C);
	MakeWord	(0X17E2E);
	MakeWord	(x=0X17E30);
	OpOff		(x,	0,	0X17D62);
	OpOff		(x,	128,	0X17D62);
	OpOff		(x,	1,	0X17D62);
	OpOff		(x,	129,	0X17D62);
	MakeWord	(0X17E32);
	MakeCode	(x=0X17E34);
	OpStkvar	(x,	0);
	MakeCode	(0X17E42);
	MakeCode	(0X17E58);
	MakeCode	(x=0X17E6E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17E74);
	OpStkvar	(x,	0);
	MakeCode	(0X17E90);
	MakeCode	(x=0X17E96);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17EA0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X17EAA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17EB6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17ECC);
	OpStkvar	(x,	0);
	MakeCode	(0X17ED6);
	MakeName	(0X17ED6,	"GiveItemToHero");
	MakeCode	(0X17EEC);
	MakeCode	(x=0X17EFC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X17F0E);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X17F1A);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X17F26);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X17F3A);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X17F3C);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X17F4E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X17F60);
	MakeCode	(0X17F64);
	MakeCode	(x=0X17F6C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17F76);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X17F7C);
	MakeCode	(x=0X17F7E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X17F88);
	MakeCode	(x=0X17F8C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X17F9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X17FA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X17FB2);
	MakeArray	(0X17FB2,	0X4);
	MakeCode	(0X17FB6);
	MakeCode	(x=0X17FD4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X17FE0);
	MakeCode	(0X17FF6);
	MakeCode	(x=0X17FFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X18000);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X18010);
	MakeArray	(0X18010,	0X4);
	MakeCode	(x=0X18014);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1803A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X18046);
	MakeCode	(0X1804E);
	MakeCode	(0X18056);
	MakeCode	(x=0X18074);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1808A);
	MakeCode	(x=0X18092);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X180A6);
	MakeCode	(x=0X180AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X180B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X180CA);
	MakeCode	(0X180E8);
	MakeCode	(0X180F0);
	MakeCode	(0X1810C);
	MakeCode	(0X1811E);
	MakeCode	(0X1812C);
	MakeCode	(0X18148);
	MakeCode	(0X18168);
	MakeCode	(0X1818E);
	MakeCode	(0X181DA);
	MakeCode	(0X181FA);
	MakeCode	(0X18208);
	MakeCode	(0X1822E);
	MakeCode	(0X18234);
	MakeCode	(0X18238);
	MakeCode	(0X1825E);
	MakeCode	(0X18276);
	MakeCode	(0X1828E);
	MakeCode	(0X182A8);
	MakeCode	(0X182C0);
	MakeCode	(0X182C6);
	MakeCode	(0X182E0);
	MakeCode	(0X182E6);
	MakeCode	(0X18310);
	MakeCode	(0X18360);
	MakeCode	(x=0X18384);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1838A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1838E);
	MakeArray	(0X1838E,	0X4);
	MakeCode	(0X18392);
	MakeCode	(x=0X183A6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X183CE);
	MakeCode	(0X183D0);
	MakeCode	(0X183D6);
	MakeCode	(x=0X183E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X18410);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X18416);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(0X1844E);
	MakeCode	(0X18476);
	MakeCode	(x=0X1847A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X18480);
	MakeCode	(0X1849A);
	MakeCode	(0X184AA);
	MakeCode	(x=0X184AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X184B4);
	MakeCode	(0X184CE);
	MakeCode	(x=0X184D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X184D8);
	MakeCode	(0X184EE);
	MakeCode	(0X184FE);
	MakeCode	(x=0X18502);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X18508);
	MakeCode	(x=0X18522);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X18534);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1853A);
	MakeCode	(0X1854A);
	MakeCode	(x=0X18556);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1856C);
	MakeCode	(0X18574);
	MakeCode	(0X18594);
	MakeCode	(0X1859A);
	MakeCode	(0X185A0);
	MakeCode	(0X185C2);
	MakeCode	(0X185C8);
	MakeComm	(0X185D0,	"set message bank : 915");
	MakeCode	(0X185D0);
	MakeRptCmt	(0X185D4,	"check dialogue group : 0");
	MakeRptCmt	(0X185DC,	"set portrait : 8 (Luke)");
	MakeRptCmt	(0X185E0,	"set speech SFX : 8");
	MakeRptCmt	(0X185EC,	"display message : 0");
	MakeRptCmt	(0X185F0,	"add force member (data) : 8 (Luke)");
	MakeCode	(0X1867A);
	MakeCode	(0X186A0);
	MakeCode	(x=0X186A6);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X186AC);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(0X186D8);
	MakeCode	(0X186E6);
	MakeCode	(0X1871C);
	MakeCode	(0X18760);
	MakeCode	(0X18762);
	MakeCode	(0X18786);
	MakeCode	(0X1878C);
	MakeCode	(0X187BC);
	MakeCode	(0X187CC);
	MakeCode	(0X187F4);
	MakeCode	(0X187FA);
	MakeCode	(0X18800);
	MakeCode	(0X18816);
	MakeCode	(0X1881C);
	MakeCode	(0X1883C);
	MakeCode	(0X18842);
	MakeCode	(0X18848);
	MakeCode	(0X18864);
	MakeCode	(0X1886A);
	MakeCode	(0X18870);
	MakeCode	(0X1887A);
	MakeCode	(0X18882);
	MakeCode	(0X188B6);
	MakeCode	(0X188FC);
	MakeCode	(0X18944);
	MakeCode	(0X1895A);
	MakeCode	(0X18980);
	MakeCode	(0X1898C);
	MakeCode	(0X1899C);
	MakeCode	(0X189C6);
	MakeCode	(0X189CE);
	MakeCode	(0X18A0A);
	MakeByte	(0X18A1A);
	MakeArray	(0X18A1A,	0X4);
	MakeCode	(0X18A1E);
	MakeCode	(x=0X18A6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X18A88);
	MakeByte	(0X18AEC);
	MakeArray	(0X18AEC,	0X4);
	MakeCode	(0X18AF0);
	MakeCode	(x=0X18B20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X18B2A);
	MakeByte	(0X18B54);
	MakeArray	(0X18B54,	0X4);
	MakeCode	(0X18B58);
	MakeCode	(0X18B5A);
	MakeCode	(0X18B86);
	MakeCode	(0X18B9E);
	MakeCode	(0X18BB8);
	MakeCode	(0X18BBE);
	MakeCode	(0X18BD4);
	MakeCode	(0X18BDA);
	MakeCode	(0X18BE2);
	MakeCode	(0X18C52);
	MakeCode	(0X18C82);
	MakeCode	(0X18CC8);
	MakeCode	(0X18CE2);
	MakeCode	(0X18CE8);
	MakeCode	(0X18D2C);
	MakeCode	(0X18D44);
	MakeCode	(0X18D8C);
	MakeCode	(0X18D94);
	MakeCode	(0X18DAA);
	MakeCode	(0X18DD2);
	MakeCode	(0X18E12);
	MakeCode	(0X18E18);
	MakeCode	(0X18E26);
	MakeCode	(x=0X18E42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X18E54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X18E5A);
	MakeCode	(0X18E5C);
	MakeCode	(0X18E62);
	MakeCode	(0X18E6E);
	MakeCode	(0X18E7A);
	MakeCode	(0X18E86);
	MakeCode	(0X18E92);
	MakeCode	(0X18E9E);
	MakeCode	(0X18EAE);
	MakeCode	(0X18ECA);
	MakeCode	(0X18ED0);
	MakeCode	(0X18EF0);
	MakeCode	(0X18EFE);
	MakeCode	(0X18F2E);
	MakeCode	(0X18F5E);
	MakeCode	(0X18F66);
	MakeCode	(0X18F8A);
	MakeCode	(0X18F90);
	MakeCode	(0X18FA0);
	MakeCode	(0X18FA2);
	MakeCode	(0X18FD2);
	MakeCode	(0X19008);
	MakeCode	(0X19038);
	MakeCode	(0X19044);
	MakeCode	(0X19064);
	MakeCode	(0X1907E);
	MakeCode	(0X19084);
	MakeCode	(0X190CA);
	MakeCode	(0X190D0);
	MakeCode	(0X190E4);
	MakeCode	(0X19116);
	MakeCode	(0X19124);
	MakeCode	(0X1916E);
	MakeCode	(0X191AC);
	MakeCode	(0X191E8);
	MakeCode	(0X191FA);
	MakeCode	(0X19228);
	MakeCode	(0X1923E);
	MakeCode	(0X19244);
	MakeCode	(0X19250);
	MakeCode	(0X1925C);
	MakeCode	(0X19274);
	MakeCode	(0X1928E);
	MakeCode	(0X19294);
	MakeCode	(0X192AA);
	MakeCode	(0X192B0);
	MakeCode	(0X192C6);
	MakeCode	(0X192CC);
	MakeCode	(0X19314);
	MakeCode	(0X1931C);
	MakeCode	(0X19348);
	MakeCode	(0X1934C);
	MakeCode	(0X19394);
	MakeCode	(0X1939A);
	MakeCode	(0X193A0);
	MakeCode	(0X193B8);
	MakeCode	(0X193C0);
	MakeCode	(0X193DC);
	MakeCode	(0X193EA);
	MakeCode	(0X1941E);
	MakeCode	(0X1944C);
	MakeCode	(0X19450);
	MakeCode	(0X1947E);
	MakeCode	(0X1948A);
	MakeCode	(0X1949A);
	MakeCode	(0X194D0);
	MakeCode	(0X194DE);
	MakeCode	(0X1951E);
	MakeCode	(0X1954E);
	MakeCode	(0X19578);
	MakeCode	(0X1959E);
	MakeCode	(0X195AE);
	MakeCode	(0X195B4);
	MakeCode	(0X19634);
	MakeCode	(0X1963A);
	MakeCode	(0X1969C);
	MakeCode	(0X196A2);
	MakeCode	(0X196C8);
	MakeCode	(0X196CA);
	MakeCode	(0X196D2);
	MakeCode	(0X196F8);
	MakeCode	(0X196FA);
	MakeCode	(0X19708);
	MakeCode	(0X1971A);
	MakeCode	(0X1971C);
	MakeCode	(0X1972A);
	MakeCode	(0X19744);
	MakeCode	(0X1975E);
	MakeCode	(0X1976C);
	MakeCode	(0X1977C);
	MakeCode	(0X19782);
	MakeCode	(0X197A0);
	MakeCode	(0X197AE);
	MakeCode	(0X197B0);
	MakeCode	(0X197BE);
	MakeCode	(0X197C0);
	MakeCode	(0X197CE);
	MakeCode	(0X197D0);
	MakeCode	(0X197D4);
	MakeCode	(0X197E4);
	MakeCode	(0X197F4);
	MakeCode	(0X19804);
	MakeCode	(0X1982E);
	MakeCode	(0X19834);
	MakeCode	(0X19844);
	MakeCode	(0X19854);
	MakeCode	(0X19864);
	MakeCode	(0X19874);
	MakeCode	(0X19884);
	MakeCode	(0X19894);
	MakeCode	(0X198C6);
	MakeCode	(0X198CC);
	MakeCode	(0X198D2);
	MakeCode	(0X198E2);
	MakeCode	(0X198F2);
	MakeCode	(0X1990C);
	MakeCode	(0X19912);
	MakeCode	(0X19922);
	MakeCode	(0X19932);
	MakeCode	(0X1994A);
	MakeCode	(0X1995A);
	MakeCode	(0X1996A);
	MakeCode	(0X1997A);
	MakeCode	(0X1998A);
	MakeCode	(0X1999A);
	MakeCode	(0X199AA);
	MakeCode	(0X199CE);
	MakeCode	(0X19A00);
	MakeCode	(0X19A0E);
	MakeCode	(0X19A14);
	MakeCode	(0X19A24);
	MakeCode	(0X19A34);
	MakeCode	(0X19A44);
	MakeCode	(0X19A4C);
	MakeCode	(0X19A84);
	MakeCode	(0X19AB6);
	MakeCode	(x=0X19B16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X19B1E);
	MakeArray	(0X19B1E,	0X4);
	MakeCode	(0X19B22);
	MakeCode	(0X19B3E);
	MakeCode	(0X19B82);
	MakeCode	(0X19B86);
	MakeCode	(0X19BA8);
	MakeCode	(x=0X19C08);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X19C10);
	MakeArray	(0X19C10,	0X4);
	MakeCode	(0X19C14);
	MakeCode	(0X19C30);
	MakeCode	(0X19C74);
	MakeCode	(0X19C82);
	MakeCode	(x=0X19CAC);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X19CB2);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeByte	(0X19CC0);
	MakeArray	(0X19CC0,	0X4);
	MakeCode	(0X19CC4);
	MakeCode	(0X19CC6);
	MakeByte	(0X19CCC);
	MakeArray	(0X19CCC,	0X4);
	MakeCode	(0X19CD0);
	MakeCode	(0X19CE6);
	MakeCode	(0X19D02);
	MakeCode	(0X19D1E);
	MakeCode	(x=0X19D24);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X19D2A);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(0X19D3A);
	MakeCode	(x=0X19D48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X19D48,	"DialogueScript13");
	MakeCode	(0X19D78);
	MakeCode	(0X19D9C);
	MakeCode	(0X19DAC);
	MakeCode	(0X19DC0);
	MakeCode	(0X19DC6);
	MakeCode	(0X19DD6);
	MakeCode	(0X19DEA);
	MakeCode	(0X19DF0);
	MakeCode	(0X19E18);
	MakeCode	(0X19E2E);
	MakeCode	(0X19E62);
	MakeCode	(0X19E72);
	MakeCode	(0X19E90);
	MakeCode	(0X19E9E);
	MakeCode	(0X19EAC);
	MakeCode	(0X19EC6);
	MakeCode	(0X19ECC);
	MakeCode	(0X19EDC);
	MakeCode	(0X19EF8);
	MakeCode	(0X19EFE);
	MakeCode	(0X19F0E);
	MakeCode	(0X19F34);
	MakeCode	(0X19F3A);
	MakeCode	(0X19F40);
	MakeCode	(x=0X19F5E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X19F64);
	MakeCode	(0X19F80);
	MakeCode	(0X19F86);
	MakeCode	(0X19FB2);
	MakeCode	(0X19FC2);
	MakeCode	(0X19FD0);
	MakeCode	(0X19FE2);
	MakeCode	(0X1A014);
	MakeCode	(0X1A024);
	MakeCode	(0X1A03E);
	MakeCode	(0X1A052);
	MakeCode	(0X1A066);
	MakeCode	(0X1A082);
	MakeCode	(0X1A092);
	MakeCode	(0X1A0A6);
	MakeCode	(0X1A0C0);
	MakeCode	(0X1A0D0);
	MakeCode	(0X1A0E6);
	MakeCode	(0X1A0EC);
	MakeCode	(0X1A106);
	MakeCode	(0X1A114);
	MakeCode	(0X1A128);
	MakeCode	(0X1A136);
	MakeCode	(0X1A146);
	MakeCode	(0X1A154);
	MakeCode	(0X1A164);
	MakeCode	(0X1A172);
	MakeCode	(0X1A194);
	MakeCode	(0X1A19A);
	MakeCode	(0X1A1A8);
	MakeCode	(0X1A1B8);
	MakeCode	(0X1A1C6);
	MakeCode	(0X1A1D6);
	MakeCode	(0X1A1E4);
	MakeCode	(0X1A1F4);
	MakeCode	(0X1A202);
	MakeCode	(0X1A220);
	MakeCode	(0X1A226);
	MakeCode	(0X1A230);
	MakeCode	(0X1A23E);
	MakeCode	(x=0X1A248);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1A260);
	MakeCode	(x=0X1A26C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1A270);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1A276);
	MakeCode	(0X1A27C);
	MakeCode	(0X1A284);
	MakeCode	(0X1A2A0);
	MakeCode	(x=0X1A2A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1A2C6);
	MakeCode	(0X1A2DE);
	MakeCode	(x=0X1A2EA);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X1A2F0);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(x=0X1A312);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X1A318);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(x=0X1A33A);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X1A340);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(x=0X1A362);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X1A368);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(0X1A38C);
	MakeCode	(x=0X1A392);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X1A398);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(0X1A3A8);
	MakeCode	(0X1A3C4);
	MakeByte	(0X1A3CA);
	MakeArray	(0X1A3CA,	0X4);
	MakeCode	(0X1A3CE);
	MakeByte	(0X1A3E2);
	MakeArray	(0X1A3E2,	0X4);
	MakeCode	(0X1A3E6);
	MakeCode	(0X1A3E8);
	MakeCode	(0X1A404);
	MakeCode	(0X1A420);
	MakeCode	(0X1A42E);
	MakeByte	(0X1A44A);
	MakeArray	(0X1A44A,	0X4);
	MakeCode	(0X1A44E);
	MakeCode	(0X1A450);
	MakeCode	(0X1A454);
	MakeCode	(x=0X1A460);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1A478);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1A47E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X1A494);
	MakeArray	(0X1A494,	0X4);
	MakeCode	(0X1A498);
	MakeCode	(0X1A4B0);
	MakeCode	(0X1A4D0);
	MakeCode	(0X1A4DE);
	MakeCode	(0X1A4E2);
	MakeCode	(0X1A506);
	MakeCode	(0X1A520);
	MakeCode	(0X1A526);
	MakeCode	(0X1A536);
	MakeCode	(0X1A54A);
	MakeCode	(0X1A556);
	MakeCode	(0X1A562);
	MakeCode	(0X1A576);
	MakeCode	(0X1A59C);
	MakeCode	(0X1A5A2);
	MakeCode	(0X1A5B2);
	MakeCode	(0X1A5C2);
	MakeCode	(0X1A5CA);
	MakeCode	(0X1A5F2);
	MakeCode	(0X1A5FA);
	MakeCode	(0X1A622);
	MakeCode	(0X1A630);
	MakeCode	(0X1A680);
	MakeCode	(0X1A6D4);
	MakeCode	(0X1A6E2);
	MakeCode	(0X1A71C);
	MakeCode	(0X1A74C);
	MakeCode	(0X1A77C);
	MakeCode	(0X1A798);
	MakeCode	(0X1A7BC);
	MakeCode	(0X1A7D6);
	MakeCode	(0X1A7DC);
	MakeCode	(0X1A7F4);
	MakeCode	(0X1A80E);
	MakeCode	(0X1A814);
	MakeCode	(0X1A832);
	MakeCode	(0X1A852);
	MakeCode	(0X1A85A);
	MakeCode	(0X1A89C);
	MakeCode	(0X1A8CC);
	MakeCode	(0X1A8FC);
	MakeCode	(0X1A916);
	MakeCode	(0X1A91C);
	MakeCode	(0X1A936);
	MakeCode	(0X1A93C);
	MakeCode	(0X1A956);
	MakeCode	(0X1A95C);
	MakeCode	(0X1A976);
	MakeCode	(0X1A97C);
	MakeCode	(0X1A996);
	MakeCode	(0X1A99C);
	MakeCode	(0X1A9B4);
	MakeCode	(0X1A9CE);
	MakeCode	(0X1A9D4);
	MakeCode	(0X1A9EA);
	MakeCode	(0X1A9F0);
	MakeCode	(0X1AA0A);
	MakeCode	(0X1AA18);
	MakeCode	(0X1AA32);
	MakeCode	(0X1AA42);
	MakeCode	(0X1AA52);
	MakeCode	(0X1AA64);
	MakeCode	(0X1AA72);
	MakeCode	(0X1AA8C);
	MakeCode	(0X1AA9C);
	MakeCode	(0X1AAB2);
	MakeCode	(0X1AAC2);
	MakeCode	(0X1AAD0);
	MakeCode	(0X1AAE4);
	MakeCode	(0X1AAEC);
	MakeCode	(x=0X1AB0E);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X1AB14);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X1AB16);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1AB26);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X1AB32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1AB3C);
	MakeArray	(0X1AB3C,	0X4);
	MakeCode	(0X1AB40);
	MakeCode	(0X1AB58);
	MakeCode	(0X1AB78);
	MakeCode	(0X1AB94);
	MakeCode	(0X1ABC8);
	MakeCode	(0X1ABE8);
	MakeCode	(0X1AC1E);
	MakeCode	(0X1AC2C);
	MakeCode	(0X1AC58);
	MakeCode	(0X1AC72);
	MakeCode	(0X1AC76);
	MakeCode	(x=0X1AC86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1AC98);
	MakeCode	(0X1AC9C);
	MakeCode	(0X1ACD4);
	MakeCode	(0X1ACFE);
	MakeCode	(0X1AD2E);
	MakeCode	(0X1AD42);
	MakeCode	(0X1AD6E);
	MakeCode	(0X1AD74);
	MakeCode	(0X1AD7A);
	MakeCode	(0X1ADA6);
	MakeCode	(0X1ADAC);
	MakeCode	(0X1ADB2);
	MakeCode	(0X1ADCC);
	MakeCode	(0X1ADD2);
	MakeCode	(0X1ADEC);
	MakeCode	(0X1ADF2);
	MakeCode	(0X1AE0C);
	MakeCode	(0X1AE12);
	MakeCode	(0X1AE2C);
	MakeCode	(0X1AE32);
	MakeCode	(0X1AE62);
	MakeCode	(0X1AE8C);
	MakeCode	(0X1AE9C);
	MakeCode	(0X1AEB2);
	MakeCode	(0X1AEBA);
	MakeCode	(0X1AEDA);
	MakeCode	(0X1AEF6);
	MakeCode	(0X1AF0E);
	MakeCode	(0X1AF22);
	MakeCode	(0X1AF30);
	MakeCode	(0X1AF62);
	MakeCode	(0X1AF9C);
	MakeCode	(0X1AFAA);
	MakeCode	(0X1AFCA);
	MakeCode	(0X1AFE6);
	MakeCode	(0X1B002);
	MakeCode	(0X1B030);
	MakeCode	(0X1B03E);
	MakeName	(0X1B03E,	"DialogueScript20");
	MakeCode	(0X1B076);
	MakeCode	(0X1B0A6);
	MakeCode	(0X1B0D0);
	MakeCode	(0X1B0F2);
	MakeCode	(0X1B0F8);
	MakeCode	(0X1B112);
	MakeCode	(0X1B120);
	MakeCode	(x=0X1B12E);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(0X1B148);
	MakeCode	(x=0X1B158);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1B18A);
	MakeCode	(0X1B190);
	MakeCode	(0X1B1BE);
	MakeCode	(0X1B1C6);
	MakeCode	(0X1B1F0);
	MakeCode	(0X1B1F6);
	MakeCode	(0X1B228);
	MakeCode	(0X1B236);
	MakeCode	(0X1B26E);
	MakeCode	(0X1B298);
	MakeCode	(0X1B2B2);
	MakeCode	(0X1B2D2);
	MakeCode	(0X1B2D8);
	MakeCode	(0X1B2F2);
	MakeCode	(0X1B2F8);
	MakeCode	(0X1B34A);
	MakeCode	(0X1B37C);
	MakeCode	(0X1B384);
	MakeCode	(0X1B3A4);
	MakeCode	(0X1B3BC);
	MakeCode	(0X1B3D8);
	MakeCode	(0X1B3F4);
	MakeCode	(0X1B410);
	MakeCode	(0X1B42C);
	MakeCode	(0X1B43A);
	MakeCode	(0X1B480);
	MakeCode	(0X1B498);
	MakeCode	(0X1B4B0);
	MakeCode	(0X1B4D2);
	MakeCode	(0X1B4D8);
	MakeCode	(0X1B4F0);
	MakeCode	(0X1B508);
	MakeCode	(0X1B54A);
	MakeCode	(0X1B54C);
	MakeCode	(0X1B56E);
	MakeCode	(0X1B58A);
	MakeCode	(0X1B590);
	MakeCode	(0X1B5AA);
	MakeCode	(0X1B5BA);
	MakeCode	(0X1B5C8);
	MakeCode	(0X1B5FC);
	MakeCode	(0X1B60A);
	MakeCode	(0X1B61A);
	MakeCode	(0X1B622);
	MakeCode	(0X1B66A);
	MakeCode	(0X1B6B2);
	MakeCode	(0X1B6DC);
	MakeCode	(0X1B6EA);
	MakeCode	(0X1B71C);
	MakeCode	(0X1B736);
	MakeCode	(0X1B73C);
	MakeCode	(0X1B77E);
	MakeCode	(0X1B780);
	MakeCode	(0X1B7A2);
	MakeCode	(0X1B7C0);
	MakeCode	(0X1B7DE);
	MakeCode	(0X1B7F6);
	MakeCode	(0X1B81C);
	MakeCode	(0X1B822);
	MakeCode	(0X1B842);
	MakeCode	(0X1B84A);
	MakeCode	(0X1B892);
	MakeCode	(0X1B8DA);
	MakeCode	(0X1B904);
	MakeCode	(0X1B912);
	MakeCode	(0X1B91E);
	MakeCode	(0X1B942);
	MakeByte	(0X1B948);
	MakeArray	(0X1B948,	0X4);
	MakeCode	(0X1B94C);
	MakeCode	(0X1B95E);
	MakeCode	(x=0X1B964);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1B982);
	MakeArray	(0X1B982,	0X4);
	MakeCode	(0X1B986);
	MakeCode	(0X1B988);
	MakeCode	(0X1B9A0);
	MakeCode	(0X1B9A8);
	MakeCode	(0X1B9B0);
	MakeByte	(0X1B9B6);
	MakeArray	(0X1B9B6,	0X4);
	MakeCode	(x=0X1B9BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1B9C2);
	MakeArray	(0X1B9C2,	0X4);
	MakeCode	(0X1B9C6);
	MakeByte	(0X1B9DC);
	MakeArray	(0X1B9DC,	0X4);
	MakeCode	(0X1B9E0);
	MakeCode	(x=0X1B9E2);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(x=0X1B9EC);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(0X1BA04);
	MakeCode	(0X1BA12);
	MakeCode	(0X1BA48);
	MakeCode	(0X1BA56);
	MakeCode	(0X1BA86);
	MakeCode	(0X1BAAE);
	MakeCode	(0X1BAD8);
	MakeCode	(0X1BB02);
	MakeCode	(0X1BB10);
	MakeCode	(0X1BB32);
	MakeCode	(0X1BB42);
	MakeCode	(0X1BB52);
	MakeCode	(0X1BB58);
	MakeCode	(0X1BB84);
	MakeCode	(0X1BB8A);
	MakeCode	(0X1BBA2);
	MakeCode	(0X1BBA8);
	MakeCode	(0X1BBFE);
	MakeCode	(0X1BC04);
	MakeCode	(0X1BC4E);
	MakeCode	(0X1BC64);
	MakeCode	(0X1BC74);
	MakeCode	(0X1BC8A);
	MakeCode	(0X1BC90);
	MakeCode	(0X1BCAE);
	MakeCode	(0X1BCCA);
	MakeCode	(0X1BCE4);
	MakeCode	(0X1BD0C);
	MakeCode	(0X1BD3E);
	MakeCode	(0X1BD46);
	MakeCode	(0X1BD66);
	MakeCode	(0X1BD74);
	MakeCode	(0X1BD9C);
	MakeCode	(0X1BDC4);
	MakeCode	(0X1BDEE);
	MakeCode	(0X1BE1C);
	MakeCode	(0X1BE38);
	MakeCode	(0X1BE50);
	MakeCode	(0X1BE7E);
	MakeCode	(0X1BE96);
	MakeCode	(0X1BE9C);
	MakeCode	(0X1BEC0);
	MakeCode	(0X1BEDA);
	MakeCode	(0X1BEDC);
	MakeCode	(0X1BEEA);
	MakeCode	(0X1BEF0);
	MakeCode	(0X1BF0A);
	MakeCode	(0X1BF1A);
	MakeCode	(0X1BF20);
	MakeCode	(0X1BF28);
	MakeCode	(0X1BF62);
	MakeCode	(0X1BF64);
	MakeCode	(0X1BF98);
	MakeCode	(0X1BFC8);
	MakeCode	(0X1BFE8);
	MakeCode	(0X1BFF8);
	MakeCode	(0X1C02E);
	MakeCode	(0X1C052);
	MakeCode	(0X1C08E);
	MakeCode	(0X1C0A8);
	MakeCode	(0X1C0B0);
	MakeCode	(0X1C0CC);
	MakeCode	(0X1C0E4);
	MakeCode	(0X1C0FC);
	MakeCode	(0X1C140);
	MakeCode	(0X1C166);
	MakeCode	(0X1C1A2);
	MakeCode	(0X1C1E4);
	MakeCode	(0X1C22A);
	MakeCode	(x=0X1C248);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1C260);
	MakeCode	(0X1C280);
	MakeCode	(0X1C2AA);
	MakeCode	(0X1C2B8);
	MakeCode	(0X1C2F4);
	MakeCode	(0X1C328);
	MakeCode	(0X1C352);
	MakeCode	(0X1C376);
	MakeCode	(0X1C37E);
	MakeCode	(0X1C396);
	MakeCode	(0X1C3B0);
	MakeCode	(0X1C3CA);
	MakeCode	(0X1C3D0);
	MakeCode	(0X1C3D6);
	MakeCode	(0X1C3DE);
	MakeCode	(0X1C408);
	MakeCode	(0X1C40C);
	MakeCode	(0X1C446);
	MakeCode	(0X1C464);
	MakeCode	(0X1C482);
	MakeCode	(0X1C4A0);
	MakeCode	(0X1C4BA);
	MakeCode	(0X1C4C0);
	MakeCode	(0X1C4DA);
	MakeCode	(0X1C4E0);
	MakeCode	(0X1C4FA);
	MakeCode	(0X1C500);
	MakeCode	(0X1C51A);
	MakeCode	(0X1C520);
	MakeCode	(0X1C53A);
	MakeCode	(0X1C54A);
	MakeCode	(0X1C55A);
	MakeCode	(0X1C560);
	MakeCode	(0X1C57A);
	MakeCode	(0X1C58A);
	MakeCode	(0X1C590);
	MakeCode	(0X1C5AA);
	MakeCode	(0X1C5BA);
	MakeCode	(0X1C5C0);
	MakeCode	(0X1C5DA);
	MakeCode	(0X1C5E0);
	MakeCode	(0X1C5FA);
	MakeCode	(0X1C600);
	MakeCode	(0X1C61A);
	MakeCode	(0X1C620);
	MakeCode	(0X1C654);
	MakeCode	(0X1C656);
	MakeCode	(0X1C67E);
	MakeCode	(0X1C696);
	MakeCode	(0X1C6AE);
	MakeCode	(0X1C6BC);
	MakeCode	(x=0X1C6C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1C6FC);
	MakeCode	(0X1C716);
	MakeCode	(0X1C726);
	MakeCode	(0X1C72C);
	MakeCode	(0X1C75C);
	MakeCode	(0X1C764);
	MakeCode	(0X1C78C);
	MakeCode	(0X1C7AC);
	MakeCode	(0X1C7CC);
	MakeCode	(0X1C7F0);
	MakeCode	(x=0X1C848);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1C870);
	MakeCode	(0X1C87E);
	MakeCode	(0X1C89A);
	MakeCode	(0X1C8B0);
	MakeCode	(0X1C8E2);
	MakeCode	(0X1C8E8);
	MakeCode	(0X1C902);
	MakeCode	(0X1C908);
	MakeCode	(0X1C922);
	MakeCode	(0X1C928);
	MakeCode	(0X1C964);
	MakeCode	(0X1C97C);
	MakeCode	(x=0X1C97E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1C982);
	MakeArray	(0X1C982,	0X4);
	MakeCode	(0X1C986);
	MakeCode	(0X1C9B2);
	MakeCode	(0X1C9B8);
	MakeCode	(0X1C9D4);
	MakeCode	(0X1C9EE);
	MakeCode	(0X1C9F4);
	MakeCode	(0X1CA0E);
	MakeCode	(0X1CA14);
	MakeCode	(0X1CA2E);
	MakeCode	(0X1CA34);
	MakeCode	(0X1CA4E);
	MakeCode	(0X1CA66);
	MakeCode	(0X1CA6C);
	MakeCode	(0X1CA86);
	MakeCode	(0X1CA8C);
	MakeCode	(0X1CAAE);
	MakeCode	(0X1CADA);
	MakeCode	(0X1CAE2);
	MakeCode	(0X1CAF2);
	MakeCode	(0X1CAF6);
	MakeCode	(0X1CB1A);
	MakeCode	(0X1CBB0);
	MakeCode	(x=0X1CBB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1CBB6);
	MakeArray	(0X1CBB6,	0X4);
	MakeCode	(0X1CBBA);
	MakeCode	(0X1CBE6);
	ExtLinA		(0X1CBF4,	0,	"        module");
	MakeCode	(0X1CBF4);
	MakeName	(0X1CBF4,	"DialogueScript29");
	MakeCode	(0X1CC2A);
	MakeCode	(0X1CC44);
	MakeCode	(0X1CC48);
	MakeByte	(0X1CC4E);
	MakeArray	(0X1CC4E,	0X4);
	MakeCode	(0X1CC52);
	MakeByte	(0X1CC72);
	MakeArray	(0X1CC72,	0X4);
	MakeCode	(0X1CC76);
	MakeCode	(0X1CC78);
	MakeByte	(0X1CC7E);
	MakeArray	(0X1CC7E,	0X4);
	MakeCode	(0X1CC82);
	MakeByte	(0X1CC9A);
	MakeArray	(0X1CC9A,	0X4);
	MakeCode	(0X1CC9E);
	MakeCode	(0X1CCA0);
	MakeCode	(0X1CCC4);
	MakeCode	(x=0X1CCEC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1CCFE);
	MakeCode	(0X1CD22);
	MakeCode	(0X1CD46);
	MakeCode	(0X1CD96);
	MakeCode	(0X1CDBA);
	MakeByte	(0X1CDF8);
	MakeArray	(0X1CDF8,	0X4);
	MakeCode	(0X1CDFC);
	MakeByte	(0X1CE0A);
	MakeArray	(0X1CE0A,	0X4);
	MakeCode	(0X1CE0E);
	MakeCode	(0X1CE10);
	MakeByte	(0X1CE16);
	MakeArray	(0X1CE16,	0X4);
	MakeCode	(0X1CE1A);
	MakeByte	(0X1CE3A);
	MakeArray	(0X1CE3A,	0X4);
	MakeCode	(0X1CE3E);
	MakeCode	(0X1CE40);
	MakeCode	(0X1CE4E);
	MakeCode	(0X1CE62);
	MakeCode	(x=0X1CE64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1CE68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1CE6C);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1CE72);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(0X1CE7A);
	MakeArray	(0X1CE7A,	0X4);
	MakeCode	(0X1CE7E);
	MakeCode	(0X1CEAE);
	MakeCode	(0X1CEC8);
	MakeCode	(0X1CECC);
	MakeByte	(0X1CEEC);
	MakeArray	(0X1CEEC,	0X4);
	MakeCode	(0X1CEF0);
	MakeCode	(0X1CEF2);
	MakeCode	(0X1CEF6);
	MakeCode	(0X1CEF8);
	MakeCode	(0X1CF20);
	MakeCode	(0X1CF48);
	MakeByte	(0X1CF58);
	MakeArray	(0X1CF58,	0X4);
	MakeCode	(0X1CF5C);
	ExtLinB		(0X1CF66,	0,	"        modend");
	MakeCode	(0X1CF66);
	MakeCode	(0X1CF6A);
	MakeCode	(0X1CF80);
	MakeCode	(0X1CFF4);
	MakeCode	(0X1D014);
	MakeCode	(0X1D030);
	MakeCode	(0X1D04C);
	MakeCode	(0X1D068);
	MakeByte	(0X1D0AE);
	MakeArray	(0X1D0AE,	0X4);
	MakeCode	(0X1D0B2);
	MakeCode	(0X1D0C2);
	MakeByte	(0X1D0F0);
	MakeArray	(0X1D0F0,	0X4);
	MakeCode	(0X1D0F4);
	MakeCode	(0X1D0F6);
	MakeByte	(0X1D0FC);
	MakeArray	(0X1D0FC,	0X4);
	MakeCode	(0X1D100);
	MakeCode	(0X1D116);
	MakeCode	(x=0X1D11C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1D12A);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X1D130);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeByte	(0X1D13E);
	MakeArray	(0X1D13E,	0X4);
	MakeCode	(0X1D142);
	MakeCode	(0X1D144);
	MakeCode	(0X1D152);
	MakeCode	(0X1D18E);
	MakeCode	(0X1D1C2);
	MakeCode	(0X1D1EC);
	MakeCode	(0X1D204);
	MakeCode	(0X1D234);
	MakeCode	(0X1D250);
	MakeCode	(0X1D272);
	MakeCode	(0X1D278);
	MakeCode	(0X1D292);
	MakeCode	(0X1D298);
	MakeCode	(0X1D2B2);
	MakeCode	(0X1D2B8);
	MakeCode	(0X1D2C0);
	MakeCode	(0X1D2E0);
	MakeCode	(0X1D2F0);
	MakeCode	(0X1D300);
	MakeCode	(0X1D310);
	MakeCode	(0X1D314);
	MakeCode	(0X1D352);
	MakeCode	(0X1D356);
	MakeCode	(x=0X1D35C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1D36E);
	MakeByte	(0X1D372);
	MakeArray	(0X1D372,	0X4);
	MakeCode	(0X1D376);
	MakeByte	(0X1D37E);
	MakeByte	(0X1D37F);
	MakeByte	(0X1D380);
	MakeByte	(0X1D381);
	MakeByte	(0X1D382);
	MakeByte	(0X1D383);
	MakeByte	(0X1D384);
	MakeByte	(0X1D385);
	MakeByte	(0X1D386);
	MakeByte	(0X1D387);
	MakeByte	(0X1D388);
	MakeByte	(0X1D389);
	MakeByte	(0X1D38A);
	MakeByte	(0X1D38B);
	MakeByte	(0X1D38C);
	MakeByte	(0X1D38D);
	MakeByte	(0X1D38E);
	MakeByte	(0X1D38F);
	MakeByte	(0X1D390);
	MakeByte	(0X1D391);
	MakeByte	(0X1D392);
	MakeByte	(0X1D393);
	MakeByte	(0X1D394);
	MakeByte	(0X1D395);
	MakeByte	(0X1D396);
	MakeByte	(0X1D397);
	MakeByte	(0X1D398);
	MakeByte	(0X1D399);
	MakeByte	(0X1D39A);
	MakeByte	(0X1D39B);
	MakeByte	(0X1D39C);
	MakeByte	(0X1D39D);
	MakeByte	(0X1D39E);
	MakeByte	(0X1D39F);
	MakeByte	(0X1D3A0);
	MakeByte	(0X1D3A1);
	MakeByte	(0X1D3A2);
	MakeByte	(0X1D3A3);
	MakeByte	(0X1D3A4);
	MakeByte	(0X1D3A5);
	MakeByte	(0X1D3A6);
	MakeByte	(0X1D3A7);
	MakeByte	(0X1D3A8);
	MakeByte	(0X1D3A9);
	MakeByte	(0X1D3AA);
	MakeByte	(0X1D3AB);
	MakeByte	(0X1D3AC);
	MakeByte	(0X1D3AD);
	MakeByte	(0X1D3AE);
	MakeByte	(0X1D3AF);
	MakeByte	(0X1D3B0);
	MakeByte	(0X1D3B1);
	MakeDword	(x=0X1D3B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1D3B2,	"pt_BattleExits");
	MakeDword	(x=0X1D3B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1D3BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1D3BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1D3C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1D3C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1D3CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1D3CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1D3D2);
	MakeArray	(0X1D3D2,	0X8E);
	MakeName	(0X1D3D2,	"BattleExit0");
	MakeByte	(0X1D460);
	MakeArray	(0X1D460,	0X62);
	MakeName	(0X1D460,	"BattleExit1");
	MakeByte	(0X1D4C2);
	MakeArray	(0X1D4C2,	0X3A);
	MakeName	(0X1D4C2,	"BattleExit2");
	MakeByte	(0X1D4FC);
	MakeArray	(0X1D4FC,	0X52);
	MakeName	(0X1D4FC,	"BattleExit3");
	MakeByte	(0X1D54E);
	MakeArray	(0X1D54E,	0XA);
	MakeName	(0X1D54E,	"BattleExit4");
	MakeByte	(0X1D558);
	MakeArray	(0X1D558,	0X5E);
	MakeName	(0X1D558,	"BattleExit5");
	MakeByte	(0X1D5B6);
	MakeArray	(0X1D5B6,	0X52);
	MakeName	(0X1D5B6,	"BattleExit6");
	MakeByte	(0X1D608);
	MakeArray	(0X1D608,	0X86);
	MakeName	(0X1D608,	"BattleExit7");
	MakeByte	(0X1D68E);
	MakeArray	(0X1D68E,	0X400);
	MakeName	(0X1D68E,	"BattleChests");
	MakeCode	(x=0X1DA8E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X1DA8E,	"PlayEnding");
	MakeWord	(x=0X1DA90);
	OpEnumEx		(x,	0,	GetEnum("SoundCommands"),0);
	MakeCode	(0X1DA92);
	MakeCode	(x=0X1DAFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DB0A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DB10);
	OpHex		(x,	0);
	MakeCode	(x=0X1DB28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DB3C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1DB50);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1DB54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DB72);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DB78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DB8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DBB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DBB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DBBA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X1DBD0);
	MakeArray	(0X1DBD0,	0X4);
	MakeCode	(0X1DBD4);
	MakeCode	(x=0X1DC2A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DC30);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DC42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DC52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DC58);
	OpHex		(x,	0);
	MakeCode	(x=0X1DC74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DC7A);
	OpHex		(x,	0);
	MakeCode	(x=0X1DC8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DC8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DC94);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DCAC);
	OpHex		(x,	0);
	MakeCode	(x=0X1DCE0);
	OpHex		(x,	0);
	MakeCode	(x=0X1DCFA);
	OpHex		(x,	0);
	MakeCode	(x=0X1DD0C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DD10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DD20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DD26);
	OpHex		(x,	0);
	MakeCode	(x=0X1DD3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DD42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1DD6C,	"\"Well, hello there.[Delay2][Delay2][Line]You look like you're[Line]a long way from home.[Delay2][Delay2]\"");
	MakeCode	(x=0X1DD70);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1DD74,	"\"We don't see many folk in[Line]full armor like that.[Delay2][Delay2][Delay2][Line]Quite a fancy getup![Delay2][Delay2][Delay2][Delay2]\"");
	MakeCode	(x=0X1DD78);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1DD7C,	"\"I have come a long way.[Delay2][Delay2][Delay2][Line]Longer than you can[Line]imagine.[Delay2][Delay2][Delay2][Delay2]\"");
	MakeCode	(x=0X1DD80);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1DD84,	"\"I must say you do look pretty[Line]tired and, well,[Delay2][Delay2][Line]your things have seen[Line]better days.[Delay2][Delay2][Delay2][Delay2]\"");
	MakeCode	(x=0X1DD88);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1DD8C,	"\"I'm tired of wandering.[Delay2][Delay2][Line]I'm looking for a place to[Line]settle down and rest.[Delay2][Delay2][Delay2][Delay2]\"");
	MakeCode	(x=0X1DD90);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1DD94,	"\"Well, how about right here?[Delay2][Delay2][Line]Lend your hands to the fields[Line]of our village?[Delay2][Delay2][Delay2][Delay2]\"");
	MakeCode	(x=0X1DD98);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X1DDB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1DDD0,	"\"That sounds like just what I[Line]need right now. [Delay2][Delay2][Delay2]I work hard[Line]and I'm a fast learner.[Delay2][Delay2][Delay2][Delay2]\"");
	MakeCode	(x=0X1DDD4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1DDD8,	"\"Good! We've got a deal then.[Delay2][Delay2][Delay2][Line]Folks in the village will be[Line]excited to see a new face![Delay2][Delay2]\"");
	MakeCode	(x=0X1DDDC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1DDE0,	"\"I didn't catch your name.[Line]What do they call you?[Delay2][Delay2][Delay2][Delay2]\"");
	MakeCode	(x=0X1DDE4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1DDE8,	"\"Me? You can call me...[Delay2][Delay2]\"");
	MakeCode	(x=0X1DDEC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X1DDF6);
	OpHex		(x,	0);
	MakeCode	(x=0X1DE1E);
	OpHex		(x,	0);
	MakeCode	(x=0X1DE46);
	OpHex		(x,	0);
	MakeCode	(x=0X1DE6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DE6E);
	OpHex		(x,	0);
	MakeCode	(x=0X1DEA2);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(x=0X1DEC2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1DF1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1DF28,	"pt_IntroTiles");
	MakeDword	(x=0X1DF2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF30);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF34);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF38);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF3C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF44);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF60);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1DF64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1DF68);
	MakeArray	(0X1DF68,	0X23);
	MakeName	(0X1DF68,	"IntroTile00");
	MakeByte	(0X1DF8B);
	MakeArray	(0X1DF8B,	0X3F);
	MakeName	(0X1DF8B,	"IntroTile01");
	MakeByte	(0X1DFCA);
	MakeArray	(0X1DFCA,	0X4A);
	MakeName	(0X1DFCA,	"IntroTile02");
	MakeByte	(0X1E014);
	MakeArray	(0X1E014,	0X36);
	MakeName	(0X1E014,	"IntroTile03");
	MakeByte	(0X1E04A);
	MakeArray	(0X1E04A,	0X54);
	MakeName	(0X1E04A,	"IntroTile04");
	MakeByte	(0X1E09E);
	MakeArray	(0X1E09E,	0X39);
	MakeName	(0X1E09E,	"IntroTile05");
	MakeByte	(0X1E0D7);
	MakeArray	(0X1E0D7,	0X63);
	MakeName	(0X1E0D7,	"IntroTile06");
	MakeByte	(0X1E13A);
	MakeArray	(0X1E13A,	0X59);
	MakeName	(0X1E13A,	"IntroTile07");
	MakeByte	(0X1E193);
	MakeArray	(0X1E193,	0X5A);
	MakeName	(0X1E193,	"IntroTile08");
	MakeByte	(0X1E1ED);
	MakeArray	(0X1E1ED,	0X56);
	MakeName	(0X1E1ED,	"IntroTile09");
	MakeByte	(0X1E243);
	MakeArray	(0X1E243,	0X42);
	MakeName	(0X1E243,	"IntroTile10");
	MakeByte	(0X1E285);
	MakeArray	(0X1E285,	0X2D);
	MakeName	(0X1E285,	"IntroTile11");
	MakeByte	(0X1E2B2);
	MakeArray	(0X1E2B2,	0X4C);
	MakeName	(0X1E2B2,	"IntroTile12");
	MakeByte	(0X1E2FE);
	MakeArray	(0X1E2FE,	0X31);
	MakeName	(0X1E2FE,	"IntroTile13");
	MakeByte	(0X1E32F);
	MakeArray	(0X1E32F,	0X36);
	MakeName	(0X1E32F,	"IntroTile14");
	MakeByte	(0X1E365);
	MakeArray	(0X1E365,	0X15);
	MakeName	(0X1E365,	"IntroTile15");
	MakeByte	(0X1E37A);
	MakeByte	(0X1E37B);
	MakeByte	(0X1E37C);
	MakeByte	(0X1E37D);
	MakeByte	(0X1E37E);
	MakeByte	(0X1E37F);
	MakeByte	(0X1E380);
	MakeByte	(0X1E381);
	MakeByte	(0X1E382);
	MakeByte	(0X1E383);
	MakeByte	(0X1E384);
	MakeByte	(0X1E385);
	MakeByte	(0X1E386);
	MakeByte	(0X1E387);
	MakeByte	(0X1E388);
	MakeByte	(0X1E389);
	MakeByte	(0X1E38A);
	MakeByte	(0X1E38B);
	MakeByte	(0X1E38C);
	MakeByte	(0X1E38D);
	MakeByte	(0X1E38E);
	MakeByte	(0X1E38F);
	MakeByte	(0X1E390);
	MakeByte	(0X1E391);
	MakeByte	(0X1E392);
	MakeByte	(0X1E393);
	MakeByte	(0X1E394);
	MakeByte	(0X1E395);
	MakeByte	(0X1E396);
	MakeByte	(0X1E397);
	MakeByte	(0X1E398);
	MakeByte	(0X1E399);
	MakeByte	(0X1E39A);
	MakeByte	(0X1E39B);
	MakeByte	(0X1E39C);
	MakeByte	(0X1E39D);
	MakeByte	(0X1E39E);
	MakeByte	(0X1E39F);
	MakeByte	(0X1E3A0);
	MakeByte	(0X1E3A1);
	MakeByte	(0X1E3A2);
	MakeByte	(0X1E3A3);
	MakeByte	(0X1E3A4);
	MakeByte	(0X1E3A5);
	MakeByte	(0X1E3A6);
	MakeByte	(0X1E3A7);
	MakeByte	(0X1E3A8);
	MakeByte	(0X1E3A9);
	MakeByte	(0X1E3AA);
	MakeByte	(0X1E3AB);
	MakeByte	(0X1E3AC);
	MakeByte	(0X1E3AD);
	MakeByte	(0X1E3AE);
	MakeByte	(0X1E3AF);
	MakeByte	(0X1E3B0);
	MakeByte	(0X1E3B1);
	MakeByte	(0X1E3B2);
	MakeByte	(0X1E3B3);
	MakeByte	(0X1E3B4);
	MakeByte	(0X1E3B5);
	MakeByte	(0X1E3B6);
	MakeByte	(0X1E3B7);
	MakeByte	(0X1E3B8);
	MakeByte	(0X1E3B9);
	MakeByte	(0X1E3BA);
	MakeByte	(0X1E3BB);
	MakeByte	(0X1E3BC);
	MakeByte	(0X1E3BD);
	MakeByte	(0X1E3BE);
	MakeByte	(0X1E3BF);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_5(void) {
        auto x;
#define id x

	MakeByte	(0X1E3C0);
	MakeByte	(0X1E3C1);
	MakeByte	(0X1E3C2);
	MakeByte	(0X1E3C3);
	MakeByte	(0X1E3C4);
	MakeByte	(0X1E3C5);
	MakeByte	(0X1E3C6);
	MakeByte	(0X1E3C7);
	MakeByte	(0X1E3C8);
	MakeByte	(0X1E3C9);
	MakeByte	(0X1E3CA);
	MakeByte	(0X1E3CB);
	MakeByte	(0X1E3CC);
	MakeByte	(0X1E3CD);
	MakeByte	(0X1E3CE);
	MakeByte	(0X1E3CF);
	MakeByte	(0X1E3D0);
	MakeByte	(0X1E3D1);
	MakeByte	(0X1E3D2);
	MakeByte	(0X1E3D3);
	MakeByte	(0X1E3D4);
	MakeByte	(0X1E3D5);
	MakeByte	(0X1E3D6);
	MakeByte	(0X1E3D7);
	MakeByte	(0X1E3D8);
	MakeByte	(0X1E3D9);
	MakeByte	(0X1E3DA);
	MakeByte	(0X1E3DB);
	MakeByte	(0X1E3DC);
	MakeByte	(0X1E3DD);
	MakeByte	(0X1E3DE);
	MakeByte	(0X1E3DF);
	MakeByte	(0X1E3E0);
	MakeByte	(0X1E3E1);
	MakeByte	(0X1E3E2);
	MakeByte	(0X1E3E3);
	MakeByte	(0X1E3E4);
	MakeByte	(0X1E3E5);
	MakeByte	(0X1E3E6);
	MakeByte	(0X1E3E7);
	MakeByte	(0X1E3E8);
	MakeByte	(0X1E3E9);
	MakeByte	(0X1E3EA);
	MakeByte	(0X1E3EB);
	MakeByte	(0X1E3EC);
	MakeByte	(0X1E3ED);
	MakeByte	(0X1E3EE);
	MakeByte	(0X1E3EF);
	MakeByte	(0X1E3F0);
	MakeByte	(0X1E3F1);
	MakeByte	(0X1E3F2);
	MakeByte	(0X1E3F3);
	MakeByte	(0X1E3F4);
	MakeByte	(0X1E3F5);
	MakeByte	(0X1E3F6);
	MakeByte	(0X1E3F7);
	MakeByte	(0X1E3F8);
	MakeByte	(0X1E3F9);
	MakeByte	(0X1E3FA);
	MakeByte	(0X1E3FB);
	MakeByte	(0X1E3FC);
	MakeByte	(0X1E3FD);
	MakeByte	(0X1E3FE);
	MakeByte	(0X1E3FF);
	MakeByte	(0X1E400);
	MakeByte	(0X1E401);
	MakeByte	(0X1E402);
	MakeByte	(0X1E403);
	MakeByte	(0X1E404);
	MakeByte	(0X1E405);
	MakeByte	(0X1E406);
	MakeByte	(0X1E407);
	MakeByte	(0X1E408);
	MakeByte	(0X1E409);
	MakeByte	(0X1E40A);
	MakeByte	(0X1E40B);
	MakeByte	(0X1E40C);
	MakeByte	(0X1E40D);
	MakeByte	(0X1E40E);
	MakeByte	(0X1E40F);
	MakeByte	(0X1E410);
	MakeByte	(0X1E411);
	MakeByte	(0X1E412);
	MakeByte	(0X1E413);
	MakeByte	(0X1E414);
	MakeByte	(0X1E415);
	MakeByte	(0X1E416);
	MakeByte	(0X1E417);
	MakeByte	(0X1E418);
	MakeByte	(0X1E419);
	MakeByte	(0X1E41A);
	MakeByte	(0X1E41B);
	MakeByte	(0X1E41C);
	MakeByte	(0X1E41D);
	MakeByte	(0X1E41E);
	MakeByte	(0X1E41F);
	MakeByte	(0X1E420);
	MakeByte	(0X1E421);
	MakeByte	(0X1E422);
	MakeByte	(0X1E423);
	MakeByte	(0X1E424);
	MakeByte	(0X1E425);
	MakeByte	(0X1E426);
	MakeByte	(0X1E427);
	MakeByte	(0X1E428);
	MakeByte	(0X1E429);
	MakeByte	(0X1E42A);
	MakeByte	(0X1E42B);
	MakeByte	(0X1E42C);
	MakeByte	(0X1E42D);
	MakeByte	(0X1E42E);
	MakeByte	(0X1E42F);
	MakeByte	(0X1E430);
	MakeByte	(0X1E431);
	MakeByte	(0X1E432);
	MakeByte	(0X1E433);
	MakeByte	(0X1E434);
	MakeByte	(0X1E435);
	MakeByte	(0X1E436);
	MakeByte	(0X1E437);
	MakeByte	(0X1E438);
	MakeByte	(0X1E439);
	MakeByte	(0X1E43A);
	MakeByte	(0X1E43B);
	MakeByte	(0X1E43C);
	MakeByte	(0X1E43D);
	MakeByte	(0X1E43E);
	MakeByte	(0X1E43F);
	MakeByte	(0X1E440);
	MakeByte	(0X1E441);
	MakeByte	(0X1E442);
	MakeByte	(0X1E443);
	MakeByte	(0X1E444);
	MakeByte	(0X1E445);
	MakeByte	(0X1E446);
	MakeByte	(0X1E447);
	MakeByte	(0X1E448);
	MakeByte	(0X1E449);
	MakeByte	(0X1E44A);
	MakeByte	(0X1E44B);
	MakeByte	(0X1E44C);
	MakeByte	(0X1E44D);
	MakeByte	(0X1E44E);
	MakeByte	(0X1E44F);
	MakeByte	(0X1E450);
	MakeByte	(0X1E451);
	MakeByte	(0X1E452);
	MakeByte	(0X1E453);
	MakeByte	(0X1E454);
	MakeByte	(0X1E455);
	MakeByte	(0X1E456);
	MakeByte	(0X1E457);
	MakeByte	(0X1E458);
	MakeByte	(0X1E459);
	MakeByte	(0X1E45A);
	MakeByte	(0X1E45B);
	MakeByte	(0X1E45C);
	MakeByte	(0X1E45D);
	MakeByte	(0X1E45E);
	MakeByte	(0X1E45F);
	MakeByte	(0X1E460);
	MakeByte	(0X1E461);
	MakeByte	(0X1E462);
	MakeByte	(0X1E463);
	MakeByte	(0X1E464);
	MakeByte	(0X1E465);
	MakeByte	(0X1E466);
	MakeByte	(0X1E467);
	MakeByte	(0X1E468);
	MakeByte	(0X1E469);
	MakeByte	(0X1E46A);
	MakeByte	(0X1E46B);
	MakeByte	(0X1E46C);
	MakeByte	(0X1E46D);
	MakeByte	(0X1E46E);
	MakeByte	(0X1E46F);
	MakeByte	(0X1E470);
	MakeByte	(0X1E471);
	MakeByte	(0X1E472);
	MakeByte	(0X1E473);
	MakeByte	(0X1E474);
	MakeByte	(0X1E475);
	MakeByte	(0X1E476);
	MakeByte	(0X1E477);
	MakeByte	(0X1E478);
	MakeByte	(0X1E479);
	MakeByte	(0X1E47A);
	MakeByte	(0X1E47B);
	MakeByte	(0X1E47C);
	MakeByte	(0X1E47D);
	MakeByte	(0X1E47E);
	MakeByte	(0X1E47F);
	MakeByte	(0X1E480);
	MakeByte	(0X1E481);
	MakeByte	(0X1E482);
	MakeByte	(0X1E483);
	MakeByte	(0X1E484);
	MakeByte	(0X1E485);
	MakeByte	(0X1E486);
	MakeByte	(0X1E487);
	MakeByte	(0X1E488);
	MakeByte	(0X1E489);
	MakeByte	(0X1E48A);
	MakeByte	(0X1E48B);
	MakeByte	(0X1E48C);
	MakeByte	(0X1E48D);
	MakeByte	(0X1E48E);
	MakeByte	(0X1E48F);
	MakeByte	(0X1E490);
	MakeByte	(0X1E491);
	MakeByte	(0X1E492);
	MakeByte	(0X1E493);
	MakeByte	(0X1E494);
	MakeByte	(0X1E495);
	MakeByte	(0X1E496);
	MakeByte	(0X1E497);
	MakeByte	(0X1E498);
	MakeByte	(0X1E499);
	MakeByte	(0X1E49A);
	MakeByte	(0X1E49B);
	MakeByte	(0X1E49C);
	MakeByte	(0X1E49D);
	MakeByte	(0X1E49E);
	MakeByte	(0X1E49F);
	MakeByte	(0X1E4A0);
	MakeByte	(0X1E4A1);
	MakeByte	(0X1E4A2);
	MakeByte	(0X1E4A3);
	MakeByte	(0X1E4A4);
	MakeByte	(0X1E4A5);
	MakeByte	(0X1E4A6);
	MakeByte	(0X1E4A7);
	MakeByte	(0X1E4A8);
	MakeByte	(0X1E4A9);
	MakeByte	(0X1E4AA);
	MakeByte	(0X1E4AB);
	MakeByte	(0X1E4AC);
	MakeByte	(0X1E4AD);
	MakeByte	(0X1E4AE);
	MakeByte	(0X1E4AF);
	MakeByte	(0X1E4B0);
	MakeByte	(0X1E4B1);
	MakeByte	(0X1E4B2);
	MakeByte	(0X1E4B3);
	MakeByte	(0X1E4B4);
	MakeByte	(0X1E4B5);
	MakeByte	(0X1E4B6);
	MakeByte	(0X1E4B7);
	MakeByte	(0X1E4B8);
	MakeByte	(0X1E4B9);
	MakeByte	(0X1E4BA);
	MakeByte	(0X1E4BB);
	MakeByte	(0X1E4BC);
	MakeByte	(0X1E4BD);
	MakeByte	(0X1E4BE);
	MakeByte	(0X1E4BF);
	MakeByte	(0X1E4C0);
	MakeByte	(0X1E4C1);
	MakeByte	(0X1E4C2);
	MakeByte	(0X1E4C3);
	MakeByte	(0X1E4C4);
	MakeByte	(0X1E4C5);
	MakeByte	(0X1E4C6);
	MakeByte	(0X1E4C7);
	MakeByte	(0X1E4C8);
	MakeByte	(0X1E4C9);
	MakeByte	(0X1E4CA);
	MakeByte	(0X1E4CB);
	MakeByte	(0X1E4CC);
	MakeByte	(0X1E4CD);
	MakeByte	(0X1E4CE);
	MakeByte	(0X1E4CF);
	MakeByte	(0X1E4D0);
	MakeByte	(0X1E4D1);
	MakeByte	(0X1E4D2);
	MakeByte	(0X1E4D3);
	MakeByte	(0X1E4D4);
	MakeByte	(0X1E4D5);
	MakeByte	(0X1E4D6);
	MakeByte	(0X1E4D7);
	MakeByte	(0X1E4D8);
	MakeByte	(0X1E4D9);
	MakeByte	(0X1E4DA);
	MakeByte	(0X1E4DB);
	MakeByte	(0X1E4DC);
	MakeByte	(0X1E4DD);
	MakeByte	(0X1E4DE);
	MakeByte	(0X1E4DF);
	MakeByte	(0X1E4E0);
	MakeByte	(0X1E4E1);
	MakeByte	(0X1E4E2);
	MakeByte	(0X1E4E3);
	MakeByte	(0X1E4E4);
	MakeByte	(0X1E4E5);
	MakeByte	(0X1E4E6);
	MakeByte	(0X1E4E7);
	MakeByte	(0X1E4E8);
	MakeByte	(0X1E4E9);
	MakeByte	(0X1E4EA);
	MakeByte	(0X1E4EB);
	MakeByte	(0X1E4EC);
	MakeByte	(0X1E4ED);
	MakeByte	(0X1E4EE);
	MakeByte	(0X1E4EF);
	MakeByte	(0X1E4F0);
	MakeByte	(0X1E4F1);
	MakeByte	(0X1E4F2);
	MakeByte	(0X1E4F3);
	MakeByte	(0X1E4F4);
	MakeByte	(0X1E4F5);
	MakeByte	(0X1E4F6);
	MakeByte	(0X1E4F7);
	MakeByte	(0X1E4F8);
	MakeByte	(0X1E4F9);
	MakeByte	(0X1E4FA);
	MakeByte	(0X1E4FB);
	MakeByte	(0X1E4FC);
	MakeByte	(0X1E4FD);
	MakeByte	(0X1E4FE);
	MakeByte	(0X1E4FF);
	MakeByte	(0X1E500);
	MakeByte	(0X1E501);
	MakeByte	(0X1E502);
	MakeByte	(0X1E503);
	MakeByte	(0X1E504);
	MakeByte	(0X1E505);
	MakeByte	(0X1E506);
	MakeByte	(0X1E507);
	MakeByte	(0X1E508);
	MakeByte	(0X1E509);
	MakeByte	(0X1E50A);
	MakeByte	(0X1E50B);
	MakeByte	(0X1E50C);
	MakeByte	(0X1E50D);
	MakeByte	(0X1E50E);
	MakeByte	(0X1E50F);
	MakeByte	(0X1E510);
	MakeByte	(0X1E511);
	MakeByte	(0X1E512);
	MakeByte	(0X1E513);
	MakeByte	(0X1E514);
	MakeByte	(0X1E515);
	MakeByte	(0X1E516);
	MakeByte	(0X1E517);
	MakeByte	(0X1E518);
	MakeByte	(0X1E519);
	MakeByte	(0X1E51A);
	MakeByte	(0X1E51B);
	MakeByte	(0X1E51C);
	MakeByte	(0X1E51D);
	MakeByte	(0X1E51E);
	MakeByte	(0X1E51F);
	MakeByte	(0X1E520);
	MakeByte	(0X1E521);
	MakeByte	(0X1E522);
	MakeByte	(0X1E523);
	MakeByte	(0X1E524);
	MakeByte	(0X1E525);
	MakeByte	(0X1E526);
	MakeByte	(0X1E527);
	MakeByte	(0X1E528);
	MakeByte	(0X1E529);
	MakeByte	(0X1E52A);
	MakeByte	(0X1E52B);
	MakeByte	(0X1E52C);
	MakeByte	(0X1E52D);
	MakeByte	(0X1E52E);
	MakeByte	(0X1E52F);
	MakeByte	(0X1E530);
	MakeByte	(0X1E531);
	MakeByte	(0X1E532);
	MakeByte	(0X1E533);
	MakeByte	(0X1E534);
	MakeByte	(0X1E535);
	MakeByte	(0X1E536);
	MakeByte	(0X1E537);
	MakeByte	(0X1E538);
	MakeByte	(0X1E539);
	MakeByte	(0X1E53A);
	MakeByte	(0X1E53B);
	MakeByte	(0X1E53C);
	MakeByte	(0X1E53D);
	MakeByte	(0X1E53E);
	MakeByte	(0X1E53F);
	MakeByte	(0X1E540);
	MakeByte	(0X1E541);
	MakeByte	(0X1E542);
	MakeByte	(0X1E543);
	MakeByte	(0X1E544);
	MakeByte	(0X1E545);
	MakeByte	(0X1E546);
	MakeByte	(0X1E547);
	MakeByte	(0X1E548);
	MakeByte	(0X1E549);
	MakeByte	(0X1E54A);
	MakeByte	(0X1E54B);
	MakeByte	(0X1E54C);
	MakeByte	(0X1E54D);
	MakeByte	(0X1E54E);
	MakeByte	(0X1E54F);
	MakeByte	(0X1E550);
	MakeByte	(0X1E551);
	MakeByte	(0X1E552);
	MakeByte	(0X1E553);
	MakeByte	(0X1E554);
	MakeByte	(0X1E555);
	MakeByte	(0X1E556);
	MakeByte	(0X1E557);
	MakeByte	(0X1E558);
	MakeByte	(0X1E559);
	MakeByte	(0X1E55A);
	MakeByte	(0X1E55B);
	MakeByte	(0X1E55C);
	MakeByte	(0X1E55D);
	MakeByte	(0X1E55E);
	MakeByte	(0X1E55F);
	MakeByte	(0X1E560);
	MakeByte	(0X1E561);
	MakeByte	(0X1E562);
	MakeByte	(0X1E563);
	MakeByte	(0X1E564);
	MakeByte	(0X1E565);
	MakeByte	(0X1E566);
	MakeByte	(0X1E567);
	MakeByte	(0X1E568);
	MakeByte	(0X1E569);
	MakeByte	(0X1E56A);
	MakeByte	(0X1E56B);
	MakeByte	(0X1E56C);
	MakeByte	(0X1E56D);
	MakeByte	(0X1E56E);
	MakeByte	(0X1E56F);
	MakeByte	(0X1E570);
	MakeByte	(0X1E571);
	MakeByte	(0X1E572);
	MakeByte	(0X1E573);
	MakeByte	(0X1E574);
	MakeByte	(0X1E575);
	MakeByte	(0X1E576);
	MakeByte	(0X1E577);
	MakeByte	(0X1E578);
	MakeByte	(0X1E579);
	MakeByte	(0X1E57A);
	MakeByte	(0X1E57B);
	MakeByte	(0X1E57C);
	MakeByte	(0X1E57D);
	MakeByte	(0X1E57E);
	MakeByte	(0X1E57F);
	MakeByte	(0X1E580);
	MakeByte	(0X1E581);
	MakeByte	(0X1E582);
	MakeByte	(0X1E583);
	MakeByte	(0X1E584);
	MakeByte	(0X1E585);
	MakeByte	(0X1E586);
	MakeByte	(0X1E587);
	MakeByte	(0X1E588);
	MakeByte	(0X1E589);
	MakeByte	(0X1E58A);
	MakeByte	(0X1E58B);
	MakeByte	(0X1E58C);
	MakeByte	(0X1E58D);
	MakeByte	(0X1E58E);
	MakeByte	(0X1E58F);
	MakeByte	(0X1E590);
	MakeByte	(0X1E591);
	MakeByte	(0X1E592);
	MakeByte	(0X1E593);
	MakeByte	(0X1E594);
	MakeByte	(0X1E595);
	MakeByte	(0X1E596);
	MakeByte	(0X1E597);
	MakeByte	(0X1E598);
	MakeByte	(0X1E599);
	MakeByte	(0X1E59A);
	MakeByte	(0X1E59B);
	MakeByte	(0X1E59C);
	MakeByte	(0X1E59D);
	MakeByte	(0X1E59E);
	MakeByte	(0X1E59F);
	MakeByte	(0X1E5A0);
	MakeByte	(0X1E5A1);
	MakeByte	(0X1E5A2);
	MakeByte	(0X1E5A3);
	MakeByte	(0X1E5A4);
	MakeByte	(0X1E5A5);
	MakeByte	(0X1E5A6);
	MakeByte	(0X1E5A7);
	MakeByte	(0X1E5A8);
	MakeByte	(0X1E5A9);
	MakeByte	(0X1E5AA);
	MakeByte	(0X1E5AB);
	MakeByte	(0X1E5AC);
	MakeByte	(0X1E5AD);
	MakeByte	(0X1E5AE);
	MakeByte	(0X1E5AF);
	MakeByte	(0X1E5B0);
	MakeByte	(0X1E5B1);
	MakeByte	(0X1E5B2);
	MakeByte	(0X1E5B3);
	MakeByte	(0X1E5B4);
	MakeByte	(0X1E5B5);
	MakeByte	(0X1E5B6);
	MakeByte	(0X1E5B7);
	MakeByte	(0X1E5B8);
	MakeByte	(0X1E5B9);
	MakeByte	(0X1E5BA);
	MakeByte	(0X1E5BB);
	MakeByte	(0X1E5BC);
	MakeByte	(0X1E5BD);
	MakeByte	(0X1E5BE);
	MakeByte	(0X1E5BF);
	MakeByte	(0X1E5C0);
	MakeByte	(0X1E5C1);
	MakeByte	(0X1E5C2);
	MakeByte	(0X1E5C3);
	MakeByte	(0X1E5C4);
	MakeByte	(0X1E5C5);
	MakeByte	(0X1E5C6);
	MakeByte	(0X1E5C7);
	MakeByte	(0X1E5C8);
	MakeByte	(0X1E5C9);
	MakeByte	(0X1E5CA);
	MakeByte	(0X1E5CB);
	MakeByte	(0X1E5CC);
	MakeByte	(0X1E5CD);
	MakeByte	(0X1E5CE);
	MakeByte	(0X1E5CF);
	MakeByte	(0X1E5D0);
	MakeByte	(0X1E5D1);
	MakeByte	(0X1E5D2);
	MakeByte	(0X1E5D3);
	MakeByte	(0X1E5D4);
	MakeByte	(0X1E5D5);
	MakeByte	(0X1E5D6);
	MakeByte	(0X1E5D7);
	MakeByte	(0X1E5D8);
	MakeByte	(0X1E5D9);
	MakeByte	(0X1E5DA);
	MakeByte	(0X1E5DB);
	MakeByte	(0X1E5DC);
	MakeByte	(0X1E5DD);
	MakeByte	(0X1E5DE);
	MakeByte	(0X1E5DF);
	MakeByte	(0X1E5E0);
	MakeByte	(0X1E5E1);
	MakeByte	(0X1E5E2);
	MakeByte	(0X1E5E3);
	MakeByte	(0X1E5E4);
	MakeByte	(0X1E5E5);
	MakeByte	(0X1E5E6);
	MakeByte	(0X1E5E7);
	MakeByte	(0X1E5E8);
	MakeByte	(0X1E5E9);
	MakeByte	(0X1E5EA);
	MakeByte	(0X1E5EB);
	MakeByte	(0X1E5EC);
	MakeByte	(0X1E5ED);
	MakeByte	(0X1E5EE);
	MakeByte	(0X1E5EF);
	MakeByte	(0X1E5F0);
	MakeByte	(0X1E5F1);
	MakeByte	(0X1E5F2);
	MakeByte	(0X1E5F3);
	MakeByte	(0X1E5F4);
	MakeByte	(0X1E5F5);
	MakeByte	(0X1E5F6);
	MakeByte	(0X1E5F7);
	MakeByte	(0X1E5F8);
	MakeByte	(0X1E5F9);
	MakeByte	(0X1E5FA);
	MakeByte	(0X1E5FB);
	MakeByte	(0X1E5FC);
	MakeByte	(0X1E5FD);
	MakeByte	(0X1E5FE);
	MakeByte	(0X1E5FF);
	MakeByte	(0X1E600);
	MakeByte	(0X1E601);
	MakeByte	(0X1E602);
	MakeByte	(0X1E603);
	MakeByte	(0X1E604);
	MakeByte	(0X1E605);
	MakeByte	(0X1E606);
	MakeByte	(0X1E607);
	MakeByte	(0X1E608);
	MakeByte	(0X1E609);
	MakeByte	(0X1E60A);
	MakeByte	(0X1E60B);
	MakeByte	(0X1E60C);
	MakeByte	(0X1E60D);
	MakeByte	(0X1E60E);
	MakeByte	(0X1E60F);
	MakeByte	(0X1E610);
	MakeByte	(0X1E611);
	MakeByte	(0X1E612);
	MakeByte	(0X1E613);
	MakeByte	(0X1E614);
	MakeByte	(0X1E615);
	MakeByte	(0X1E616);
	MakeByte	(0X1E617);
	MakeByte	(0X1E618);
	MakeByte	(0X1E619);
	MakeByte	(0X1E61A);
	MakeByte	(0X1E61B);
	MakeByte	(0X1E61C);
	MakeByte	(0X1E61D);
	MakeByte	(0X1E61E);
	MakeByte	(0X1E61F);
	MakeByte	(0X1E620);
	MakeByte	(0X1E621);
	MakeByte	(0X1E622);
	MakeByte	(0X1E623);
	MakeByte	(0X1E624);
	MakeByte	(0X1E625);
	MakeByte	(0X1E626);
	MakeByte	(0X1E627);
	MakeByte	(0X1E628);
	MakeByte	(0X1E629);
	MakeByte	(0X1E62A);
	MakeByte	(0X1E62B);
	MakeByte	(0X1E62C);
	MakeByte	(0X1E62D);
	MakeByte	(0X1E62E);
	MakeByte	(0X1E62F);
	MakeByte	(0X1E630);
	MakeByte	(0X1E631);
	MakeByte	(0X1E632);
	MakeByte	(0X1E633);
	MakeByte	(0X1E634);
	MakeByte	(0X1E635);
	MakeByte	(0X1E636);
	MakeByte	(0X1E637);
	MakeByte	(0X1E638);
	MakeByte	(0X1E639);
	MakeByte	(0X1E63A);
	MakeByte	(0X1E63B);
	MakeByte	(0X1E63C);
	MakeByte	(0X1E63D);
	MakeByte	(0X1E63E);
	MakeByte	(0X1E63F);
	MakeByte	(0X1E640);
	MakeByte	(0X1E641);
	MakeByte	(0X1E642);
	MakeByte	(0X1E643);
	MakeByte	(0X1E644);
	MakeByte	(0X1E645);
	MakeByte	(0X1E646);
	MakeByte	(0X1E647);
	MakeByte	(0X1E648);
	MakeByte	(0X1E649);
	MakeByte	(0X1E64A);
	MakeByte	(0X1E64B);
	MakeByte	(0X1E64C);
	MakeByte	(0X1E64D);
	MakeByte	(0X1E64E);
	MakeByte	(0X1E64F);
	MakeByte	(0X1E650);
	MakeByte	(0X1E651);
	MakeByte	(0X1E652);
	MakeByte	(0X1E653);
	MakeByte	(0X1E654);
	MakeByte	(0X1E655);
	MakeByte	(0X1E656);
	MakeByte	(0X1E657);
	MakeByte	(0X1E658);
	MakeByte	(0X1E659);
	MakeByte	(0X1E65A);
	MakeByte	(0X1E65B);
	MakeByte	(0X1E65C);
	MakeByte	(0X1E65D);
	MakeByte	(0X1E65E);
	MakeByte	(0X1E65F);
	MakeByte	(0X1E660);
	MakeByte	(0X1E661);
	MakeByte	(0X1E662);
	MakeByte	(0X1E663);
	MakeByte	(0X1E664);
	MakeByte	(0X1E665);
	MakeByte	(0X1E666);
	MakeByte	(0X1E667);
	MakeByte	(0X1E668);
	MakeByte	(0X1E669);
	MakeByte	(0X1E66A);
	MakeByte	(0X1E66B);
	MakeByte	(0X1E66C);
	MakeByte	(0X1E66D);
	MakeByte	(0X1E66E);
	MakeByte	(0X1E66F);
	MakeByte	(0X1E670);
	MakeByte	(0X1E671);
	MakeByte	(0X1E672);
	MakeByte	(0X1E673);
	MakeByte	(0X1E674);
	MakeByte	(0X1E675);
	MakeByte	(0X1E676);
	MakeByte	(0X1E677);
	MakeByte	(0X1E678);
	MakeByte	(0X1E679);
	ExtLinA		(0X1E67A,	0,	"; sprite properties data");
	ExtLinA		(0X1E67A,	1,	"                ");
	MakeWord	(0X1E67A);
	MakeByte	(0X1E67C);
	MakeByte	(0X1E67D);
	MakeWord	(0X1E67E);
	MakeWord	(0X1E680);
	MakeWord	(0X1E682);
	MakeByte	(0X1E684);
	MakeByte	(0X1E685);
	MakeWord	(0X1E686);
	MakeWord	(0X1E688);
	MakeWord	(0X1E68A);
	MakeByte	(0X1E68C);
	MakeByte	(0X1E68D);
	MakeWord	(0X1E68E);
	MakeWord	(0X1E690);
	MakeWord	(0X1E692);
	MakeByte	(0X1E694);
	MakeByte	(0X1E695);
	MakeWord	(0X1E696);
	MakeWord	(0X1E698);
	MakeWord	(0X1E69A);
	MakeByte	(0X1E69C);
	MakeByte	(0X1E69D);
	MakeWord	(0X1E69E);
	MakeWord	(0X1E6A0);
	MakeWord	(0X1E6A2);
	MakeByte	(0X1E6A4);
	MakeByte	(0X1E6A5);
	MakeWord	(0X1E6A6);
	MakeWord	(0X1E6A8);
	MakeWord	(0X1E6AA);
	MakeByte	(0X1E6AC);
	MakeByte	(0X1E6AD);
	MakeWord	(0X1E6AE);
	MakeWord	(0X1E6B0);
	MakeWord	(0X1E6B2);
	MakeByte	(0X1E6B4);
	MakeByte	(0X1E6B5);
	MakeWord	(0X1E6B6);
	MakeWord	(0X1E6B8);
	MakeWord	(0X1E6BA);
	MakeByte	(0X1E6BC);
	MakeByte	(0X1E6BD);
	MakeWord	(0X1E6BE);
	MakeWord	(0X1E6C0);
	MakeWord	(0X1E6C2);
	MakeByte	(0X1E6C4);
	MakeByte	(0X1E6C5);
	MakeWord	(0X1E6C6);
	MakeWord	(0X1E6C8);
	MakeWord	(0X1E6CA);
	MakeByte	(0X1E6CC);
	MakeByte	(0X1E6CD);
	MakeWord	(0X1E6CE);
	MakeWord	(0X1E6D0);
	MakeWord	(0X1E6D2);
	MakeByte	(0X1E6D4);
	MakeByte	(0X1E6D5);
	MakeWord	(0X1E6D6);
	MakeWord	(0X1E6D8);
	MakeWord	(0X1E6DA);
	MakeByte	(0X1E6DC);
	MakeByte	(0X1E6DD);
	MakeWord	(0X1E6DE);
	MakeWord	(0X1E6E0);
	MakeWord	(0X1E6E2);
	MakeByte	(0X1E6E4);
	MakeByte	(0X1E6E5);
	MakeWord	(0X1E6E6);
	MakeWord	(0X1E6E8);
	MakeWord	(0X1E6EA);
	MakeByte	(0X1E6EC);
	MakeByte	(0X1E6ED);
	MakeWord	(0X1E6EE);
	MakeWord	(0X1E6F0);
	MakeWord	(0X1E6F2);
	MakeByte	(0X1E6F4);
	MakeByte	(0X1E6F5);
	MakeWord	(0X1E6F6);
	MakeWord	(0X1E6F8);
	MakeWord	(0X1E6FA);
	MakeByte	(0X1E6FC);
	MakeByte	(0X1E6FD);
	MakeWord	(0X1E6FE);
	MakeWord	(0X1E700);
	MakeWord	(0X1E702);
	MakeByte	(0X1E704);
	MakeByte	(0X1E705);
	MakeWord	(0X1E706);
	MakeWord	(0X1E708);
	MakeWord	(0X1E70A);
	MakeByte	(0X1E70C);
	MakeByte	(0X1E70D);
	MakeWord	(0X1E70E);
	MakeWord	(0X1E710);
	MakeByte	(0X1E712);
	MakeByte	(0X1E713);
	MakeByte	(0X1E714);
	MakeByte	(0X1E715);
	MakeByte	(0X1E716);
	MakeByte	(0X1E717);
	MakeByte	(0X1E718);
	MakeByte	(0X1E719);
	MakeByte	(0X1E71A);
	MakeByte	(0X1E71B);
	MakeByte	(0X1E71C);
	MakeByte	(0X1E71D);
	MakeByte	(0X1E71E);
	MakeByte	(0X1E71F);
	MakeByte	(0X1E720);
	MakeByte	(0X1E721);
	MakeByte	(0X1E722);
	MakeByte	(0X1E723);
	MakeByte	(0X1E724);
	MakeByte	(0X1E725);
	MakeByte	(0X1E726);
	MakeByte	(0X1E727);
	MakeByte	(0X1E728);
	MakeByte	(0X1E729);
	MakeByte	(0X1E72A);
	MakeByte	(0X1E72B);
	MakeByte	(0X1E72C);
	MakeByte	(0X1E72D);
	MakeByte	(0X1E72E);
	MakeByte	(0X1E72F);
	MakeByte	(0X1E730);
	MakeByte	(0X1E731);
	MakeByte	(0X1E732);
	MakeByte	(0X1E733);
	MakeByte	(0X1E734);
	MakeByte	(0X1E735);
	MakeByte	(0X1E736);
	MakeByte	(0X1E737);
	MakeByte	(0X1E738);
	MakeByte	(0X1E739);
	MakeByte	(0X1E73A);
	MakeByte	(0X1E73B);
	MakeByte	(0X1E73C);
	MakeByte	(0X1E73D);
	MakeByte	(0X1E73E);
	MakeByte	(0X1E73F);
	MakeByte	(0X1E740);
	MakeByte	(0X1E741);
	MakeByte	(0X1E742);
	MakeByte	(0X1E743);
	MakeByte	(0X1E744);
	MakeByte	(0X1E745);
	MakeByte	(0X1E746);
	MakeByte	(0X1E747);
	MakeByte	(0X1E748);
	MakeByte	(0X1E749);
	MakeByte	(0X1E74A);
	MakeByte	(0X1E74B);
	MakeByte	(0X1E74C);
	MakeByte	(0X1E74D);
	MakeByte	(0X1E74E);
	MakeByte	(0X1E74F);
	MakeByte	(0X1E750);
	MakeByte	(0X1E751);
	MakeByte	(0X1E752);
	MakeByte	(0X1E753);
	MakeByte	(0X1E754);
	MakeByte	(0X1E755);
	MakeByte	(0X1E756);
	MakeByte	(0X1E757);
	MakeByte	(0X1E758);
	MakeByte	(0X1E759);
	MakeByte	(0X1E75A);
	MakeByte	(0X1E75B);
	MakeByte	(0X1E75C);
	MakeByte	(0X1E75D);
	MakeByte	(0X1E75E);
	MakeByte	(0X1E75F);
	MakeByte	(0X1E760);
	MakeByte	(0X1E761);
	MakeByte	(0X1E762);
	MakeByte	(0X1E763);
	MakeByte	(0X1E764);
	MakeByte	(0X1E765);
	MakeByte	(0X1E766);
	MakeByte	(0X1E767);
	MakeByte	(0X1E768);
	MakeByte	(0X1E769);
	MakeByte	(0X1E76A);
	MakeByte	(0X1E76B);
	MakeByte	(0X1E76C);
	MakeByte	(0X1E76D);
	MakeByte	(0X1E76E);
	MakeByte	(0X1E76F);
	MakeByte	(0X1E770);
	MakeByte	(0X1E771);
	MakeByte	(0X1E772);
	MakeByte	(0X1E773);
	MakeByte	(0X1E774);
	MakeByte	(0X1E775);
	MakeByte	(0X1E776);
	MakeByte	(0X1E777);
	MakeByte	(0X1E778);
	MakeByte	(0X1E779);
	MakeByte	(0X1E77A);
	MakeByte	(0X1E77B);
	MakeByte	(0X1E77C);
	MakeByte	(0X1E77D);
	MakeByte	(0X1E77E);
	MakeByte	(0X1E77F);
	MakeByte	(0X1E780);
	MakeByte	(0X1E781);
	MakeByte	(0X1E782);
	MakeByte	(0X1E783);
	MakeByte	(0X1E784);
	MakeByte	(0X1E785);
	MakeByte	(0X1E786);
	MakeByte	(0X1E787);
	MakeByte	(0X1E788);
	MakeByte	(0X1E789);
	MakeByte	(0X1E78A);
	MakeByte	(0X1E78B);
	MakeByte	(0X1E78C);
	MakeByte	(0X1E78D);
	MakeByte	(0X1E78E);
	MakeByte	(0X1E78F);
	MakeByte	(0X1E790);
	MakeByte	(0X1E791);
	MakeByte	(0X1E792);
	MakeByte	(0X1E793);
	MakeByte	(0X1E794);
	MakeByte	(0X1E795);
	MakeByte	(0X1E796);
	MakeByte	(0X1E797);
	MakeByte	(0X1E798);
	MakeByte	(0X1E799);
	MakeByte	(0X1E79A);
	MakeByte	(0X1E79B);
	MakeByte	(0X1E79C);
	MakeByte	(0X1E79D);
	MakeByte	(0X1E79E);
	MakeByte	(0X1E79F);
	MakeByte	(0X1E7A0);
	MakeByte	(0X1E7A1);
	MakeByte	(0X1E7A2);
	MakeByte	(0X1E7A3);
	MakeByte	(0X1E7A4);
	MakeByte	(0X1E7A5);
	MakeByte	(0X1E7A6);
	MakeByte	(0X1E7A7);
	MakeByte	(0X1E7A8);
	MakeByte	(0X1E7A9);
	MakeByte	(0X1E7AA);
	MakeByte	(0X1E7AB);
	MakeByte	(0X1E7AC);
	MakeByte	(0X1E7AD);
	MakeByte	(0X1E7AE);
	MakeByte	(0X1E7AF);
	MakeByte	(0X1E7B0);
	MakeByte	(0X1E7B1);
	MakeByte	(0X1E7B2);
	MakeByte	(0X1E7B3);
	MakeByte	(0X1E7B4);
	MakeByte	(0X1E7B5);
	MakeByte	(0X1E7B6);
	MakeByte	(0X1E7B7);
	MakeByte	(0X1E7B8);
	MakeByte	(0X1E7B9);
	MakeByte	(0X1E7BA);
	MakeByte	(0X1E7BB);
	MakeByte	(0X1E7BC);
	MakeByte	(0X1E7BD);
	MakeByte	(0X1E7BE);
	MakeByte	(0X1E7BF);
	MakeByte	(0X1E7C0);
	MakeByte	(0X1E7C1);
	MakeByte	(0X1E7C2);
	MakeByte	(0X1E7C3);
	MakeByte	(0X1E7C4);
	MakeByte	(0X1E7C5);
	MakeByte	(0X1E7C6);
	MakeByte	(0X1E7C7);
	MakeByte	(0X1E7C8);
	MakeByte	(0X1E7C9);
	MakeByte	(0X1E7CA);
	MakeByte	(0X1E7CB);
	MakeByte	(0X1E7CC);
	MakeByte	(0X1E7CD);
	MakeByte	(0X1E7CE);
	MakeByte	(0X1E7CF);
	MakeByte	(0X1E7D0);
	MakeByte	(0X1E7D1);
	MakeByte	(0X1E7D2);
	MakeByte	(0X1E7D3);
	MakeByte	(0X1E7D4);
	MakeByte	(0X1E7D5);
	MakeByte	(0X1E7D6);
	MakeByte	(0X1E7D7);
	MakeByte	(0X1E7D8);
	MakeByte	(0X1E7D9);
	MakeByte	(0X1E7DA);
	MakeByte	(0X1E7DB);
	MakeByte	(0X1E7DC);
	MakeByte	(0X1E7DD);
	MakeByte	(0X1E7DE);
	MakeByte	(0X1E7DF);
	MakeByte	(0X1E7E0);
	MakeByte	(0X1E7E1);
	MakeByte	(0X1E7E2);
	MakeByte	(0X1E7E3);
	MakeByte	(0X1E7E4);
	MakeByte	(0X1E7E5);
	MakeByte	(0X1E7E6);
	MakeByte	(0X1E7E7);
	MakeByte	(0X1E7E8);
	MakeByte	(0X1E7E9);
	MakeByte	(0X1E7EA);
	MakeByte	(0X1E7EB);
	MakeByte	(0X1E7EC);
	MakeByte	(0X1E7ED);
	MakeByte	(0X1E7EE);
	MakeByte	(0X1E7EF);
	MakeByte	(0X1E7F0);
	MakeByte	(0X1E7F1);
	MakeByte	(0X1E7F2);
	MakeByte	(0X1E7F3);
	MakeByte	(0X1E7F4);
	MakeByte	(0X1E7F5);
	MakeByte	(0X1E7F6);
	MakeByte	(0X1E7F7);
	MakeByte	(0X1E7F8);
	MakeByte	(0X1E7F9);
	MakeByte	(0X1E7FA);
	MakeByte	(0X1E7FB);
	MakeByte	(0X1E7FC);
	MakeByte	(0X1E7FD);
	MakeByte	(0X1E7FE);
	MakeByte	(0X1E7FF);
	MakeByte	(0X1E800);
	MakeByte	(0X1E801);
	MakeByte	(0X1E802);
	MakeByte	(0X1E803);
	MakeByte	(0X1E804);
	MakeByte	(0X1E805);
	MakeByte	(0X1E806);
	MakeByte	(0X1E807);
	MakeByte	(0X1E808);
	MakeByte	(0X1E809);
	MakeByte	(0X1E80A);
	MakeByte	(0X1E80B);
	MakeByte	(0X1E80C);
	MakeByte	(0X1E80D);
	MakeByte	(0X1E80E);
	MakeByte	(0X1E80F);
	MakeByte	(0X1E810);
	MakeByte	(0X1E811);
	MakeByte	(0X1E812);
	MakeByte	(0X1E813);
	MakeByte	(0X1E814);
	MakeByte	(0X1E815);
	MakeByte	(0X1E816);
	MakeByte	(0X1E817);
	MakeByte	(0X1E818);
	MakeByte	(0X1E819);
	MakeByte	(0X1E81A);
	MakeByte	(0X1E81B);
	MakeByte	(0X1E81C);
	MakeByte	(0X1E81D);
	MakeByte	(0X1E81E);
	MakeByte	(0X1E81F);
	MakeByte	(0X1E820);
	MakeByte	(0X1E821);
	MakeByte	(0X1E822);
	MakeByte	(0X1E823);
	MakeByte	(0X1E824);
	MakeByte	(0X1E825);
	MakeByte	(0X1E826);
	MakeByte	(0X1E827);
	MakeByte	(0X1E828);
	MakeByte	(0X1E829);
	MakeByte	(0X1E82A);
	MakeByte	(0X1E82B);
	MakeByte	(0X1E82C);
	MakeByte	(0X1E82D);
	MakeByte	(0X1E82E);
	MakeByte	(0X1E82F);
	MakeByte	(0X1E830);
	MakeByte	(0X1E831);
	MakeByte	(0X1E832);
	MakeByte	(0X1E833);
	MakeByte	(0X1E834);
	MakeByte	(0X1E835);
	MakeByte	(0X1E836);
	MakeByte	(0X1E837);
	MakeByte	(0X1E838);
	MakeByte	(0X1E839);
	MakeByte	(0X1E83A);
	MakeByte	(0X1E83B);
	MakeByte	(0X1E83C);
	MakeByte	(0X1E83D);
	MakeByte	(0X1E83E);
	MakeByte	(0X1E83F);
	MakeByte	(0X1E840);
	MakeByte	(0X1E841);
	MakeByte	(0X1E842);
	MakeByte	(0X1E843);
	MakeByte	(0X1E844);
	MakeByte	(0X1E845);
	MakeByte	(0X1E846);
	MakeByte	(0X1E847);
	MakeByte	(0X1E848);
	MakeByte	(0X1E849);
	MakeByte	(0X1E84A);
	MakeByte	(0X1E84B);
	MakeByte	(0X1E84C);
	MakeByte	(0X1E84D);
	MakeByte	(0X1E84E);
	MakeByte	(0X1E84F);
	MakeByte	(0X1E850);
	MakeByte	(0X1E851);
	MakeByte	(0X1E852);
	MakeByte	(0X1E853);
	MakeByte	(0X1E854);
	MakeByte	(0X1E855);
	MakeByte	(0X1E856);
	MakeByte	(0X1E857);
	MakeByte	(0X1E858);
	MakeByte	(0X1E859);
	MakeByte	(0X1E85A);
	MakeByte	(0X1E85B);
	MakeByte	(0X1E85C);
	MakeByte	(0X1E85D);
	MakeByte	(0X1E85E);
	MakeByte	(0X1E85F);
	MakeByte	(0X1E860);
	MakeByte	(0X1E861);
	MakeByte	(0X1E862);
	MakeByte	(0X1E863);
	MakeByte	(0X1E864);
	MakeByte	(0X1E865);
	MakeByte	(0X1E866);
	MakeByte	(0X1E867);
	MakeByte	(0X1E868);
	MakeByte	(0X1E869);
	MakeByte	(0X1E86A);
	MakeByte	(0X1E86B);
	MakeByte	(0X1E86C);
	MakeByte	(0X1E86D);
	MakeByte	(0X1E86E);
	MakeByte	(0X1E86F);
	MakeByte	(0X1E870);
	MakeByte	(0X1E871);
	MakeByte	(0X1E872);
	MakeByte	(0X1E873);
	MakeByte	(0X1E874);
	MakeByte	(0X1E875);
	MakeByte	(0X1E876);
	MakeByte	(0X1E877);
	MakeByte	(0X1E878);
	MakeByte	(0X1E879);
	MakeByte	(0X1E87A);
	MakeByte	(0X1E87B);
	MakeByte	(0X1E87C);
	MakeByte	(0X1E87D);
	MakeByte	(0X1E87E);
	MakeByte	(0X1E87F);
	MakeByte	(0X1E880);
	MakeByte	(0X1E881);
	MakeByte	(0X1E882);
	MakeByte	(0X1E883);
	MakeByte	(0X1E884);
	MakeByte	(0X1E885);
	MakeByte	(0X1E886);
	MakeByte	(0X1E887);
	MakeByte	(0X1E888);
	MakeByte	(0X1E889);
	MakeByte	(0X1E88A);
	MakeByte	(0X1E88B);
	MakeByte	(0X1E88C);
	MakeByte	(0X1E88D);
	MakeByte	(0X1E88E);
	MakeByte	(0X1E88F);
	MakeByte	(0X1E890);
	MakeByte	(0X1E891);
	MakeByte	(0X1E892);
	MakeArray	(0X1E892,	0X1A8);
	MakeName	(0X1E892,	"TextBankTreesPointers");
	MakeByte	(0X1EA3A);
	MakeArray	(0X1EA3A,	0X5A6);
	MakeName	(0X1EA3A,	"TextBankTreeData");
	MakeCode	(0X1EFE0);
	MakeName	(0X1EFE0,	"InitDecoder");
	MakeCode	(0X1EFF6);
	MakeName	(0X1EFF6,	"HuffmanDecode");
	MakeCode	(x=0X1EFFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1F000,	"huffman length : current progress in reading current barrel");
	MakeRptCmt	(0X1F002,	"huffman barrel : current compressed string byte to read");
	MakeRptCmt	(0X1F008,	"Get last decoded text symbol -> huffman tree to use");
	MakeCode	(x=0X1F00E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1F012,	"get tree offset");
	MakeCode	(x=0X1F016);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1F01C,	"a1 = a2 = current tree start address");
	MakeRptCmt	(0X1F01E,	"clear Huffman tree bit counter");
	MakeRptCmt	(0X1F020,	"clear skipped symbols counter");
	MakeRptCmt	(0X1F028,	"Load next Huffman tree byte");
	MakeRptCmt	(0X1F02A,	"Get next Huffman tree bit into Carry");
	MakeRptCmt	(0X1F02C,	"C = 1 --> Leaf node, go get symbol\nC = 0 --> Non-leaf node, read next string bit\n");
	MakeRptCmt	(0X1F034,	"Load next compressed string byte");
	MakeRptCmt	(0X1F036,	"Get next compressed string bit into Carry");
	MakeRptCmt	(0X1F038,	"C = 0 --> Travel left, go get next Huffman tree bit\nC = 1 --> Travel right, count left side symbols to skip");
	MakeRptCmt	(0X1F03A,	"Clear non-leaf node counter");
	MakeRptCmt	(0X1F03C,	"count left sub-tree symbols to skip");
	MakeRptCmt	(0X1F042,	"Load next huffman tree byte");
	MakeRptCmt	(0X1F044,	"Get next Huffman tree bit into Carry");
	MakeRptCmt	(0X1F046,	"C = 1 --> leaf-node, go add one symbol to skip\nC = 0 --> non-leaf node, add one node to read");
	MakeRptCmt	(0X1F048,	"increment non-leaf node counter");
	MakeRptCmt	(0X1F04C,	"increment skipped symbols counter");
	MakeCode	(0X1F04C);
	MakeRptCmt	(0X1F04E,	"Continue until all nodes in left subtree exhausted");
	MakeRptCmt	(0X1F052,	"Examine next tree node");
	MakeRptCmt	(0X1F054,	"Load decoded symbol");
	MakeCode	(0X1F054);
	MakeRptCmt	(0X1F058,	"save current string bit counter");
	MakeRptCmt	(0X1F05A,	"save current string byte");
	MakeRptCmt	(0X1F05E,	"save decoded symbol");
	MakeArray	(0X1F068,	0XF98);
	MakeCode	(0X20000);
	MakeName	(0X20000,	"j_InitializeNewGame");
	MakeCode	(0X20004);
	MakeCode	(0X20008);
	MakeName	(0X20008,	"j_LoadCombatantData");
	MakeCode	(0X2000C);
	MakeCode	(0X20010);
	MakeCode	(0X20014);
	MakeName	(0X20014,	"j_ResetCombatants");
	MakeCode	(0X20018);
	MakeName	(0X20018,	"j_JoinBattleParty");
	MakeCode	(0X2001C);
	MakeName	(0X2001C,	"j_LeaveBattleParty");
	MakeCode	(0X20020);
	MakeCode	(0X20024);
	MakeCode	(0X20028);
	MakeCode	(0X2002C);
	MakeName	(0X2002C,	"j_JoinForce");
	MakeCode	(0X20030);
	MakeName	(0X20030,	"j_dup_IsInForce");
	MakeCode	(0X20034);
	MakeName	(0X20034,	"j_PopulateForceMembersList");
	MakeCode	(0X20038);
	MakeName	(0X20038,	"j_PopulateBattlePartyMembersList");
	MakeCode	(0X2003C);
	MakeName	(0X2003C,	"j_PopulateReservePartyMembersList");
	MakeCode	(0X20040);
	MakeCode	(0X20044);
	MakeName	(0X20044,	"j_RefillWholeForceHP");
	MakeCode	(0X20048);
	MakeName	(0X20048,	"j_GetCombatantPosition");
	MakeCode	(0X2004C);
	MakeName	(0X2004C,	"j_GetStatusEffectCounter");
	MakeCode	(0X20050);
	MakeName	(0X20050,	"j_GetDisplayedNameAddress");
	MakeCode	(0X20054);
	MakeName	(0X20054,	"j_GetEntity");
	MakeCode	(0X20058);
	MakeName	(0X20058,	"j_GetCombatantX");
	MakeCode	(0X2005C);
	MakeName	(0X2005C,	"j_GetCombatantY");
	MakeCode	(0X20060);
	MakeName	(0X20060,	"j_GetModifiedAttack");
	MakeCode	(0X20064);
	MakeName	(0X20064,	"j_GetModifiedDefense");
	MakeCode	(0X20068);
	MakeName	(0X20068,	"j_GetModifiedAgility");
	MakeCode	(0X2006C);
	MakeName	(0X2006C,	"j_GetModifiedMove");
	MakeCode	(0X20070);
	MakeName	(0X20070,	"j_GetModifiedCritical");
	MakeCode	(0X20074);
	MakeName	(0X20074,	"j_GetModifiedDoubleAttackMode");
	MakeCode	(0X20078);
	MakeName	(0X20078,	"j_GetClass");
	MakeCode	(0X2007C);
	MakeName	(0X2007C,	"j_GetLevel");
	MakeCode	(0X20080);
	MakeName	(0X20080,	"j_GetBaseAttack");
	MakeCode	(0X20084);
	MakeName	(0X20084,	"j_GetBaseDefense");
	MakeCode	(0X20088);
	MakeName	(0X20088,	"j_GetBaseAgility");
	MakeCode	(0X2008C);
	MakeName	(0X2008C,	"j_GetBaseMove");
	MakeCode	(0X20090);
	MakeName	(0X20090,	"j_GetBaseCritical");
	MakeCode	(0X20094);
	MakeName	(0X20094,	"j_GetExperience");
	MakeCode	(0X20098);
	MakeName	(0X20098,	"j_GetMaxHP");
	MakeCode	(0X2009C);
	MakeName	(0X2009C,	"j_GetCurrentHP");
	MakeCode	(0X200A0);
	MakeName	(0X200A0,	"j_GetMaxMP");
	MakeCode	(0X200A4);
	MakeName	(0X200A4,	"j_GetCurrentMP");
	MakeCode	(0X200A8);
	MakeName	(0X200A8,	"j_GetStatusEffects");
	MakeCode	(0X200AC);
	MakeName	(0X200AC,	"j_GetClassForCombatant");
	MakeCode	(0X200B0);
	MakeName	(0X200B0,	"j_GetLevelForCombatant");
	MakeCode	(0X200B4);
	MakeName	(0X200B4,	"j_GetBaseAttackForCombatant");
	MakeCode	(0X200B8);
	MakeName	(0X200B8,	"j_GetBaseDefenseForCombatant");
	MakeCode	(0X200BC);
	MakeName	(0X200BC,	"j_GetBaseAgilityForCombatant");
	MakeCode	(0X200C0);
	MakeName	(0X200C0,	"j_GetBaseMoveForCombatant");
	MakeCode	(0X200C4);
	MakeName	(0X200C4,	"j_GetBaseCriticalForCombatant");
	MakeCode	(0X200C8);
	MakeName	(0X200C8,	"j_GetExperienceForCombatant");
	MakeCode	(0X200CC);
	MakeName	(0X200CC,	"j_GetStatusEffectsForCombatant");
	MakeCode	(0X200D0);
	MakeName	(0X200D0,	"j_GetMaxHpForCombatant");
	MakeCode	(0X200D4);
	MakeName	(0X200D4,	"j_GetCurrentHpForCombatant");
	MakeCode	(0X200D8);
	MakeName	(0X200D8,	"j_GetMaxMpForCombatant");
	MakeCode	(0X200DC);
	MakeName	(0X200DC,	"j_GetCurrentMpForCombatant");
	MakeCode	(0X200E0);
	MakeName	(0X200E0,	"j_GetEntityStatsAddress");
	MakeCode	(0X200E4);
	MakeName	(0X200E4,	"j_GetEntityItemsAddress");
	MakeCode	(0X200E8);
	MakeName	(0X200E8,	"j_GetCharacterSpellsAddress");
	MakeCode	(0X200EC);
	MakeName	(0X200EC,	"j_GetEntityStatsAddressForCombatant");
	MakeCode	(0X200F0);
	MakeName	(0X200F0,	"j_GetEntityItemsAddressForCombatant");
	MakeCode	(0X200F4);
	MakeName	(0X200F4,	"j_GetEntitySpellsAddressForCombatant");
	MakeCode	(0X200F8);
	MakeName	(0X200F8,	"j_SetCombatantPosition");
	MakeCode	(0X200FC);
	MakeName	(0X200FC,	"j_SetStatusEffectCounter");
	MakeCode	(0X20100);
	MakeName	(0X20100,	"j_LoadForceMemberName");
	MakeCode	(0X20104);
	MakeName	(0X20104,	"j_SetEntityIndex");
	MakeCode	(0X20108);
	MakeName	(0X20108,	"j_SetCombatantX");
	MakeCode	(0X2010C);
	MakeName	(0X2010C,	"j_SetCombatantY");
	MakeCode	(0X20110);
	MakeName	(0X20110,	"j_SetModifiedAttack");
	MakeCode	(0X20114);
	MakeName	(0X20114,	"j_SetModifiedDefense");
	MakeCode	(0X20118);
	MakeName	(0X20118,	"j_SetModifiedAgility");
	MakeCode	(0X2011C);
	MakeName	(0X2011C,	"j_SetModifiedMove");
	MakeCode	(0X20120);
	MakeName	(0X20120,	"j_SetModifiedCritical");
	MakeCode	(0X20124);
	MakeName	(0X20124,	"j_SetModifiedDoubleAttackMode");
	MakeCode	(0X20128);
	MakeName	(0X20128,	"j_SetClass");
	MakeCode	(0X2012C);
	MakeName	(0X2012C,	"j_SetLevel");
	MakeCode	(0X20130);
	MakeName	(0X20130,	"j_SetBaseAttack");
	MakeCode	(0X20134);
	MakeName	(0X20134,	"j_SetBaseDefense");
	MakeCode	(0X20138);
	MakeName	(0X20138,	"j_SetBaseAgility");
	MakeCode	(0X2013C);
	MakeName	(0X2013C,	"j_SetBaseMove");
	MakeCode	(0X20140);
	MakeName	(0X20140,	"j_SetBaseCritical");
	MakeCode	(0X20144);
	MakeName	(0X20144,	"j_SetExperience");
	MakeCode	(0X20148);
	MakeName	(0X20148,	"j_SetMaxHP");
	MakeCode	(0X2014C);
	MakeName	(0X2014C,	"j_SetCurrentHP");
	MakeCode	(0X20150);
	MakeName	(0X20150,	"j_SetMaxMP");
	MakeCode	(0X20154);
	MakeName	(0X20154,	"j_SetCurrentMP");
	MakeCode	(0X20158);
	MakeName	(0X20158,	"j_SetStatusEffects");
	MakeCode	(0X2015C);
	MakeName	(0X2015C,	"j_SetClassForCombatant");
	MakeCode	(0X20160);
	MakeName	(0X20160,	"j_SetLevelForCombatant");
	MakeCode	(0X20164);
	MakeName	(0X20164,	"j_SetBaseAttackForCombatant");
	MakeCode	(0X20168);
	MakeName	(0X20168,	"j_SetBaseDefenseForCombatant");
	MakeCode	(0X2016C);
	MakeName	(0X2016C,	"j_SetBaseAgilityForCombatant");
	MakeCode	(0X20170);
	MakeName	(0X20170,	"j_SetBaseMoveForCombatant");
	MakeCode	(0X20174);
	MakeName	(0X20174,	"j_SetBaseCriticalForCombatant");
	MakeCode	(0X20178);
	MakeName	(0X20178,	"j_SetExperienceForCombatant");
	MakeCode	(0X2017C);
	MakeName	(0X2017C,	"j_SetMaxHPforCombatant");
	MakeCode	(0X20180);
	MakeName	(0X20180,	"j_SetCurrentHPforCombatant");
	MakeCode	(0X20184);
	MakeName	(0X20184,	"j_SetMaxMPforCombatant");
	MakeCode	(0X20188);
	MakeName	(0X20188,	"j_SetCurrentMPforCombatant");
	MakeCode	(0X2018C);
	MakeName	(0X2018C,	"j_SetStatusEffectsForCombatant");
	MakeCode	(0X20190);
	MakeName	(0X20190,	"j_IncreaseExperience");
	MakeCode	(0X20194);
	MakeName	(0X20194,	"j_IncreaseCurrentMP");
	MakeCode	(0X20198);
	MakeName	(0X20198,	"j_IncreaseModifiedAttack");
	MakeCode	(0X2019C);
	MakeName	(0X2019C,	"j_IncreaseModifiedDefense");
	MakeCode	(0X201A0);
	MakeName	(0X201A0,	"j_IncreaseModifiedAgility");
	MakeCode	(0X201A4);
	MakeName	(0X201A4,	"j_IncreaseModifiedMove");
	MakeCode	(0X201A8);
	MakeName	(0X201A8,	"j_IncreaseModifiedCritical");
	MakeCode	(0X201AC);
	MakeName	(0X201AC,	"j_IncreaseLevel");
	MakeCode	(0X201B0);
	MakeName	(0X201B0,	"j_IncreaseBaseAttack");
	MakeCode	(0X201B4);
	MakeName	(0X201B4,	"j_IncreaseBaseDefense");
	MakeCode	(0X201B8);
	MakeName	(0X201B8,	"j_IncreaseBaseAgility");
	MakeCode	(0X201BC);
	MakeName	(0X201BC,	"j_IncreaseBaseMove");
	MakeCode	(0X201C0);
	MakeName	(0X201C0,	"j_IncreaseBaseCritical");
	MakeCode	(0X201C4);
	MakeName	(0X201C4,	"j_IncreaseMaxHP");
	MakeCode	(0X201C8);
	MakeName	(0X201C8,	"j_IncreaseCurrentHP");
	MakeCode	(0X201CC);
	MakeName	(0X201CC,	"j_IncreaseMaxMP");
	MakeCode	(0X201D0);
	MakeName	(0X201D0,	"j_IncreaseLevelForCombatant");
	MakeCode	(0X201D4);
	MakeName	(0X201D4,	"j_IncreaseBaseAttackForCombatant");
	MakeCode	(0X201D8);
	MakeName	(0X201D8,	"j_IncreaseBaseDefenseForCombatant");
	MakeCode	(0X201DC);
	MakeName	(0X201DC,	"j_IncreaseBaseAgilityForCombatant");
	MakeCode	(0X201E0);
	MakeName	(0X201E0,	"j_IncreaseBaseMoveForCombatant");
	MakeCode	(0X201E4);
	MakeName	(0X201E4,	"j_IncreaseBaseCriticalForCombatant");
	MakeCode	(0X201E8);
	MakeName	(0X201E8,	"j_IncreaseExperienceForCombatant");
	MakeCode	(0X201EC);
	MakeName	(0X201EC,	"j_IncreaseMaxHPforCombatant");
	MakeCode	(0X201F0);
	MakeName	(0X201F0,	"j_IncreaseCurrentHPforCombatant");
	MakeCode	(0X201F4);
	MakeName	(0X201F4,	"j_IncreaseMaxMPforCombatant");
	MakeCode	(0X201F8);
	MakeName	(0X201F8,	"j_IncreaseCurrentMPforCombatant");
	MakeCode	(0X201FC);
	MakeName	(0X201FC,	"j_DecreaseModifiedAttack");
	MakeCode	(0X20200);
	MakeName	(0X20200,	"j_DecreaseModifiedDefense");
	MakeCode	(0X20204);
	MakeName	(0X20204,	"j_DecreaseModifiedAgility");
	MakeCode	(0X20208);
	MakeName	(0X20208,	"j_DecreaseModifiedMove");
	MakeCode	(0X2020C);
	MakeName	(0X2020C,	"j_DecreaseMaxHP");
	MakeCode	(0X20210);
	MakeName	(0X20210,	"j_DecreaseMaxMP");
	MakeCode	(0X20214);
	MakeName	(0X20214,	"j_DecreaseBaseAttack");
	MakeCode	(0X20218);
	MakeName	(0X20218,	"j_DecreaseBaseDefense");
	MakeCode	(0X2021C);
	MakeName	(0X2021C,	"j_DecreaseBaseAgility");
	MakeCode	(0X20220);
	MakeName	(0X20220,	"j_DecreaseBaseMove");
	MakeCode	(0X20224);
	MakeName	(0X20224,	"j_DecreaseCurrentHP");
	MakeCode	(0X20228);
	MakeName	(0X20228,	"j_DecreaseCurrentMP");
	MakeCode	(0X2022C);
	MakeName	(0X2022C,	"j_DecreaseMaxHPforCombatant");
	MakeCode	(0X20230);
	MakeName	(0X20230,	"j_DecreaseMaxMPforCombatant");
	MakeCode	(0X20234);
	MakeName	(0X20234,	"j_DecreaseBaseAttackForCombatant");
	MakeCode	(0X20238);
	MakeName	(0X20238,	"j_DecreaseBaseDefenseForCombatant");
	MakeCode	(0X2023C);
	MakeName	(0X2023C,	"j_DecreaseBaseAgilityForCombatant");
	MakeCode	(0X20240);
	MakeName	(0X20240,	"j_DecreaseBaseMoveForCombatant");
	MakeCode	(0X20244);
	MakeName	(0X20244,	"j_DecreaseCurrentHPforCombatant");
	MakeCode	(0X20248);
	MakeName	(0X20248,	"j_DecreaseCurrentMPforCombatant");
	MakeCode	(0X2024C);
	MakeName	(0X2024C,	"j_GiveItem");
	MakeCode	(0X20250);
	MakeName	(0X20250,	"j_RemoveItem");
	MakeCode	(0X20254);
	MakeName	(0X20254,	"j_CountOccupiedItemSlots");
	MakeCode	(0X20258);
	MakeName	(0X20258,	"j_BreakItem");
	MakeCode	(0X2025C);
	MakeName	(0X2025C,	"j_GiveItemForCombatant");
	MakeCode	(0X20260);
	MakeName	(0X20260,	"j_RemoveItemForCombatant");
	MakeCode	(0X20264);
	MakeName	(0X20264,	"j_CountOccupiedItemSlotsForCombatant");
	MakeCode	(0X20268);
	MakeName	(0X20268,	"j_BreakItemForCombatant");
	MakeCode	(0X2026C);
	MakeName	(0X2026C,	"j_GetItemType");
	MakeCode	(0X20270);
	MakeName	(0X20270,	"j_GetItemPrice");
	MakeCode	(0X20274);
	MakeName	(0X20274,	"j_GetEquippedWeaponIndex");
	MakeCode	(0X20278);
	MakeName	(0X20278,	"j_GetEquippedItemForCombatant");
	MakeCode	(0X2027C);
	MakeName	(0X2027C,	"j_EquipItemForCombatant");
	MakeCode	(0X20280);
	MakeName	(0X20280,	"j_LoadEquippableItemsForCombatant");
	MakeCode	(0X20284);
	MakeName	(0X20284,	"j_IsItemEquippableForCombatant");
	MakeCode	(0X20288);
	MakeName	(0X20288,	"j_GetItemsCurseSettingsForCombatant");
	MakeCode	(0X2028C);
	MakeName	(0X2028C,	"j_GetEquippedItem");
	MakeCode	(0X20290);
	MakeName	(0X20290,	"j_EquipItem");
	MakeCode	(0X20294);
	MakeName	(0X20294,	"j_LoadEquippableItems");
	MakeCode	(0X20298);
	MakeName	(0X20298,	"j_IsItemEquippable");
	MakeCode	(0X2029C);
	MakeName	(0X2029C,	"j_GetItemsCurseSettings");
	MakeCode	(0X202A0);
	MakeName	(0X202A0,	"j_FindItemToDrop");
	MakeCode	(0X202A4);
	MakeName	(0X202A4,	"j_GetMPCost");
	MakeCode	(0X202A8);
	MakeName	(0X202A8,	"j_FindTargetableSpaces");
	MakeCode	(0X202AC);
	MakeName	(0X202AC,	"j_FindTargetsWithinArea");
	MakeCode	(0X202B0);
	MakeName	(0X202B0,	"j_JumpToRangeOrEquipEffect");
	MakeCode	(0X202B4);
	MakeName	(0X202B4,	"j_IncreaseStatOnItemUse");
	MakeCode	(0X202B8);
	MakeName	(0X202B8,	"j_CurePoison");
	MakeCode	(0X202BC);
	MakeName	(0X202BC,	"j_FindTargetableSpacesForAttack");
	MakeCode	(0X202C0);
	MakeName	(0X202C0,	"j_CreateMovementGrid");
	MakeCode	(0X202C4);
	MakeName	(0X202C4,	"j_UseItem");
	MakeCode	(0X202C8);
	MakeName	(0X202C8,	"j_FindTargetableSpacesForSpell");
	MakeCode	(0X202CC);
	MakeCode	(0X202D0);
	MakeName	(0X202D0,	"j_MakeMoveEverywhereGrid");
	MakeCode	(0X202D4);
	MakeCode	(0X202D8);
	MakeName	(0X202D8,	"j_PopulateTargetsList");
	MakeCode	(0X202DC);
	MakeName	(0X202DC,	"j_SetupBattleaction");
	MakeCode	(0X202E0);
	MakeName	(0X202E0,	"j_GetItemNameAddress");
	MakeCode	(0X202E4);
	MakeName	(0X202E4,	"j_GetClassNameAddress");
	MakeCode	(0X202E8);
	MakeName	(0X202E8,	"j_GetSpellNameAddress");
	MakeCode	(0X202EC);
	MakeName	(0X202EC,	"j_GetMoveCostEntryAddress");
	MakeCode	(0X202F0);
	MakeName	(0X202F0,	"j_GetLandEffectEntryAddress");
	MakeCode	(0X202F4);
	MakeName	(0X202F4,	"j_GetResistance");
	MakeCode	(0X202F8);
	MakeCode	(0X202FC);
	MakeName	(0X202FC,	"j_GetBaseDoubleAttackMode");
	MakeCode	(0X20300);
	MakeName	(0X20300,	"j_GetPortraitForCombatant");
	MakeCode	(0X20304);
	MakeName	(0X20304,	"j_GetPortrait");
	MakeCode	(0X20308);
	MakeName	(0X20308,	"j_GetMapSpriteForCombatant");
	MakeCode	(0X2030C);
	MakeName	(0X2030C,	"j_GetMapSprite");
	MakeCode	(0X20310);
	MakeName	(0X20310,	"j_GetBattleSpritePaletteAndAnimationIndexes");
	MakeCode	(0X20314);
	MakeName	(0X20314,	"j_LoadBattlespriteDataWithWeapon");
	MakeCode	(0X20318);
	MakeName	(0X20318,	"j_LoadBattlespriteDataWithoutWeapon");
	MakeCode	(0X2031C);
	MakeCode	(0X20320);
	MakeCode	(0X20324);
	MakeName	(0X20324,	"j_GetLandEffectForCombatant");
	MakeCode	(0X20328);
	MakeName	(0X20328,	"j_GetLandEffectAtPosition");
	MakeCode	(0X2032C);
	MakeCode	(0X20330);
	MakeName	(0X20330,	"j_GetTerrainBackgrounds");
	MakeCode	(0X20334);
	MakeName	(0X20334,	"j_LevelUp");
	MakeCode	(0X20338);
	MakeName	(0X20338,	"j_IncreaseStatsOnLevelUp");
	MakeCode	(0X2033C);
	MakeName	(0X2033C,	"j_Promote");
	MakeCode	(0X20340);
	MakeName	(0X20340,	"j_IsAsleep");
	MakeCode	(0X20344);
	MakeName	(0X20344,	"j_HandleAfterTurnStatusEffects");
	MakeCode	(0X20348);
	MakeName	(0X20348,	"j_ResetForceMemberStats");
	MakeCode	(0X2034C);
	MakeName	(0X2034C,	"j_GetGold");
	MakeCode	(0X20350);
	MakeName	(0X20350,	"j_SetGold");
	MakeCode	(0X20354);
	MakeName	(0X20354,	"j_IncreaseGold");
	MakeCode	(0X20358);
	MakeName	(0X20358,	"j_DecreaseGold");
	MakeCode	(0X2035C);
	MakeName	(0X2035C,	"j_IncrementDealsStock");
	MakeCode	(0X20360);
	MakeName	(0X20360,	"j_DecrementDealsStock");
	MakeCode	(0X20364);
	MakeName	(0X20364,	"j_LoadDealsInventory");
	MakeCode	(0X20368);
	MakeName	(0X20368,	"j_IsItemInDealsOrHeldByForce");
	MakeCode	(0X2036C);
	MakeName	(0X2036C,	"j_IsItemHeldByCharacter");
	MakeCode	(0X20370);
	MakeName	(0X20370,	"j_IsItemHeldByForce");
	MakeCode	(0X20374);
	MakeName	(0X20374,	"j_LoadBaseAttack");
	MakeCode	(0X20378);
	MakeName	(0X20378,	"j_LoadBaseDefense");
	MakeCode	(0X2037C);
	MakeName	(0X2037C,	"j_LoadBaseAgility");
	MakeCode	(0X20380);
	MakeName	(0X20380,	"j_LoadBaseMove");
	MakeCode	(0X20384);
	MakeName	(0X20384,	"j_LoadBaseCritical");
	MakeCode	(0X20388);
	MakeName	(0X20388,	"j_RefillHP");
	MakeCode	(0X2038C);
	MakeName	(0X2038C,	"j_RefillMP");
	MakeCode	(0X20390);
	MakeName	(0X20390,	"j_RefillHPforCombatant");
	MakeCode	(0X20394);
	MakeName	(0X20394,	"j_RefillMPforCombatant");
	MakeCode	(0X20398);
	MakeName	(0X20398,	"j_ClearPassabilityFlags");
	MakeCode	(0X2039C);
	MakeName	(0X2039C,	"j_ClearTableAtFFA8C0");
	MakeCode	(0X203A0);
	MakeName	(0X203A0,	"j_InitializeBattleMap");
	MakeCode	(0X203A4);
	MakeName	(0X203A4,	"j_ClearTerrainAtOccupiedSquares");
	MakeDword	(x=0X203A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203A8,	"p_InitialForceMembersData");
	MakeDword	(x=0X203AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203AC,	"p_BattleSpriteData");
	MakeDword	(x=0X203B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203B0,	"p_ItemNames");
	MakeDword	(x=0X203B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203B4,	"p_ItemData");
	MakeDword	(x=0X203B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203B8,	"p_WeaponSpriteData");
	MakeDword	(x=0X203BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203BC,	"p_ItemTypes");
	MakeDword	(x=0X203C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203C0,	"p_ClassNames");
	MakeDword	(x=0X203C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203C4,	"p_ClassData");
	MakeDword	(x=0X203C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203C8,	"p_SpellNames");
	MakeDword	(x=0X203CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203CC,	"p_SpellData");
	MakeDword	(x=0X203D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203D0,	"p_MoveCostData");
	MakeDword	(x=0X203D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203D4,	"p_LandEffectData");
	MakeDword	(x=0X203D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203D8,	"p_ForceAnimationData");
	MakeDword	(x=0X203DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203DC,	"p_EnemyAnimationData");
	MakeDword	(x=0X203E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203E0,	"p_TerrainData");
	MakeDword	(x=0X203E4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X203E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203E8,	"p_GrowthCurves");
	MakeDword	(x=0X203EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203EC,	"p_UnpromotedGrowths");
	MakeDword	(x=0X203F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203F0,	"p_PromotedGrowths");
	MakeDword	(x=0X203F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X203F4,	"p_SpellLearningData");
	MakeCode	(0X203F8);
	MakeName	(0X203F8,	"j_LoadEndingCreditsForce");
	MakeCode	(0X203FC);
	MakeName	(0X203FC,	"j_WriteEndingCreditsBattlesceneScript");
	MakeCode	(0X20400);
	MakeName	(0X20400,	"j_InitializeBattleData");
	MakeCode	(0X20404);
	MakeName	(0X20404,	"MakeEffectiveMoveCosts");
	MakeName	(0X2040C,	"PopulateTotalMoveCosts");
	MakeCode	(x=0X20410);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20414);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X20418,	"D1 = moving combatant's position converted to offset");
	MakeRptCmt	(0X2041A,	"A0 = passability flags entry address");
	MakeCode	(0X20432);
	MakeName	(0X20432,	"CalculateTotalMoveCosts");
	MakeCode	(x=0X20436);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2043E,	"clear total move cost at starting position");
	MakeCode	(x=0X2043E);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X20442);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X20448,	"D0 = cost to move one space up");
	MakeCode	(x=0X20448);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X2044C,	"D3 = remaining move points");
	MakeCode	(x=0X2044C);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X20450,	"branch if not enough move points");
	MakeCode	(x=0X20452);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X20458);
	OpEnumEx		(x,	1,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X20464);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X20468);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X20470,	"D0 = cost to move one space down");
	MakeCode	(x=0X20470);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X20474,	"D3 = remaining move points");
	MakeCode	(x=0X20474);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X20478,	"branch if not enough move points");
	MakeCode	(x=0X2047A);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X20480);
	OpEnumEx		(x,	1,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X2048C);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X20490);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X20498,	"D0 = cost to move one space left");
	MakeCode	(x=0X20498);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X2049C,	"D3 = remaining move points");
	MakeCode	(x=0X2049C);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X204A0,	"branch if not enough move points");
	MakeCode	(x=0X204A2);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X204A8);
	OpEnumEx		(x,	1,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X204B4);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X204B8);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X204C0,	"D0 = cost to move one space right");
	MakeCode	(x=0X204C0);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X204C4,	"D3 = remaining move points");
	MakeCode	(x=0X204C4);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X204C8,	"branch if not enough move points");
	MakeCode	(x=0X204CA);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X204D0);
	OpEnumEx		(x,	1,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X204DC);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X204E0);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(0X204F0);
	MakeRptCmt	(0X204F6,	"related to move costs calculation");
	MakeCode	(0X204F6);
	MakeName	(0X204F6,	"bt_204F6");
	MakeCode	(0X204FA);
	MakeCode	(0X204FE);
	MakeCode	(0X20502);
	MakeCode	(0X20506);
	MakeName	(0X20506,	"LoadMoveCosts");
	MakeCode	(x=0X2050A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X20522,	"D1 = terrain type");
	MakeCode	(x=0X2052E);
	OpEnumEx		(x,	1,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(0X2053E);
	MakeName	(0X2053E,	"BlockSpacesOccupiedByOpponents");
	MakeCode	(x=0X20542);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20546);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X20550);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeRptCmt	(0X20558,	"branch if force member");
	MakeRptCmt	(0X2055E,	"skip if not tasked to block spaces occupied by force members");
	MakeCode	(0X20562);
	MakeRptCmt	(0X20566,	"skip if not tasked to block spaces occupied by enemies");
	MakeCode	(x=0X2056E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X20574,	"make space at combatant position impassable");
	MakeCode	(0X20584);
	MakeName	(0X20584,	"SetupEffectiveMoveCosts");
	MakeCode	(0X2059E);
	MakeName	(0X2059E,	"SetupTargetingMoveCosts");
	MakeCode	(0X205AC);
	MakeName	(0X205AC,	"MakeEffectivePassabilityFlags");
	MakeCode	(0X205B2);
	MakeName	(0X205B2,	"InitPassabilityFlags");
	MakeCode	(x=0X205B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X205C6);
	OpEnumEx		(x,	1,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeRptCmt	(0X205CC,	"branch if space is outside move range");
	MakeCode	(0X205DE);
	MakeName	(0X205DE,	"ClearAllowedToStayAtFlags");
	MakeCode	(x=0X205E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X205E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X205EA);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X205F4);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeRptCmt	(0X205F8,	"skip if combatant slot is empty");
	MakeCode	(x=0X20600);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X20604,	"D1 = combatant's position converted to offset");
	MakeRptCmt	(0X2060A,	"skip if position is our own");
	MakeRptCmt	(0X2060C,	"clear \"allowed to stay at\" flag at this position");
	MakeCode	(0X2061C);
	MakeName	(0X2061C,	"MakeTargetingGrid");
	MakeCode	(x=0X20620);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_SpecialRanges"),0);
	MakeCode	(x=0X2062E);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_SpecialRanges"),0);
	MakeCode	(x=0X2063C);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_SpecialRanges"),0);
	MakeCode	(x=0X2064A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X20650,	"-> push max and min distances");
	MakeCode	(x=0X2065A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2065E,	"D1 = combatant's position converted to offset");
	MakeRptCmt	(0X20660,	"A0 = passability flags entry address");
	MakeRptCmt	(0X20662,	"D1,D2 <- pull max and min distances");
	MakeCode	(x=0X20672);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(x=0X20678);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(0X20692);
	MakeRptCmt	(0X20698,	"D1 = offset to currently evaluated space");
	MakeCode	(x=0X2069A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2069E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X206A2,	"A3 = current terrain data entry address");
	MakeCode	(x=0X206A2);
	OpEnumEx		(x,	0,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(0X206CC);
	MakeRptCmt	(0X206DC,	"Table of XY offsets, two bytes each X,Y");
	MakeWord	(0X206DC);
	MakeWord	(0X206DE);
	MakeWord	(0X206E0);
	MakeWord	(0X206E2);
	MakeWord	(0X206E4);
	MakeWord	(0X206E6);
	MakeWord	(0X206E8);
	MakeWord	(0X206EA);
	MakeWord	(0X206EC);
	MakeWord	(0X206EE);
	MakeWord	(0X206F0);
	MakeWord	(0X206F2);
	MakeWord	(0X206F4);
	MakeWord	(0X206F6);
	MakeWord	(0X206F8);
	MakeWord	(0X206FA);
	MakeWord	(0X206FC);
	MakeWord	(0X206FE);
	MakeWord	(0X20700);
	MakeWord	(0X20702);
	MakeWord	(0X20704);
	MakeWord	(0X20706);
	MakeWord	(0X20708);
	MakeWord	(0X2070A);
	MakeWord	(0X2070C);
	MakeWord	(0X2070E);
	MakeWord	(0X20710);
	MakeWord	(0X20712);
	MakeWord	(0X20714);
	MakeWord	(0X20716);
	MakeWord	(0X20718);
	MakeWord	(0X2071A);
	MakeWord	(0X2071C);
	MakeWord	(0X2071E);
	MakeWord	(0X20720);
	MakeWord	(0X20722);
	MakeWord	(0X20724);
	MakeWord	(0X20726);
	MakeWord	(0X20728);
	MakeWord	(0X2072A);
	MakeWord	(0X2072C);
	MakeWord	(0X2072E);
	MakeWord	(0X20730);
	MakeWord	(0X20732);
	MakeWord	(0X20734);
	MakeWord	(0X20736);
	MakeWord	(0X20738);
	MakeWord	(0X2073A);
	MakeWord	(0X2073C);
	MakeWord	(0X2073E);
	MakeWord	(0X20740);
	MakeWord	(0X20742);
	MakeWord	(0X20744);
	MakeWord	(0X20746);
	MakeWord	(0X20748);
	MakeWord	(0X2074A);
	MakeWord	(0X2074C);
	MakeWord	(0X2074E);
	MakeWord	(0X20750);
	MakeWord	(0X20752);
	MakeWord	(0X20754);
	MakeWord	(0X20756);
	MakeWord	(0X20758);
	MakeWord	(0X2075A);
	MakeWord	(0X2075C);
	MakeWord	(0X2075E);
	MakeWord	(0X20760);
	MakeWord	(0X20762);
	MakeWord	(0X20764);
	MakeWord	(0X20766);
	MakeWord	(0X20768);
	MakeWord	(0X2076A);
	MakeWord	(0X2076C);
	MakeWord	(0X2076E);
	MakeWord	(0X20770);
	MakeWord	(0X20772);
	MakeWord	(0X20774);
	MakeWord	(0X20776);
	MakeWord	(0X20778);
	MakeWord	(0X2077A);
	MakeWord	(0X2077C);
	MakeWord	(0X2077E);
	MakeWord	(0X20780);
	MakeWord	(0X20782);
	MakeWord	(0X20784);
	MakeWord	(0X20786);
	MakeWord	(0X20788);
	MakeWord	(0X2078A);
	MakeWord	(0X2078C);
	MakeWord	(0X2078E);
	MakeWord	(0X20790);
	MakeWord	(0X20792);
	MakeWord	(0X20794);
	MakeWord	(0X20796);
	MakeWord	(0X20798);
	MakeWord	(0X2079A);
	MakeWord	(0X2079C);
	MakeWord	(0X2079E);
	MakeWord	(0X207A0);
	MakeWord	(0X207A2);
	MakeWord	(0X207A4);
	MakeWord	(0X207A6);
	MakeWord	(0X207A8);
	MakeWord	(0X207AA);
	MakeWord	(0X207AC);
	MakeWord	(0X207AE);
	MakeWord	(0X207B0);
	MakeWord	(0X207B2);
	MakeWord	(0X207B4);
	MakeWord	(0X207B6);
	MakeWord	(0X207B8);
	MakeWord	(0X207BA);
	MakeCode	(0X207BC);
	MakeName	(0X207BC,	"LoadLaserEyeTargetGrid");
	MakeCode	(x=0X207BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X207CA);
	MakeArray	(0X207CA,	0X38);
	MakeName	(0X207CA,	"LaserEyeTargetGrid");
	MakeCode	(0X20802);
	MakeName	(0X20802,	"MakeTorchEyeTargetGrid");
	MakeCode	(x=0X2080E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20814);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X20822);
	MakeName	(0X20822,	"MakeSpecialTargetGrid");
	MakeCode	(x=0X2082E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20832);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2083A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2084E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X20868);
	MakeCode	(x=0X2086C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20872);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20876);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2088E);
	MakeCode	(0X2089E);
	MakeCode	(0X208AE);
	MakeCode	(0X208BE);
	MakeCode	(x=0X208C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X208DE);
	MakeName	(0X208DE,	"CreateTotalMoveCosts");
	MakeRptCmt	(0X20908,	"D3 = moving combatant's modified move * 2 (i.e., move points)");
	MakeCode	(0X2091A);
	MakeName	(0X2091A,	"BlockAllOccupiedSpaces");
	MakeCode	(x=0X20926);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2092A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2092E);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X2093C);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeRptCmt	(0X20940,	"go to next combatant if entry is unoccupied");
	MakeCode	(x=0X20946);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeRptCmt	(0X2094A,	"go to next combatant if entry is unoccupied (again!)");
	MakeRptCmt	(0X2094E,	"go to next combatant if entity is a force member");
	MakeCode	(x=0X20960);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2097A);
	MakeName	(0X2097A,	"CalculateDistance");
	MakeCode	(0X20994);
	MakeName	(0X20994,	"CalculateDistanceToTarget");
	MakeCode	(0X209B0);
	MakeName	(0X209B0,	"CalculateDistanceBetweenCombatants");
	MakeCode	(0X209CA);
	MakeName	(0X209CA,	"IsSpaceOccupied");
	MakeRptCmt	(0X209D0,	"D4 = X");
	MakeRptCmt	(0X209D4,	"D3 = Y");
	MakeCode	(x=0X209D6);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X209DE);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(0X209F8);
	MakeByte	(0X20A04);
	MakeArray	(0X20A04,	0X6);
	MakeName	(0X20A04,	"tbl_EffectData");
	MakeWord	(x=0X20A0A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A0C);
	MakeArray	(0X20A0C,	0X6);
	MakeWord	(x=0X20A12);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A14);
	MakeArray	(0X20A14,	0X6);
	MakeWord	(x=0X20A1A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A1C);
	MakeArray	(0X20A1C,	0X6);
	MakeWord	(x=0X20A22);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A24);
	MakeArray	(0X20A24,	0X6);
	MakeWord	(x=0X20A2A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A2C);
	MakeArray	(0X20A2C,	0X6);
	MakeWord	(x=0X20A32);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A34);
	MakeArray	(0X20A34,	0X6);
	MakeWord	(x=0X20A3A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A3C);
	MakeArray	(0X20A3C,	0X6);
	MakeWord	(x=0X20A42);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A44);
	MakeArray	(0X20A44,	0X6);
	MakeWord	(x=0X20A4A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A4C);
	MakeArray	(0X20A4C,	0X6);
	MakeWord	(x=0X20A52);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A54);
	MakeArray	(0X20A54,	0X6);
	MakeWord	(x=0X20A5A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A5C);
	MakeArray	(0X20A5C,	0X6);
	MakeWord	(x=0X20A62);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A64);
	MakeArray	(0X20A64,	0X6);
	MakeWord	(x=0X20A6A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A6C);
	MakeArray	(0X20A6C,	0X6);
	MakeWord	(x=0X20A72);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A74);
	MakeArray	(0X20A74,	0X6);
	MakeWord	(x=0X20A7A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A7C);
	MakeArray	(0X20A7C,	0X6);
	MakeWord	(x=0X20A82);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A84);
	MakeArray	(0X20A84,	0X6);
	MakeWord	(x=0X20A8A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A8C);
	MakeArray	(0X20A8C,	0X6);
	MakeWord	(x=0X20A92);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A94);
	MakeArray	(0X20A94,	0X6);
	MakeWord	(x=0X20A9A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20A9C);
	MakeArray	(0X20A9C,	0X6);
	MakeWord	(x=0X20AA2);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20AA4);
	MakeArray	(0X20AA4,	0X6);
	MakeWord	(x=0X20AAA);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20AAC);
	MakeArray	(0X20AAC,	0X6);
	MakeWord	(x=0X20AB2);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20AB4);
	MakeArray	(0X20AB4,	0X6);
	MakeWord	(x=0X20ABA);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20ABC);
	MakeArray	(0X20ABC,	0X6);
	MakeWord	(x=0X20AC2);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20AC4);
	MakeArray	(0X20AC4,	0X6);
	MakeWord	(x=0X20ACA);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20ACC);
	MakeArray	(0X20ACC,	0X6);
	MakeWord	(x=0X20AD2);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20AD4);
	MakeArray	(0X20AD4,	0X6);
	MakeWord	(x=0X20ADA);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20ADC);
	MakeArray	(0X20ADC,	0X6);
	MakeWord	(x=0X20AE2);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20AE4);
	MakeArray	(0X20AE4,	0X6);
	MakeWord	(x=0X20AEA);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20AEC);
	MakeArray	(0X20AEC,	0X6);
	MakeWord	(x=0X20AF2);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20AF4);
	MakeArray	(0X20AF4,	0X6);
	MakeWord	(x=0X20AFA);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20AFC);
	MakeArray	(0X20AFC,	0X6);
	MakeWord	(x=0X20B02);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B04);
	MakeArray	(0X20B04,	0X6);
	MakeWord	(x=0X20B0A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B0C);
	MakeArray	(0X20B0C,	0X6);
	MakeWord	(x=0X20B12);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B14);
	MakeArray	(0X20B14,	0X6);
	MakeWord	(x=0X20B1A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B1C);
	MakeArray	(0X20B1C,	0X6);
	MakeWord	(x=0X20B22);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B24);
	MakeArray	(0X20B24,	0X6);
	MakeWord	(x=0X20B2A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B2C);
	MakeArray	(0X20B2C,	0X6);
	MakeWord	(x=0X20B32);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B34);
	MakeArray	(0X20B34,	0X6);
	MakeWord	(x=0X20B3A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B3C);
	MakeArray	(0X20B3C,	0X6);
	MakeWord	(x=0X20B42);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B44);
	MakeArray	(0X20B44,	0X6);
	MakeWord	(x=0X20B4A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B4C);
	MakeArray	(0X20B4C,	0X6);
	MakeWord	(x=0X20B52);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B54);
	MakeArray	(0X20B54,	0X6);
	MakeWord	(x=0X20B5A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B5C);
	MakeArray	(0X20B5C,	0X6);
	MakeWord	(x=0X20B62);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B64);
	MakeArray	(0X20B64,	0X6);
	MakeWord	(x=0X20B6A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B6C);
	MakeArray	(0X20B6C,	0X6);
	MakeWord	(x=0X20B72);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B74);
	MakeArray	(0X20B74,	0X6);
	MakeWord	(x=0X20B7A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B7C);
	MakeArray	(0X20B7C,	0X6);
	MakeWord	(x=0X20B82);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B84);
	MakeArray	(0X20B84,	0X6);
	MakeWord	(x=0X20B8A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B8C);
	MakeArray	(0X20B8C,	0X6);
	MakeWord	(x=0X20B92);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B94);
	MakeArray	(0X20B94,	0X6);
	MakeWord	(x=0X20B9A);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20B9C);
	MakeArray	(0X20B9C,	0X6);
	MakeWord	(x=0X20BA2);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20BA4);
	MakeArray	(0X20BA4,	0X6);
	MakeWord	(x=0X20BAA);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20BAC);
	MakeArray	(0X20BAC,	0X6);
	MakeWord	(x=0X20BB2);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20BB4);
	MakeArray	(0X20BB4,	0X6);
	MakeWord	(x=0X20BBA);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20BBC);
	MakeArray	(0X20BBC,	0X6);
	MakeWord	(x=0X20BC2);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20BC4);
	MakeArray	(0X20BC4,	0X6);
	MakeWord	(x=0X20BCA);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20BCC);
	MakeArray	(0X20BCC,	0X6);
	MakeWord	(x=0X20BD2);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeByte	(0X20BD4);
	MakeArray	(0X20BD4,	0X6);
	MakeWord	(x=0X20BDA);
	OpOff		(x,	0,	0X20C1C);
	OpOff		(x,	128,	0X20C1C);
	OpOff		(x,	1,	0X20C1C);
	OpOff		(x,	129,	0X20C1C);
	MakeCode	(0X20BDC);
	MakeName	(0X20BDC,	"DetermineLaserEyeAction");
	MakeCode	(x=0X20BE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20BEE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X20BF4);
	MakeCode	(x=0X20BFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20C12);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20C1C);
	MakeName	(0X20C1C,	"StartBattleaction");
	MakeCode	(x=0X20C22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20C2E);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),0);
	MakeCode	(x=0X20C32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20C40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X20C40,	"InitializeBattlesceneAftermath");
	MakeCode	(x=0X20C44);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20C48);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20C50);
	MakeName	(0X20C50,	"EffectRoutine_Heal");
	MakeCode	(x=0X20C74);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),0);
	MakeCode	(0X20C82);
	MakeCode	(x=0X20C8E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20C94);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X20C98,	"\"[Name] regains [Num] hit[Line]points.\"");
	MakeCode	(x=0X20C98);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20C9E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20CA4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20CB0);
	MakeName	(0X20CB0,	"CalculateHealingExperience");
	MakeRptCmt	(0X20CB6,	"skip if caster is not a healer class");
	MakeRptCmt	(0X20CC2,	"skip if healing amount is 0");
	MakeRptCmt	(0X20CC4,	"max EXP per target = 20");
	MakeCode	(x=0X20CC4);
	OpDecimal	(x,	0);
	MakeCode	(x=0X20CCC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X20CD2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X20CD6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20CE2);
	MakeName	(0X20CE2,	"IsHealerClass");
	MakeCode	(x=0X20CEC);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeCode	(x=0X20CF2);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeCode	(x=0X20CF8);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeCode	(x=0X20CFE);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeCode	(x=0X20D08);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X20D08,	"CapExperienceToGain");
	MakeCode	(x=0X20D10);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20D18);
	MakeName	(0X20D18,	"EffectRoutine_Antidote");
	MakeCode	(0X20D1E);
	MakeName	(0X20D1E,	"effect_Detox");
	MakeRptCmt	(0X20D28,	"Cure poison");
	MakeCode	(x=0X20D28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20D2C);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),1);
	MakeCode	(x=0X20D32);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X20D38,	"\"All traces of poison are[Line]purged from [Name].\"");
	MakeCode	(x=0X20D3E);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X20D44,	"\"[Name] recovers.\"");
	MakeCode	(x=0X20D48);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X20D4E,	"\"But nothing happens.\"");
	MakeCode	(x=0X20D56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20D5C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20D62);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20D68);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20D6E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20D72);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20D7C);
	MakeName	(0X20D7C,	"effect_PhysicalAttack");
	MakeRptCmt	(0X20D86,	"\"Inflicts [Num] points of damage on[Line]the [Name].\"");
	MakeCode	(x=0X20D86);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X20D8E,	"\"[Name] suffers [Num][Line]points of damage.\"");
	MakeCode	(x=0X20D8E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20D94);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20D9E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20DA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20DA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20DAE);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20DB4);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),0);
	MakeCode	(x=0X20DBC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X20DC8);
	MakeCode	(x=0X20DD4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20DDA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20DDE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20DE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20DE8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20DF4);
	MakeName	(0X20DF4,	"HandleTargetDefeat");
	MakeCode	(x=0X20DF8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20DFC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20E22);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20E3C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20E4A);
	MakeName	(0X20E4A,	"LoadDeathMessage");
	MakeRptCmt	(0X20E54,	"\"[Name] can fight[Line]no longer.\"");
	MakeCode	(x=0X20E54);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X20E5C,	"\"[Name] is defeated!\"");
	MakeCode	(x=0X20E5C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20E62);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20E6A);
	MakeName	(0X20E6A,	"CalculateKillExperience");
	MakeCode	(x=0X20E70);
	OpSign		(x,	0);
	OpHex		(x,	0);
	MakeCode	(x=0X20E76);
	OpSign		(x,	0);
	OpHex		(x,	0);
	MakeCode	(0X20E7A);
	MakeCode	(x=0X20E84);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0X20E8C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X20E8D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X20E8E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X20E8F);
	OpDecimal	(x,	0);
	MakeName	(0X20E8F,	"table_KillExperienceGains");
	MakeByte	(x=0X20E90);
	OpDecimal	(x,	0);
	MakeByte	(0X20E91);
	MakeByte	(0X20E92);
	MakeByte	(0X20E93);
	MakeByte	(0X20E94);
	MakeByte	(0X20E95);
	MakeCode	(0X20E96);
	MakeName	(0X20E96,	"LoadCoinsToGain");
	MakeCode	(x=0X20EB0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20EBA);
	MakeName	(0X20EBA,	"LoadItemToDrop");
	MakeCode	(x=0X20EC8);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X20ECE);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(0X20EDE);
	MakeCode	(x=0X20EE8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20EEC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20EF6);
	MakeName	(0X20EF6,	"effect_DoomBlade");
	MakeCode	(x=0X20F02);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20F06);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),0);
	MakeCode	(0X20F12);
	MakeName	(0X20F12,	"effect_UnnullifiableMagicAttack");
	MakeCode	(0X20F1A);
	MakeName	(0X20F1A,	"effect_MagicAttack");
	MakeRptCmt	(0X20F2C,	"\"Inflicts [Num] points of damage on[Line]the [Name].\"");
	MakeCode	(x=0X20F2C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X20F34,	"\"[Name] suffers [Num][Line]points of damage.\"");
	MakeCode	(x=0X20F34);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X20F3A,	"load target's name index");
	MakeCode	(x=0X20F3A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20F3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20F42);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),0);
	MakeCode	(x=0X20F4C);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),0);
	MakeCode	(x=0X20F58);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),0);
	MakeCode	(x=0X20F62);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X20F6E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeWord	(0X20F7C);
	MakeName	(0X20F7C,	"table_MagicChanceToCriticalPercents");
	MakeWord	(0X20F7E);
	MakeWord	(0X20F80);
	MakeCode	(0X20F82);
	MakeName	(0X20F82,	"EffectRoutine_InflictStatus");
	MakeCode	(0X20F88);
	MakeName	(0X20F88,	"effect_InflictStatusNullifiableByShield");
	MakeRptCmt	(0X20F94,	"default to \"Blaze\" resistance");
	MakeCode	(x=0X20F96);
	OpEnumEx		(x,	0,	GetEnum("StatusEffects"),0);
	OpEnumEx		(x,	1,	GetEnum("EffectDefOffsets"),1);
	MakeCode	(x=0X20F9E);
	OpEnumEx		(x,	0,	GetEnum("ClassDefResistances"),0);
	MakeCode	(x=0X20FA0);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),1);
	MakeCode	(x=0X20FB0);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),1);
	MakeCode	(0X20FBA);
	MakeName	(0X20FBA,	"LoadEffectFailureMessage");
	MakeCode	(x=0X20FBC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X20FC2,	"\"But the spell doesn't work.\"");
	MakeRptCmt	(0X20FC8,	"\"But nothing happens.\"");
	MakeCode	(0X20FC8);
	MakeCode	(x=0X20FCC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X20FD4);
	MakeName	(0X20FD4,	"LoadEffectSuccessMessage");
	MakeCode	(x=0X20FDE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X20FEC,	"\"[Name]'s speed increases[Line]by [Num]. Defense level[Line]increases by [Num].\"");
	MakeCode	(x=0X20FF0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20FF4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X20FFC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21002);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X2100C,	"Quick");
	ExtLinA		(0X2100C,	0,	"; 4 bytes per entry : ");
	ExtLinA		(0X2100C,	1,	";     0: message offset");
	ExtLinA		(0X2100C,	2,	";     1: message argument [number 2]");
	ExtLinA		(0X2100C,	3,	";     2: counter");
	ExtLinA		(0X2100C,	4,	"");
	MakeByte	(0X2100C);
	MakeName	(0X2100C,	"table_StatusEffectMessageParameters");
	MakeByte	(x=0X2100D);
	OpDecimal	(x,	0);
	MakeWord	(x=0X2100E);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeRptCmt	(0X21010,	"Slow");
	MakeByte	(0X21010);
	MakeByte	(x=0X21011);
	OpDecimal	(x,	0);
	MakeWord	(x=0X21012);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeRptCmt	(0X21014,	"Boost");
	MakeByte	(0X21014);
	MakeByte	(x=0X21015);
	OpDecimal	(x,	0);
	MakeWord	(x=0X21016);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeRptCmt	(0X21018,	"Dispel");
	MakeByte	(0X21018);
	MakeByte	(0X21019);
	MakeWord	(x=0X2101A);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeRptCmt	(0X2101C,	"Shield");
	MakeByte	(0X2101C);
	MakeByte	(0X2101D);
	MakeWord	(x=0X2101E);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeRptCmt	(0X21020,	"Muddle");
	MakeByte	(0X21020);
	MakeByte	(0X21021);
	MakeWord	(x=0X21022);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeRptCmt	(0X21024,	"Sleep");
	MakeByte	(0X21024);
	MakeByte	(0X21025);
	MakeWord	(x=0X21026);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeRptCmt	(0X21028,	"Poison");
	MakeByte	(0X21028);
	MakeByte	(0X21029);
	MakeWord	(x=0X2102A);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeRptCmt	(0X2102C,	"Curse");
	MakeByte	(0X2102C);
	MakeByte	(0X2102D);
	MakeWord	(x=0X2102E);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeRptCmt	(0X21030,	"Jogurt");
	MakeByte	(0X21030);
	MakeByte	(0X21031);
	MakeWord	(x=0X21032);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeCode	(0X21034);
	MakeName	(0X21034,	"effect_Desoul");
	MakeRptCmt	(0X21046,	"\"[Name] can no longer fight.\"");
	MakeCode	(x=0X21046);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X2104E,	"\"[Name] can no longer fight.\"");
	MakeCode	(x=0X2104E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21054);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21060);
	OpEnumEx		(x,	0,	GetEnum("ClassDefResistances"),0);
	MakeRptCmt	(0X21070,	"inflict 999 points of damage");
	MakeCode	(x=0X21070);
	OpDecimal	(x,	0);
	MakeCode	(0X21078);
	MakeName	(0X21078,	"effect_AbsorbMp");
	MakeRptCmt	(0X2107C,	"\"The [Item] makes a[Line]strange sound.\"");
	MakeCode	(x=0X2107C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21082);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21086);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X210B2,	"\"[Name] loses [Num] magic[Line]points.\"");
	MakeCode	(x=0X210B2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X210BC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X210C0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X210C6);
	MakeCode	(x=0X210CA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X210D0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X210DA);
	MakeName	(0X210DA,	"effect_IncreaseStat");
	MakeCode	(0X210F0);
	MakeName	(0X210F0,	"CalculateDamage");
	MakeRptCmt	(0X210FC,	"D3 = attacker's Attack");
	MakeRptCmt	(0X21102,	"D0 = defender index");
	MakeRptCmt	(0X2110A,	"D3 = (Defense - Attack)");
	MakeRptCmt	(0X2111E,	"minimum 1 point of damage");
	MakeCode	(0X21128);
	MakeName	(0X21128,	"ApplyCriticalDamage");
	MakeCode	(x=0X2113A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21140);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X21144,	"skip if damage multiplier = 0");
	MakeCode	(0X21152);
	MakeName	(0X21152,	"LoadCriticalHitMessage");
	MakeCode	(x=0X21158);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X2115E,	"\"A deadly attack inflicts[Line][Num] points of damage[Line]on [Name].\"");
	MakeCode	(x=0X2115E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21166);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X2116C,	"\"A stunning attack! [Name][Line]suffers [Num] points[Line]of damage.\"");
	MakeCode	(x=0X2116C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21172);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21178);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X21180);
	MakeName	(0X21180,	"ApplyDamageSpread");
	MakeCode	(x=0X21184);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21198);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2119E);
	OpDecimal	(x,	0);
	MakeCode	(0X211A8);
	MakeName	(0X211A8,	"ApplyLandEffect");
	MakeRptCmt	(0X211AC,	"land effect bug! should move defender index to D1 before calling");
	MakeCode	(x=0X211B4);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X211B8,	"subtract LE from 100 and use as %");
	MakeCode	(x=0X211BC);
	OpDecimal	(x,	0);
	MakeCode	(0X211C6);
	MakeName	(0X211C6,	"ApplyResistance");
	MakeCode	(x=0X211C8);
	OpEnumEx		(x,	0,	GetEnum("ClassResistanceElements"),0);
	MakeCode	(0X211D2);
	MakeCode	(x=0X211D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X211DA);
	OpDecimal	(x,	0);
	MakeByte	(x=0X211E2);
	OpDecimal	(x,	0);
	MakeName	(0X211E2,	"table_DamageResistancePercents");
	MakeByte	(x=0X211E3);
	OpDecimal	(x,	0);
	MakeByte	(x=0X211E4);
	OpDecimal	(x,	0);
	MakeByte	(x=0X211E5);
	OpDecimal	(x,	0);
	MakeCode	(0X211E6);
	MakeName	(0X211E6,	"GetTargetCombatantResistance");
	MakeCode	(0X211FC);
	MakeName	(0X211FC,	"IsSpellNullified");
	MakeCode	(x=0X21200);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X21204,	"skip if spell costs 0 MP to cast");
	MakeCode	(x=0X2120E);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeRptCmt	(0X21214,	"\"But the spell is nullified by[Line]the magic curtain.\"");
	MakeCode	(x=0X21214);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X21224);
	MakeName	(0X21224,	"DetermineEvade");
	MakeRptCmt	(0X2122E,	"d3.b = copy of target index");
	MakeCode	(x=0X21230);
	OpEnumEx		(x,	0,	GetEnum("ClassDefResistances"),0);
	MakeRptCmt	(0X21236,	"get percent chance to evade according to resistance setting, and continue if != 0");
	MakeCode	(x=0X21236);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2123C,	"25% chance to evade if attacker is muddled");
	MakeCode	(x=0X2123C);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X21244,	"BUG : This instruction is causing the chance to evade when attacker is muddled to be applied only every other turn");
	ExtLinB		(0X21244,	0,	"                ;andi.w  #STATUSEFFECT_COUNTER_MUDDLE,d1    ; <- suggested fix to the aforementioned bug\n                ");
	ExtLinB		(0X21244,	1,	"                ");
	MakeCode	(x=0X21244);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeRptCmt	(0X2124A,	"3% chance to evade under normal circumstances");
	MakeRptCmt	(0X21250,	"branch if failed the evade roll");
	MakeRptCmt	(0X21252,	"\"[Name] quickly evades.\"");
	MakeCode	(x=0X21252);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21258);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X21266);
	MakeName	(0X21266,	"table_ChanceToEvadePercents");
	MakeByte	(x=0X21267);
	OpDecimal	(x,	0);
	MakeByte	(x=0X21268);
	OpDecimal	(x,	0);
	MakeByte	(0X21269);
	MakeCode	(0X2126A);
	MakeName	(0X2126A,	"IsAbleToEvade");
	MakeCode	(x=0X21276);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeRptCmt	(0X2127A,	"unable to evade when sleeping");
	MakeCode	(x=0X21282);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2128C,	"break out of loop when end of table is reached");
	MakeCode	(0X21294);
	MakeCode	(0X2129E);
	ExtLinA		(0X212A2,	0,	"; List of class indexes which are unable to evade physical attacks, $FF terminated");
	ExtLinA		(0X212A2,	1,	"                ");
	MakeByte	(x=0X212A2);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeName	(0X212A2,	"table_UnableToEvadeClasses");
	MakeByte	(x=0X212A3);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeByte	(x=0X212A4);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeByte	(x=0X212A5);
	OpSign		(x,	0);
	OpHex		(x,	0);
	OpSign		(x,	1);
	MakeCode	(0X212A6);
	MakeName	(0X212A6,	"GenerateRandomNumber0To99");
	MakeCode	(x=0X212A8);
	OpDecimal	(x,	0);
	MakeCode	(0X212B6);
	MakeName	(0X212B6,	"DetermineEffectFailure");
	MakeCode	(x=0X212BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X212C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X212C8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X212CC);
	OpDecimal	(x,	0);
	MakeByte	(x=0X212DA);
	OpDecimal	(x,	0);
	MakeName	(0X212DA,	"table_StatusEffectResistancePercents");
	MakeByte	(x=0X212DB);
	OpDecimal	(x,	0);
	MakeByte	(x=0X212DC);
	OpDecimal	(x,	0);
	MakeByte	(x=0X212DD);
	OpDecimal	(x,	0);
	MakeCode	(0X212DE);
	MakeName	(0X212DE,	"CalculateLevelDifference");
	MakeRptCmt	(0X212E8,	"D2 = attacker's effective level");
	MakeCode	(0X212FA);
	MakeName	(0X212FA,	"IsVulnerableToInstantDeath");
	MakeCode	(x=0X212FE);
	OpEnumEx		(x,	0,	GetEnum("ClassDefResistances"),0);
	MakeCode	(x=0X21304);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2130E);
	MakeName	(0X2130E,	"JumpToSpecialAttackRoutine");
	MakeCode	(x=0X21310);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21316);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2131C);
	MakeName	(0X2131C,	"bt_SpecialAttacks");
	MakeCode	(0X21320);
	MakeCode	(0X21324);
	MakeCode	(0X21328);
	MakeCode	(0X2132C);
	MakeCode	(0X21330);
	MakeCode	(0X21334);
	MakeCode	(0X21338);
	MakeCode	(0X2133C);
	MakeName	(0X21340,	"specialAttack_InstantDeath");
	MakeRptCmt	(0X2134A,	"\"Inflicts [Num] points of damage on[Line]the [Name].\"");
	MakeCode	(x=0X2134A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X21352,	"\"[Name] suffers [Num][Line]points of damage.\"");
	MakeCode	(x=0X21352);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21358);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21362);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2136C,	"6% death, or go back to normal attack");
	MakeRptCmt	(0X21372,	"\"[Name] is killed with a[Line]single blow.\"");
	MakeCode	(x=0X21372);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21378);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2137C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21382);
	MakeCode	(0X2138C);
	MakeName	(0X2138C,	"specialAttack_150PercentCritical");
	MakeCode	(x=0X21392);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2139C,	"25% chance to score critical hit");
	MakeCode	(x=0X2139C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X213A2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X213B2);
	MakeName	(0X213B2,	"specialAttack_200PercentCritical");
	MakeCode	(0X213BA);
	MakeName	(0X213BA,	"specialAttack_DemonSmile");
	MakeCode	(x=0X213E0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X213E6,	"\"[Name] uses the Demon's[Line]Smile!\"");
	MakeCode	(x=0X213E6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X213F0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X213F8,	"\"[Num] magic points are[Line]stolen from [Name].\"");
	MakeCode	(x=0X213F8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21402);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21406);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X2140C,	"\"But nothing happens.\"");
	MakeCode	(x=0X2140C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21412);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21418);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X21424);
	MakeName	(0X21424,	"specialAttack_OminousIncantation");
	MakeCode	(x=0X21436);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X2143C,	"\"[Name] whispers an[Line]ominous incantation!\"");
	MakeCode	(x=0X2143C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21446);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X2144A,	"\"[Num] hit points are stolen[Line]from [Name].\"");
	MakeCode	(x=0X2144A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21450);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21454);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X21460);
	MakeName	(0X21460,	"specialAttack_InflictPoison");
	MakeCode	(x=0X21468);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X21472,	"25% chance to inflict poison");
	MakeCode	(x=0X21472);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21478);
	OpEnumEx		(x,	0,	GetEnum("StatusEffects"),0);
	MakeCode	(0X21484);
	MakeName	(0X21484,	"specialAttack_InflictSleep");
	MakeCode	(x=0X2148C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X21496,	"25% chance to inflict sleep");
	MakeCode	(x=0X21496);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2149C);
	OpEnumEx		(x,	0,	GetEnum("StatusEffects"),0);
	MakeCode	(0X214A8);
	MakeName	(0X214A8,	"DetermineDarkDragonFinisher");
	MakeCode	(x=0X214B4);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeCode	(x=0X214BA);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X214C6);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X214D4);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeCode	(x=0X214DA);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeCode	(x=0X214E2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21514);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X21520);
	MakeName	(0X21520,	"LoadBattlesceneActors");
	MakeCode	(x=0X21524);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X21532,	"is caster a force member?");
	MakeRptCmt	(0X21536,	"exchange caster and target indexes if caster is an enemy");
	MakeCode	(x=0X2153E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21542);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X2154C);
	MakeRptCmt	(0X2155A,	"is force member?");
	MakeCode	(x=0X21564);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X2156A);
	MakeCode	(x=0X21570);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X2157A);
	MakeCode	(0X21592);
	MakeCode	(0X215A0);
	MakeCode	(0X215AA);
	MakeCode	(0X215BE);
	MakeCode	(0X215C8);
	MakeName	(0X215C8,	"WriteBattlesceneCommand");
	MakeCode	(0X215E0);
	MakeRptCmt	(0X215E4,	"HP change");
	MakeRptCmt	(0X215E6,	"MP change");
	MakeRptCmt	(0X215E8,	"status effects change");
	MakeRptCmt	(0X215EA,	"command flags");
	MakeCode	(0X215F2);
	MakeCode	(0X215FC);
	MakeName	(0X215FC,	"CopyBattlesceneData");
	MakeRptCmt	(0X21602,	"message index");
	MakeRptCmt	(0X21604,	"actor index");
	MakeRptCmt	(0X21606,	"item or spell index");
	MakeRptCmt	(0X21608,	"spell level");
	MakeCode	(0X2160E);
	MakeCode	(0X21620);
	MakeCode	(x=0X2162E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21640);
	MakeName	(0X21640,	"EndBattleaction");
	MakeCode	(x=0X21648);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21654);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21658);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeCode	(x=0X2165E);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(0X21678);
	MakeCode	(x=0X2167E);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X2168E);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X21694);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2169E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X216A4);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X216C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X216DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X216F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X216FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2170E);
	MakeCode	(0X21744);
	MakeName	(0X21744,	"NullBattleaction");
	MakeCode	(x=0X21746);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinA		(0X21754,	0,	"        module");
	MakeCode	(0X21754);
	MakeName	(0X21754,	"ExecuteBattleaction");
	MakeCode	(x=0X2175C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21764);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21772);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X21784,	"\"[Name] casts [Spell][Line]level [Num]![Line]But the spell fails.\"");
	MakeCode	(x=0X21784);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X2178E);
	MakeCode	(x=0X21790);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),0);
	MakeCode	(x=0X21796);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2179E,	"\"[Name] attacks!\"");
	MakeCode	(x=0X217A2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X217A6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X217AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X217B8,	"branch if battle message >= 0");
	MakeCode	(0X217C6);
	MakeCode	(x=0X217CA);
	OpEnumEx		(x,	0,	GetEnum("EffectDefOffsets"),0);
	MakeCode	(x=0X217D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X217EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X217F2,	"continue if target is an opponent");
	MakeRptCmt	(0X2180E,	"jump to effect routine");
	MakeCode	(x=0X21812);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21822);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2182C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21834);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2183E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21842);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21846);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2184A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21852);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21858);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21864);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21872);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21882);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21894);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X218A8);
	MakeCode	(x=0X218C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X218C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X218D2,	0,	"        modend");
	MakeCode	(x=0X218D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X218E4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X218EE);
	MakeCode	(x=0X218F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21900);
	MakeCode	(x=0X2190E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X21912);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21916);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21926);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2192A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X21934);
	MakeName	(0X21934,	"IsTargetOpponent");
	MakeRptCmt	(0X2193E,	"D2 = caster's entity index");
	MakeCode	(x=0X2194A);
	OpEnumEx		(x,	0,	GetEnum("EntityEntry"),0);
	MakeCode	(0X21956);
	MakeCode	(0X2195E);
	MakeName	(0X2195E,	"DetermineDoubleAttack");
	MakeCode	(x=0X21962);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2196A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21976);
	OpEnumEx		(x,	0,	GetEnum("ClassDefDoubleAttackModes"),0);
	MakeCode	(x=0X2197C);
	OpEnumEx		(x,	0,	GetEnum("ClassDefDoubleAttackModes"),0);
	MakeCode	(x=0X21986);
	OpDecimal	(x,	0);
	MakeCode	(0X2198C);
	MakeCode	(x=0X21996);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X219A8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X219B2);
	MakeCode	(x=0X219C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X219C8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X219D0);
	MakeName	(0X219D0,	"LoadBattlespriteData");
	MakeCode	(0X219DE);
	MakeCode	(0X219E6);
	MakeName	(0X219E6,	"CheckFatalDamage");
	MakeCode	(x=0X219F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X219FC);
	MakeName	(0X219FC,	"CheckDispel");
	MakeCode	(x=0X21A00);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21A0C);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeCode	(0X21A1C);
	MakeCode	(x=0X21A28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21A2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21A3E);
	MakeName	(0X21A3E,	"MirrorSpellAnimationIfEnemy");
	MakeCode	(0X21A4E);
	MakeName	(0X21A4E,	"DetermineCurseParalysis");
	MakeCode	(x=0X21A52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X21A60,	"25% chance to be paralyzed");
	MakeCode	(x=0X21A60);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X21A66,	"\"A curse! [Name]'s body[Line]suddenly goes numb.\"");
	MakeCode	(0X21A80);
	MakeName	(0X21A80,	"DetermineCurseDamage");
	MakeCode	(x=0X21A84);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X21A90,	"50% chance to receive curse damage");
	MakeCode	(x=0X21A90);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21A96);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X21A9C,	"curse damage = inflicted damage divided by 8");
	MakeRptCmt	(0X21AB2,	"\"A curse! [Name] suffers[Line][Num] points of damage.\"");
	MakeCode	(0X21AC8);
	MakeName	(0X21AC8,	"nullsub_21AC8");
	MakeCode	(0X21ACA);
	MakeCode	(x=0X21ACE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21AEE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X21AEE,	"InitializeNewGame");
	MakeCode	(x=0X21AF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21AF8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21AFC);
	OpEnumEx		(x,	0,	GetEnum("EventFlags"),0);
	ExtLinB		(0X21B02,	0,	"                ");
	MakeCode	(x=0X21B06);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21B0A);
	OpEnumEx		(x,	0,	GetEnum("DealsItems"),0);
	ExtLinB		(0X21B10,	0,	"                ");
	MakeCode	(x=0X21B14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21B1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21B22);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	ExtLinB		(0X21B28,	0,	"                ");
	MakeCode	(x=0X21B2C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21B30);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	ExtLinB		(0X21B36,	0,	"                ");
	MakeCode	(x=0X21B3A);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	ExtLinB		(0X21B54,	0,	"                ");
	ExtLinB		(0X21B64,	0,	"                ");
	MakeCode	(x=0X21B68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21B6C);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(x=0X21B70);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	ExtLinB		(0X21B74,	0,	"                ");
	MakeCode	(0X21B80);
	MakeCode	(x=0X21B86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21B8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21BA0);
	MakeCode	(x=0X21BA4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21BBE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21BC2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21BCC);
	MakeName	(0X21BCC,	"GetEnemyPositionsPointer");
	MakeCode	(x=0X21BD0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21BDC);
	MakeName	(0X21BDC,	"ClearCombatantData");
	MakeCode	(x=0X21BE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21BE4);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21BE8);
	OpSign		(x,	0);
	OpHex		(x,	0);
	ExtLinB		(0X21BEC,	0,	"                ");
	MakeCode	(0X21BF6);
	MakeCode	(0X21C0C);
	MakeCode	(x=0X21C4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21C60);
	MakeCode	(0X21C70);
	MakeCode	(0X21C78);
	MakeCode	(0X21C9C);
	MakeName	(0X21C9C,	"PopulateCombatantSlot");
	MakeRptCmt	(0X21CAC,	"X");
	MakeRptCmt	(0X21CAE,	"Y");
	MakeRptCmt	(0X21CBA,	"skip if combatant is a force member");
	ExtLinB		(0X21CBA,	0,	"                ");
	MakeCode	(x=0X21CBC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21CC0);
	OpEnumEx		(x,	0,	GetEnum("CombatantMasks"),0);
	MakeCode	(0X21CCE);
	MakeName	(0X21CCE,	"FindEmptyCombatantSlot");
	MakeCode	(x=0X21CDA);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X21CE2);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(0X21CF2);
	MakeName	(0X21CF2,	"LoadCombatantData");
	MakeCode	(x=0X21D26);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X21D2A);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X21D30);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeCode	(x=0X21D3A);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	MakeCode	(x=0X21D3E);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	ExtLinB		(0X21D4A,	0,	"                ");
	MakeCode	(0X21D56);
	MakeName	(0X21D56,	"ApplyStatusEffectsOnStats");
	MakeCode	(x=0X21D5A);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X21D64);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21D6C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21D74);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X21D7E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21D86);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21D8E);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X21D98);
	OpDecimal	(x,	0);
	MakeCode	(0X21DA6);
	MakeName	(0X21DA6,	"LoadCombatantDataForForceMember");
	MakeCode	(0X21DBC);
	MakeCode	(x=0X21DC0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X21DCC,	0,	"                ");
	MakeCode	(0X21DE8);
	MakeCode	(0X21DF2);
	MakeName	(0X21DF2,	"LoadEnemyStats");
	MakeCode	(x=0X21E02);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(x=0X21E0C);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(x=0X21E16);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(x=0X21E20);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(x=0X21E2A);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(x=0X21E34);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(x=0X21E3E);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(x=0X21E48);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(0X21EA6);
	MakeCode	(x=0X21EBC);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(x=0X21EC0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21ED8);
	MakeCode	(x=0X21EE4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21F10);
	MakeCode	(0X21F16);
	MakeCode	(x=0X21F22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21F26);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21F2A);
	OpSign		(x,	0);
	OpHex		(x,	0);
	ExtLinB		(0X21F2E,	0,	"                ");
	MakeCode	(x=0X21F32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21F36);
	OpDecimal	(x,	0);
	MakeCode	(0X21F5E);
	MakeCode	(0X21F64);
	MakeCode	(x=0X21F68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21F74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21F78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X21FDE);
	MakeCode	(x=0X21FE0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X21FF0);
	MakeName	(0X21FF0,	"GetEnemyEntryAddress");
	MakeCode	(x=0X21FF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X21FFC);
	OpEnumEx		(x,	0,	GetEnum("ForceMemberEntry"),0);
	MakeCode	(x=0X2200C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2201C);
	MakeCode	(0X22026);
	MakeName	(0X22026,	"ResetCombatants");
	MakeCode	(x=0X2202E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X22032);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	ExtLinB		(0X22040,	0,	"                ");
	MakeByte	(0X2204A);
	MakeByte	(0X2204B);
	MakeCode	(0X2204C);
	MakeCode	(x=0X22050);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X22058);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X22066);
	MakeCode	(x=0X2206C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X2206C,	"RefreshMembersList");
	MakeRptCmt	(0X22078,	"add member to list");
	MakeRptCmt	(0X2207A,	"increment list length");
	MakeCode	(x=0X2207E);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	ExtLinB		(0X22082,	0,	"                ");
	MakeCode	(x=0X22084);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X22090);
	MakeCode	(x=0X22094);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2209A);
	MakeName	(0X2209A,	"PopulateForceMembersList");
	MakeCode	(x=0X2209E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X220A4);
	MakeName	(0X220A4,	"PopulateBattlePartyMembersList");
	MakeCode	(x=0X220A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X220AE);
	MakeName	(0X220AE,	"PopulateReservePartyMembersList");
	MakeCode	(x=0X220B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X220B8);
	MakeName	(0X220B8,	"IsInForce");
	MakeCode	(x=0X220BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X220C8);
	MakeName	(0X220C8,	"IsInForceAndBattleParty");
	MakeRptCmt	(0X220CA,	"return if member has not joined");
	MakeCode	(0X220D0);
	MakeName	(0X220D0,	"IsInBattleParty");
	MakeCode	(x=0X220D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X220D8);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(x=0X220DA);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(0X220E8);
	MakeCode	(0X220F4);
	MakeName	(0X220F4,	"IsInForceAndReserveParty");
	MakeCode	(0X22100);
	MakeCode	(0X2210E);
	MakeName	(0X2210E,	"JoinBattleParty");
	MakeCode	(x=0X22112);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2211A);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(0X22126);
	MakeCode	(0X22132);
	MakeName	(0X22132,	"LeaveBattleParty");
	MakeCode	(x=0X22136);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2213A);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(x=0X2213C);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(0X2214C);
	MakeCode	(0X22158);
	MakeName	(0X22158,	"GetEmptyBattlePartySlot");
	MakeCode	(x=0X2215C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X22162);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(x=0X22164);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(0X22176);
	MakeName	(0X22176,	"SortBattlePartyMembers");
	MakeCode	(x=0X2217A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2217E);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(0X221A4);
	MakeCode	(0X221A8);
	MakeCode	(0X221AE);
	MakeName	(0X221AE,	"JoinForce");
	MakeCode	(x=0X221B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X221BC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X221C4);
	OpEnumEx		(x,	0,	GetEnum("BattlePartySlots"),0);
	MakeCode	(0X221D4);
	MakeName	(0X221D4,	"dup_IsInForce");
	MakeCode	(x=0X221D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X221E4);
	MakeName	(0X221E4,	"RegenerateHP");
	MakeCode	(x=0X221E8);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X221F0);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeRptCmt	(0X221F4,	"skip if combatant entry is unpopulated");
	MakeCode	(x=0X22200);
	OpEnumEx		(x,	0,	GetEnum("ClassDefProperties"),0);
	OpEnumEx		(x,	1,	GetEnum("ClassDefOffsets"),0);
	MakeRptCmt	(0X22206,	"skip if class is not set to regenerate HP");
	MakeRptCmt	(0X2220E,	"D1 = max HP divided by 4");
	MakeCode	(0X22220);
	MakeName	(0X22220,	"RefillWholeForceHp");
	MakeCode	(x=0X22222);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	ExtLinB		(0X2222A,	0,	"                ");
	MakeCode	(0X22232);
	MakeName	(0X22232,	"SetForceLeaderStatsInBattleTestMode");
	MakeCode	(x=0X22236);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X22240);
	OpDecimal	(x,	0);
	MakeCode	(x=0X22250);
	OpDecimal	(x,	0);
	MakeCode	(x=0X22278);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(x=0X22286);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeCode	(x=0X2228A);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeCode	(x=0X2228E);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeCode	(0X22298);
	MakeName	(0X22298,	"GetEntity");
	MakeRptCmt	(0X222A4,	"skip if combatant slot is empty");
	MakeCode	(0X222B0);
	MakeName	(0X222B0,	"GetCombatantX");
	MakeRptCmt	(0X222BC,	"skip if combatant slot is empty");
	MakeCode	(x=0X222BE);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X222CA);
	MakeName	(0X222CA,	"GetCombatantY");
	MakeRptCmt	(0X222D6,	"skip if combatant slot is empty");
	MakeCode	(x=0X222D8);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X222E4);
	MakeName	(0X222E4,	"GetModifiedAttack");
	MakeRptCmt	(0X222F0,	"skip if combatant slot is empty");
	MakeCode	(x=0X222F2);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X222FE);
	MakeName	(0X222FE,	"GetModifiedDefense");
	MakeRptCmt	(0X2230A,	"skip if combatant slot is empty");
	MakeCode	(x=0X2230C);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X22318);
	MakeName	(0X22318,	"GetModifiedAgility");
	MakeRptCmt	(0X22324,	"skip if combatant slot is empty");
	MakeCode	(x=0X22326);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X22332);
	MakeName	(0X22332,	"GetModifiedMove");
	MakeRptCmt	(0X2233E,	"skip if combatant slot is empty");
	MakeCode	(x=0X22340);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry_Offsets"),0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_6(void) {
        auto x;
#define id x

	MakeCode	(0X2234C);
	MakeName	(0X2234C,	"GetModifiedCritical");
	MakeRptCmt	(0X22358,	"skip if combatant slot is empty");
	MakeCode	(x=0X2235A);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X22366);
	MakeName	(0X22366,	"GetModifiedDoubleAttackMode");
	MakeRptCmt	(0X22372,	"skip if combatant slot is empty");
	MakeCode	(x=0X22374);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X22380);
	MakeName	(0X22380,	"GetCombatantPosition");
	MakeCode	(0X22390);
	MakeName	(0X22390,	"GetStatusEffectCounter");
	MakeCode	(x=0X2239A);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectProperties"),0);
	MakeCode	(0X223A0);
	MakeName	(0X223A0,	"GetClass");
	MakeCode	(x=0X223A8);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X223B4);
	MakeName	(0X223B4,	"GetLevel");
	MakeCode	(x=0X223BC);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X223C8);
	MakeName	(0X223C8,	"GetBaseAttack");
	MakeCode	(x=0X223D0);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X223DC);
	MakeName	(0X223DC,	"GetBaseDefense");
	MakeCode	(x=0X223E4);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X223F0);
	MakeName	(0X223F0,	"GetBaseAgility");
	MakeCode	(x=0X223F8);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22404);
	MakeName	(0X22404,	"GetBaseMove");
	MakeCode	(x=0X2240C);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22418);
	MakeName	(0X22418,	"GetBaseCritical");
	MakeCode	(x=0X22420);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X2242C);
	MakeName	(0X2242C,	"GetExperience");
	MakeCode	(x=0X22434);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22440);
	MakeName	(0X22440,	"GetMaxHP");
	MakeCode	(x=0X22448);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22452);
	MakeName	(0X22452,	"GetCurrentHP");
	MakeCode	(x=0X2245A);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22464);
	MakeName	(0X22464,	"GetMaxMP");
	MakeCode	(x=0X2246C);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22478);
	MakeName	(0X22478,	"GetCurrentMP");
	MakeCode	(x=0X22480);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X2248C);
	MakeName	(0X2248C,	"GetStatusEffects");
	MakeCode	(x=0X22494);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X2249E);
	MakeName	(0X2249E,	"GetClassForCombatant");
	MakeCode	(0X224AC);
	MakeName	(0X224AC,	"GetLevelForCombatant");
	MakeCode	(0X224BA);
	MakeName	(0X224BA,	"GetBaseAttackForCombatant");
	MakeCode	(0X224C8);
	MakeName	(0X224C8,	"GetBaseDefenseForCombatant");
	MakeCode	(0X224D6);
	MakeName	(0X224D6,	"GetBaseAgilityForCombatant");
	MakeCode	(0X224E4);
	MakeName	(0X224E4,	"GetBaseMoveForCombatant");
	MakeCode	(0X224F2);
	MakeName	(0X224F2,	"GetBaseCriticalForCombatant");
	MakeCode	(0X22500);
	MakeName	(0X22500,	"GetExperienceForCombatant");
	MakeCode	(0X2250E);
	MakeName	(0X2250E,	"GetStatusEffectsForCombatant");
	MakeCode	(0X2251C);
	MakeName	(0X2251C,	"GetMaxHpForCombatant");
	MakeCode	(0X2252A);
	MakeName	(0X2252A,	"GetCurrentHpForCombatant");
	MakeCode	(0X22538);
	MakeName	(0X22538,	"GetMaxMpForCombatant");
	MakeCode	(0X22546);
	MakeName	(0X22546,	"GetCurrentMpForCombatant");
	MakeCode	(0X22554);
	MakeName	(0X22554,	"GetEntityStatsAddress");
	MakeCode	(0X22562);
	MakeName	(0X22562,	"GetEntityItemsAddress");
	MakeCode	(x=0X2256A);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22574);
	MakeName	(0X22574,	"GetCharacterSpellsAddress");
	MakeCode	(x=0X2257C);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22586);
	MakeName	(0X22586,	"GetEntityStatsAddressForCombatant");
	MakeCode	(0X22594);
	MakeName	(0X22594,	"GetEntityItemsAddressForCombatant");
	MakeCode	(0X225A2);
	MakeName	(0X225A2,	"GetEntitySpellsAddressForCombatant");
	MakeCode	(0X225B0);
	MakeName	(0X225B0,	"alt_GetEntity");
	MakeCode	(x=0X225B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X225C4);
	MakeName	(0X225C4,	"FindCombatantEntry");
	MakeCode	(x=0X225CA);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X225CE);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X225D2);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(0X225E0);
	MakeName	(0X225E0,	"GetCombatantEntryAddress");
	MakeCode	(x=0X225E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X225EC);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(0X225F2);
	MakeName	(0X225F2,	"GetEntityEntryAddress");
	MakeCode	(x=0X225F6);
	OpEnumEx		(x,	0,	GetEnum("ForceMemberEntry"),0);
	MakeCode	(x=0X225FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X22600);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X22608);
	OpEnumEx		(x,	0,	GetEnum("ForceDefinition"),0);
	MakeCode	(0X22610);
	MakeName	(0X22610,	"IsEnemy");
	MakeCode	(0X22620);
	MakeName	(0X22620,	"GetDisplayedNameAddress");
	MakeCode	(x=0X22624);
	OpEnumEx		(x,	0,	GetEnum("ForceDefinition"),0);
	MakeCode	(x=0X2263C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2264A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X22654);
	MakeName	(0X22654,	"SetEntityIndex");
	MakeCode	(0X22664);
	MakeName	(0X22664,	"SetCombatantX");
	MakeCode	(x=0X2266C);
	OpEnumEx		(x,	1,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X22676);
	MakeName	(0X22676,	"SetCombatantY");
	MakeCode	(x=0X2267E);
	OpEnumEx		(x,	1,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X22688);
	MakeName	(0X22688,	"SetModifiedAttack");
	MakeCode	(x=0X22690);
	OpEnumEx		(x,	1,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X2269A);
	MakeName	(0X2269A,	"SetModifiedDefense");
	MakeCode	(x=0X226A2);
	OpEnumEx		(x,	1,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X226AC);
	MakeName	(0X226AC,	"SetModifiedAgility");
	MakeCode	(x=0X226B4);
	OpEnumEx		(x,	1,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X226BE);
	MakeName	(0X226BE,	"SetModifiedMove");
	MakeCode	(x=0X226C6);
	OpEnumEx		(x,	1,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X226D0);
	MakeName	(0X226D0,	"SetModifiedCritical");
	MakeCode	(x=0X226D8);
	OpEnumEx		(x,	1,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X226E2);
	MakeName	(0X226E2,	"SetModifiedDoubleAttackMode");
	MakeCode	(x=0X226EA);
	OpEnumEx		(x,	1,	GetEnum("CombatantEntry_Offsets"),0);
	MakeCode	(0X226F4);
	MakeName	(0X226F4,	"SetCombatantPosition");
	MakeCode	(0X22708);
	MakeName	(0X22708,	"SetStatusEffectCounter");
	MakeCode	(0X2272C);
	MakeName	(0X2272C,	"SetClass");
	MakeCode	(x=0X22734);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X2273E);
	MakeName	(0X2273E,	"SetLevel");
	MakeCode	(x=0X22746);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22750);
	MakeName	(0X22750,	"SetBaseAttack");
	MakeCode	(x=0X22758);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22762);
	MakeName	(0X22762,	"SetBaseDefense");
	MakeCode	(x=0X2276A);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22774);
	MakeName	(0X22774,	"SetBaseAgility");
	MakeCode	(x=0X2277C);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22786);
	MakeName	(0X22786,	"SetBaseMove");
	MakeCode	(x=0X2278E);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22798);
	MakeName	(0X22798,	"SetBaseCritical");
	MakeCode	(x=0X227A0);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X227AA);
	MakeName	(0X227AA,	"SetExperience");
	MakeCode	(x=0X227B2);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X227BC);
	MakeName	(0X227BC,	"SetMaxHP");
	MakeCode	(x=0X227C4);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X227CE);
	MakeName	(0X227CE,	"SetCurrentHP");
	MakeCode	(x=0X227D6);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X227E0);
	MakeName	(0X227E0,	"SetMaxMP");
	MakeCode	(x=0X227E8);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X227F2);
	MakeName	(0X227F2,	"SetCurrentMP");
	MakeCode	(x=0X227FA);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22804);
	MakeName	(0X22804,	"SetStatusEffects");
	MakeCode	(x=0X2280C);
	OpEnumEx		(x,	1,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X22816);
	MakeName	(0X22816,	"SetClassForCombatant");
	MakeCode	(0X22824);
	MakeName	(0X22824,	"SetLevelForCombatant");
	MakeCode	(0X22832);
	MakeName	(0X22832,	"SetBaseAttackForCombatant");
	MakeCode	(0X22840);
	MakeName	(0X22840,	"SetBaseDefenseForCombatant");
	MakeCode	(0X2284E);
	MakeName	(0X2284E,	"SetBaseAgilityForCombatant");
	MakeCode	(0X2285C);
	MakeName	(0X2285C,	"SetBaseMoveForCombatant");
	MakeCode	(0X2286A);
	MakeName	(0X2286A,	"SetBaseCriticalForCombatant");
	MakeCode	(0X22878);
	MakeName	(0X22878,	"SetExperienceForCombatant");
	MakeCode	(0X22886);
	MakeName	(0X22886,	"SetMaxHPforCombatant");
	MakeCode	(0X22894);
	MakeName	(0X22894,	"SetCurrentHPforCombatant");
	MakeCode	(0X228A2);
	MakeName	(0X228A2,	"SetMaxMPforCombatant");
	MakeCode	(0X228B0);
	MakeName	(0X228B0,	"SetCurrentMPforCombatant");
	MakeCode	(0X228BE);
	MakeName	(0X228BE,	"SetStatusEffectsForCombatant");
	MakeCode	(0X228CC);
	MakeName	(0X228CC,	"LoadForceMemberName");
	MakeCode	(x=0X228D8);
	OpEnumEx		(x,	0,	GetEnum("ForceDefinition"),0);
	MakeCode	(0X228E6);
	MakeName	(0X228E6,	"IncreaseModifiedAttack");
	MakeCode	(x=0X228FC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X22902);
	OpDecimal	(x,	0);
	MakeCode	(0X22910);
	MakeName	(0X22910,	"IncreaseModifiedDefense");
	MakeCode	(x=0X22926);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2292C);
	OpDecimal	(x,	0);
	MakeCode	(0X2293A);
	MakeName	(0X2293A,	"IncreaseModifiedAgility");
	MakeCode	(x=0X22950);
	OpDecimal	(x,	0);
	MakeCode	(x=0X22956);
	OpDecimal	(x,	0);
	MakeCode	(0X22964);
	MakeName	(0X22964,	"IncreaseModifiedMove");
	MakeCode	(0X2297A);
	MakeCode	(0X2298E);
	MakeName	(0X2298E,	"IncreaseModifiedCritical");
	MakeCode	(x=0X229A4);
	OpDecimal	(x,	0);
	MakeCode	(x=0X229AA);
	OpDecimal	(x,	0);
	MakeCode	(0X229B8);
	MakeName	(0X229B8,	"IncreaseLevel");
	MakeCode	(x=0X229CE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X229D4);
	OpDecimal	(x,	0);
	MakeCode	(0X229E2);
	MakeName	(0X229E2,	"IncreaseBaseAttack");
	MakeCode	(x=0X229F8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X229FE);
	OpDecimal	(x,	0);
	MakeCode	(0X22A0C);
	MakeName	(0X22A0C,	"IncreaseBaseDefense");
	MakeCode	(x=0X22A22);
	OpDecimal	(x,	0);
	MakeCode	(x=0X22A28);
	OpDecimal	(x,	0);
	MakeCode	(0X22A36);
	MakeName	(0X22A36,	"IncreaseBaseAgility");
	MakeCode	(x=0X22A4C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X22A52);
	OpDecimal	(x,	0);
	MakeCode	(0X22A60);
	MakeName	(0X22A60,	"IncreaseBaseMove");
	MakeCode	(0X22A76);
	MakeCode	(0X22A8A);
	MakeName	(0X22A8A,	"IncreaseBaseCritical");
	MakeCode	(x=0X22AA0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X22AA6);
	OpDecimal	(x,	0);
	MakeCode	(0X22AB4);
	MakeName	(0X22AB4,	"IncreaseMaxHP");
	MakeCode	(x=0X22AC8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X22ACE);
	OpDecimal	(x,	0);
	MakeCode	(0X22ADC);
	MakeName	(0X22ADC,	"IncreaseCurrentHP");
	MakeCode	(0X22AF6);
	MakeCode	(0X22B06);
	MakeName	(0X22B06,	"IncreaseMaxMP");
	MakeCode	(x=0X22B1C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X22B22);
	OpDecimal	(x,	0);
	MakeCode	(0X22B30);
	MakeName	(0X22B30,	"IncreaseLevelForCombatant");
	MakeCode	(0X22B3E);
	MakeName	(0X22B3E,	"IncreaseBaseAttackForCombatant");
	MakeCode	(0X22B4C);
	MakeName	(0X22B4C,	"IncreaseBaseDefenseForCombatant");
	MakeCode	(0X22B5A);
	MakeName	(0X22B5A,	"IncreaseBaseAgilityForCombatant");
	MakeCode	(0X22B68);
	MakeName	(0X22B68,	"IncreaseBaseMoveForCombatant");
	MakeCode	(0X22B76);
	MakeName	(0X22B76,	"IncreaseBaseCriticalForCombatant");
	MakeCode	(0X22B84);
	MakeName	(0X22B84,	"IncreaseExperienceForCombatant");
	MakeCode	(0X22B92);
	MakeName	(0X22B92,	"IncreaseMaxHPforCombatant");
	MakeCode	(0X22BA0);
	MakeName	(0X22BA0,	"IncreaseCurrentHPforCombatant");
	MakeCode	(0X22BAE);
	MakeName	(0X22BAE,	"IncreaseMaxMPforCombatant");
	MakeCode	(0X22BBC);
	MakeName	(0X22BBC,	"IncreaseCurrentMPforCombatant");
	MakeCode	(0X22BCA);
	MakeName	(0X22BCA,	"IncreaseCurrentMP");
	MakeCode	(x=0X22BD6);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X22BDA,	"skip if current MP > 99");
	MakeCode	(0X22BF0);
	MakeCode	(0X22C00);
	MakeName	(0X22C00,	"IncreaseExperience");
	MakeCode	(x=0X22C04);
	OpDecimal	(x,	0);
	MakeCode	(x=0X22C0A);
	OpDecimal	(x,	0);
	MakeCode	(0X22C1E);
	MakeCode	(0X22C2E);
	MakeName	(0X22C2E,	"IsAtLevelCap");
	MakeCode	(x=0X22C36);
	OpEnumEx		(x,	0,	GetEnum("ForceDefinition"),0);
	MakeCode	(x=0X22C3E);
	OpEnumEx		(x,	0,	GetEnum("ClassEntryProperties"),0);
	MakeCode	(x=0X22C44);
	OpEnumEx		(x,	0,	GetEnum("ForceDefinition"),1);
	MakeCode	(0X22C56);
	MakeCode	(0X22C5E);
	MakeName	(0X22C5E,	"DecreaseModifiedAttack");
	MakeCode	(0X22C66);
	MakeName	(0X22C66,	"DecreaseModifiedDefense");
	MakeCode	(0X22C6E);
	MakeName	(0X22C6E,	"DecreaseModifiedAgility");
	MakeCode	(0X22C76);
	MakeName	(0X22C76,	"DecreaseModifiedMove");
	MakeCode	(0X22C7E);
	MakeName	(0X22C7E,	"DecreaseMaxHP");
	MakeCode	(0X22C86);
	MakeName	(0X22C86,	"DecreaseMaxMP");
	MakeCode	(0X22C8E);
	MakeName	(0X22C8E,	"DecreaseBaseAttack");
	MakeCode	(0X22C96);
	MakeName	(0X22C96,	"DecreaseBaseDefense");
	MakeCode	(0X22C9E);
	MakeName	(0X22C9E,	"DecreaseBaseAgility");
	MakeCode	(0X22CA6);
	MakeName	(0X22CA6,	"DecreaseBaseMove");
	MakeCode	(0X22CAE);
	MakeName	(0X22CAE,	"DecreaseCurrentHP");
	MakeCode	(0X22CB6);
	MakeName	(0X22CB6,	"DecreaseCurrentMP");
	MakeCode	(0X22CBE);
	MakeName	(0X22CBE,	"DecreaseMaxHPforCombatant");
	MakeCode	(0X22CCC);
	MakeName	(0X22CCC,	"DecreaseMaxMPforCombatant");
	MakeCode	(0X22CDA);
	MakeName	(0X22CDA,	"DecreaseBaseAttackForCombatant");
	MakeCode	(0X22CE8);
	MakeName	(0X22CE8,	"DecreaseBaseDefenseForCombatant");
	MakeCode	(0X22CF6);
	MakeName	(0X22CF6,	"DecreaseBaseAgilityForCombatant");
	MakeCode	(0X22D04);
	MakeName	(0X22D04,	"DecreaseBaseMoveForCombatant");
	MakeCode	(0X22D12);
	MakeName	(0X22D12,	"DecreaseCurrentHPforCombatant");
	MakeCode	(0X22D20);
	MakeName	(0X22D20,	"DecreaseCurrentMPforCombatant");
	MakeCode	(0X22D2E);
	MakeName	(0X22D2E,	"GiveItem");
	MakeCode	(x=0X22D32);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X22D3C);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X22D3E);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(0X22D48);
	MakeCode	(0X22D58);
	MakeName	(0X22D58,	"GiveItemForCombatant");
	MakeCode	(0X22D70);
	MakeName	(0X22D70,	"RemoveItem");
	MakeCode	(x=0X22D8E);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(0X22D9E);
	MakeName	(0X22D9E,	"RemoveItemForCombatant");
	MakeCode	(0X22DB6);
	MakeName	(0X22DB6,	"CountOccupiedItemSlots");
	MakeCode	(x=0X22DC2);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X22DC4);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(0X22DCE);
	MakeCode	(0X22DDE);
	MakeName	(0X22DDE,	"CountOccupiedItemSlotsForCombatant");
	MakeCode	(0X22DF2);
	MakeName	(0X22DF2,	"BreakItem");
	MakeCode	(x=0X22E00);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeCode	(0X22E0C);
	MakeName	(0X22E0C,	"BreakItemForCombatant");
	MakeCode	(0X22E24);
	MakeName	(0X22E24,	"GetEquippedItemForCombatant");
	MakeCode	(0X22E36);
	MakeName	(0X22E36,	"EquipItemForCombatant");
	MakeCode	(0X22E48);
	MakeName	(0X22E48,	"LoadEquippableItemsForCombatant");
	MakeCode	(0X22E5A);
	MakeName	(0X22E5A,	"IsItemEquippableForCombatant");
	MakeCode	(0X22E6C);
	MakeName	(0X22E6C,	"GetItemsCurseSettingsForCombatant");
	MakeCode	(0X22E7E);
	MakeName	(0X22E7E,	"GetItemEntryAddress");
	MakeCode	(x=0X22E80);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(0X22E92);
	MakeName	(0X22E92,	"GetItemType");
	MakeCode	(x=0X22E94);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(0X22E9E);
	MakeCode	(x=0X22EA0);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	MakeCode	(0X22EA8);
	MakeName	(0X22EA8,	"GetItemPrice");
	MakeCode	(x=0X22EAE);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	MakeCode	(x=0X22EB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X22EB6,	"GetEquippedWeaponIndex");
	MakeCode	(x=0X22EBA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X22EC0);
	MakeName	(0X22EC0,	"GetEquippedItem");
	MakeCode	(x=0X22ECC);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X22ED4);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X22EDA);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryBitmap"),0);
	MakeCode	(0X22EF2);
	MakeCode	(x=0X22EF4);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(0X22EFE);
	MakeName	(0X22EFE,	"EquipItem");
	MakeRptCmt	(0X22F12,	"unequip old item");
	MakeCode	(x=0X22F12);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X22F18);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X22F1E);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(0X22F36);
	MakeName	(0X22F36,	"LoadEquippableItems");
	MakeCode	(x=0X22F3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X22F3E);
	OpSign		(x,	0);
	OpHex		(x,	0);
	MakeCode	(x=0X22F50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X22F58);
	OpSign		(x,	0);
	OpHex		(x,	0);
	MakeCode	(x=0X22F6A);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X22F70);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X22F7A);
	MakeName	(0X22F7A,	"IsItemEquippable");
	MakeCode	(x=0X22F84);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	MakeRptCmt	(0X22F92,	"D3 = item equip flags");
	MakeRptCmt	(0X22F96,	"branch if item cannot be equipped");
	MakeCode	(0X22F9E);
	MakeCode	(0X22FA6);
	MakeName	(0X22FA6,	"GetItemsCurseSettings");
	MakeCode	(x=0X22FB2);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeRptCmt	(0X22FB6,	"skip if entity is not cursed");
	MakeCode	(x=0X22FB8);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X22FC0);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(0X22FD8);
	MakeName	(0X22FD8,	"GetItemCurseSetting");
	MakeRptCmt	(0X22FDC,	"return if item of given type is not equipped");
	MakeCode	(x=0X22FE4);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X22FE8,	"return if item is not cursed");
	MakeCode	(x=0X22FEA);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeRptCmt	(0X22FEE,	"bit 0 set = chance to paralyze, bit 1 set = chance to inflict damage back to attacker");
	MakeCode	(0X22FF2);
	MakeName	(0X22FF2,	"FindItemToDrop");
	MakeCode	(x=0X22FFA);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeRptCmt	(0X22FFE,	"skip if combatant entry is unoccupied");
	MakeRptCmt	(0X23002,	"skip if force member");
	MakeCode	(x=0X2300A);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X23010);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeRptCmt	(0X23014,	"skip if item slot is empty");
	MakeCode	(x=0X23016);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X2301A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X23020,	"skip if reached end of list");
	MakeCode	(0X2302A);
	MakeCode	(0X2302C);
	ExtLinA		(0X2303A,	0,	"; List of item indexes to be dropped by enemies, $FF terminated");
	ExtLinA		(0X2303A,	1,	"                ");
	MakeByte	(x=0X2303A);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeName	(0X2303A,	"tbl_ItemsToDrop");
	MakeByte	(x=0X2303B);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X2303C);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X2303D);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X2303E);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(0X2303F);
	MakeCode	(0X23040);
	MakeName	(0X23040,	"GetSpellEntryAddress");
	MakeCode	(0X23056);
	MakeName	(0X23056,	"GetMPCost");
	MakeCode	(x=0X2305E);
	OpEnumEx		(x,	0,	GetEnum("SpellEntry_Offsets"),0);
	MakeCode	(0X23068);
	MakeName	(0X23068,	"GetRangeEntryAddress");
	MakeCode	(x=0X2306A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2307A);
	MakeName	(0X2307A,	"FindTargetableSpaces");
	MakeCode	(x=0X2308E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23092);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Offsets"),0);
	MakeRptCmt	(0X2309A,	"max range cap");
	MakeCode	(x=0X230A2);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Offsets"),0);
	MakeCode	(x=0X230A6);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_GroupFlags"),0);
	MakeCode	(x=0X230AA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X230AE,	"D1 = max distance");
	MakeCode	(x=0X230B0);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Offsets"),0);
	MakeCode	(x=0X230BA);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Offsets"),0);
	MakeCode	(x=0X230C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X230CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X230CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X230DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X230E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0X230EC);
	OpDecimal	(x,	0);
	MakeName	(0X230EC,	"tbl_AreaCursors_1");
	MakeByte	(x=0X230ED);
	OpDecimal	(x,	0);
	MakeByte	(x=0X230EE);
	OpDecimal	(x,	0);
	MakeByte	(x=0X230EF);
	OpDecimal	(x,	0);
	MakeName	(0X230EF,	"tbl_AreaCursors_2");
	MakeByte	(x=0X230F0);
	OpDecimal	(x,	0);
	MakeByte	(x=0X230F1);
	OpDecimal	(x,	0);
	MakeCode	(0X230F2);
	MakeName	(0X230F2,	"FindTargetsWithinArea");
	MakeCode	(x=0X230F6);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X230FA,	"skip if range index = 255");
	MakeCode	(x=0X23112);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Offsets"),0);
	MakeCode	(x=0X23118);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2311E);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Offsets"),0);
	MakeCode	(0X2312E);
	MakeCode	(0X23136);
	MakeName	(0X23136,	"GetAdjustedGroupFlags");
	MakeRptCmt	(0X23140,	"skip if combatant is a force member");
	MakeCode	(0X23148);
	MakeName	(0X23148,	"AdjustGroupFlags");
	MakeCode	(x=0X2314C);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_GroupFlags"),0);
	MakeCode	(x=0X23150);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_GroupFlags"),0);
	MakeCode	(x=0X23154);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0X2315C);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Targets"),0);
	MakeName	(0X2315C,	"tbl_AdjustedGroupFlags");
	MakeByte	(x=0X2315D);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Targets"),0);
	MakeByte	(x=0X2315E);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Targets"),0);
	MakeByte	(x=0X2315F);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Targets"),0);
	MakeCode	(0X23160);
	MakeName	(0X23160,	"JumpToRangeOrEquipEffect");
	MakeCode	(x=0X23164);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X23168,	"skip if range or equip effect index = 255");
	MakeCode	(x=0X2316E);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Offsets"),0);
	MakeByte	(0X23178);
	MakeArray	(0X23178,	0X4);
	MakeName	(0X23178,	"tbl_RangeData");
	MakeCode	(0X2317C);
	MakeByte	(0X23180);
	MakeArray	(0X23180,	0X4);
	MakeCode	(0X23184);
	MakeByte	(0X23188);
	MakeArray	(0X23188,	0X4);
	MakeCode	(0X2318C);
	MakeByte	(0X23190);
	MakeArray	(0X23190,	0X4);
	MakeCode	(0X23194);
	MakeByte	(0X23198);
	MakeArray	(0X23198,	0X4);
	MakeCode	(0X2319C);
	MakeByte	(0X231A0);
	MakeArray	(0X231A0,	0X4);
	MakeCode	(0X231A4);
	MakeByte	(0X231A8);
	MakeArray	(0X231A8,	0X4);
	MakeCode	(0X231AC);
	MakeByte	(0X231B0);
	MakeArray	(0X231B0,	0X4);
	MakeCode	(0X231B4);
	MakeByte	(0X231B8);
	MakeArray	(0X231B8,	0X4);
	MakeCode	(0X231BC);
	MakeByte	(0X231C0);
	MakeArray	(0X231C0,	0X4);
	MakeCode	(0X231C4);
	MakeByte	(0X231C8);
	MakeArray	(0X231C8,	0X4);
	MakeCode	(0X231CC);
	MakeByte	(0X231D0);
	MakeArray	(0X231D0,	0X4);
	MakeCode	(0X231D4);
	MakeByte	(0X231D8);
	MakeArray	(0X231D8,	0X4);
	MakeCode	(0X231DC);
	MakeByte	(0X231E0);
	MakeArray	(0X231E0,	0X4);
	MakeCode	(0X231E4);
	MakeByte	(0X231E8);
	MakeArray	(0X231E8,	0X4);
	MakeCode	(0X231EC);
	MakeByte	(0X231F0);
	MakeArray	(0X231F0,	0X4);
	MakeCode	(0X231F4);
	MakeByte	(0X231F8);
	MakeArray	(0X231F8,	0X4);
	MakeCode	(0X231FC);
	MakeByte	(0X23200);
	MakeArray	(0X23200,	0X4);
	MakeCode	(0X23204);
	MakeByte	(0X23208);
	MakeArray	(0X23208,	0X4);
	MakeCode	(0X2320C);
	MakeByte	(0X23210);
	MakeArray	(0X23210,	0X4);
	MakeCode	(0X23214);
	MakeByte	(0X23218);
	MakeArray	(0X23218,	0X4);
	MakeCode	(0X2321C);
	MakeByte	(0X23220);
	MakeArray	(0X23220,	0X4);
	MakeCode	(0X23224);
	MakeByte	(0X23228);
	MakeArray	(0X23228,	0X4);
	MakeCode	(0X2322C);
	MakeByte	(0X23230);
	MakeArray	(0X23230,	0X4);
	MakeCode	(0X23234);
	MakeByte	(0X23238);
	MakeArray	(0X23238,	0X4);
	MakeCode	(0X2323C);
	MakeByte	(0X23240);
	MakeArray	(0X23240,	0X4);
	MakeCode	(0X23244);
	MakeByte	(0X23248);
	MakeArray	(0X23248,	0X4);
	MakeCode	(0X2324C);
	MakeByte	(0X23250);
	MakeArray	(0X23250,	0X4);
	MakeCode	(0X23254);
	MakeByte	(0X23258);
	MakeArray	(0X23258,	0X4);
	MakeCode	(0X2325C);
	MakeByte	(0X23260);
	MakeArray	(0X23260,	0X4);
	MakeCode	(0X23264);
	MakeByte	(0X23268);
	MakeArray	(0X23268,	0X4);
	MakeCode	(0X2326C);
	MakeByte	(0X23270);
	MakeArray	(0X23270,	0X4);
	MakeCode	(0X23274);
	MakeByte	(0X23278);
	MakeArray	(0X23278,	0X4);
	MakeCode	(0X2327C);
	MakeByte	(0X23280);
	MakeArray	(0X23280,	0X4);
	MakeCode	(0X23284);
	MakeByte	(0X23288);
	MakeArray	(0X23288,	0X4);
	MakeCode	(0X2328C);
	MakeByte	(0X23290);
	MakeArray	(0X23290,	0X4);
	MakeCode	(0X23294);
	MakeByte	(0X23298);
	MakeArray	(0X23298,	0X4);
	MakeCode	(0X2329C);
	MakeByte	(0X232A0);
	MakeArray	(0X232A0,	0X4);
	MakeCode	(0X232A4);
	MakeByte	(0X232A8);
	MakeArray	(0X232A8,	0X4);
	MakeCode	(0X232AC);
	MakeByte	(0X232B0);
	MakeArray	(0X232B0,	0X4);
	MakeCode	(0X232B4);
	MakeByte	(0X232B8);
	MakeArray	(0X232B8,	0X4);
	MakeCode	(0X232BC);
	MakeByte	(0X232C0);
	MakeArray	(0X232C0,	0X4);
	MakeCode	(0X232C4);
	MakeByte	(0X232C8);
	MakeArray	(0X232C8,	0X4);
	MakeCode	(0X232CC);
	MakeByte	(0X232D0);
	MakeArray	(0X232D0,	0X4);
	MakeCode	(0X232D4);
	MakeByte	(0X232D8);
	MakeArray	(0X232D8,	0X4);
	MakeCode	(0X232DC);
	MakeByte	(0X232E0);
	MakeArray	(0X232E0,	0X4);
	MakeCode	(0X232E4);
	MakeByte	(0X232E8);
	MakeArray	(0X232E8,	0X4);
	MakeCode	(0X232EC);
	MakeByte	(0X232F0);
	MakeArray	(0X232F0,	0X4);
	MakeCode	(0X232F4);
	MakeByte	(0X232F8);
	MakeArray	(0X232F8,	0X4);
	MakeCode	(0X232FC);
	MakeByte	(0X23300);
	MakeArray	(0X23300,	0X4);
	MakeCode	(0X23304);
	MakeByte	(0X23308);
	MakeArray	(0X23308,	0X4);
	MakeCode	(0X2330C);
	MakeByte	(0X23310);
	MakeArray	(0X23310,	0X4);
	MakeCode	(0X23314);
	MakeByte	(0X23318);
	MakeArray	(0X23318,	0X4);
	MakeCode	(0X2331C);
	MakeByte	(0X23320);
	MakeArray	(0X23320,	0X4);
	MakeCode	(0X23324);
	MakeByte	(0X23328);
	MakeArray	(0X23328,	0X4);
	MakeCode	(0X2332C);
	MakeByte	(0X23330);
	MakeArray	(0X23330,	0X4);
	MakeCode	(0X23334);
	MakeByte	(0X23338);
	MakeArray	(0X23338,	0X4);
	MakeCode	(0X2333C);
	MakeByte	(0X23340);
	MakeArray	(0X23340,	0X4);
	MakeCode	(0X23344);
	MakeByte	(0X23348);
	MakeArray	(0X23348,	0X4);
	MakeCode	(0X2334C);
	MakeByte	(0X23350);
	MakeArray	(0X23350,	0X4);
	MakeCode	(0X23354);
	MakeByte	(0X23358);
	MakeArray	(0X23358,	0X4);
	MakeCode	(0X2335C);
	MakeByte	(0X23360);
	MakeArray	(0X23360,	0X4);
	MakeCode	(0X23364);
	MakeByte	(0X23368);
	MakeArray	(0X23368,	0X4);
	MakeCode	(0X2336C);
	MakeByte	(0X23370);
	MakeArray	(0X23370,	0X4);
	MakeCode	(0X23374);
	MakeCode	(0X23378);
	MakeName	(0X23378,	"nullsub_23378");
	MakeCode	(0X2337A);
	MakeName	(0X2337A,	"IncreaseStatOnItemUse");
	MakeRptCmt	(0X23380,	"\"[Name]'s attack level[Line]increases by [Num].[Wait2]\"");
	MakeCode	(x=0X23384);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2338C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X233A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X233A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X233AE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X233BE);
	MakeName	(0X233BE,	"bt_GetBaseStatForCombatant");
	MakeCode	(0X233C2);
	MakeCode	(0X233C6);
	MakeCode	(0X233CA);
	MakeCode	(0X233CE);
	MakeCode	(0X233D2);
	MakeName	(0X233D2,	"bt_IncreaseBaseStatForCombatant");
	MakeCode	(0X233D6);
	MakeCode	(0X233DA);
	MakeCode	(0X233DE);
	MakeCode	(0X233E2);
	MakeCode	(0X233E6);
	MakeName	(0X233E6,	"CurePoison");
	MakeCode	(x=0X233F0);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeRptCmt	(0X233F6,	"\"All traces of poison are[Line]purged from [Name].\"");
	MakeRptCmt	(0X233FC,	"\"But nothing happens.\"");
	MakeCode	(0X233FC);
	MakeCode	(x=0X23406);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2340E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X23418);
	MakeName	(0X23418,	"EquipEffect_IncreaseAttack");
	MakeCode	(0X23426);
	MakeName	(0X23426,	"EquipEffect_IncreaseDefense");
	MakeCode	(0X23434);
	MakeName	(0X23434,	"EquipEffect_IncreaseAgility");
	MakeCode	(0X23442);
	MakeName	(0X23442,	"EquipEffect_IncreaseMove");
	MakeCode	(0X23450);
	MakeCode	(0X2345E);
	MakeCode	(0X2346C);
	MakeCode	(0X2347A);
	MakeCode	(0X23488);
	MakeCode	(0X23496);
	MakeCode	(0X234A4);
	MakeCode	(0X234B2);
	MakeName	(0X234B2,	"EquipEffect_IncreaseAttackSetCritical");
	MakeCode	(x=0X234BC);
	OpDecimal	(x,	0);
	MakeCode	(0X234CA);
	MakeName	(0X234CA,	"EquipEffect_IncreaseAttackAndDefense");
	MakeCode	(x=0X234CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X234EE);
	MakeByte	(0X234EF);
	MakeRptCmt	(0X234F0,	"Add D5 to combatant D0 modified attack, set modified double attack mode to \"high\"");
	MakeCode	(0X234F0);
	MakeName	(0X234F0,	"EquipEffect_IncreaseAttackSetDoubleAttackMode");
	MakeCode	(x=0X234FC);
	OpEnumEx		(x,	0,	GetEnum("ClassDefDoubleAttackModes"),0);
	MakeCode	(0X2350A);
	MakeName	(0X2350A,	"EquipEffect_SetJogurtStatus");
	MakeCode	(x=0X23514);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(0X23524);
	MakeCode	(0X2352A);
	MakeName	(0X2352A,	"KindanNoHako");
	MakeCode	(x=0X23532);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	MakeCode	(x=0X2353C);
	OpDecimal	(x,	0);
	MakeCode	(0X23566);
	MakeName	(0X23566,	"CreateMovementGrid");
	MakeCode	(0X2357C);
	MakeCode	(0X23594);
	MakeName	(0X23594,	"IsForceMemberOrEnemy");
	MakeCode	(0X235A8);
	MakeName	(0X235A8,	"FindTargetableSpacesForAttack");
	MakeCode	(0X235BA);
	MakeName	(0X235BA,	"Battleaction_Attack");
	MakeCode	(x=0X235BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X235C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X235C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X235CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X235D0,	"skip if not a regular attack");
	MakeCode	(0X235D2);
	MakeCode	(x=0X235DC);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X235E8);
	OpEnumEx		(x,	0,	GetEnum("ClassDefOffsets"),0);
	MakeCode	(x=0X235EC);
	OpEnumEx		(x,	0,	GetEnum("ClassDefOffsets"),0);
	MakeCode	(0X235F2);
	MakeCode	(x=0X235F8);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	MakeCode	(x=0X235FC);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	MakeCode	(x=0X23600);
	OpEnumEx		(x,	0,	GetEnum("ClassDefOffsets"),0);
	MakeCode	(x=0X23604);
	OpEnumEx		(x,	0,	GetEnum("ClassDefProperties"),0);
	MakeCode	(x=0X23608);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2360E);
	OpEnumEx		(x,	0,	GetEnum("ClassDefOffsets"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X2361A);
	MakeName	(0X2361A,	"tbl_SpecialAttackPercents");
	MakeByte	(x=0X2361B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2361C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2361D);
	OpDecimal	(x,	0);
	MakeCode	(0X2361E);
	MakeName	(0X2361E,	"UseItem");
	MakeCode	(x=0X23628);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X23630);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeCode	(x=0X2363A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X23646,	"branch if item has at least one equip flag set");
	MakeCode	(0X23646);
	MakeRptCmt	(0X23648,	"item is either not usable, or not a piece of equipment");
	MakeRptCmt	(0X2364C,	"item is piece of equipment, but cannot be equipped by current actor");
	MakeCode	(0X2364C);
	MakeCode	(x=0X23650);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X23660);
	MakeName	(0X23660,	"GetItemUseRangeAndEffect");
	MakeCode	(x=0X23664);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X23668);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23670);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	MakeRptCmt	(0X23674,	"skip if range index = 255");
	MakeCode	(x=0X23674);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2367A);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	MakeCode	(0X23684);
	MakeName	(0X23684,	"Battleaction_UseItem");
	MakeCode	(x=0X23692);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2369A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X236A6);
	MakeName	(0X236A6,	"FindTargetableSpacesForSpell");
	MakeCode	(0X236B8);
	MakeName	(0X236B8,	"Battleaction_CastSpell");
	MakeCode	(x=0X236BE);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeCode	(x=0X236C2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X236C8);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeCode	(x=0X236D2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X236DC);
	OpEnumEx		(x,	0,	GetEnum("SpellEntry_Offsets"),0);
	MakeCode	(x=0X236E0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X236E4,	"D4 = range index");
	MakeCode	(x=0X236E6);
	OpEnumEx		(x,	0,	GetEnum("SpellEntry_Offsets"),0);
	MakeCode	(0X236F0);
	MakeName	(0X236F0,	"SetupBattleaction");
	MakeCode	(x=0X236F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X236FA);
	OpEnumEx		(x,	0,	GetEnum("BattleAction_Offsets"),0);
	MakeRptCmt	(0X23702,	"skip if battleaction type >= 3");
	MakeCode	(x=0X23704);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23708);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2370C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23712);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X23716,	"D0 = caster index");
	MakeCode	(x=0X23718);
	OpEnumEx		(x,	0,	GetEnum("BattleAction_Offsets"),0);
	MakeCode	(x=0X2371E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X23722,	"skip if range index = 255");
	MakeCode	(x=0X23722);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X23728,	"D0 = caster index");
	MakeCode	(x=0X2372A);
	OpEnumEx		(x,	0,	GetEnum("BattleAction_Offsets"),0);
	MakeCode	(0X23746);
	MakeName	(0X23746,	"bt_Battleactions");
	MakeCode	(0X2374A);
	MakeCode	(0X2374E);
	MakeCode	(0X23752);
	MakeCode	(x=0X23762);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X23772);
	MakeName	(0X23772,	"MakeMoveEverywhereGrid");
	MakeCode	(x=0X23780);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23784);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2378C,	"copy move costs table to table at $FFA8C0");
	MakeCode	(x=0X23798);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2379C,	"D1 = moving combatant's position converted to offset");
	MakeCode	(x=0X2379E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X237A2,	"clear move cost at moving combatant's starting position");
	MakeCode	(x=0X237AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X237B8);
	OpEnumEx		(x,	1,	GetEnum("BattlefieldEngine_Offsets"),0);
	MakeCode	(0X237CA);
	MakeCode	(0X237FA);
	MakeName	(0X237FA,	"PopulateTargetsList");
	MakeCode	(x=0X237FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23802);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X23808,	"target positions");
	MakeCode	(x=0X23808);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2380C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23810);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X23818);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeRptCmt	(0X23820,	"branch if force member");
	MakeRptCmt	(0X23826,	"branch if not tasked to target enemies");
	MakeCode	(0X2382A);
	MakeRptCmt	(0X2382E,	"branch if not tasked to target force members");
	MakeCode	(x=0X23838);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2383C,	"D5 = combatant's position converted to offset");
	MakeRptCmt	(0X23842,	"branch if tasked to target all");
	MakeRptCmt	(0X23854,	"load target X");
	MakeRptCmt	(0X23856,	"load target Y");
	MakeRptCmt	(0X23858,	"load target index");
	MakeRptCmt	(0X2385E,	"load target list length");
	MakeCode	(x=0X2385E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X23870);
	MakeCode	(x=0X23874);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23878);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2387C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X238B4);
	MakeCode	(0X238BC);
	MakeCode	(x=0X238C2);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeName	(0X238C2,	"GetItemNameAddress");
	MakeName	(0X238CC,	"GetVariableLengthEntryAddress");
	MakeCode	(x=0X238EA);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeName	(0X238EA,	"GetSpellNameAddress");
	MakeCode	(0X238F6);
	MakeName	(0X238F6,	"GetClassNameAddress");
	MakeCode	(0X238FE);
	MakeName	(0X238FE,	"LoadVariableLengthEntry");
	MakeCode	(0X23914);
	MakeName	(0X23914,	"GetClassEntryAddress");
	MakeCode	(0X23928);
	MakeName	(0X23928,	"GetMoveCostEntryAddress");
	MakeCode	(0X23930);
	MakeName	(0X23930,	"GetLandEffectEntryAddress");
	MakeRptCmt	(0X23944,	"D1 = move type index");
	MakeCode	(0X23956);
	MakeName	(0X23956,	"GetResistance");
	MakeCode	(x=0X23966);
	OpEnumEx		(x,	0,	GetEnum("ClassDefOffsets"),0);
	MakeCode	(0X2397C);
	MakeCode	(x=0X23988);
	OpEnumEx		(x,	0,	GetEnum("ClassDefOffsets"),0);
	MakeCode	(0X23998);
	MakeName	(0X23998,	"GetBaseDoubleAttackMode");
	MakeCode	(x=0X239A4);
	OpEnumEx		(x,	0,	GetEnum("ClassDefOffsets"),0);
	MakeCode	(x=0X239A8);
	OpEnumEx		(x,	0,	GetEnum("ClassDefProperties"),0);
	MakeCode	(0X239B2);
	MakeName	(0X239B2,	"IsFlyingOrHovering");
	MakeCode	(x=0X239C2);
	OpEnumEx		(x,	0,	GetEnum("ClassDefMoveTypes"),0);
	MakeCode	(x=0X239C8);
	OpEnumEx		(x,	0,	GetEnum("ClassDefMoveTypes"),0);
	MakeCode	(0X239D2);
	MakeName	(0X239D2,	"GetPortraitForCombatant");
	MakeCode	(0X239DE);
	MakeName	(0X239DE,	"GetPortrait");
	ExtLinA		(0X239E6,	0,	"                ");
	ExtLinA		(0X239E6,	1,	"                ; Enemy");
	MakeCode	(x=0X239EA);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(x=0X239F2);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X239F8);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(0X239FE);
	MakeCode	(x=0X23A04);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(0X23A0A);
	MakeCode	(x=0X23A14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinA		(0X23A1E,	0,	"; Portraits used by force members after they have been promoted");
	ExtLinA		(0X23A1E,	1,	"                ");
	MakeByte	(x=0X23A1E);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeName	(0X23A1E,	"table_PromotedPortraits");
	MakeByte	(x=0X23A1F);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A20);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A21);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A22);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A23);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A24);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A25);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A26);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A27);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A28);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A29);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A2A);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A2B);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A2C);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A2D);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A2E);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A2F);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A30);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A31);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A32);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A33);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A34);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A35);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A36);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A37);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A38);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A39);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A3A);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A3B);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A3C);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeByte	(x=0X23A3D);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(0X23A3E);
	MakeName	(0X23A3E,	"GetMapSpriteForCombatant");
	MakeCode	(0X23A4A);
	MakeName	(0X23A4A,	"GetMapsprite");
	ExtLinA		(0X23A58,	0,	"                ");
	ExtLinA		(0X23A58,	1,	"                ; Enemy");
	MakeCode	(x=0X23A5E);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeCode	(x=0X23A64);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X23A6A);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(0X23A70);
	MakeCode	(x=0X23A76);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(0X23A7C);
	MakeCode	(x=0X23A8A);
	OpEnumEx		(x,	0,	GetEnum("MapSpriteProperties"),0);
	MakeCode	(0X23A94);
	MakeName	(0X23A94,	"ApplyOutfitItems");
	MakeCode	(x=0X23A98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23AA6);
	MakeCode	(x=0X23AAC);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X23AB0);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(0X23AC0);
	ExtLinA		(0X23ACE,	0,	"; 3 bytes per entry, $FF terminated");
	ExtLinA		(0X23ACE,	1,	";");
	ExtLinA		(0X23ACE,	2,	";       0: force member index");
	ExtLinA		(0X23ACE,	3,	";       1: outfit item index");
	ExtLinA		(0X23ACE,	4,	";       3: new map sprite index");
	ExtLinA		(0X23ACE,	5,	"                ");
	MakeByte	(x=0X23ACE);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeName	(0X23ACE,	"tbl_OutfitItems");
	MakeByte	(x=0X23ACF);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X23AD0);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeByte	(x=0X23AD1);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeByte	(x=0X23AD2);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeByte	(x=0X23AD3);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeByte	(0X23AD4);
	MakeByte	(0X23AD5);
	MakeCode	(0X23AD6);
	MakeName	(0X23AD6,	"GetBattleSpritePaletteAndAnimationIndexes");
	MakeCode	(x=0X23AE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23AE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23AEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23AF0);
	MakeName	(0X23AF0,	"LoadBattlespriteDataWithWeapon");
	MakeCode	(x=0X23AFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23B00);
	MakeName	(0X23B00,	"LoadBattlespriteDataWithoutWeapon");
	MakeCode	(x=0X23B02);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23B0C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23B12);
	MakeCode	(x=0X23B14);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23B1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23B24);
	MakeName	(0X23B24,	"LoadBattlespriteAndPaletteIndexes");
	MakeCode	(x=0X23B28);
	OpSign		(x,	0);
	OpHex		(x,	0);
	MakeCode	(x=0X23B2A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23B2E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23B36);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeRptCmt	(0X23B3A,	"skip if combatant entry is unpopulated");
	ExtLinA		(0X23B44,	0,	"                ");
	ExtLinA		(0X23B44,	1,	"                ; Enemy");
	MakeCode	(x=0X23B48);
	OpEnumEx		(x,	0,	GetEnum("EnemyEntry_Offsets"),0);
	MakeRptCmt	(0X23B4C,	"D1 = battle sprite index");
	MakeRptCmt	(0X23B4E,	"D2 = battle sprite palette index");
	MakeCode	(0X23B52);
	MakeCode	(x=0X23B58);
	OpEnumEx		(x,	0,	GetEnum("BattleSprites"),0);
	MakeCode	(0X23B60);
	MakeCode	(x=0X23B74);
	OpEnumEx		(x,	0,	GetEnum("BattleSpriteProperties"),0);
	MakeCode	(x=0X23B78);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23B7C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X23B86);
	MakeName	(0X23B86,	"LoadWeaponSpriteIndex");
	MakeCode	(x=0X23B8A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23B90);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X23B9A,	"skip if changed into Jogurt");
	MakeCode	(x=0X23BA4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23BAA);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X23BB4,	"skip if enemy");
	MakeCode	(x=0X23BB6);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeMasks"),0);
	MakeRptCmt	(0X23BC0,	"skip if no equipped item found");
	MakeCode	(x=0X23BC8);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X23BCC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23BDA);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23BE2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X23BEC);
	MakeName	(0X23BEC,	"LoadBattleAnimationIndex");
	MakeCode	(x=0X23BF4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23BF8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23C00);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X23C0A,	"reached end of table");
	MakeCode	(0X23C18);
	MakeCode	(x=0X23C1C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23C24);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X23C2E);
	MakeName	(0X23C2E,	"GetAnimationDataAddress");
	MakeCode	(x=0X23C32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinA		(0X23C42,	0,	"                ");
	ExtLinA		(0X23C42,	1,	"                ; Enemy");
	MakeCode	(0X23C4A);
	MakeCode	(0X23C5C);
	MakeName	(0X23C5C,	"IsCombatantChangedIntoJogurt");
	MakeCode	(0X23C6C);
	MakeName	(0X23C6C,	"IsEntityChangedIntoJogurt");
	MakeCode	(x=0X23C7A);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(0X23C80);
	MakeCode	(0X23C88);
	MakeRptCmt	(0X23C90,	"continue if not regular attack");
	MakeCode	(x=0X23C96);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23CA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23CB6);
	MakeCode	(0X23CBA);
	MakeCode	(0X23CBE);
	MakeCode	(0X23CC2);
	MakeCode	(0X23CC6);
	MakeCode	(x=0X23CCA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X23CDA);
	MakeCode	(x=0X23D0C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23D10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23D14);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23D1A);
	MakeCode	(0X23D32);
	MakeCode	(x=0X23D3C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23D46);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23D4A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X23D7A);
	MakeCode	(0X23D82);
	MakeCode	(0X23D9C);
	MakeCode	(0X23DDE);
	MakeCode	(0X23DEC);
	MakeCode	(x=0X23DF0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23E12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23E16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23E20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23E40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23E50);
	MakeCode	(0X23E5A);
	MakeCode	(0X23E64);
	MakeCode	(0X23E6E);
	MakeCode	(0X23E70);
	MakeCode	(x=0X23E80);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23E84);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X23E8E);
	MakeCode	(0X23E9A);
	MakeCode	(x=0X23EB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23EB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23EDA);
	MakeCode	(0X23EE2);
	MakeCode	(0X23EFA);
	MakeCode	(x=0X23F08);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23F0C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23F16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23F1A);
	OpEnumEx		(x,	0,	GetEnum("BattleActionTypes"),0);
	MakeCode	(x=0X23F20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23F2A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23F30);
	OpEnumEx		(x,	0,	GetEnum("BattleActionTypes"),0);
	MakeCode	(x=0X23F36);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23F40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23F46);
	MakeCode	(x=0X23F4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23F56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23F64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23F6E);
	MakeName	(0X23F6E,	"DetermineAiAction");
	MakeCode	(x=0X23F7C);
	OpEnumEx		(x,	0,	GetEnum("ClassDefOffsets"),0);
	MakeCode	(x=0X23F80);
	OpEnumEx		(x,	0,	GetEnum("ClassDefProperties"),0);
	MakeCode	(x=0X23F86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X23F92);
	OpEnumEx		(x,	0,	GetEnum("ClassDefOffsets"),0);
	MakeCode	(x=0X23F96);
	OpEnumEx		(x,	0,	GetEnum("ClassDefAiActions"),0);
	ExtLinA		(0X23F9C,	0,	"                ");
	ExtLinA		(0X23F9C,	1,	"                ; Check if AI is set to cast spell");
	MakeCode	(x=0X23F9C);
	OpEnumEx		(x,	0,	GetEnum("ClassDefAiActions"),0);
	MakeCode	(x=0X23FA8);
	OpEnumEx		(x,	0,	GetEnum("ClassDefAiActions"),0);
	MakeRptCmt	(0X23FAE,	"use item in slot 0");
	MakeCode	(x=0X23FB6);
	OpEnumEx		(x,	0,	GetEnum("ClassDefAiActions"),0);
	MakeRptCmt	(0X23FBC,	"use item in slot 1");
	MakeCode	(x=0X23FC4);
	OpEnumEx		(x,	0,	GetEnum("ClassDefAiActions"),0);
	MakeCode	(x=0X23FD0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23FD6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23FE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X23FE4,	"D4 = range index");
	MakeCode	(x=0X23FE6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23FEE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X23FF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X23FFC);
	MakeByte	(x=0X24002);
	OpDecimal	(x,	0);
	MakeName	(0X24002,	"tbl_AiActionPercents");
	MakeByte	(x=0X24003);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24004);
	OpDecimal	(x,	0);
	ExtLinB		(0X24005,	0,	"                ");
	MakeByte	(x=0X24005);
	OpDecimal	(x,	0);
	ExtLinA		(0X24006,	0,	"; Special AI action definitions table -- 2 bytes per entry : ");
	ExtLinA		(0X24006,	1,	";     0: range index");
	ExtLinA		(0X24006,	2,	";     1: effect index");
	ExtLinA		(0X24006,	3,	"                ");
	MakeByte	(x=0X24006);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeName	(0X24006,	"tbl_SpecialAiActionDefs");
	MakeByte	(x=0X24007);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeByte	(x=0X24008);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeByte	(x=0X24009);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeByte	(x=0X2400A);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeByte	(x=0X2400B);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeByte	(x=0X2400C);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeByte	(x=0X2400D);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeByte	(x=0X2400E);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeByte	(x=0X2400F);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeByte	(x=0X24010);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeByte	(x=0X24011);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeByte	(x=0X24012);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeByte	(x=0X24013);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeByte	(x=0X24014);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeByte	(x=0X24015);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeByte	(x=0X24016);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeByte	(x=0X24017);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeByte	(x=0X24018);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeByte	(x=0X24019);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeByte	(x=0X2401A);
	OpEnumEx		(x,	0,	GetEnum("Ranges"),0);
	MakeByte	(x=0X2401B);
	OpEnumEx		(x,	0,	GetEnum("Effects"),0);
	MakeCode	(0X2401C);
	MakeName	(0X2401C,	"AiAction_CastSpell");
	MakeCode	(x=0X24026);
	OpEnumEx		(x,	0,	GetEnum("SpellSlots"),0);
	MakeRptCmt	(0X2402A,	"skip if spell slot is empty");
	MakeRptCmt	(0X24034,	"D3 = caster's current MP");
	MakeRptCmt	(0X24036,	"D1 = spell index");
	MakeCode	(x=0X2403A);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeRptCmt	(0X2403E,	"D4 = spell level counter");
	MakeRptCmt	(0X24048,	"break out of loop if current MP is sufficient to cast spell at level being currently evaluated");
	MakeRptCmt	(0X2404A,	"get previous level spell index");
	ExtLinB		(0X2404E,	0,	"                ");
	MakeRptCmt	(0X24052,	"fall back to regular attack if unable to cast");
	MakeCode	(0X24054);
	MakeCode	(0X2405C);
	MakeCode	(0X24062);
	MakeName	(0X24062,	"LoadAiSpellcastData");
	MakeCode	(x=0X2406C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24074);
	OpEnumEx		(x,	0,	GetEnum("SpellEntry_Offsets"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2407A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24080);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24084);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeCode	(x=0X2408A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24092);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeWord	(x=0X2409C);
	OpOff		(x,	0,	0X2409C);
	OpOff		(x,	128,	0X2409C);
	OpOff		(x,	1,	0X2409C);
	OpOff		(x,	129,	0X2409C);
	MakeName	(0X2409C,	"rp_PriorityRoutine_Heal");
	MakeWord	(x=0X2409E);
	OpOff		(x,	0,	0X2409E);
	OpOff		(x,	128,	0X2409E);
	OpOff		(x,	1,	0X2409E);
	OpOff		(x,	129,	0X2409E);
	MakeName	(0X2409E,	"rp_PriorityRoutine_Aura");
	MakeWord	(x=0X240A0);
	OpOff		(x,	0,	0X240A0);
	OpOff		(x,	128,	0X240A0);
	OpOff		(x,	1,	0X240A0);
	OpOff		(x,	129,	0X240A0);
	MakeName	(0X240A0,	"rp_PriorityRoutine_Detox");
	MakeWord	(x=0X240A2);
	OpOff		(x,	0,	0X240A2);
	OpOff		(x,	128,	0X240A2);
	OpOff		(x,	1,	0X240A2);
	OpOff		(x,	129,	0X240A2);
	MakeName	(0X240A2,	"rp_PriorityRoutine_Quick");
	MakeWord	(x=0X240A4);
	OpOff		(x,	0,	0X240A4);
	OpOff		(x,	128,	0X240A4);
	OpOff		(x,	1,	0X240A4);
	OpOff		(x,	129,	0X240A4);
	MakeName	(0X240A4,	"rp_PriorityRoutine_Slow");
	MakeWord	(x=0X240A6);
	OpOff		(x,	0,	0X240A6);
	OpOff		(x,	128,	0X240A6);
	OpOff		(x,	1,	0X240A6);
	OpOff		(x,	129,	0X240A6);
	MakeName	(0X240A6,	"rp_PriorityRoutine_Boost");
	MakeWord	(x=0X240A8);
	OpOff		(x,	0,	0X240A8);
	OpOff		(x,	128,	0X240A8);
	OpOff		(x,	1,	0X240A8);
	OpOff		(x,	129,	0X240A8);
	MakeName	(0X240A8,	"rp_PriorityRoutine_Dispel");
	MakeWord	(x=0X240AA);
	OpOff		(x,	0,	0X240AA);
	OpOff		(x,	128,	0X240AA);
	OpOff		(x,	1,	0X240AA);
	OpOff		(x,	129,	0X240AA);
	MakeName	(0X240AA,	"rp_PriorityRoutine_Shield");
	MakeWord	(x=0X240AC);
	OpOff		(x,	0,	0X240AC);
	OpOff		(x,	128,	0X240AC);
	OpOff		(x,	1,	0X240AC);
	OpOff		(x,	129,	0X240AC);
	MakeName	(0X240AC,	"rp_PriorityRoutine_Muddle");
	MakeWord	(x=0X240AE);
	OpOff		(x,	0,	0X240AE);
	OpOff		(x,	128,	0X240AE);
	OpOff		(x,	1,	0X240AE);
	OpOff		(x,	129,	0X240AE);
	MakeName	(0X240AE,	"rp_PriorityRoutine_Blaze");
	MakeWord	(x=0X240B0);
	OpOff		(x,	0,	0X240B0);
	OpOff		(x,	128,	0X240B0);
	OpOff		(x,	1,	0X240B0);
	OpOff		(x,	129,	0X240B0);
	MakeName	(0X240B0,	"rp_PriorityRoutine_Freeze");
	MakeWord	(x=0X240B2);
	OpOff		(x,	0,	0X240B2);
	OpOff		(x,	128,	0X240B2);
	OpOff		(x,	1,	0X240B2);
	OpOff		(x,	129,	0X240B2);
	MakeName	(0X240B2,	"rp_PriorityRoutine_Bolt");
	MakeWord	(x=0X240B4);
	OpOff		(x,	0,	0X240B4);
	OpOff		(x,	128,	0X240B4);
	OpOff		(x,	1,	0X240B4);
	OpOff		(x,	129,	0X240B4);
	MakeName	(0X240B4,	"rp_PriorityRoutine_Desoul");
	MakeWord	(x=0X240B6);
	OpOff		(x,	0,	0X240B6);
	OpOff		(x,	128,	0X240B6);
	OpOff		(x,	1,	0X240B6);
	OpOff		(x,	129,	0X240B6);
	MakeName	(0X240B6,	"rp_PriorityRoutine_Egress");
	MakeWord	(x=0X240B8);
	OpOff		(x,	0,	0X240B8);
	OpOff		(x,	128,	0X240B8);
	OpOff		(x,	1,	0X240B8);
	OpOff		(x,	129,	0X240B8);
	MakeName	(0X240B8,	"rp_PriorityRoutine_dummy");
	MakeWord	(x=0X240BA);
	OpOff		(x,	0,	0X240BA);
	OpOff		(x,	128,	0X240BA);
	OpOff		(x,	1,	0X240BA);
	OpOff		(x,	129,	0X240BA);
	MakeName	(0X240BA,	"rp_PriorityRoutine_Sleep");
	MakeCode	(0X240BC);
	MakeName	(0X240BC,	"AiAction_DarkDragon");
	MakeCode	(x=0X240C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X240D0);
	ExtLinA		(0X240DC,	0,	"; Spells available to Dark Dragon's side heads, 2 bytes per entry : ");
	ExtLinA		(0X240DC,	1,	";       0: percent chance to be selected");
	ExtLinA		(0X240DC,	2,	";       1: spell index and level");
	ExtLinA		(0X240DC,	3,	"                ");
	MakeByte	(x=0X240DC);
	OpDecimal	(x,	0);
	MakeName	(0X240DC,	"tbl_DarkDragonSpells");
	MakeByte	(x=0X240DD);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X240DE);
	OpDecimal	(x,	0);
	MakeByte	(x=0X240DF);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X240E0);
	OpDecimal	(x,	0);
	MakeByte	(x=0X240E1);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X240E2);
	OpDecimal	(x,	0);
	MakeByte	(x=0X240E3);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X240E4);
	OpDecimal	(x,	0);
	MakeByte	(x=0X240E5);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X240E6);
	OpDecimal	(x,	0);
	MakeByte	(x=0X240E7);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeCode	(0X240E8);
	MakeName	(0X240E8,	"AiAction_UseItem");
	MakeCode	(x=0X240EC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X240F6,	"D1 = item index in slot number D2");
	MakeCode	(x=0X240FA);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeRptCmt	(0X240FE,	"fall back to regular attack if item slot is empty");
	MakeCode	(x=0X24106);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X2410A,	"fall back to regular attack if item is not usable");
	MakeCode	(x=0X24110);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	MakeCode	(x=0X24114);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2411A);
	OpEnumEx		(x,	0,	GetEnum("ItemDefOffsets"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24124);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_GroupFlags"),0);
	OpEnumEx		(x,	1,	GetEnum("RangeEntry_Offsets"),0);
	MakeCode	(x=0X2412C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24132);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24136);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2413A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X24146);
	MakeCode	(0X2414C);
	MakeName	(0X2414C,	"LoadRegularAttackData");
	MakeCode	(x=0X24150);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24154);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2415C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24160);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24166);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X24170);
	MakeName	(0X24170,	"LoadRangeData");
	MakeRptCmt	(0X2417C,	"max distance must lower than 4");
	MakeCode	(x=0X24184);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24188);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Offsets"),0);
	MakeCode	(x=0X2418C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24190);
	OpEnumEx		(x,	0,	GetEnum("RangeEntry_Offsets"),0);
	MakeCode	(x=0X24198);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X241A2);
	MakeCode	(x=0X241B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X241C0);
	MakeCode	(0X241CA);
	MakeCode	(x=0X241EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X241F8);
	MakeCode	(x=0X241FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24200);
	OpOff		(x,	0,	0XFFFFB0C0);
	OpOff		(x,	128,	0XFFFFB0C0);
	MakeCode	(0X24220);
	MakeCode	(x=0X24230);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2423E);
	MakeCode	(x=0X24242);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X2424E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24252);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X2425C);
	MakeCode	(x=0X24262);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24266);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeRptCmt	(0X24270,	"branch if enemy");
	MakeCode	(x=0X24278);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24288);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X24292);
	MakeCode	(x=0X24296);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X242C4);
	MakeCode	(x=0X242CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X242DA);
	MakeCode	(0X242E6);
	MakeCode	(0X242EC);
	MakeCode	(x=0X242F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X24306);
	MakeCode	(x=0X24316);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X24324);
	MakeCode	(x=0X24328);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24334);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2435C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24362);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X24372);
	MakeCode	(0X24378);
	MakeName	(0X24378,	"priority_ClassDistanceHealth");
	MakeCode	(0X24386);
	MakeName	(0X24386,	"ApplyClassToTargetPriority");
	MakeCode	(x=0X2438A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(x=0X243AA);
	OpDecimal	(x,	0);
	MakeName	(0X243AA,	"table_ClassTargetPriorities");
	MakeByte	(x=0X243AB);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243AC);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243AD);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243AE);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243AF);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243B0);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243B1);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243B2);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243B3);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243B4);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243B5);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243B6);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243B7);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243B8);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243B9);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243BA);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243BB);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243BC);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243BD);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243BE);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243BF);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243C0);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243C1);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243C2);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243C3);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243C4);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243C5);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243C6);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243C7);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243C8);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243C9);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243CA);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243CB);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243CC);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243CD);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243CE);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243CF);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243D0);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243D1);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243D2);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243D3);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243D4);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243D5);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243D6);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243D7);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243D8);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243D9);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243DA);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243DB);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243DC);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243DD);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243DE);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243DF);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243E0);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243E1);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243E2);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243E3);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243E4);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243E5);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243E6);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243E7);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243E8);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243E9);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243EA);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243EB);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243EC);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243ED);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243EE);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243EF);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243F0);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243F1);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243F2);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243F3);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243F4);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243F5);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243F6);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243F7);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243F8);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243F9);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243FA);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243FB);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243FC);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243FD);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243FE);
	OpDecimal	(x,	0);
	MakeByte	(x=0X243FF);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24400);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24401);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24402);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24403);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24404);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24405);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24406);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24407);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24408);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24409);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2440A);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2440B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2440C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2440D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2440E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2440F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24410);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24411);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24412);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24413);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24414);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24415);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24416);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24417);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24418);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24419);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2441A);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2441B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2441C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2441D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2441E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2441F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24420);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24421);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24422);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24423);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24424);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24425);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24426);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24427);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24428);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24429);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2442A);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2442B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2442C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2442D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2442E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2442F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24430);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24431);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24432);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24433);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24434);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24435);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24436);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24437);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24438);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24439);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2443A);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2443B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2443C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2443D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2443E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2443F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24440);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24441);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24442);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24443);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24444);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24445);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24446);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24447);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24448);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24449);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2444A);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2444B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2444C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2444D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2444E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2444F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24450);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24451);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24452);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24453);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24454);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24455);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24456);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24457);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24458);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24459);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2445A);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2445B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2445C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2445D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2445E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2445F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24460);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24461);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24462);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24463);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24464);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24465);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24466);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24467);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24468);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24469);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2446A);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2446B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2446C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2446D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2446E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2446F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24470);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24471);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24472);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24473);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24474);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24475);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24476);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24477);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24478);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24479);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2447A);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2447B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2447C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2447D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2447E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2447F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24480);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24481);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24482);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24483);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24484);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24485);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24486);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24487);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24488);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24489);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2448A);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2448B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2448C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2448D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2448E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2448F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24490);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24491);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24492);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24493);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24494);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24495);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24496);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24497);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24498);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24499);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2449A);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2449B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2449C);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2449D);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2449E);
	OpDecimal	(x,	0);
	MakeByte	(x=0X2449F);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244A0);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244A1);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244A2);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244A3);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244A4);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244A5);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244A6);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244A7);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244A8);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244A9);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244AA);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244AB);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244AC);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244AD);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244AE);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244AF);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244B0);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244B1);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244B2);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244B3);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244B4);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244B5);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244B6);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244B7);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244B8);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244B9);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244BA);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244BB);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244BC);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244BD);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244BE);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244BF);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244C0);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244C1);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244C2);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244C3);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244C4);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244C5);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244C6);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244C7);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244C8);
	OpDecimal	(x,	0);
	MakeByte	(x=0X244C9);
	OpDecimal	(x,	0);
	MakeCode	(0X244CA);
	MakeName	(0X244CA,	"ApplyDistanceToTargetPriority");
	MakeCode	(x=0X244D6);
	OpDecimal	(x,	0);
	MakeCode	(x=0X244DC);
	OpDecimal	(x,	0);
	MakeCode	(0X244F0);
	MakeName	(0X244F0,	"ApplyHealthToTargetPriority");
	MakeCode	(x=0X24504);
	OpDecimal	(x,	0);
	MakeCode	(0X24516);
	MakeName	(0X24516,	"PriorityRoutine_LowHealth");
	MakeCode	(x=0X2452E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2453E);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeName	(0X2453E,	"PriorityRoutine_NotQuickened");
	MakeCode	(x=0X24544);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeName	(0X24544,	"PriorityRoutine_NotBoosted");
	MakeCode	(x=0X2454A);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeName	(0X2454A,	"PriorityRoutine_NotShielded");
	MakeCode	(x=0X24550);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeName	(0X24550,	"PriorityRoutine_NotSlowed");
	MakeCode	(x=0X24556);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeName	(0X24556,	"PriorityRoutine_NotDispelled");
	MakeCode	(x=0X2455C);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeName	(0X2455C,	"PriorityRoutine_NotMuddled");
	MakeCode	(0X24562);
	MakeCode	(x=0X24576);
	OpDecimal	(x,	0);
	MakeCode	(0X24580);
	MakeCode	(0X24596);
	MakeCode	(0X245A2);
	MakeCode	(x=0X245A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X245AA);
	OpOff		(x,	0,	0XFFFFA8C2);
	OpOff		(x,	128,	0XFFFFA8C2);
	MakeCode	(0X245F2);
	MakeCode	(0X24602);
	MakeCode	(0X24608);
	MakeName	(0X24608,	"GetLandEffectForCombatant");
	MakeCode	(0X24616);
	MakeName	(0X24616,	"GetLandEffectAtPosition");
	MakeCode	(0X24646);
	MakeName	(0X24646,	"GetTerrainEntryAddress");
	MakeCode	(x=0X2464A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2464E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X2466C);
	MakeCode	(0X2467A);
	MakeCode	(0X2468E);
	MakeName	(0X2468E,	"GetTerrainBackgrounds");
	MakeCode	(x=0X246B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X246BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X246C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X246C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X246D4);
	MakeByte	(0X246D5);
	MakeByte	(0X246D6);
	MakeByte	(0X246D7);
	MakeByte	(0X246D8);
	MakeByte	(0X246D9);
	MakeByte	(0X246DA);
	MakeByte	(0X246DB);
	MakeByte	(0X246DC);
	MakeByte	(0X246DD);
	MakeByte	(0X246DE);
	MakeByte	(0X246DF);
	MakeByte	(0X246E0);
	MakeByte	(0X246E1);
	MakeByte	(0X246E2);
	MakeByte	(0X246E3);
	MakeByte	(0X246E4);
	MakeByte	(0X246E5);
	MakeByte	(0X246E6);
	MakeByte	(0X246E7);
	MakeByte	(0X246E8);
	MakeByte	(0X246E9);
	MakeByte	(0X246EA);
	MakeByte	(0X246EB);
	MakeCode	(0X246EC);
	MakeName	(0X246EC,	"LevelUp");
	MakeCode	(0X246F8);
	MakeName	(0X246F8,	"IncreaseStatsOnLevelUpForCombatant");
	MakeCode	(0X24708);
	MakeName	(0X24708,	"IncreaseStatsOnLevelUp");
	MakeRptCmt	(0X24710,	"if so, exit");
	MakeCode	(x=0X24714);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeRptCmt	(0X24718,	"if force member is Jogurt, skip");
	MakeRptCmt	(0X2471A,	"otherwise add 1 to level");
	MakeRptCmt	(0X24722,	"set EXP to 0");
	MakeRptCmt	(0X24730,	"get new level, save to D3");
	MakeCode	(x=0X24734);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X2473E,	"get current Attack to D2");
	MakeRptCmt	(0X2474A,	"store difference for message box");
	MakeCode	(0X247F0);
	MakeName	(0X247F0,	"CalculateStatGain");
	MakeRptCmt	(0X247F4,	"check that target stat value isn't zero");
	MakeRptCmt	(0X247FA,	"if so, just end");
	MakeRptCmt	(0X247FC,	"check if level <= 20");
	MakeCode	(x=0X247FC);
	OpEnumEx		(x,	0,	GetEnum("GrowthDefinition"),0);
	MakeRptCmt	(0X24802,	"check if stat >= 99");
	MakeCode	(x=0X24802);
	OpEnumEx		(x,	0,	GetEnum("ForceDefinition"),0);
	MakeRptCmt	(0X24808,	"set target stat to current value");
	ExtLinA		(0X24808,	0,	"                ");
	ExtLinA		(0X24808,	1,	"                ; Randomly gain 1 point when level is higher than 20");
	MakeRptCmt	(0X2480A,	"get random number in the range 0-3");
	MakeRptCmt	(0X24816,	"if zero add one to target (1/4 chance of increasing target by 1)");
	MakeCode	(0X2481A);
	MakeRptCmt	(0X2481C,	"increase target stat randomly, anywhere from 0 to 25% of target or 4, whichever is lower");
	MakeRptCmt	(0X2482E,	"do it again but substract");
	MakeRptCmt	(0X24836,	"cap target at 99");
	MakeCode	(x=0X24836);
	OpEnumEx		(x,	0,	GetEnum("ForceDefinition"),0);
	MakeCode	(x=0X2483C);
	OpEnumEx		(x,	0,	GetEnum("ForceDefinition"),0);
	MakeRptCmt	(0X24840,	"keep highest of current (D2) and target (D1)");
	MakeCode	(0X24852);
	MakeName	(0X24852,	"DisplayLevelUpMessages");
	MakeCode	(x=0X2486C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24874);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24888);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeRptCmt	(0X2488E,	"\"...[Wait2]It appears that [Name]'s[Line]level increases to [Num].[Line]\"");
	MakeCode	(x=0X24892);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X24898);
	MakeRptCmt	(0X2489A,	"\"[Name]'s level increases[Line]to [Num]![Wait2]\"");
	MakeCode	(0X2489A);
	MakeCode	(x=0X2489E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X248A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X248AA,	"\"Attack level increases[Line]by [Num].[Wait2]\"");
	MakeCode	(x=0X248AE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X248B6,	"\"Defense level increases[Line]by [Num].[Wait2]\"");
	MakeCode	(x=0X248BA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X248C2,	"\"Speed increases by [Num].[Wait2]\"");
	MakeCode	(x=0X248C6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X248CE,	"\"Maximum hit points increases[Line]by [Num].[Wait2]\"");
	MakeCode	(x=0X248D2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X248DA,	"\"Maximum magic points[Line]increases by [Num].[Wait2]\"");
	MakeCode	(x=0X248DE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X248EC);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeCode	(x=0X248F0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X248F8,	"\"And learns a new[Line][Spell] spell.[Wait2]\"");
	MakeCode	(x=0X24906);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X2490A);
	MakeCode	(0X24912);
	MakeName	(0X24912,	"Promote");
	MakeCode	(x=0X24920);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2492E);
	OpDecimal	(x,	0);
	ExtLinA		(0X2498E,	0,	"                ");
	ExtLinA		(0X2498E,	1,	"                ; Reset level and experience, refill HP/MP, reload stats");
	MakeCode	(0X249D8);
	MakeName	(0X249D8,	"CalculateTotalStatGrowth");
	MakeRptCmt	(0X249E0,	"D2 = stat D1 growth value");
	MakeRptCmt	(0X249E8,	"D4 = stat D1 base value");
	MakeCode	(0X249FC);
	MakeName	(0X249FC,	"CalculateInitialStatValue");
	MakeRptCmt	(0X24A04,	"D2 = stat D1 unpromoted growth value");
	MakeRptCmt	(0X24A10,	"D4 = stat D1 unpromoted initial value");
	MakeRptCmt	(0X24A18,	"if not promoted, skip");
	MakeRptCmt	(0X24A1C,	"add growth target to initial value");
	MakeRptCmt	(0X24A1E,	"and multiply by 0.85");
	MakeCode	(x=0X24A1E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X24A22);
	OpDecimal	(x,	0);
	MakeCode	(0X24A2E);
	MakeName	(0X24A2E,	"MapStatToForceEntryOffset");
	MakeRptCmt	(0X24A32,	"get address of corresponding stat into force data");
	MakeCode	(x=0X24A32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X24A38);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeName	(0X24A38,	"StatOffsets");
	MakeWord	(x=0X24A3A);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeWord	(x=0X24A3C);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeWord	(x=0X24A3E);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeWord	(x=0X24A40);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeWord	(x=0X24A42);
	OpEnumEx		(x,	0,	GetEnum("ForceDataOffsets"),0);
	MakeCode	(0X24A44);
	MakeName	(0X24A44,	"CalculateGrowthTarget");
	MakeRptCmt	(0X24A48,	"multiply curve % by growth to get target value");
	MakeCode	(x=0X24A48);
	OpEnumEx		(x,	0,	GetEnum("GrowthDefinition"),0);
	MakeCode	(x=0X24A4E);
	OpDecimal	(x,	0);
	MakeCode	(0X24A56);
	MakeName	(0X24A56,	"CalculateGrowthPercent");
	MakeCode	(x=0X24A5A);
	OpEnumEx		(x,	0,	GetEnum("GrowthDefinition"),0);
	MakeRptCmt	(0X24A5E,	"continue if level <= 20");
	MakeCode	(x=0X24A60);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X24A64,	"else, return 100%");
	MakeRptCmt	(0X24A66,	"find growth curve");
	MakeCode	(x=0X24A66);
	OpEnumEx		(x,	0,	GetEnum("GrowthDefinition"),0);
	MakeRptCmt	(0X24A72,	"D2 = offset to curve entry");
	MakeRptCmt	(0X24A76,	"A0 = curve entry address");
	MakeRptCmt	(0X24A7A,	"find break point in curve");
	MakeRptCmt	(0X24A88,	"interpolate to get growth %");
	MakeCode	(0X24A88);
	MakeCode	(0X24AA2);
	MakeName	(0X24AA2,	"GetGrowthEntryAddress");
	MakeRptCmt	(0X24AA4,	"branch if not promoted");
	MakeCode	(0X24AAE);
	MakeName	(0X24AAE,	"GetUnpromotedGrowthEntryAddress");
	MakeRptCmt	(0X24AB6,	"index into growth table to find member's entry");
	MakeCode	(0X24AC4);
	MakeName	(0X24AC4,	"GetInitialForceEntryAddress");
	MakeCode	(0X24ADA);
	MakeName	(0X24ADA,	"IsPromoted");
	MakeCode	(0X24AE6);
	MakeName	(0X24AE6,	"GetPromotedAtLevel");
	MakeCode	(x=0X24AEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X24AFE);
	MakeName	(0X24AFE,	"LearnSpell");
	MakeCode	(x=0X24B02);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X24B26);
	MakeCode	(0X24B30);
	MakeName	(0X24B30,	"AddSpell");
	MakeCode	(x=0X24B36);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeCode	(x=0X24B4A);
	OpEnumEx		(x,	0,	GetEnum("SpellEntryMasks"),0);
	MakeCode	(0X24B5A);
	MakeCode	(0X24B62);
	MakeName	(0X24B62,	"GetSpellLearningEntryAddress");
	MakeCode	(0X24B80);
	MakeCode	(0X24B86);
	MakeCode	(0X24B8C);
	MakeName	(0X24B8C,	"CalculateTotalLevel");
	MakeCode	(x=0X24B96);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X24BAC);
	MakeName	(0X24BAC,	"CalculateEffectiveLevel");
	MakeCode	(x=0X24BBC);
	OpEnumEx		(x,	0,	GetEnum("ClassEntryProperties"),0);
	MakeCode	(x=0X24BC2);
	OpEnumEx		(x,	0,	GetEnum("Classes"),0);
	MakeCode	(x=0X24BC8);
	OpDecimal	(x,	0);
	MakeCode	(0X24BD2);
	MakeName	(0X24BD2,	"IsAsleep");
	MakeCode	(x=0X24BD6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24BE0);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X24BE6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X24BF2);
	MakeName	(0X24BF2,	"HandleAfterTurnStatusEffects");
	MakeCode	(x=0X24C00);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24C04);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectProperties"),0);
	ExtLinB		(0X24C0E,	0,	"                ");
	MakeCode	(x=0X24C22);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24C26);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X24C2C,	"\"The poison in [Name]'s[Line]body inflicts [Num] points of[Line]damage.[Wait2]\"");
	MakeCode	(x=0X24C2C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24C32);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24C3E);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X24C44,	"\"[Name] can no longer fight.[Wait2]\"");
	MakeCode	(x=0X24C44);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24C50);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X24C56,	"\"[Name] is asleep.[Wait2]\"");
	MakeCode	(x=0X24C56);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24C60);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24C64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X24C6A,	"\"The [Spell] spell ends. Speed[Line]and defense levels[Line]return to normal.[Wait2]\"");
	MakeCode	(x=0X24C72);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24C7C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24C8A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	ExtLinA		(0X24C98,	0,	"; Status effect spells table : 7 entries, 2 bytes per entry");
	ExtLinA		(0X24C98,	1,	";       0: spell index");
	ExtLinA		(0X24C98,	2,	";       1: status effect bit");
	ExtLinA		(0X24C98,	3,	"                ");
	MakeByte	(x=0X24C98);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeName	(0X24C98,	"tbl_StatusEffectSpells");
	MakeByte	(x=0X24C99);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeName	(0X24C99,	"tbl_StatusEffectBits");
	MakeByte	(x=0X24C9A);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X24C9B);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeByte	(x=0X24C9C);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X24C9D);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeByte	(x=0X24C9E);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X24C9F);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeByte	(x=0X24CA0);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X24CA1);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeByte	(x=0X24CA2);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X24CA3);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeByte	(x=0X24CA4);
	OpEnumEx		(x,	0,	GetEnum("Spells"),0);
	MakeByte	(x=0X24CA5);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(0X24CA6);
	MakeCode	(0X24CBA);
	MakeName	(0X24CBA,	"HandlePoison");
	MakeCode	(x=0X24CBE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24CC8);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X24CCE);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X24CD2,	"inflict 2 points of damage");
	MakeCode	(x=0X24CDE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X24CE2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X24CEE);
	MakeName	(0X24CEE,	"HandleSleep");
	MakeCode	(x=0X24CF2);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X24CFE);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectBitmap"),0);
	MakeCode	(x=0X24D04);
	OpDecimal	(x,	0);
	MakeCode	(0X24D0E);
	MakeName	(0X24D0E,	"ResetForceMemberStats");
	MakeCode	(x=0X24D12);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	MakeCode	(x=0X24D1A);
	OpEnumEx		(x,	0,	GetEnum("StatusEffectCounters"),0);
	MakeCode	(0X24D44);
	MakeName	(0X24D44,	"DecrementStatusEffectCounter");
	MakeCode	(x=0X24D54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X24D5E);
	ExtLinA		(0X24D70,	0,	"; Chances to end status effect early, indexed by counter");
	ExtLinA		(0X24D70,	1,	"");
	MakeByte	(x=0X24D70);
	OpDecimal	(x,	0);
	MakeName	(0X24D70,	"table_StatusEffectEndingPercents");
	MakeByte	(x=0X24D71);
	OpDecimal	(x,	0);
	MakeByte	(x=0X24D72);
	OpDecimal	(x,	0);
	MakeByte	(0X24D73);
	MakeCode	(0X24D74);
	MakeName	(0X24D74,	"TerminateStatusEffectRandomly");
	MakeCode	(x=0X24D88);
	OpDecimal	(x,	0);
	MakeCode	(0X24D9E);
	MakeName	(0X24D9E,	"DisplayAfterTurnMessage");
	MakeCode	(x=0X24DA0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24DA4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24DAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24DB0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X24DB6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X24DBC);
	MakeName	(0X24DBC,	"GetGold");
	MakeCode	(0X24DC4);
	MakeName	(0X24DC4,	"SetGold");
	MakeCode	(0X24DCC);
	MakeName	(0X24DCC,	"IncreaseGold");
	MakeCode	(x=0X24DD2);
	OpEnumEx		(x,	0,	GetEnum("ForceDefinition"),0);
	MakeCode	(x=0X24DDA);
	OpEnumEx		(x,	0,	GetEnum("ForceDefinition"),0);
	MakeCode	(0X24DE8);
	MakeName	(0X24DE8,	"DecreaseGold");
	MakeCode	(0X24DFE);
	MakeName	(0X24DFE,	"IncrementDealsStock");
	MakeCode	(x=0X24E06);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeCode	(x=0X24E10);
	OpDecimal	(x,	0);
	MakeCode	(0X24E1C);
	MakeName	(0X24E1C,	"DecrementDealsStock");
	MakeCode	(0X24E2A);
	MakeName	(0X24E2A,	"GetDealsStock");
	MakeCode	(0X24E38);
	MakeCode	(0X24E44);
	MakeName	(0X24E44,	"SetDealsStock");
	MakeCode	(0X24E58);
	MakeCode	(x=0X24E64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X24E64,	"GetDealsStockEntryAddress");
	MakeCode	(x=0X24E6A);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(0X24E74);
	MakeName	(0X24E74,	"LoadDealsInventory");
	MakeRptCmt	(0X24E7A,	"shop inventory");
	MakeCode	(x=0X24E7A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X24E8A,	"branch if item shop");
	MakeCode	(x=0X24E8C);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X24E90,	"weapon shop : branch if item not a weapon");
	MakeCode	(x=0X24E94);
	OpEnumEx		(x,	0,	GetEnum("ItemTypeBitmap"),0);
	MakeRptCmt	(0X24E98,	"item shop : branch if item is a weapon");
	MakeRptCmt	(0X24E9E,	"branch out upon reaching end of shop data");
	MakeRptCmt	(0X24EA2,	"skip displaying item in deals if regularly for sale");
	MakeCode	(0X24EA6);
	MakeRptCmt	(0X24EAA,	"branch if no item in stock");
	MakeCode	(x=0X24EB2);
	OpEnumEx		(x,	0,	GetEnum("Items"),0);
	MakeCode	(0X24EC4);
	MakeName	(0X24EC4,	"IsItemInDealsOrHeldByForce");
	MakeCode	(x=0X24EC8);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(0X24EDA);
	MakeName	(0X24EDA,	"IsItemHeldByCharacter");
	MakeCode	(x=0X24EE4);
	OpEnumEx		(x,	0,	GetEnum("ItemSlots"),0);
	MakeCode	(x=0X24EE8);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(0X24EFE);
	MakeName	(0X24EFE,	"IsItemHeldByForce");
	MakeCode	(x=0X24F02);
	OpEnumEx		(x,	0,	GetEnum("ItemEntryMasks"),0);
	MakeCode	(x=0X24F06);
	OpEnumEx		(x,	0,	GetEnum("ForceMembersData"),0);
	MakeCode	(0X24F1A);
	MakeName	(0X24F1A,	"LoadBaseAttack");
	MakeCode	(0X24F2C);
	MakeName	(0X24F2C,	"LoadBaseDefense");
	MakeCode	(0X24F3E);
	MakeName	(0X24F3E,	"LoadBaseAgility");
	MakeCode	(0X24F50);
	MakeName	(0X24F50,	"LoadBaseMove");
	MakeCode	(0X24F62);
	MakeName	(0X24F62,	"LoadBaseCritical");
	MakeCode	(0X24F74);
	MakeName	(0X24F74,	"RefillHP");
	MakeCode	(0X24F86);
	MakeName	(0X24F86,	"RefillMP");
	MakeCode	(0X24F98);
	MakeName	(0X24F98,	"RefillHPforCombatant");
	MakeCode	(0X24FAE);
	MakeName	(0X24FAE,	"RefillMPforCombatant");
	MakeCode	(0X24FC4);
	MakeName	(0X24FC4,	"ClearPassabilityFlags");
	MakeCode	(x=0X24FC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X24FCE);
	MakeName	(0X24FCE,	"ClearTableAtFFA8C0");
	MakeCode	(x=0X24FD2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeComm	(0X24FDA,	"Clear RAM Table (A0)");
	MakeCode	(0X24FE6);
	MakeName	(0X24FE6,	"InitializeBattleMap");
	MakeCode	(0X24FEC);
	MakeName	(0X24FEC,	"TrimBattleTerrain");
	MakeCode	(x=0X24FF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24FF6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X24FFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2500C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X25026);
	MakeCode	(x=0X2502A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2502E);
	OpEnumEx		(x,	0,	GetEnum("BattleHeader_Offsets"),0);
	MakeCode	(x=0X25038);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X25040);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X25044);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X25048);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X25052);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X25058);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X25084);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2508E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X25092);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2509C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X250A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X250C4);
	MakeCode	(0X250DA);
	MakeName	(0X250DA,	"ClearTerrainAtOccupiedSpaces");
	MakeCode	(x=0X250DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X250E2);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X250EA);
	OpEnumEx		(x,	0,	GetEnum("CombatantEntry"),0);
	MakeCode	(x=0X250F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X250FA,	"convert coordinates to offset");
	MakeCode	(0X2510A);
	MakeName	(0X2510A,	"LoadPredefinedTargetGrid");
	MakeCode	(x=0X25112);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X25116);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X25120);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X25126);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X25154);
	MakeArray	(0X25154,	0X4B0);
	MakeName	(0X25154,	"InitialForceData");
	MakeByte	(0X25604);
	MakeArray	(0X25604,	0X3C);
	MakeName	(0X25604,	"BattleSpriteData");
	MakeByte	(0X25640);
	MakeArray	(0X25640,	0X2D6);
	MakeName	(0X25640,	"ItemNames");
	MakeByte	(0X25916);
	MakeArray	(0X25916,	0X3F0);
	MakeName	(0X25916,	"ItemData");
	MakeByte	(0X25D06);
	MakeArray	(0X25D06,	0X26);
	MakeName	(0X25D06,	"WeaponSpriteData");
	MakeByte	(0X25D2C);
	MakeArray	(0X25D2C,	0X40);
	MakeName	(0X25D2C,	"ItemTypes");
	MakeByte	(0X25D6C);
	MakeArray	(0X25D6C,	0X350);
	MakeName	(0X25D6C,	"ClassNames");
	MakeByte	(0X260BC);
	MakeArray	(0X260BC,	0X348);
	MakeName	(0X260BC,	"ClassData");
	MakeByte	(0X26404);
	MakeArray	(0X26404,	0X62);
	MakeName	(0X26404,	"SpellNames");
	MakeByte	(0X26466);
	MakeArray	(0X26466,	0X100);
	MakeName	(0X26466,	"SpellData");
	MakeByte	(0X26566);
	MakeArray	(0X26566,	0X80);
	MakeName	(0X26566,	"MoveCostData");
	MakeByte	(0X265E6);
	MakeArray	(0X265E6,	0X80);
	MakeName	(0X265E6,	"LandEffectData");
	MakeByte	(0X26666);
	MakeArray	(0X26666,	0X228);
	MakeName	(0X26666,	"ForceAnimationData");
	MakeByte	(0X2688E);
	MakeArray	(0X2688E,	0X170);
	MakeName	(0X2688E,	"EnemyAnimationData");
	MakeByte	(0X269FE);
	MakeArray	(0X269FE,	0X1F4);
	MakeName	(0X269FE,	"TerrainData");
	MakeByte	(0X26BF2);
	MakeByte	(0X26BF3);
	MakeByte	(0X26BF4);
	MakeByte	(0X26BF5);
	MakeByte	(0X26BF6);
	MakeArray	(0X26BF6,	0X24);
	MakeName	(0X26BF6,	"GrowthCurves");
	MakeByte	(0X26C1A);
	MakeArray	(0X26C1A,	0XB4);
	MakeName	(0X26C1A,	"UnpromotedGrowths");
	MakeByte	(0X26CCE);
	MakeArray	(0X26CCE,	0XA2);
	MakeName	(0X26CCE,	"PromotedGrowths");
	MakeByte	(0X26D70);
	MakeArray	(0X26D70,	0XA6);
	MakeName	(0X26D70,	"SpellLearningData");
	MakeCode	(0X26E16);
	MakeName	(0X26E16,	"LoadEndingCreditsForce");
	MakeCode	(x=0X26E1A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X26E1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X26E24);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X26E54);
	MakeCode	(0X26E7E);
	MakeName	(0X26E7E,	"WriteEndingCreditsBattlesceneScript");
	MakeCode	(x=0X26E82);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X26E8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X26E9C,	"battlescene command");
	MakeRptCmt	(0X26E9E,	"enemy");
	MakeRptCmt	(0X26EA0,	"ally");
	MakeCode	(0X26EC6);
	MakeByte	(0X26EE4);
	MakeArray	(0X26EE4,	0X26);
	MakeName	(0X26EE4,	"EndingCreditsForceData");
	MakeByte	(0X26F0A);
	MakeArray	(0X26F0A,	0X3C);
	MakeName	(0X26F0A,	"EndingAnimationSequence");
	MakeCode	(0X26F46);
	MakeName	(0X26F46,	"InitializeBattleData");
	MakeCode	(x=0X26F4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X26F50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X26F58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X26F60);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X26F64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X26F7E);
	MakeCode	(0X26F98);
	MakeCode	(0X26FA4);
	MakeCode	(0X26FC0);
	MakeCode	(0X26FCC);
	MakeCode	(0X26FDC);
	MakeCode	(0X26FEC);
	MakeCode	(0X26FFC);
	MakeCode	(0X2700C);
	MakeCode	(0X27028);
	MakeCode	(0X27036);
	MakeByte	(0X2704E);
	MakeArray	(0X2704E,	0X4CC);
	MakeName	(0X2704E,	"rpt_MapHeaders");
	MakeByte	(0X2751A);
	MakeByte	(0X2751B);
	MakeByte	(0X2751C);
	MakeArray	(0X2751C,	0X5A8);
	MakeName	(0X2751C,	"table_EnemyDefs");
	ExtLinA		(0X27AC4,	0,	"                ");
	ExtLinA		(0X27AC4,	1,	"                ; Terrain Set");
	MakeByte	(0X27AC4);
	MakeArray	(0X27AC4,	0X23EF);
	MakeName	(0X27AC4,	"table_BattleTerrain");
	ExtLinA		(0X27AD6,	0,	"                ");
	ExtLinA		(0X27AD6,	1,	"                ; Terrain");
	ExtLinA		(0X29192,	0,	"                ");
	ExtLinA		(0X29192,	1,	"                ; Terrain Set");
	ExtLinA		(0X291A4,	0,	"                ");
	ExtLinA		(0X291A4,	1,	"                ; Terrain");
	MakeByte	(0X29EB3);
	MakeArray	(0X29EB3,	0X20D2);
	MakeName	(0X29EB3,	"table_BattleData");
	MakeArray	(0X2BF85,	0X7B);
	MakeDword	(x=0X2C000);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X2C000,	"p_VariableWidthFont");
	MakeDword	(x=0X2C004);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X2C004,	"p_pt_Portraits");
	MakeCode	(0X2C008);
	MakeName	(0X2C008,	"CheckRegionLock");
	MakeCode	(0X2C014);
	MakeCode	(0X2C024);
	MakeCode	(x=0X2C02A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2C02E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2C042);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2C046);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2C052);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2C056);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2C060);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2C064);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2C074);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X2C07A);
	OpHex		(x,	0);
	MakeCode	(0X2C0CA);
	MakeName	(0X2C0CA,	"CopyRegionLockString");
	MakeCode	(0X2C0D2);
	MakeStr		(0X2C0D6,	0X2C0F4);
	MakeName	(0X2C0D6,	"aDevelopedForUseOnlyWi");
	MakeStr		(0X2C0F4,	0X2C10A);
	MakeName	(0X2C0F4,	"aNtscGenesis");
	MakeStr		(0X2C10A,	0X2C12A);
	MakeName	(0X2C10A,	"aPalAndFrenchSe");
	MakeStr		(0X2C12A,	0X2C13E);
	MakeName	(0X2C12A,	"aSystems_");
	MakeByte	(0X2C13E);
	MakeArray	(0X2C13E,	0X1000);
	MakeName	(0X2C13E,	"VariableWidthFont");
	MakeDword	(x=0X2D13E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X2D13E,	"pt_Portraits");
	MakeDword	(x=0X2D142);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D146);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D14A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D14E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D152);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D156);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D15A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D15E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D162);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D166);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D16A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D16E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D172);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D176);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D17A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D17E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D182);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D186);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D18A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D18E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D192);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D196);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D19A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D19E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D1FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D202);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D206);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X2D20A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X2D20E);
	MakeArray	(0X2D20E,	0X2B4);
	MakeName	(0X2D20E,	"Portrait00");
	MakeByte	(0X2D4C2);
	MakeArray	(0X2D4C2,	0X362);
	MakeName	(0X2D4C2,	"Portrait01");
	MakeByte	(0X2D824);
	MakeArray	(0X2D824,	0X2BC);
	MakeName	(0X2D824,	"Portrait02");
	MakeByte	(0X2DAE0);
	MakeArray	(0X2DAE0,	0X2EE);
	MakeName	(0X2DAE0,	"Portrait03");
	MakeByte	(0X2DDCE);
	MakeArray	(0X2DDCE,	0X38C);
	MakeName	(0X2DDCE,	"Portrait04");
	MakeByte	(0X2E15A);
	MakeArray	(0X2E15A,	0X392);
	MakeName	(0X2E15A,	"Portrait05");
	MakeByte	(0X2E4EC);
	MakeArray	(0X2E4EC,	0X2DA);
	MakeName	(0X2E4EC,	"Portrait06");
	MakeByte	(0X2E7C6);
	MakeArray	(0X2E7C6,	0X39C);
	MakeName	(0X2E7C6,	"Portrait07");
	MakeByte	(0X2EB62);
	MakeArray	(0X2EB62,	0X3B4);
	MakeName	(0X2EB62,	"Portrait08");
	MakeByte	(0X2EF16);
	MakeArray	(0X2EF16,	0X370);
	MakeName	(0X2EF16,	"Portrait09");
	MakeByte	(0X2F286);
	MakeArray	(0X2F286,	0X32A);
	MakeName	(0X2F286,	"Portrait10");
	MakeByte	(0X2F5B0);
	MakeArray	(0X2F5B0,	0X3B2);
	MakeName	(0X2F5B0,	"Portrait11");
	MakeByte	(0X2F962);
	MakeArray	(0X2F962,	0X350);
	MakeName	(0X2F962,	"Portrait12");
	MakeByte	(0X2FCB2);
	MakeArray	(0X2FCB2,	0X23C);
	MakeName	(0X2FCB2,	"Portrait13");
	MakeByte	(0X2FEEE);
	MakeArray	(0X2FEEE,	0X316);
	MakeName	(0X2FEEE,	"Portrait14");
	MakeByte	(0X30204);
	MakeArray	(0X30204,	0X302);
	MakeName	(0X30204,	"Portrait15");
	MakeByte	(0X30506);
	MakeArray	(0X30506,	0X2B0);
	MakeName	(0X30506,	"Portrait16");
	MakeByte	(0X307B6);
	MakeArray	(0X307B6,	0X31C);
	MakeName	(0X307B6,	"Portrait17");
	MakeByte	(0X30AD2);
	MakeArray	(0X30AD2,	0X2E4);
	MakeName	(0X30AD2,	"Portrait18");
	MakeByte	(0X30DB6);
	MakeArray	(0X30DB6,	0X368);
	MakeName	(0X30DB6,	"Portrait19");
	MakeByte	(0X3111E);
	MakeArray	(0X3111E,	0X406);
	MakeName	(0X3111E,	"Portrait20");
	MakeByte	(0X31524);
	MakeArray	(0X31524,	0X44E);
	MakeName	(0X31524,	"Portrait21");
	MakeByte	(0X31972);
	MakeArray	(0X31972,	0X522);
	MakeName	(0X31972,	"Portrait22");
	MakeByte	(0X31E94);
	MakeArray	(0X31E94,	0X3F0);
	MakeName	(0X31E94,	"Portrait23");
	MakeByte	(0X32284);
	MakeArray	(0X32284,	0X41A);
	MakeName	(0X32284,	"Portrait24");
	MakeByte	(0X3269E);
	MakeArray	(0X3269E,	0X22A);
	MakeName	(0X3269E,	"Portrait25");
	MakeByte	(0X328C8);
	MakeArray	(0X328C8,	0X40A);
	MakeName	(0X328C8,	"Portrait26");
	MakeByte	(0X32CD2);
	MakeArray	(0X32CD2,	0X3AC);
	MakeName	(0X32CD2,	"Portrait27");
	MakeByte	(0X3307E);
	MakeArray	(0X3307E,	0X35C);
	MakeName	(0X3307E,	"Portrait28");
	MakeByte	(0X333DA);
	MakeArray	(0X333DA,	0X224);
	MakeName	(0X333DA,	"Portrait29");
	MakeByte	(0X335FE);
	MakeArray	(0X335FE,	0X396);
	MakeName	(0X335FE,	"Portrait30");
	MakeByte	(0X33994);
	MakeArray	(0X33994,	0X452);
	MakeName	(0X33994,	"Portrait31");
	MakeByte	(0X33DE6);
	MakeArray	(0X33DE6,	0X3FA);
	MakeName	(0X33DE6,	"Portrait32");
	MakeByte	(0X341E0);
	MakeArray	(0X341E0,	0X2B6);
	MakeName	(0X341E0,	"Portrait33");
	MakeByte	(0X34496);
	MakeArray	(0X34496,	0X336);
	MakeName	(0X34496,	"Portrait34");
	MakeByte	(0X347CC);
	MakeArray	(0X347CC,	0X3F6);
	MakeName	(0X347CC,	"Portrait35");
	MakeByte	(0X34BC2);
	MakeArray	(0X34BC2,	0X3FA);
	MakeName	(0X34BC2,	"Portrait37");
	MakeByte	(0X34FBC);
	MakeArray	(0X34FBC,	0X426);
	MakeName	(0X34FBC,	"Portrait36");
	MakeByte	(0X353E2);
	MakeArray	(0X353E2,	0X4F4);
	MakeName	(0X353E2,	"Portrait38");
	MakeByte	(0X358D6);
	MakeArray	(0X358D6,	0X15A);
	MakeName	(0X358D6,	"Portrait39");
	MakeByte	(0X35A30);
	MakeArray	(0X35A30,	0X392);
	MakeName	(0X35A30,	"Portrait40");
	MakeByte	(0X35DC2);
	MakeArray	(0X35DC2,	0X3EA);
	MakeName	(0X35DC2,	"Portrait41");
	MakeByte	(0X361AC);
	MakeArray	(0X361AC,	0X356);
	MakeName	(0X361AC,	"Portrait42");
	MakeByte	(0X36502);
	MakeArray	(0X36502,	0X2F2);
	MakeName	(0X36502,	"Portrait43");
	MakeByte	(0X367F4);
	MakeArray	(0X367F4,	0X3FA);
	MakeName	(0X367F4,	"Portrait44");
	MakeByte	(0X36BEE);
	MakeArray	(0X36BEE,	0X398);
	MakeName	(0X36BEE,	"Portrait45");
	MakeByte	(0X36F86);
	MakeArray	(0X36F86,	0X398);
	MakeName	(0X36F86,	"Portrait46");
	MakeByte	(0X3731E);
	MakeArray	(0X3731E,	0X2FC);
	MakeName	(0X3731E,	"Portrait47");
	MakeByte	(0X3761A);
	MakeArray	(0X3761A,	0X220);
	MakeName	(0X3761A,	"Portrait48");
	MakeByte	(0X3783A);
	MakeArray	(0X3783A,	0X2FE);
	MakeName	(0X3783A,	"Portrait49");
	MakeArray	(0X37B38,	0X4C8);
	MakeByte	(0X38000);
	MakeArray	(0X38000,	0X20000);
	MakeName	(0X38000,	"p_pt_MapSprites");
	MakeByte	(0X58000);
	MakeByte	(0X58001);
	MakeByte	(0X58002);
	MakeByte	(0X58003);
	MakeByte	(0X58004);
	MakeByte	(0X58005);
	MakeByte	(0X58006);
	MakeByte	(0X58007);
	MakeByte	(0X58008);
	MakeByte	(0X58009);
	MakeByte	(0X5800A);
	MakeByte	(0X5800B);
	MakeRptCmt	(0X5800C,	"Tilesets");
	MakeDword	(x=0X5800C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X5800C,	"p_pt_MapTilesets");
	MakeDword	(x=0X58010);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58014);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X58014,	"p_SpecialSprite_BurningShip");
	MakeDword	(x=0X58018);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X58018,	"p_SpecialSprite_Jogurt2");
	MakeDword	(x=0X5801C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X5801C,	"pt_MapTilesets");
	MakeDword	(x=0X58020);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58024);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58028);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X5802C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58030);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58034);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58038);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X5803C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58040);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58044);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58048);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X5804C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58050);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58054);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58058);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X5805C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58060);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58064);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58068);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X5806C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58070);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58074);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58078);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X5807C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58080);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58084);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58088);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X5808C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58090);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58094);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X58098);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X5809C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_7(void) {
        auto x;
#define id x

	MakeDword	(x=0X580A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X580A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X580A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X580AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X580B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X580B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X580B8);
	MakeArray	(0X580B8,	0X10A6);
	MakeName	(0X580B8,	"MapTileset00");
	MakeByte	(0X5915E);
	MakeArray	(0X5915E,	0X1930);
	MakeName	(0X5915E,	"MapTileset01");
	MakeByte	(0X5AA8E);
	MakeArray	(0X5AA8E,	0XE4C);
	MakeName	(0X5AA8E,	"MapTileset02");
	MakeByte	(0X5B8DA);
	MakeArray	(0X5B8DA,	0X10A6);
	MakeName	(0X5B8DA,	"MapTileset03");
	MakeByte	(0X5C980);
	MakeArray	(0X5C980,	0X1180);
	MakeName	(0X5C980,	"MapTileset04");
	MakeByte	(0X5DB00);
	MakeArray	(0X5DB00,	0X1418);
	MakeName	(0X5DB00,	"MapTileset05");
	MakeByte	(0X5EF18);
	MakeArray	(0X5EF18,	0X1110);
	MakeName	(0X5EF18,	"MapTileset12");
	MakeByte	(0X60028);
	MakeArray	(0X60028,	0X10EA);
	MakeName	(0X60028,	"MapTileset13");
	MakeByte	(0X61112);
	MakeArray	(0X61112,	0XFDE);
	MakeName	(0X61112,	"MapTileset14");
	MakeByte	(0X620F0);
	MakeArray	(0X620F0,	0X11E6);
	MakeName	(0X620F0,	"MapTileset15");
	MakeByte	(0X632D6);
	MakeArray	(0X632D6,	0X1102);
	MakeName	(0X632D6,	"MapTileset16");
	MakeByte	(0X643D8);
	MakeArray	(0X643D8,	0X1284);
	MakeName	(0X643D8,	"MapTileset17");
	MakeByte	(0X6565C);
	MakeArray	(0X6565C,	0X11EC);
	MakeName	(0X6565C,	"MapTileset18");
	MakeByte	(0X66848);
	MakeArray	(0X66848,	0XF98);
	MakeName	(0X66848,	"MapTileset19");
	MakeByte	(0X677E0);
	MakeArray	(0X677E0,	0X1086);
	MakeName	(0X677E0,	"MapTileset20");
	MakeByte	(0X68866);
	MakeArray	(0X68866,	0X1410);
	MakeName	(0X68866,	"MapTileset21");
	MakeByte	(0X69C76);
	MakeArray	(0X69C76,	0X1844);
	MakeName	(0X69C76,	"MapTileset22");
	MakeByte	(0X6B4BA);
	MakeArray	(0X6B4BA,	0X1648);
	MakeName	(0X6B4BA,	"MapTileset23");
	MakeByte	(0X6CB02);
	MakeArray	(0X6CB02,	0X1A48);
	MakeName	(0X6CB02,	"MapTileset24");
	MakeByte	(0X6E54A);
	MakeArray	(0X6E54A,	0X19A0);
	MakeName	(0X6E54A,	"MapTileset25");
	MakeByte	(0X6FEEA);
	MakeArray	(0X6FEEA,	0X12F4);
	MakeName	(0X6FEEA,	"MapTileset26");
	MakeByte	(0X711DE);
	MakeArray	(0X711DE,	0X162E);
	MakeName	(0X711DE,	"MapTileset27");
	MakeByte	(0X7280C);
	MakeArray	(0X7280C,	0X1102);
	MakeName	(0X7280C,	"MapTileset28");
	MakeByte	(0X7390E);
	MakeArray	(0X7390E,	0X1500);
	MakeName	(0X7390E,	"MapTileset29");
	MakeByte	(0X74E0E);
	MakeArray	(0X74E0E,	0XD26);
	MakeName	(0X74E0E,	"MapTileset30");
	MakeByte	(0X75B34);
	MakeArray	(0X75B34,	0X1376);
	MakeName	(0X75B34,	"MapTileset31");
	MakeByte	(0X76EAA);
	MakeArray	(0X76EAA,	0X1346);
	MakeName	(0X76EAA,	"MapTileset32");
	MakeByte	(0X781F0);
	MakeArray	(0X781F0,	0X150A);
	MakeName	(0X781F0,	"MapTileset33");
	MakeByte	(0X796FA);
	MakeArray	(0X796FA,	0X9B2);
	MakeName	(0X796FA,	"MapTileset34");
	MakeByte	(0X7A0AC);
	MakeArray	(0X7A0AC,	0X1422);
	MakeName	(0X7A0AC,	"MapTileset35");
	MakeByte	(0X7B4CE);
	MakeArray	(0X7B4CE,	0X14B0);
	MakeName	(0X7B4CE,	"MapTileset36");
	MakeByte	(0X7C97E);
	MakeArray	(0X7C97E,	0X168E);
	MakeName	(0X7C97E,	"MapTileset37");
	MakeByte	(0X7E00C);
	MakeArray	(0X7E00C,	0X1338);
	MakeName	(0X7E00C,	"MapTileset38");
	MakeByte	(0X7F344);
	MakeArray	(0X7F344,	0X204);
	MakeName	(0X7F344,	"SpecialSprite_BurningShip");
	MakeByte	(0X7F548);
	MakeArray	(0X7F548,	0X1B7);
	MakeName	(0X7F548,	"SpecialSprite_Jogurt2");
	MakeArray	(0X7F6FF,	0X901);
	MakeDword	(x=0X80000);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X80000,	"p_pt_TileAnimations");
	MakeDword	(x=0X80004);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X80004,	"p_pt_Maps");
	MakeDword	(x=0X80008);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X80008,	"p_pt_SpriteSets");
	MakeCode	(0X8000C);
	MakeDword	(x=0X80010);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X80010,	"pt_SpriteSets");
	MakeDword	(x=0X80014);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80018);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8001C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80020);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80024);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80028);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8002C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80030);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80034);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80038);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8003C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80040);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80044);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80048);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8004C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80050);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80054);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80058);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8005C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80060);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80064);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80068);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8006C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80070);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80074);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80078);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8007C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80080);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80084);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80088);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8008C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80090);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80094);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80098);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8009C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X800E4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X800E8);
	MakeArray	(0X800E8,	0X98);
	MakeName	(0X800E8,	"SpriteSet00");
	MakeByte	(0X80180);
	MakeArray	(0X80180,	0X4A);
	MakeName	(0X80180,	"SpriteSet01");
	MakeByte	(0X801CA);
	MakeArray	(0X801CA,	0X98);
	MakeName	(0X801CA,	"SpriteSet02");
	MakeByte	(0X80262);
	MakeArray	(0X80262,	0X68);
	MakeName	(0X80262,	"SpriteSet03");
	MakeByte	(0X802CA);
	MakeArray	(0X802CA,	0XA4);
	MakeName	(0X802CA,	"SpriteSet04");
	MakeByte	(0X8036E);
	MakeArray	(0X8036E,	0X98);
	MakeName	(0X8036E,	"SpriteSet05");
	MakeByte	(0X80406);
	MakeArray	(0X80406,	0XAA);
	MakeName	(0X80406,	"SpriteSet06");
	MakeByte	(0X804B0);
	MakeArray	(0X804B0,	0X6E);
	MakeName	(0X804B0,	"SpriteSet07");
	MakeByte	(0X8051E);
	MakeArray	(0X8051E,	0X44);
	MakeName	(0X8051E,	"SpriteSet08");
	MakeByte	(0X80562);
	MakeArray	(0X80562,	0X9E);
	MakeName	(0X80562,	"SpriteSet09");
	MakeByte	(0X80600);
	MakeArray	(0X80600,	0X98);
	MakeName	(0X80600,	"SpriteSet10");
	MakeByte	(0X80698);
	MakeArray	(0X80698,	0X1A);
	MakeName	(0X80698,	"SpriteSet11");
	MakeByte	(0X806B2);
	MakeArray	(0X806B2,	0XB6);
	MakeName	(0X806B2,	"SpriteSet12");
	MakeByte	(0X80768);
	MakeArray	(0X80768,	0X8C);
	MakeName	(0X80768,	"SpriteSet13");
	MakeByte	(0X807F4);
	MakeArray	(0X807F4,	0X38);
	MakeName	(0X807F4,	"SpriteSet14");
	MakeByte	(0X8082C);
	MakeArray	(0X8082C,	0X92);
	MakeName	(0X8082C,	"SpriteSet15");
	MakeByte	(0X808BE);
	MakeArray	(0X808BE,	0X56);
	MakeName	(0X808BE,	"SpriteSet16");
	MakeByte	(0X80914);
	MakeArray	(0X80914,	0XA4);
	MakeName	(0X80914,	"SpriteSet17");
	MakeByte	(0X809B8);
	MakeArray	(0X809B8,	0X20);
	MakeName	(0X809B8,	"SpriteSet18");
	MakeByte	(0X809D8);
	MakeArray	(0X809D8,	0X3E);
	MakeName	(0X809D8,	"SpriteSet19");
	MakeByte	(0X80A16);
	MakeArray	(0X80A16,	0XB6);
	MakeName	(0X80A16,	"SpriteSet20");
	MakeByte	(0X80ACC);
	MakeArray	(0X80ACC,	0X80);
	MakeName	(0X80ACC,	"SpriteSet21");
	MakeByte	(0X80B4C);
	MakeArray	(0X80B4C,	0X68);
	MakeName	(0X80B4C,	"SpriteSet22");
	MakeByte	(0X80BB4);
	MakeArray	(0X80BB4,	0X8);
	MakeName	(0X80BB4,	"SpriteSet23");
	MakeByte	(0X80BBC);
	MakeArray	(0X80BBC,	0X1A);
	MakeName	(0X80BBC,	"SpriteSet24");
	MakeByte	(0X80BD6);
	MakeArray	(0X80BD6,	0X8);
	MakeName	(0X80BD6,	"SpriteSet25");
	MakeByte	(0X80BDE);
	MakeArray	(0X80BDE,	0X14);
	MakeName	(0X80BDE,	"SpriteSet26");
	MakeByte	(0X80BF2);
	MakeArray	(0X80BF2,	0X14);
	MakeName	(0X80BF2,	"SpriteSet27");
	MakeByte	(0X80C06);
	MakeArray	(0X80C06,	0X68);
	MakeName	(0X80C06,	"SpriteSet28");
	MakeByte	(0X80C6E);
	MakeArray	(0X80C6E,	0X62);
	MakeName	(0X80C6E,	"SpriteSet29");
	MakeByte	(0X80CD0);
	MakeArray	(0X80CD0,	0X62);
	MakeName	(0X80CD0,	"SpriteSet30");
	MakeByte	(0X80D32);
	MakeArray	(0X80D32,	0X2C);
	MakeName	(0X80D32,	"SpriteSet31");
	MakeByte	(0X80D5E);
	MakeArray	(0X80D5E,	0X26);
	MakeName	(0X80D5E,	"SpriteSet32");
	MakeByte	(0X80D84);
	MakeArray	(0X80D84,	0X14);
	MakeName	(0X80D84,	"SpriteSet33");
	MakeByte	(0X80D98);
	MakeArray	(0X80D98,	0X92);
	MakeName	(0X80D98,	"SpriteSet34");
	MakeByte	(0X80E2A);
	MakeArray	(0X80E2A,	0XB6);
	MakeName	(0X80E2A,	"SpriteSet35");
	MakeCode	(0X80EE0);
	MakeCode	(x=0X80EF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X80EF8);
	MakeDword	(x=0X80EFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X80EFE,	"pt_MapSpriteScripts");
	MakeDword	(x=0X80F02);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F06);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F0A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F1A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F2A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F36);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F46);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F4E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F5A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F5E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F62);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F66);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F6E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F72);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F76);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F7A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F82);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F92);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F96);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80F9E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FAE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FBA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FBE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FC2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FC6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FCA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FCE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FD2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FD6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FDA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FDE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FEE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FF6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X80FFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81002);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81006);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8100A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8100E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81012);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81016);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8101A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8101E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81022);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81026);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8102A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8102E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81032);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81036);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8103A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8103E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81042);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81046);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8104A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8104E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81052);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81056);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8105A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8105E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81062);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81066);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8106A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8106E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81072);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81076);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8107A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8107E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81082);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81086);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8108A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8108E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81092);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81096);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8109A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8109E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X810FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81102);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81106);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8110A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8110E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81112);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81116);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8111A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8111E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81122);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81126);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8112A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8112E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81132);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81136);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8113A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8113E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81142);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81146);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8114A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8114E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81152);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81156);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8115A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8115E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81162);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81166);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8116A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8116E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81172);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81176);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8117A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8117E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81182);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81186);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8118A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8118E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81192);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X81196);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8119A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8119E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X811A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X811A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X811AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X811AE);
	MakeArray	(0X811AE,	0X5);
	MakeName	(0X811AE,	"MapSpriteScript00");
	MakeByte	(0X811B3);
	MakeArray	(0X811B3,	0X4);
	MakeName	(0X811B3,	"MapSpriteScript01");
	MakeByte	(0X811B7);
	MakeArray	(0X811B7,	0X15);
	MakeName	(0X811B7,	"MapSpriteScript02");
	MakeByte	(0X811CC);
	MakeArray	(0X811CC,	0X10);
	MakeName	(0X811CC,	"MapSpriteScript03");
	MakeByte	(0X811DC);
	MakeArray	(0X811DC,	0X5);
	MakeName	(0X811DC,	"MapSpriteScript04");
	MakeByte	(0X811E1);
	MakeArray	(0X811E1,	0X4);
	MakeName	(0X811E1,	"MapSpriteScript05");
	MakeByte	(0X811E5);
	MakeArray	(0X811E5,	0X26);
	MakeName	(0X811E5,	"MapSpriteScript06");
	MakeByte	(0X8120B);
	MakeArray	(0X8120B,	0X2D);
	MakeName	(0X8120B,	"MapSpriteScript07");
	MakeByte	(0X81238);
	MakeArray	(0X81238,	0X4);
	MakeName	(0X81238,	"MapSpriteScript08");
	MakeByte	(0X8123C);
	MakeArray	(0X8123C,	0X16);
	MakeName	(0X8123C,	"MapSpriteScript09");
	MakeByte	(0X81252);
	MakeArray	(0X81252,	0X4);
	MakeName	(0X81252,	"MapSpriteScript10");
	MakeByte	(0X81256);
	MakeArray	(0X81256,	0XD);
	MakeName	(0X81256,	"MapSpriteScript11");
	MakeByte	(0X81263);
	MakeArray	(0X81263,	0X5);
	MakeName	(0X81263,	"MapSpriteScript12");
	MakeByte	(0X81268);
	MakeArray	(0X81268,	0X10);
	MakeName	(0X81268,	"MapSpriteScript13");
	MakeByte	(0X81278);
	MakeArray	(0X81278,	0XA);
	MakeName	(0X81278,	"MapSpriteScript14");
	MakeByte	(0X81282);
	MakeArray	(0X81282,	0X5);
	MakeName	(0X81282,	"MapSpriteScript15");
	MakeByte	(0X81287);
	MakeArray	(0X81287,	0X10);
	MakeName	(0X81287,	"MapSpriteScript16");
	MakeByte	(0X81297);
	MakeArray	(0X81297,	0X12);
	MakeName	(0X81297,	"MapSpriteScript17");
	MakeByte	(0X812A9);
	MakeArray	(0X812A9,	0X7);
	MakeName	(0X812A9,	"MapSpriteScript18");
	MakeByte	(0X812B0);
	MakeArray	(0X812B0,	0X5);
	MakeName	(0X812B0,	"MapSpriteScript19");
	MakeByte	(0X812B5);
	MakeArray	(0X812B5,	0X4);
	MakeName	(0X812B5,	"MapSpriteScript20");
	MakeByte	(0X812B9);
	MakeArray	(0X812B9,	0X10);
	MakeName	(0X812B9,	"MapSpriteScript21");
	MakeByte	(0X812C9);
	MakeArray	(0X812C9,	0X13);
	MakeName	(0X812C9,	"MapSpriteScript22");
	MakeByte	(0X812DC);
	MakeArray	(0X812DC,	0X2D);
	MakeName	(0X812DC,	"MapSpriteScript23");
	MakeByte	(0X81309);
	MakeArray	(0X81309,	0XD);
	MakeName	(0X81309,	"MapSpriteScript24");
	MakeByte	(0X81316);
	MakeArray	(0X81316,	0XC);
	MakeName	(0X81316,	"MapSpriteScript25");
	MakeByte	(0X81322);
	MakeArray	(0X81322,	0X15);
	MakeName	(0X81322,	"MapSpriteScript26");
	MakeByte	(0X81337);
	MakeArray	(0X81337,	0X2C);
	MakeName	(0X81337,	"MapSpriteScript27");
	MakeByte	(0X81363);
	MakeArray	(0X81363,	0X9);
	MakeName	(0X81363,	"MapSpriteScript28");
	MakeByte	(0X8136C);
	MakeArray	(0X8136C,	0X18);
	MakeName	(0X8136C,	"MapSpriteScript29");
	MakeByte	(0X81384);
	MakeArray	(0X81384,	0X8);
	MakeName	(0X81384,	"MapSpriteScript30");
	MakeByte	(0X8138C);
	MakeArray	(0X8138C,	0X20);
	MakeName	(0X8138C,	"MapSpriteScript31");
	MakeByte	(0X813AC);
	MakeArray	(0X813AC,	0X45);
	MakeName	(0X813AC,	"MapSpriteScript32");
	MakeByte	(0X813F1);
	MakeArray	(0X813F1,	0X4F);
	MakeName	(0X813F1,	"MapSpriteScript33");
	MakeByte	(0X81440);
	MakeArray	(0X81440,	0X2A);
	MakeName	(0X81440,	"MapSpriteScript34");
	MakeByte	(0X8146A);
	MakeArray	(0X8146A,	0X7);
	MakeName	(0X8146A,	"MapSpriteScript35");
	MakeByte	(0X81471);
	MakeArray	(0X81471,	0XF);
	MakeName	(0X81471,	"MapSpriteScript36");
	MakeByte	(0X81480);
	MakeArray	(0X81480,	0X8);
	MakeName	(0X81480,	"MapSpriteScript37");
	MakeByte	(0X81488);
	MakeArray	(0X81488,	0X10);
	MakeName	(0X81488,	"MapSpriteScript38");
	MakeByte	(0X81498);
	MakeArray	(0X81498,	0X5);
	MakeName	(0X81498,	"MapSpriteScript39");
	MakeByte	(0X8149D);
	MakeArray	(0X8149D,	0X13);
	MakeName	(0X8149D,	"MapSpriteScript40");
	MakeByte	(0X814B0);
	MakeArray	(0X814B0,	0X10);
	MakeName	(0X814B0,	"MapSpriteScript41");
	MakeByte	(0X814C0);
	MakeArray	(0X814C0,	0X10);
	MakeName	(0X814C0,	"MapSpriteScript42");
	MakeByte	(0X814D0);
	MakeArray	(0X814D0,	0X12);
	MakeName	(0X814D0,	"MapSpriteScript43");
	MakeByte	(0X814E2);
	MakeArray	(0X814E2,	0X14);
	MakeName	(0X814E2,	"MapSpriteScript44");
	MakeByte	(0X814F6);
	MakeArray	(0X814F6,	0X16);
	MakeName	(0X814F6,	"MapSpriteScript45");
	MakeByte	(0X8150C);
	MakeArray	(0X8150C,	0XF);
	MakeName	(0X8150C,	"MapSpriteScript46");
	MakeByte	(0X8151B);
	MakeArray	(0X8151B,	0X4B);
	MakeName	(0X8151B,	"MapSpriteScript47");
	MakeByte	(0X81566);
	MakeArray	(0X81566,	0X1E);
	MakeName	(0X81566,	"MapSpriteScript48");
	MakeByte	(0X81584);
	MakeArray	(0X81584,	0X25);
	MakeName	(0X81584,	"MapSpriteScript49");
	MakeByte	(0X815A9);
	MakeName	(0X815A9,	"MapSpriteScript50");
	MakeByte	(0X815AA);
	MakeArray	(0X815AA,	0XB);
	MakeName	(0X815AA,	"MapSpriteScript51");
	MakeByte	(0X815B5);
	MakeArray	(0X815B5,	0X13);
	MakeName	(0X815B5,	"MapSpriteScript52");
	MakeByte	(0X815C8);
	MakeArray	(0X815C8,	0XD);
	MakeName	(0X815C8,	"MapSpriteScript53");
	MakeByte	(0X815D5);
	MakeArray	(0X815D5,	0X7);
	MakeName	(0X815D5,	"MapSpriteScript54");
	MakeByte	(0X815DC);
	MakeArray	(0X815DC,	0X7);
	MakeName	(0X815DC,	"MapSpriteScript55");
	MakeByte	(0X815E3);
	MakeArray	(0X815E3,	0X9);
	MakeName	(0X815E3,	"MapSpriteScript56");
	MakeByte	(0X815EC);
	MakeArray	(0X815EC,	0X7);
	MakeName	(0X815EC,	"MapSpriteScript57");
	MakeByte	(0X815F3);
	MakeArray	(0X815F3,	0X7);
	MakeName	(0X815F3,	"MapSpriteScript58");
	MakeByte	(0X815FA);
	MakeArray	(0X815FA,	0X9);
	MakeName	(0X815FA,	"MapSpriteScript59");
	MakeByte	(0X81603);
	MakeArray	(0X81603,	0X7);
	MakeName	(0X81603,	"MapSpriteScript60");
	MakeByte	(0X8160A);
	MakeArray	(0X8160A,	0X7);
	MakeName	(0X8160A,	"MapSpriteScript61");
	MakeByte	(0X81611);
	MakeArray	(0X81611,	0X7);
	MakeName	(0X81611,	"MapSpriteScript62");
	MakeByte	(0X81618);
	MakeArray	(0X81618,	0X7);
	MakeName	(0X81618,	"MapSpriteScript63");
	MakeByte	(0X8161F);
	MakeArray	(0X8161F,	0X7);
	MakeName	(0X8161F,	"MapSpriteScript64");
	MakeByte	(0X81626);
	MakeArray	(0X81626,	0XB);
	MakeName	(0X81626,	"MapSpriteScript65");
	MakeByte	(0X81631);
	MakeArray	(0X81631,	0X3);
	MakeName	(0X81631,	"MapSpriteScript66");
	MakeByte	(0X81634);
	MakeArray	(0X81634,	0XB);
	MakeName	(0X81634,	"MapSpriteScript67");
	MakeByte	(0X8163F);
	MakeArray	(0X8163F,	0X8);
	MakeName	(0X8163F,	"MapSpriteScript68");
	MakeByte	(0X81647);
	MakeArray	(0X81647,	0X10);
	MakeName	(0X81647,	"MapSpriteScript69");
	MakeByte	(0X81657);
	MakeArray	(0X81657,	0X1F);
	MakeName	(0X81657,	"MapSpriteScript70");
	MakeByte	(0X81676);
	MakeArray	(0X81676,	0X16);
	MakeName	(0X81676,	"MapSpriteScript71");
	MakeByte	(0X8168C);
	MakeArray	(0X8168C,	0X39);
	MakeName	(0X8168C,	"MapSpriteScript72");
	MakeByte	(0X816C5);
	MakeArray	(0X816C5,	0X2B);
	MakeName	(0X816C5,	"MapSpriteScript73");
	MakeByte	(0X816F0);
	MakeArray	(0X816F0,	0X30);
	MakeName	(0X816F0,	"MapSpriteScript74");
	MakeByte	(0X81720);
	MakeArray	(0X81720,	0X1A);
	MakeName	(0X81720,	"MapSpriteScript75");
	MakeByte	(0X8173A);
	MakeArray	(0X8173A,	0X57);
	MakeName	(0X8173A,	"MapSpriteScript76");
	MakeByte	(0X81791);
	MakeArray	(0X81791,	0X16);
	MakeName	(0X81791,	"MapSpriteScript77");
	MakeByte	(0X817A7);
	MakeArray	(0X817A7,	0X1C);
	MakeName	(0X817A7,	"MapSpriteScript78");
	MakeByte	(0X817C3);
	MakeArray	(0X817C3,	0X13);
	MakeName	(0X817C3,	"MapSpriteScript79");
	MakeByte	(0X817D6);
	MakeArray	(0X817D6,	0X1A);
	MakeName	(0X817D6,	"MapSpriteScript80");
	MakeByte	(0X817F0);
	MakeArray	(0X817F0,	0XB);
	MakeName	(0X817F0,	"MapSpriteScript81");
	MakeByte	(0X817FB);
	MakeArray	(0X817FB,	0X9);
	MakeName	(0X817FB,	"MapSpriteScript82");
	MakeByte	(0X81804);
	MakeArray	(0X81804,	0X7A);
	MakeName	(0X81804,	"MapSpriteScript83");
	MakeByte	(0X8187E);
	MakeArray	(0X8187E,	0X2C);
	MakeName	(0X8187E,	"MapSpriteScript84");
	MakeByte	(0X818AA);
	MakeArray	(0X818AA,	0X1A);
	MakeName	(0X818AA,	"MapSpriteScript85");
	MakeByte	(0X818C4);
	MakeArray	(0X818C4,	0X1B);
	MakeName	(0X818C4,	"MapSpriteScript86");
	MakeByte	(0X818DF);
	MakeArray	(0X818DF,	0XB);
	MakeName	(0X818DF,	"MapSpriteScript87");
	MakeByte	(0X818EA);
	MakeArray	(0X818EA,	0X11);
	MakeName	(0X818EA,	"MapSpriteScript88");
	MakeByte	(0X818FB);
	MakeArray	(0X818FB,	0X13);
	MakeName	(0X818FB,	"MapSpriteScript89");
	MakeByte	(0X8190E);
	MakeArray	(0X8190E,	0X27);
	MakeName	(0X8190E,	"MapSpriteScript90");
	MakeByte	(0X81935);
	MakeArray	(0X81935,	0X27);
	MakeName	(0X81935,	"MapSpriteScript91");
	MakeByte	(0X8195C);
	MakeArray	(0X8195C,	0XB);
	MakeName	(0X8195C,	"MapSpriteScript92");
	MakeByte	(0X81967);
	MakeArray	(0X81967,	0X23);
	MakeName	(0X81967,	"MapSpriteScript93");
	MakeByte	(0X8198A);
	MakeArray	(0X8198A,	0X35);
	MakeName	(0X8198A,	"MapSpriteScript94");
	MakeByte	(0X819BF);
	MakeArray	(0X819BF,	0X7);
	MakeName	(0X819BF,	"MapSpriteScript95");
	MakeByte	(0X819C6);
	MakeArray	(0X819C6,	0XC);
	MakeName	(0X819C6,	"MapSpriteScript96");
	MakeByte	(0X819D2);
	MakeArray	(0X819D2,	0X26);
	MakeName	(0X819D2,	"MapSpriteScript97");
	MakeByte	(0X819F8);
	MakeArray	(0X819F8,	0XF);
	MakeName	(0X819F8,	"MapSpriteScript98");
	MakeByte	(0X81A07);
	MakeArray	(0X81A07,	0X1E);
	MakeName	(0X81A07,	"MapSpriteScript99");
	MakeByte	(0X81A25);
	MakeArray	(0X81A25,	0X18);
	MakeName	(0X81A25,	"MapSpriteScript100");
	MakeByte	(0X81A3D);
	MakeArray	(0X81A3D,	0X13);
	MakeName	(0X81A3D,	"MapSpriteScript101");
	MakeByte	(0X81A50);
	MakeArray	(0X81A50,	0X2A);
	MakeName	(0X81A50,	"MapSpriteScript102");
	MakeByte	(0X81A7A);
	MakeArray	(0X81A7A,	0X6);
	MakeName	(0X81A7A,	"MapSpriteScript103");
	MakeByte	(0X81A80);
	MakeArray	(0X81A80,	0XE);
	MakeName	(0X81A80,	"MapSpriteScript104");
	MakeByte	(0X81A8E);
	MakeArray	(0X81A8E,	0X3);
	MakeName	(0X81A8E,	"MapSpriteScript105");
	MakeByte	(0X81A91);
	MakeArray	(0X81A91,	0X7);
	MakeName	(0X81A91,	"MapSpriteScript106");
	MakeByte	(0X81A98);
	MakeArray	(0X81A98,	0X13);
	MakeName	(0X81A98,	"MapSpriteScript107");
	MakeByte	(0X81AAB);
	MakeArray	(0X81AAB,	0XD);
	MakeName	(0X81AAB,	"MapSpriteScript108");
	MakeByte	(0X81AB8);
	MakeArray	(0X81AB8,	0X3);
	MakeName	(0X81AB8,	"MapSpriteScript109");
	MakeByte	(0X81ABB);
	MakeArray	(0X81ABB,	0XB);
	MakeName	(0X81ABB,	"MapSpriteScript110");
	MakeByte	(0X81AC6);
	MakeArray	(0X81AC6,	0XB);
	MakeName	(0X81AC6,	"MapSpriteScript111");
	MakeByte	(0X81AD1);
	MakeArray	(0X81AD1,	0XE);
	MakeName	(0X81AD1,	"MapSpriteScript112");
	MakeByte	(0X81ADF);
	MakeArray	(0X81ADF,	0X14);
	MakeName	(0X81ADF,	"MapSpriteScript113");
	MakeByte	(0X81AF3);
	MakeArray	(0X81AF3,	0XB);
	MakeName	(0X81AF3,	"MapSpriteScript114");
	MakeByte	(0X81AFE);
	MakeArray	(0X81AFE,	0X23);
	MakeName	(0X81AFE,	"MapSpriteScript115");
	MakeByte	(0X81B21);
	MakeArray	(0X81B21,	0XD);
	MakeName	(0X81B21,	"MapSpriteScript116");
	MakeByte	(0X81B2E);
	MakeArray	(0X81B2E,	0X7);
	MakeName	(0X81B2E,	"MapSpriteScript117");
	MakeByte	(0X81B35);
	MakeArray	(0X81B35,	0XC);
	MakeName	(0X81B35,	"MapSpriteScript118");
	MakeByte	(0X81B41);
	MakeArray	(0X81B41,	0X12);
	MakeName	(0X81B41,	"MapSpriteScript119");
	MakeByte	(0X81B53);
	MakeArray	(0X81B53,	0X8);
	MakeName	(0X81B53,	"MapSpriteScript120");
	MakeByte	(0X81B5B);
	MakeArray	(0X81B5B,	0X27);
	MakeName	(0X81B5B,	"MapSpriteScript121");
	MakeByte	(0X81B82);
	MakeArray	(0X81B82,	0X11);
	MakeName	(0X81B82,	"MapSpriteScript122");
	MakeByte	(0X81B93);
	MakeArray	(0X81B93,	0X6);
	MakeName	(0X81B93,	"MapSpriteScript123");
	MakeByte	(0X81B99);
	MakeArray	(0X81B99,	0X8);
	MakeName	(0X81B99,	"MapSpriteScript124");
	MakeByte	(0X81BA1);
	MakeArray	(0X81BA1,	0X10);
	MakeName	(0X81BA1,	"MapSpriteScript125");
	MakeByte	(0X81BB1);
	MakeArray	(0X81BB1,	0X49);
	MakeName	(0X81BB1,	"MapSpriteScript126");
	MakeByte	(0X81BFA);
	MakeArray	(0X81BFA,	0XA);
	MakeName	(0X81BFA,	"MapSpriteScript127");
	MakeByte	(0X81C04);
	MakeArray	(0X81C04,	0X13);
	MakeName	(0X81C04,	"MapSpriteScript128");
	MakeByte	(0X81C17);
	MakeArray	(0X81C17,	0X62);
	MakeName	(0X81C17,	"MapSpriteScript129");
	MakeByte	(0X81C79);
	MakeArray	(0X81C79,	0X47);
	MakeName	(0X81C79,	"MapSpriteScript130");
	MakeByte	(0X81CC0);
	MakeArray	(0X81CC0,	0X12);
	MakeName	(0X81CC0,	"MapSpriteScript131");
	MakeByte	(0X81CD2);
	MakeArray	(0X81CD2,	0X37);
	MakeName	(0X81CD2,	"MapSpriteScript132");
	MakeByte	(0X81D09);
	MakeArray	(0X81D09,	0X54);
	MakeName	(0X81D09,	"MapSpriteScript133");
	MakeByte	(0X81D5D);
	MakeArray	(0X81D5D,	0X1F);
	MakeName	(0X81D5D,	"MapSpriteScript134");
	MakeByte	(0X81D7C);
	MakeArray	(0X81D7C,	0X8);
	MakeName	(0X81D7C,	"MapSpriteScript135");
	MakeByte	(0X81D84);
	MakeArray	(0X81D84,	0X38);
	MakeName	(0X81D84,	"MapSpriteScript136");
	MakeByte	(0X81DBC);
	MakeArray	(0X81DBC,	0XA);
	MakeName	(0X81DBC,	"MapSpriteScript137");
	MakeByte	(0X81DC6);
	MakeArray	(0X81DC6,	0X7);
	MakeName	(0X81DC6,	"MapSpriteScript138");
	MakeByte	(0X81DCD);
	MakeArray	(0X81DCD,	0XB);
	MakeName	(0X81DCD,	"MapSpriteScript139");
	MakeByte	(0X81DD8);
	MakeArray	(0X81DD8,	0X6);
	MakeName	(0X81DD8,	"MapSpriteScript140");
	MakeByte	(0X81DDE);
	MakeArray	(0X81DDE,	0XD);
	MakeName	(0X81DDE,	"MapSpriteScript141");
	MakeByte	(0X81DEB);
	MakeArray	(0X81DEB,	0X1A);
	MakeName	(0X81DEB,	"MapSpriteScript142");
	MakeByte	(0X81E05);
	MakeArray	(0X81E05,	0XB);
	MakeName	(0X81E05,	"MapSpriteScript143");
	MakeByte	(0X81E10);
	MakeArray	(0X81E10,	0XB);
	MakeName	(0X81E10,	"MapSpriteScript144");
	MakeByte	(0X81E1B);
	MakeArray	(0X81E1B,	0X18);
	MakeName	(0X81E1B,	"MapSpriteScript145");
	MakeByte	(0X81E33);
	MakeArray	(0X81E33,	0X45);
	MakeName	(0X81E33,	"MapSpriteScript146");
	MakeByte	(0X81E78);
	MakeArray	(0X81E78,	0X23);
	MakeName	(0X81E78,	"MapSpriteScript147");
	MakeByte	(0X81E9B);
	MakeArray	(0X81E9B,	0XC);
	MakeName	(0X81E9B,	"MapSpriteScript148");
	MakeByte	(0X81EA7);
	MakeArray	(0X81EA7,	0X9);
	MakeName	(0X81EA7,	"MapSpriteScript149");
	MakeByte	(0X81EB0);
	MakeArray	(0X81EB0,	0X11);
	MakeName	(0X81EB0,	"MapSpriteScript150");
	MakeByte	(0X81EC1);
	MakeArray	(0X81EC1,	0X16);
	MakeName	(0X81EC1,	"MapSpriteScript151");
	MakeByte	(0X81ED7);
	MakeArray	(0X81ED7,	0X5);
	MakeName	(0X81ED7,	"MapSpriteScript152");
	MakeByte	(0X81EDC);
	MakeArray	(0X81EDC,	0XB);
	MakeName	(0X81EDC,	"MapSpriteScript153");
	MakeByte	(0X81EE7);
	MakeArray	(0X81EE7,	0X4);
	MakeName	(0X81EE7,	"MapSpriteScript154");
	MakeByte	(0X81EEB);
	MakeArray	(0X81EEB,	0X6);
	MakeName	(0X81EEB,	"MapSpriteScript155");
	MakeByte	(0X81EF1);
	MakeArray	(0X81EF1,	0X5);
	MakeName	(0X81EF1,	"MapSpriteScript156");
	MakeByte	(0X81EF6);
	MakeArray	(0X81EF6,	0XC);
	MakeName	(0X81EF6,	"MapSpriteScript157");
	MakeByte	(0X81F02);
	MakeArray	(0X81F02,	0X26);
	MakeName	(0X81F02,	"MapSpriteScript158");
	MakeByte	(0X81F28);
	MakeArray	(0X81F28,	0XE);
	MakeName	(0X81F28,	"MapSpriteScript159");
	MakeByte	(0X81F36);
	MakeArray	(0X81F36,	0X32);
	MakeName	(0X81F36,	"MapSpriteScript160");
	MakeByte	(0X81F68);
	MakeArray	(0X81F68,	0XA8);
	MakeName	(0X81F68,	"MapSpriteScript161");
	MakeByte	(0X82010);
	MakeArray	(0X82010,	0XC);
	MakeName	(0X82010,	"MapSpriteScript162");
	MakeByte	(0X8201C);
	MakeArray	(0X8201C,	0XF);
	MakeName	(0X8201C,	"MapSpriteScript163");
	MakeByte	(0X8202B);
	MakeArray	(0X8202B,	0XD);
	MakeName	(0X8202B,	"MapSpriteScript164");
	MakeByte	(0X82038);
	MakeArray	(0X82038,	0X16);
	MakeName	(0X82038,	"MapSpriteScript165");
	MakeByte	(0X8204E);
	MakeArray	(0X8204E,	0X12);
	MakeName	(0X8204E,	"MapSpriteScript166");
	MakeByte	(0X82060);
	MakeArray	(0X82060,	0X8);
	MakeName	(0X82060,	"MapSpriteScript167");
	MakeByte	(0X82068);
	MakeArray	(0X82068,	0XA);
	MakeName	(0X82068,	"MapSpriteScript168");
	MakeByte	(0X82072);
	MakeArray	(0X82072,	0X3B);
	MakeName	(0X82072,	"MapSpriteScript169");
	MakeByte	(0X820AD);
	MakeArray	(0X820AD,	0X14);
	MakeName	(0X820AD,	"MapSpriteScript170");
	MakeByte	(0X820C1);
	MakeArray	(0X820C1,	0XB);
	MakeName	(0X820C1,	"MapSpriteScript171");
	MakeDword	(x=0X820CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X820CC,	"pt_Maps");
	MakeDword	(x=0X820D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X820D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X820D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X820DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X820E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X820E4);
	MakeByte	(0X820E5);
	MakeByte	(0X820E6);
	MakeByte	(0X820E7);
	MakeByte	(0X820E8);
	MakeByte	(0X820E9);
	MakeByte	(0X820EA);
	MakeByte	(0X820EB);
	MakeDword	(x=0X820EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X820F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X820F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X820F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X820FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82100);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82104);
	MakeByte	(0X82105);
	MakeByte	(0X82106);
	MakeByte	(0X82107);
	MakeByte	(0X82108);
	MakeByte	(0X82109);
	MakeByte	(0X8210A);
	MakeByte	(0X8210B);
	MakeDword	(x=0X8210C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82110);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82114);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82118);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8211C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82120);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82124);
	MakeByte	(0X82125);
	MakeByte	(0X82126);
	MakeByte	(0X82127);
	MakeByte	(0X82128);
	MakeByte	(0X82129);
	MakeByte	(0X8212A);
	MakeByte	(0X8212B);
	MakeDword	(x=0X8212C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82130);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82134);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82138);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8213C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82140);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82144);
	MakeByte	(0X82145);
	MakeByte	(0X82146);
	MakeByte	(0X82147);
	MakeByte	(0X82148);
	MakeByte	(0X82149);
	MakeByte	(0X8214A);
	MakeByte	(0X8214B);
	MakeDword	(x=0X8214C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82150);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82154);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82158);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8215C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82160);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82164);
	MakeByte	(0X82165);
	MakeByte	(0X82166);
	MakeByte	(0X82167);
	MakeByte	(0X82168);
	MakeByte	(0X82169);
	MakeByte	(0X8216A);
	MakeByte	(0X8216B);
	MakeDword	(x=0X8216C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82170);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82174);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82178);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8217C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82180);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82184);
	MakeByte	(0X82185);
	MakeByte	(0X82186);
	MakeByte	(0X82187);
	MakeByte	(0X82188);
	MakeByte	(0X82189);
	MakeByte	(0X8218A);
	MakeByte	(0X8218B);
	MakeDword	(x=0X8218C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82190);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82194);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82198);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8219C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X821A4);
	MakeByte	(0X821A5);
	MakeByte	(0X821A6);
	MakeByte	(0X821A7);
	MakeByte	(0X821A8);
	MakeByte	(0X821A9);
	MakeByte	(0X821AA);
	MakeByte	(0X821AB);
	MakeDword	(x=0X821AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X821C4);
	MakeByte	(0X821C5);
	MakeByte	(0X821C6);
	MakeByte	(0X821C7);
	MakeByte	(0X821C8);
	MakeByte	(0X821C9);
	MakeByte	(0X821CA);
	MakeByte	(0X821CB);
	MakeDword	(x=0X821CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X821E4);
	MakeByte	(0X821E5);
	MakeByte	(0X821E6);
	MakeByte	(0X821E7);
	MakeByte	(0X821E8);
	MakeByte	(0X821E9);
	MakeByte	(0X821EA);
	MakeByte	(0X821EB);
	MakeDword	(x=0X821EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X821FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82200);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82204);
	MakeByte	(0X82205);
	MakeByte	(0X82206);
	MakeByte	(0X82207);
	MakeByte	(0X82208);
	MakeByte	(0X82209);
	MakeByte	(0X8220A);
	MakeByte	(0X8220B);
	MakeDword	(x=0X8220C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82210);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82214);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82218);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8221C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82220);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82224);
	MakeByte	(0X82225);
	MakeByte	(0X82226);
	MakeByte	(0X82227);
	MakeByte	(0X82228);
	MakeByte	(0X82229);
	MakeByte	(0X8222A);
	MakeByte	(0X8222B);
	MakeDword	(x=0X8222C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82230);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82234);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82238);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8223C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82240);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82244);
	MakeByte	(0X82245);
	MakeByte	(0X82246);
	MakeByte	(0X82247);
	MakeByte	(0X82248);
	MakeByte	(0X82249);
	MakeByte	(0X8224A);
	MakeByte	(0X8224B);
	MakeDword	(x=0X8224C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82250);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82254);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82258);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8225C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82260);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82264);
	MakeByte	(0X82265);
	MakeByte	(0X82266);
	MakeByte	(0X82267);
	MakeByte	(0X82268);
	MakeByte	(0X82269);
	MakeByte	(0X8226A);
	MakeByte	(0X8226B);
	MakeDword	(x=0X8226C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82270);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82274);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82278);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8227C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82280);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82284);
	MakeByte	(0X82285);
	MakeByte	(0X82286);
	MakeByte	(0X82287);
	MakeByte	(0X82288);
	MakeByte	(0X82289);
	MakeByte	(0X8228A);
	MakeByte	(0X8228B);
	MakeDword	(x=0X8228C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82290);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82294);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82298);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8229C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X822A4);
	MakeByte	(0X822A5);
	MakeByte	(0X822A6);
	MakeByte	(0X822A7);
	MakeByte	(0X822A8);
	MakeByte	(0X822A9);
	MakeByte	(0X822AA);
	MakeByte	(0X822AB);
	MakeDword	(x=0X822AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X822C4);
	MakeByte	(0X822C5);
	MakeByte	(0X822C6);
	MakeByte	(0X822C7);
	MakeByte	(0X822C8);
	MakeByte	(0X822C9);
	MakeByte	(0X822CA);
	MakeByte	(0X822CB);
	MakeDword	(x=0X822CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X822E4);
	MakeByte	(0X822E5);
	MakeByte	(0X822E6);
	MakeByte	(0X822E7);
	MakeByte	(0X822E8);
	MakeByte	(0X822E9);
	MakeByte	(0X822EA);
	MakeByte	(0X822EB);
	MakeDword	(x=0X822EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X822FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82300);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82304);
	MakeByte	(0X82305);
	MakeByte	(0X82306);
	MakeByte	(0X82307);
	MakeByte	(0X82308);
	MakeByte	(0X82309);
	MakeByte	(0X8230A);
	MakeByte	(0X8230B);
	MakeDword	(x=0X8230C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82310);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82314);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82318);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8231C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82320);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82324);
	MakeByte	(0X82325);
	MakeByte	(0X82326);
	MakeByte	(0X82327);
	MakeByte	(0X82328);
	MakeByte	(0X82329);
	MakeByte	(0X8232A);
	MakeByte	(0X8232B);
	MakeDword	(x=0X8232C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82330);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82334);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82338);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8233C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82340);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82344);
	MakeByte	(0X82345);
	MakeByte	(0X82346);
	MakeByte	(0X82347);
	MakeByte	(0X82348);
	MakeByte	(0X82349);
	MakeByte	(0X8234A);
	MakeByte	(0X8234B);
	MakeDword	(x=0X8234C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82350);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82354);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82358);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8235C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82360);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82364);
	MakeByte	(0X82365);
	MakeByte	(0X82366);
	MakeByte	(0X82367);
	MakeByte	(0X82368);
	MakeByte	(0X82369);
	MakeByte	(0X8236A);
	MakeByte	(0X8236B);
	MakeDword	(x=0X8236C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82370);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82374);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82378);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8237C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82380);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82384);
	MakeByte	(0X82385);
	MakeByte	(0X82386);
	MakeByte	(0X82387);
	MakeByte	(0X82388);
	MakeByte	(0X82389);
	MakeByte	(0X8238A);
	MakeByte	(0X8238B);
	MakeDword	(x=0X8238C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82390);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82394);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82398);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8239C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X823A4);
	MakeByte	(0X823A5);
	MakeByte	(0X823A6);
	MakeByte	(0X823A7);
	MakeByte	(0X823A8);
	MakeByte	(0X823A9);
	MakeByte	(0X823AA);
	MakeByte	(0X823AB);
	MakeDword	(x=0X823AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X823C4);
	MakeByte	(0X823C5);
	MakeByte	(0X823C6);
	MakeByte	(0X823C7);
	MakeByte	(0X823C8);
	MakeByte	(0X823C9);
	MakeByte	(0X823CA);
	MakeByte	(0X823CB);
	MakeDword	(x=0X823CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X823E4);
	MakeByte	(0X823E5);
	MakeByte	(0X823E6);
	MakeByte	(0X823E7);
	MakeByte	(0X823E8);
	MakeByte	(0X823E9);
	MakeByte	(0X823EA);
	MakeByte	(0X823EB);
	MakeDword	(x=0X823EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X823FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82400);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82404);
	MakeByte	(0X82405);
	MakeByte	(0X82406);
	MakeByte	(0X82407);
	MakeByte	(0X82408);
	MakeByte	(0X82409);
	MakeByte	(0X8240A);
	MakeByte	(0X8240B);
	MakeDword	(x=0X8240C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82410);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82414);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82418);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8241C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82420);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82424);
	MakeByte	(0X82425);
	MakeByte	(0X82426);
	MakeByte	(0X82427);
	MakeByte	(0X82428);
	MakeByte	(0X82429);
	MakeByte	(0X8242A);
	MakeByte	(0X8242B);
	MakeDword	(x=0X8242C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82430);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82434);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82438);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8243C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82440);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82444);
	MakeByte	(0X82445);
	MakeByte	(0X82446);
	MakeByte	(0X82447);
	MakeByte	(0X82448);
	MakeByte	(0X82449);
	MakeByte	(0X8244A);
	MakeByte	(0X8244B);
	MakeDword	(x=0X8244C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82450);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82454);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82458);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8245C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82460);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82464);
	MakeByte	(0X82465);
	MakeByte	(0X82466);
	MakeByte	(0X82467);
	MakeByte	(0X82468);
	MakeByte	(0X82469);
	MakeByte	(0X8246A);
	MakeByte	(0X8246B);
	MakeDword	(x=0X8246C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82470);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82474);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82478);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8247C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82480);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82484);
	MakeByte	(0X82485);
	MakeByte	(0X82486);
	MakeByte	(0X82487);
	MakeByte	(0X82488);
	MakeByte	(0X82489);
	MakeByte	(0X8248A);
	MakeByte	(0X8248B);
	MakeDword	(x=0X8248C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82490);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82494);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82498);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8249C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X824A4);
	MakeByte	(0X824A5);
	MakeByte	(0X824A6);
	MakeByte	(0X824A7);
	MakeByte	(0X824A8);
	MakeByte	(0X824A9);
	MakeByte	(0X824AA);
	MakeByte	(0X824AB);
	MakeDword	(x=0X824AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X824C4);
	MakeByte	(0X824C5);
	MakeByte	(0X824C6);
	MakeByte	(0X824C7);
	MakeByte	(0X824C8);
	MakeByte	(0X824C9);
	MakeByte	(0X824CA);
	MakeByte	(0X824CB);
	MakeDword	(x=0X824CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X824E4);
	MakeByte	(0X824E5);
	MakeByte	(0X824E6);
	MakeByte	(0X824E7);
	MakeByte	(0X824E8);
	MakeByte	(0X824E9);
	MakeByte	(0X824EA);
	MakeByte	(0X824EB);
	MakeDword	(x=0X824EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X824FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82500);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82504);
	MakeByte	(0X82505);
	MakeByte	(0X82506);
	MakeByte	(0X82507);
	MakeByte	(0X82508);
	MakeByte	(0X82509);
	MakeByte	(0X8250A);
	MakeByte	(0X8250B);
	MakeDword	(x=0X8250C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82510);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82514);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82518);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8251C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82520);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82524);
	MakeByte	(0X82525);
	MakeByte	(0X82526);
	MakeByte	(0X82527);
	MakeByte	(0X82528);
	MakeByte	(0X82529);
	MakeByte	(0X8252A);
	MakeByte	(0X8252B);
	MakeDword	(x=0X8252C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82530);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82534);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82538);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8253C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82540);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82544);
	MakeByte	(0X82545);
	MakeByte	(0X82546);
	MakeByte	(0X82547);
	MakeByte	(0X82548);
	MakeByte	(0X82549);
	MakeByte	(0X8254A);
	MakeByte	(0X8254B);
	MakeDword	(x=0X8254C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82550);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82554);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82558);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8255C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82560);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82564);
	MakeByte	(0X82565);
	MakeByte	(0X82566);
	MakeByte	(0X82567);
	MakeByte	(0X82568);
	MakeByte	(0X82569);
	MakeByte	(0X8256A);
	MakeByte	(0X8256B);
	MakeDword	(x=0X8256C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82570);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82574);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82578);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8257C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82580);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82584);
	MakeByte	(0X82585);
	MakeByte	(0X82586);
	MakeByte	(0X82587);
	MakeByte	(0X82588);
	MakeByte	(0X82589);
	MakeByte	(0X8258A);
	MakeByte	(0X8258B);
	MakeDword	(x=0X8258C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82590);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82594);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82598);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8259C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X825A4);
	MakeByte	(0X825A5);
	MakeByte	(0X825A6);
	MakeByte	(0X825A7);
	MakeByte	(0X825A8);
	MakeByte	(0X825A9);
	MakeByte	(0X825AA);
	MakeByte	(0X825AB);
	MakeDword	(x=0X825AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X825C4);
	MakeByte	(0X825C5);
	MakeByte	(0X825C6);
	MakeByte	(0X825C7);
	MakeByte	(0X825C8);
	MakeByte	(0X825C9);
	MakeByte	(0X825CA);
	MakeByte	(0X825CB);
	MakeDword	(x=0X825CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X825E4);
	MakeByte	(0X825E5);
	MakeByte	(0X825E6);
	MakeByte	(0X825E7);
	MakeByte	(0X825E8);
	MakeByte	(0X825E9);
	MakeByte	(0X825EA);
	MakeByte	(0X825EB);
	MakeDword	(x=0X825EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X825FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82600);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82604);
	MakeByte	(0X82605);
	MakeByte	(0X82606);
	MakeByte	(0X82607);
	MakeByte	(0X82608);
	MakeByte	(0X82609);
	MakeByte	(0X8260A);
	MakeByte	(0X8260B);
	MakeDword	(x=0X8260C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82610);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82614);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82618);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8261C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82620);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82624);
	MakeByte	(0X82625);
	MakeByte	(0X82626);
	MakeByte	(0X82627);
	MakeByte	(0X82628);
	MakeByte	(0X82629);
	MakeByte	(0X8262A);
	MakeByte	(0X8262B);
	MakeDword	(x=0X8262C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82630);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82634);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82638);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X8263C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X82640);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X82644);
	MakeByte	(0X82645);
	MakeByte	(0X82646);
	MakeByte	(0X82647);
	MakeByte	(0X82648);
	MakeByte	(0X82649);
	MakeByte	(0X8264A);
	MakeByte	(0X8264B);
	MakeByte	(0X8264C);
	MakeArray	(0X8264C,	0X2DEA);
	MakeName	(0X8264C,	"Map00Section0");
	MakeByte	(0X85436);
	MakeArray	(0X85436,	0X2A0C);
	MakeName	(0X85436,	"Map18Section0");
	MakeByte	(0X87E42);
	MakeArray	(0X87E42,	0X438);
	MakeName	(0X87E42,	"Map25Section0");
	MakeByte	(0X8827A);
	MakeArray	(0X8827A,	0X1596);
	MakeName	(0X8827A,	"Map29Section0");
	MakeByte	(0X89810);
	MakeArray	(0X89810,	0X34E);
	MakeName	(0X89810,	"Map40Section0");
	MakeByte	(0X89B5E);
	MakeArray	(0X89B5E,	0X11B8);
	MakeName	(0X89B5E,	"Map42Section0");
	MakeByte	(0X8AD16);
	MakeArray	(0X8AD16,	0XEB2);
	MakeName	(0X8AD16,	"Map02Section1");
	MakeByte	(0X8BBC8);
	MakeArray	(0X8BBC8,	0X164A);
	MakeName	(0X8BBC8,	"Map00Section1");
	MakeByte	(0X8D212);
	MakeArray	(0X8D212,	0X102C);
	MakeName	(0X8D212,	"Map05Section1");
	MakeByte	(0X8E23E);
	MakeArray	(0X8E23E,	0X15CC);
	MakeName	(0X8E23E,	"Map04Section1");
	MakeByte	(0X8F80A);
	MakeArray	(0X8F80A,	0XD6E);
	MakeName	(0X8F80A,	"Map09Section1");
	MakeByte	(0X90578);
	MakeArray	(0X90578,	0X149A);
	MakeName	(0X90578,	"Map08Section1");
	MakeByte	(0X91A12);
	MakeArray	(0X91A12,	0XC96);
	MakeName	(0X91A12,	"Map01Section1");
	MakeByte	(0X926A8);
	MakeArray	(0X926A8,	0XA56);
	MakeName	(0X926A8,	"Map07Section1");
	MakeByte	(0X930FE);
	MakeArray	(0X930FE,	0XD80);
	MakeName	(0X930FE,	"Map15Section1");
	MakeByte	(0X93E7E);
	MakeArray	(0X93E7E,	0X13F8);
	MakeName	(0X93E7E,	"Map13Section1");
	MakeByte	(0X95276);
	MakeArray	(0X95276,	0X1692);
	MakeName	(0X95276,	"Map18Section1");
	MakeByte	(0X96908);
	MakeArray	(0X96908,	0X786);
	MakeName	(0X96908,	"Map24Section1");
	MakeByte	(0X9708E);
	MakeArray	(0X9708E,	0X1626);
	MakeName	(0X9708E,	"Map26Section1");
	MakeByte	(0X986B4);
	MakeArray	(0X986B4,	0XD38);
	MakeName	(0X986B4,	"Map25Section1");
	MakeByte	(0X993EC);
	MakeArray	(0X993EC,	0X16FE);
	MakeName	(0X993EC,	"Map30Section1");
	MakeByte	(0X9AAEA);
	MakeArray	(0X9AAEA,	0X1572);
	MakeName	(0X9AAEA,	"Map31Section1");
	MakeByte	(0X9C05C);
	MakeArray	(0X9C05C,	0X166E);
	MakeName	(0X9C05C,	"Map34Section1");
	MakeByte	(0X9D6CA);
	MakeArray	(0X9D6CA,	0X12EA);
	MakeName	(0X9D6CA,	"Map29Section1");
	MakeByte	(0X9E9B4);
	MakeArray	(0X9E9B4,	0X816);
	MakeName	(0X9E9B4,	"Map35Section1");
	MakeByte	(0X9F1CA);
	MakeArray	(0X9F1CA,	0X12C6);
	MakeName	(0X9F1CA,	"Map36Section1");
	MakeByte	(0XA0490);
	MakeArray	(0XA0490,	0X1212);
	MakeName	(0XA0490,	"Map37Section1");
	MakeByte	(0XA16A2);
	MakeArray	(0XA16A2,	0X1200);
	MakeName	(0XA16A2,	"Map32Section1");
	MakeByte	(0XA28A2);
	MakeArray	(0XA28A2,	0X666);
	MakeName	(0XA28A2,	"Map38Section1");
	MakeByte	(0XA2F08);
	MakeArray	(0XA2F08,	0XEB2);
	MakeName	(0XA2F08,	"Map39Section1");
	MakeByte	(0XA3DBA);
	MakeArray	(0XA3DBA,	0XE7C);
	MakeName	(0XA3DBA,	"Map40Section1");
	MakeByte	(0XA4C36);
	MakeArray	(0XA4C36,	0XDDA);
	MakeName	(0XA4C36,	"Map42Section1");
	MakeByte	(0XA5A10);
	MakeArray	(0XA5A10,	0X11EE);
	MakeName	(0XA5A10,	"Map43Section1");
	MakeByte	(0XA6BFE);
	MakeArray	(0XA6BFE,	0X372);
	MakeName	(0XA6BFE,	"Map02Section2");
	MakeByte	(0XA6F70);
	MakeArray	(0XA6F70,	0X3BA);
	MakeName	(0XA6F70,	"Map00Section2");
	MakeByte	(0XA732A);
	MakeArray	(0XA732A,	0X426);
	MakeName	(0XA732A,	"Map04Section2");
	MakeByte	(0XA7750);
	MakeArray	(0XA7750,	0X372);
	MakeName	(0XA7750,	"Map09Section2");
	MakeByte	(0XA7AC2);
	MakeArray	(0XA7AC2,	0X318);
	MakeName	(0XA7AC2,	"Map08Section2");
	MakeByte	(0XA7DDA);
	MakeArray	(0XA7DDA,	0X1B0);
	MakeName	(0XA7DDA,	"Map01Section2");
	MakeByte	(0XA7F8A);
	MakeArray	(0XA7F8A,	0X18C);
	MakeName	(0XA7F8A,	"Map13Section2");
	MakeByte	(0XA8116);
	MakeArray	(0XA8116,	0X264);
	MakeName	(0XA8116,	"Map18Section2");
	MakeByte	(0XA837A);
	MakeArray	(0XA837A,	0X20A);
	MakeName	(0XA837A,	"Map31Section2");
	MakeByte	(0XA8584);
	MakeArray	(0XA8584,	0X21C);
	MakeName	(0XA8584,	"Map29Section2");
	MakeByte	(0XA87A0);
	MakeArray	(0XA87A0,	0X1B0);
	MakeName	(0XA87A0,	"Map32Section2");
	MakeByte	(0XA8950);
	MakeArray	(0XA8950,	0X12);
	MakeName	(0XA8950,	"Map02Section3");
	MakeByte	(0XA8962);
	MakeArray	(0XA8962,	0X12);
	MakeName	(0XA8962,	"Map00Section3");
	MakeByte	(0XA8974);
	MakeArray	(0XA8974,	0X12);
	MakeName	(0XA8974,	"Map05Section3");
	MakeByte	(0XA8986);
	MakeArray	(0XA8986,	0X12);
	MakeName	(0XA8986,	"Map04Section3");
	MakeByte	(0XA8998);
	MakeArray	(0XA8998,	0X12);
	MakeName	(0XA8998,	"Map09Section3");
	MakeByte	(0XA89AA);
	MakeArray	(0XA89AA,	0X7E);
	MakeName	(0XA89AA,	"Map08Section3");
	MakeByte	(0XA8A28);
	MakeArray	(0XA8A28,	0X12);
	MakeName	(0XA8A28,	"Map01Section3");
	MakeByte	(0XA8A3A);
	MakeArray	(0XA8A3A,	0X12);
	MakeName	(0XA8A3A,	"Map13Section3");
	MakeByte	(0XA8A4C);
	MakeArray	(0XA8A4C,	0X12);
	MakeName	(0XA8A4C,	"Map18Section3");
	MakeByte	(0XA8A5E);
	MakeArray	(0XA8A5E,	0X36);
	MakeName	(0XA8A5E,	"Map31Section3");
	MakeByte	(0XA8A94);
	MakeArray	(0XA8A94,	0X12);
	MakeName	(0XA8A94,	"Map34Section3");
	MakeByte	(0XA8AA6);
	MakeArray	(0XA8AA6,	0X12);
	MakeName	(0XA8AA6,	"Map29Section3");
	MakeByte	(0XA8AB8);
	MakeArray	(0XA8AB8,	0X12);
	MakeName	(0XA8AB8,	"Map35Section3");
	MakeByte	(0XA8ACA);
	MakeArray	(0XA8ACA,	0X12);
	MakeName	(0XA8ACA,	"Map37Section3");
	MakeByte	(0XA8ADC);
	MakeArray	(0XA8ADC,	0X12);
	MakeName	(0XA8ADC,	"Map32Section3");
	MakeByte	(0XA8AEE);
	MakeArray	(0XA8AEE,	0X866);
	MakeName	(0XA8AEE,	"Map00Section4");
	MakeByte	(0XA9354);
	MakeArray	(0XA9354,	0X1E0);
	MakeName	(0XA9354,	"Map01Section4");
	MakeByte	(0XA9534);
	MakeArray	(0XA9534,	0X7F6);
	MakeName	(0XA9534,	"Map02Section4");
	MakeByte	(0XA9D2A);
	MakeArray	(0XA9D2A,	0X770);
	MakeName	(0XA9D2A,	"Map03Section4");
	MakeByte	(0XAA49A);
	MakeArray	(0XAA49A,	0XCDA);
	MakeName	(0XAA49A,	"Map04Section4");
	MakeByte	(0XAB174);
	MakeArray	(0XAB174,	0X7B4);
	MakeName	(0XAB174,	"Map05Section4");
	MakeByte	(0XAB928);
	MakeArray	(0XAB928,	0XB42);
	MakeName	(0XAB928,	"Map06Section4");
	MakeByte	(0XAC46A);
	MakeArray	(0XAC46A,	0XB08);
	MakeName	(0XAC46A,	"Map07Section4");
	MakeByte	(0XACF72);
	MakeArray	(0XACF72,	0X612);
	MakeName	(0XACF72,	"Map08Section4");
	MakeByte	(0XAD584);
	MakeArray	(0XAD584,	0XA80);
	MakeName	(0XAD584,	"Map09Section4");
	MakeByte	(0XAE004);
	MakeArray	(0XAE004,	0X826);
	MakeName	(0XAE004,	"Map10Section4");
	MakeByte	(0XAE82A);
	MakeArray	(0XAE82A,	0X234);
	MakeName	(0XAE82A,	"Map11Section4");
	MakeByte	(0XAEA5E);
	MakeArray	(0XAEA5E,	0X1CE);
	MakeName	(0XAEA5E,	"Map12Section4");
	MakeByte	(0XAEC2C);
	MakeArray	(0XAEC2C,	0XB4E);
	MakeName	(0XAEC2C,	"Map13Section4");
	MakeByte	(0XAF77A);
	MakeArray	(0XAF77A,	0XAC4);
	MakeName	(0XAF77A,	"Map14Section4");
	MakeByte	(0XB023E);
	MakeArray	(0XB023E,	0X2A4);
	MakeName	(0XB023E,	"Map15Section4");
	MakeByte	(0XB04E2);
	MakeArray	(0XB04E2,	0X4D6);
	MakeName	(0XB04E2,	"Map16Section4");
	MakeByte	(0XB09B8);
	MakeArray	(0XB09B8,	0X1F2);
	MakeName	(0XB09B8,	"Map17Section4");
	MakeByte	(0XB0BAA);
	MakeArray	(0XB0BAA,	0X3BC);
	MakeName	(0XB0BAA,	"Map18Section4");
	MakeByte	(0XB0F66);
	MakeArray	(0XB0F66,	0X3CE);
	MakeName	(0XB0F66,	"Map19Section4");
	MakeByte	(0XB1334);
	MakeArray	(0XB1334,	0X202);
	MakeName	(0XB1334,	"Map20Section4");
	MakeByte	(0XB1536);
	MakeArray	(0XB1536,	0X482);
	MakeName	(0XB1536,	"Map21Section4");
	MakeByte	(0XB19B8);
	MakeArray	(0XB19B8,	0X410);
	MakeName	(0XB19B8,	"Map22Section4");
	MakeByte	(0XB1DC8);
	MakeArray	(0XB1DC8,	0X350);
	MakeName	(0XB1DC8,	"Map23Section4");
	MakeByte	(0XB2118);
	MakeArray	(0XB2118,	0X168);
	MakeName	(0XB2118,	"Map24Section4");
	MakeByte	(0XB2280);
	MakeArray	(0XB2280,	0X16);
	MakeName	(0XB2280,	"Map25Section4");
	MakeByte	(0XB2296);
	MakeArray	(0XB2296,	0X1D8);
	MakeName	(0XB2296,	"Map26Section4");
	MakeByte	(0XB246E);
	MakeArray	(0XB246E,	0X2F0);
	MakeName	(0XB246E,	"Map27Section4");
	MakeByte	(0XB275E);
	MakeArray	(0XB275E,	0X2C2);
	MakeName	(0XB275E,	"Map28Section4");
	MakeByte	(0XB2A20);
	MakeArray	(0XB2A20,	0X9F8);
	MakeName	(0XB2A20,	"Map29Section4");
	MakeByte	(0XB3418);
	MakeArray	(0XB3418,	0X708);
	MakeName	(0XB3418,	"Map30Section4");
	MakeByte	(0XB3B20);
	MakeArray	(0XB3B20,	0XA6E);
	MakeName	(0XB3B20,	"Map31Section4");
	MakeByte	(0XB458E);
	MakeArray	(0XB458E,	0X1B24);
	MakeName	(0XB458E,	"Map32Section4");
	MakeByte	(0XB60B2);
	MakeArray	(0XB60B2,	0X89E);
	MakeName	(0XB60B2,	"Map33Section4");
	MakeByte	(0XB6950);
	MakeArray	(0XB6950,	0X84A);
	MakeName	(0XB6950,	"Map34Section4");
	MakeByte	(0XB719A);
	MakeArray	(0XB719A,	0X342);
	MakeName	(0XB719A,	"Map35Section4");
	MakeByte	(0XB74DC);
	MakeArray	(0XB74DC,	0X86C);
	MakeName	(0XB74DC,	"Map36Section4");
	MakeByte	(0XB7D48);
	MakeArray	(0XB7D48,	0X3EA);
	MakeName	(0XB7D48,	"Map37Section4");
	MakeByte	(0XB8132);
	MakeArray	(0XB8132,	0X20A);
	MakeName	(0XB8132,	"Map38Section4");
	MakeByte	(0XB833C);
	MakeArray	(0XB833C,	0X32E);
	MakeName	(0XB833C,	"Map39Section4");
	MakeByte	(0XB866A);
	MakeArray	(0XB866A,	0X1EE);
	MakeName	(0XB866A,	"Map40Section4");
	MakeByte	(0XB8858);
	MakeArray	(0XB8858,	0X1D8);
	MakeName	(0XB8858,	"Map41Section4");
	MakeByte	(0XB8A30);
	MakeArray	(0XB8A30,	0X760);
	MakeName	(0XB8A30,	"Map42Section4");
	MakeByte	(0XB9190);
	MakeArray	(0XB9190,	0X33A);
	MakeName	(0XB9190,	"Map43Section4");
	MakeByte	(0XB94CA);
	MakeArray	(0XB94CA,	0X1E);
	MakeName	(0XB94CA,	"Map00Section5");
	MakeByte	(0XB94E8);
	MakeArray	(0XB94E8,	0X1E);
	MakeName	(0XB94E8,	"Map01Section5");
	MakeByte	(0XB9506);
	MakeArray	(0XB9506,	0X1E);
	MakeName	(0XB9506,	"Map02Section5");
	MakeByte	(0XB9524);
	MakeArray	(0XB9524,	0X1E);
	MakeName	(0XB9524,	"Map04Section5");
	MakeByte	(0XB9542);
	MakeArray	(0XB9542,	0X1E);
	MakeName	(0XB9542,	"Map05Section5");
	MakeByte	(0XB9560);
	MakeArray	(0XB9560,	0X1E);
	MakeName	(0XB9560,	"Map06Section5");
	MakeByte	(0XB957E);
	MakeArray	(0XB957E,	0X1E);
	MakeName	(0XB957E,	"Map07Section5");
	MakeByte	(0XB959C);
	MakeArray	(0XB959C,	0X1E);
	MakeName	(0XB959C,	"Map08Section5");
	MakeByte	(0XB95BA);
	MakeArray	(0XB95BA,	0X1E);
	MakeName	(0XB95BA,	"Map11Section5");
	MakeByte	(0XB95D8);
	MakeArray	(0XB95D8,	0X1E);
	MakeName	(0XB95D8,	"Map12Section5");
	MakeByte	(0XB95F6);
	MakeArray	(0XB95F6,	0X1E);
	MakeName	(0XB95F6,	"Map15Section5");
	MakeByte	(0XB9614);
	MakeArray	(0XB9614,	0X1E);
	MakeName	(0XB9614,	"Map16Section5");
	MakeByte	(0XB9632);
	MakeArray	(0XB9632,	0X1E);
	MakeName	(0XB9632,	"Map18Section5");
	MakeByte	(0XB9650);
	MakeArray	(0XB9650,	0X1E);
	MakeName	(0XB9650,	"Map24Section5");
	MakeByte	(0XB966E);
	MakeArray	(0XB966E,	0X1E);
	MakeName	(0XB966E,	"Map25Section5");
	MakeByte	(0XB968C);
	MakeArray	(0XB968C,	0X1E);
	MakeName	(0XB968C,	"Map26Section5");
	MakeByte	(0XB96AA);
	MakeArray	(0XB96AA,	0X1E);
	MakeName	(0XB96AA,	"Map27Section5");
	MakeByte	(0XB96C8);
	MakeArray	(0XB96C8,	0X1E);
	MakeName	(0XB96C8,	"Map28Section5");
	MakeByte	(0XB96E6);
	MakeArray	(0XB96E6,	0X1E);
	MakeName	(0XB96E6,	"Map32Section5");
	MakeByte	(0XB9704);
	MakeArray	(0XB9704,	0X1E);
	MakeName	(0XB9704,	"Map33Section5");
	MakeByte	(0XB9722);
	MakeArray	(0XB9722,	0X1E);
	MakeName	(0XB9722,	"Map35Section5");
	MakeByte	(0XB9740);
	MakeArray	(0XB9740,	0X1E);
	MakeName	(0XB9740,	"Map37Section5");
	MakeByte	(0XB975E);
	MakeArray	(0XB975E,	0X1E);
	MakeName	(0XB975E,	"Map39Section5");
	MakeByte	(0XB977C);
	MakeArray	(0XB977C,	0X1E);
	MakeName	(0XB977C,	"Map40Section5");
	MakeByte	(0XB979A);
	MakeArray	(0XB979A,	0X1E);
	MakeName	(0XB979A,	"Map41Section5");
	MakeByte	(0XB97B8);
	MakeArray	(0XB97B8,	0X1E);
	MakeName	(0XB97B8,	"Map42Section5");
	MakeByte	(0XB97D6);
	MakeArray	(0XB97D6,	0X1E);
	MakeName	(0XB97D6,	"Map43Section5");
	MakeDword	(x=0XB97F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XB97F4,	"pt_TileAnimations");
	MakeDword	(x=0XB97F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XB97FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XB9800);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XB9804);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XB9808);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XB980C);
	MakeArray	(0XB980C,	0X1A8);
	MakeName	(0XB980C,	"TileAnimation0");
	MakeByte	(0XB99B4);
	MakeArray	(0XB99B4,	0X26A);
	MakeName	(0XB99B4,	"TileAnimation1");
	MakeByte	(0XB9C1E);
	MakeArray	(0XB9C1E,	0X34E);
	MakeName	(0XB9C1E,	"TileAnimation2");
	MakeByte	(0XB9F6C);
	MakeArray	(0XB9F6C,	0X274);
	MakeName	(0XB9F6C,	"TileAnimation3");
	MakeByte	(0XBA1E0);
	MakeArray	(0XBA1E0,	0X12E);
	MakeName	(0XBA1E0,	"TileAnimation4");
	MakeByte	(0XBA30E);
	MakeArray	(0XBA30E,	0XDE);
	MakeName	(0XBA30E,	"TileAnimation5");
	MakeArray	(0XBA3EC,	0X1C14);
	MakeCode	(0XBC000);
	MakeName	(0XBC000,	"j_debugMode_SoundTest");
	MakeDword	(x=0XBC004);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XBC004,	"p_ShiningForceLogoTiles");
	MakeDword	(x=0XBC008);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC00C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC010);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC014);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC018);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XBC018,	"p_pal_BED2A");
	MakeCode	(0XBC01C);
	MakeName	(0XBC01C,	"debugMode_SoundTest");
	MakeCode	(x=0XBC026);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeName	(0XBC026,	"debugMode_CheckInputForSoundTest");
	MakeByte	(0XBC038);
	MakeArray	(0XBC038,	0X4);
	MakeCode	(0XBC03C);
	MakeRptCmt	(0XBC050,	"H32 cell mode, no interlace");
	MakeRptCmt	(0XBC058,	"scroll size : V64 cell, H32 cell");
	MakeRptCmt	(0XBC060,	"scroll A table VRAM address : E000");
	MakeRptCmt	(0XBC068,	"scroll B table VRAM address : E000");
	MakeCode	(x=0XBC08C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC09C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC0A2);
	OpHex		(x,	0);
	MakeCode	(x=0XBC0B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC0BC);
	OpHex		(x,	0);
	MakeCode	(x=0XBC0CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC0E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC0EC);
	OpHex		(x,	0);
	MakeCode	(x=0XBC0FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC104);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC11A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC136);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC13A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC14E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XBC168);
	MakeArray	(0XBC168,	0X4);
	MakeCode	(0XBC16C);
	MakeCode	(x=0XBC172);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC17E);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XBC192);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XBC1A2);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XBC1AE);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0XBC1BA);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0XBC1C4);
	MakeArray	(0XBC1C4,	0X4);
	MakeCode	(0XBC1C8);
	MakeCode	(x=0XBC1CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC1D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC1E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XBC1F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XBC218);
	MakeArray	(0XBC218,	0X4);
	MakeCode	(0XBC21C);
	MakeCode	(0XBC226);
	MakeCode	(x=0XBC228);
	OpHex		(x,	0);
	MakeCode	(x=0XBC232);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XBC246);
	MakeCode	(x=0XBC248);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XBC27E);
	MakeCode	(0XBC28E);
	MakeCode	(x=0XBC290);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC29E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XBC2CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XBC2CE);
	MakeArray	(0XBC2CE,	0X80);
	MakeName	(0XBC2CE,	"SoundTestPalettes");
	MakeByte	(0XBC34E);
	MakeArray	(0XBC34E,	0X8F2);
	MakeName	(0XBC34E,	"SoundTestTiles1");
	MakeByte	(0XBCC40);
	MakeArray	(0XBCC40,	0X998);
	MakeName	(0XBCC40,	"SoundTestTiles2");
	MakeByte	(0XBD5D8);
	MakeArray	(0XBD5D8,	0X660);
	MakeName	(0XBD5D8,	"SoundTestTiles3");
	MakeRptCmt	(0XBDC38,	"musicians graphics");
	MakeByte	(0XBDC38);
	MakeName	(0XBDC38,	"SoundTestLayout");
	MakeByte	(0XBE338);
	MakeByte	(0XBE360);
	MakeByte	(0XBE388);
	MakeByte	(0XBE3AA);
	MakeByte	(0XBE3CC);
	MakeByte	(0XBE3E8);
	MakeByte	(0XBE404);
	MakeByte	(0XBE414);
	MakeByte	(0XBE424);
	MakeByte	(0XBE43A);
	MakeByte	(0XBE450);
	MakeByte	(0XBE460);
	MakeByte	(0XBE470);
	MakeArray	(0XBE470,	0XA0);
	MakeName	(0XBE470,	"layout_SoundTestWindow");
	MakeByte	(0XBE510);
	MakeArray	(0XBE510,	0X2C8);
	MakeName	(0XBE510,	"ShiningForceLogoTiles");
	MakeRptCmt	(0XBE7D8,	"reader screen cloud tiles?");
	MakeByte	(0XBE7D8);
	MakeByte	(0XBE8DE);
	MakeByte	(0XBE932);
	MakeByte	(0XBEA56);
	MakeRptCmt	(0XBED2A,	"unknown palette");
	MakeWord	(0XBED2A);
	MakeName	(0XBED2A,	"pal_BED2A");
	MakeWord	(0XBED2C);
	MakeWord	(0XBED2E);
	MakeWord	(0XBED30);
	MakeWord	(0XBED32);
	MakeWord	(0XBED34);
	MakeWord	(0XBED36);
	MakeWord	(0XBED38);
	MakeWord	(0XBED3A);
	MakeWord	(0XBED3C);
	MakeWord	(0XBED3E);
	MakeWord	(0XBED40);
	MakeWord	(0XBED42);
	MakeWord	(0XBED44);
	MakeWord	(0XBED46);
	MakeWord	(0XBED48);
	MakeWord	(0XBED4A);
	MakeWord	(0XBED4C);
	MakeWord	(0XBED4E);
	MakeWord	(0XBED50);
	MakeWord	(0XBED52);
	MakeWord	(0XBED54);
	MakeWord	(0XBED56);
	MakeWord	(0XBED58);
	MakeWord	(0XBED5A);
	MakeWord	(0XBED5C);
	MakeWord	(0XBED5E);
	MakeWord	(0XBED60);
	MakeWord	(0XBED62);
	MakeWord	(0XBED64);
	MakeWord	(0XBED66);
	MakeWord	(0XBED68);
	MakeWord	(0XBED6A);
	MakeWord	(0XBED6C);
	MakeWord	(0XBED6E);
	MakeWord	(0XBED70);
	MakeWord	(0XBED72);
	MakeWord	(0XBED74);
	MakeWord	(0XBED76);
	MakeWord	(0XBED78);
	MakeWord	(0XBED7A);
	MakeWord	(0XBED7C);
	MakeWord	(0XBED7E);
	MakeWord	(0XBED80);
	MakeWord	(0XBED82);
	MakeWord	(0XBED84);
	MakeWord	(0XBED86);
	MakeWord	(0XBED88);
	MakeWord	(0XBED8A);
	MakeWord	(0XBED8C);
	MakeWord	(0XBED8E);
	MakeWord	(0XBED90);
	MakeWord	(0XBED92);
	MakeWord	(0XBED94);
	MakeWord	(0XBED96);
	MakeWord	(0XBED98);
	MakeWord	(0XBED9A);
	MakeWord	(0XBED9C);
	MakeWord	(0XBED9E);
	MakeWord	(0XBEDA0);
	MakeWord	(0XBEDA2);
	MakeWord	(0XBEDA4);
	MakeWord	(0XBEDA6);
	MakeWord	(0XBEDA8);
	MakeArray	(0XBEDAA,	0X1256);
	MakeDword	(x=0XC0000);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0000,	"p_EndingTiles_Max1");
	MakeDword	(x=0XC0004);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0004,	"p_EndingTiles_Max2");
	MakeDword	(x=0XC0008);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0008,	"p_EndingTiles_Max3");
	MakeDword	(x=0XC000C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC000C,	"p_EndingTiles_Max4");
	MakeDword	(x=0XC0010);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0010,	"p_EndingTiles_Adam");
	MakeDword	(x=0XC0014);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0014,	"p_EndingTiles_TheEnd");
	MakeDword	(x=0XC0018);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0018,	"p_EndingPalette");
	MakeDword	(x=0XC001C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC001C,	"p_EndingTiles_Farmer");
	MakeDword	(x=0XC0020);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0020,	"p_IntroPalette_Scene1");
	MakeDword	(x=0XC0024);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0XC0028,	"intro tablet pointers");
	MakeDword	(x=0XC0028);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0028,	"p_IntroTiles_Scene1_1");
	MakeDword	(x=0XC002C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC002C,	"p_IntroTiles_Scene1_2");
	MakeDword	(x=0XC0030);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0030,	"p_IntroPalette_Scene2");
	MakeDword	(x=0XC0034);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0034,	"p_IntroTiles_Scene2");
	MakeDword	(x=0XC0038);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0038,	"p_IntroPalette_Scene3");
	MakeDword	(x=0XC003C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC003C,	"p_IntroTiles_Scene3_1");
	MakeDword	(x=0XC0040);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0040,	"p_IntroTiles_Scene3_2");
	MakeDword	(x=0XC0044);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0044,	"p_IntroPalette_Scene4");
	MakeDword	(x=0XC0048);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0048,	"p_IntroTiles_Scene4_1");
	MakeDword	(x=0XC004C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC004C,	"p_IntroTiles_Scene4_2");
	MakeDword	(x=0XC0050);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0050,	"p_IntroTiles_Scene4_BG1");
	MakeDword	(x=0XC0054);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0054,	"p_IntroTiles_Scene4_BG2");
	MakeDword	(x=0XC0058);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0058,	"p_TitleScreenPalette");
	MakeDword	(x=0XC005C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC005C,	"p_TitleScreenTiles");
	MakeDword	(x=0XC0060);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0060,	"p_TitleScreenLayout");
	MakeDword	(x=0XC0064);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0064,	"p_ChapterScreensPalette");
	MakeDword	(x=0XC0068);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XC0068,	"pt_ChapterScreens");
	MakeDword	(x=0XC006C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC0070);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC0074);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC0078);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC007C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC0080);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XC0084);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XC0088);
	MakeArray	(0XC0088,	0X346);
	MakeName	(0XC0088,	"EndingTiles_Max1");
	MakeByte	(0XC03CE);
	MakeArray	(0XC03CE,	0X390);
	MakeName	(0XC03CE,	"EndingTiles_Max2");
	MakeByte	(0XC075E);
	MakeArray	(0XC075E,	0X412);
	MakeName	(0XC075E,	"EndingTiles_Max3");
	MakeByte	(0XC0B70);
	MakeArray	(0XC0B70,	0X39E);
	MakeName	(0XC0B70,	"EndingTiles_Max4");
	MakeByte	(0XC0F0E);
	MakeArray	(0XC0F0E,	0X2C2);
	MakeName	(0XC0F0E,	"EndingTiles_Adam");
	MakeByte	(0XC11D0);
	MakeArray	(0XC11D0,	0X3EE);
	MakeName	(0XC11D0,	"EndingTiles_TheEnd");
	MakeByte	(0XC15BE);
	MakeArray	(0XC15BE,	0X80);
	MakeName	(0XC15BE,	"EndingPalette");
	MakeByte	(0XC163E);
	MakeArray	(0XC163E,	0X270);
	MakeName	(0XC163E,	"EndingTiles_Farmer");
	MakeByte	(0XC18AE);
	MakeArray	(0XC18AE,	0X80);
	MakeName	(0XC18AE,	"IntroPalette_Scene1_1");
	MakeByte	(0XC192E);
	MakeArray	(0XC192E,	0X80);
	MakeName	(0XC192E,	"IntroPalette_Scene1_2");
	MakeByte	(0XC19AE);
	MakeArray	(0XC19AE,	0XAFA);
	MakeName	(0XC19AE,	"IntroTiles_Scene1_1");
	MakeByte	(0XC24A8);
	MakeArray	(0XC24A8,	0X9A8);
	MakeName	(0XC24A8,	"IntroTiles_Scene1_2");
	MakeByte	(0XC2E50);
	MakeArray	(0XC2E50,	0X80);
	MakeName	(0XC2E50,	"IntroPalette_Scene2");
	MakeByte	(0XC2ED0);
	MakeArray	(0XC2ED0,	0X44A);
	MakeName	(0XC2ED0,	"IntroTiles_Scene2");
	MakeByte	(0XC331A);
	MakeArray	(0XC331A,	0X80);
	MakeName	(0XC331A,	"IntroPalette_Scene3");
	MakeByte	(0XC339A);
	MakeArray	(0XC339A,	0X574);
	MakeName	(0XC339A,	"IntroTiles_Scene3_1");
	MakeByte	(0XC390E);
	MakeArray	(0XC390E,	0X620);
	MakeName	(0XC390E,	"IntroTiles_Scene3_2");
	MakeByte	(0XC3F2E);
	MakeArray	(0XC3F2E,	0X80);
	MakeName	(0XC3F2E,	"IntroPalette_Scene4");
	MakeByte	(0XC3FAE);
	MakeArray	(0XC3FAE,	0X586);
	MakeName	(0XC3FAE,	"IntroTiles_Scene4_1");
	MakeByte	(0XC4534);
	MakeArray	(0XC4534,	0X5B0);
	MakeName	(0XC4534,	"IntroTiles_Scene4_2");
	MakeByte	(0XC4AE4);
	MakeArray	(0XC4AE4,	0X674);
	MakeName	(0XC4AE4,	"IntroTiles_Scene4_BG1");
	MakeByte	(0XC5158);
	MakeArray	(0XC5158,	0X66C);
	MakeName	(0XC5158,	"IntroTiles_Scene4_BG2");
	MakeByte	(0XC57C4);
	MakeArray	(0XC57C4,	0X80);
	MakeName	(0XC57C4,	"TitleScreenPalette");
	MakeByte	(0XC5844);
	MakeArray	(0XC5844,	0X1140);
	MakeName	(0XC5844,	"TitleScreenTiles");
	MakeByte	(0XC6984);
	MakeArray	(0XC6984,	0X700);
	MakeName	(0XC6984,	"TitleScreenLayout");
	MakeByte	(0XC7084);
	MakeArray	(0XC7084,	0X80);
	MakeName	(0XC7084,	"ChapterScreensPalette");
	MakeByte	(0XC7104);
	MakeArray	(0XC7104,	0X896);
	MakeName	(0XC7104,	"ChapterScreen0");
	MakeByte	(0XC799A);
	MakeArray	(0XC799A,	0X8E8);
	MakeName	(0XC799A,	"ChapterScreen1");
	MakeByte	(0XC8282);
	MakeArray	(0XC8282,	0X912);
	MakeName	(0XC8282,	"ChapterScreen2");
	MakeByte	(0XC8B94);
	MakeArray	(0XC8B94,	0X932);
	MakeName	(0XC8B94,	"ChapterScreen3");
	MakeByte	(0XC94C6);
	MakeArray	(0XC94C6,	0X916);
	MakeName	(0XC94C6,	"ChapterScreen4");
	MakeByte	(0XC9DDC);
	MakeArray	(0XC9DDC,	0X952);
	MakeName	(0XC9DDC,	"ChapterScreen5");
	MakeByte	(0XCA72E);
	MakeArray	(0XCA72E,	0X8A6);
	MakeName	(0XCA72E,	"ChapterScreen6");
	MakeByte	(0XCAFD4);
	MakeArray	(0XCAFD4,	0X8F3);
	MakeName	(0XCAFD4,	"ChapterScreen7");
	MakeArray	(0XCB8C7,	0X739);
	MakeDword	(x=0XCC000);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCC000,	"p_pt_Backgrounds");
	MakeCode	(0XCC004);
	MakeName	(0XCC004,	"j_LoadBaseTilesAndPalette");
	MakeDword	(x=0XCC008);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCC008,	"p_MenuTiles_Options");
	MakeDword	(x=0XCC00C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCC00C,	"p_MenuTiles_Main");
	MakeDword	(x=0XCC010);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCC010,	"p_MenuTiles_Item");
	MakeDword	(x=0XCC014);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCC014,	"p_MenuTiles_Shop");
	MakeDword	(x=0XCC018);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCC018,	"p_MenuTiles_Headquarters");
	MakeDword	(x=0XCC01C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCC01C,	"p_MenuTiles_Church");
	MakeDword	(x=0XCC020);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCC020,	"p_SpellIcons");
	MakeDword	(x=0XCC024);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCC024,	"p_ItemIcons");
	MakeDword	(x=0XCC028);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XCC028,	"p_CursorTiles");
	MakeCode	(0XCC02C);
	MakeCode	(0XCC030);
	MakeName	(0XCC030,	"LoadBaseTilesAndPalette");
	MakeCode	(x=0XCC036);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCC03A);
	OpHex		(x,	0);
	MakeCode	(x=0XCC048);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XCC04C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XCC05E);
	MakeArray	(0XCC05E,	0XABC);
	MakeName	(0XCC05E,	"tiles_Base");
	MakeByte	(0XCCB1A);
	MakeArray	(0XCCB1A,	0X4D4);
	MakeName	(0XCCB1A,	"MenuTiles_Options");
	MakeByte	(0XCCFEE);
	MakeArray	(0XCCFEE,	0XD80);
	MakeName	(0XCCFEE,	"MenuTiles_Main");
	MakeByte	(0XCDD6E);
	MakeArray	(0XCDD6E,	0X590);
	MakeName	(0XCDD6E,	"MenuTiles_Item");
	MakeByte	(0XCE2FE);
	MakeArray	(0XCE2FE,	0X460);
	MakeName	(0XCE2FE,	"MenuTiles_Shop");
	MakeByte	(0XCE75E);
	MakeArray	(0XCE75E,	0X4D6);
	MakeName	(0XCE75E,	"MenuTiles_HQ");
	MakeByte	(0XCEC34);
	MakeArray	(0XCEC34,	0X4B6);
	MakeName	(0XCEC34,	"MenuTiles_Church");
	MakeByte	(0XCF0EA);
	MakeArray	(0XCF0EA,	0XC00);
	MakeName	(0XCF0EA,	"SpellIcons");
	MakeByte	(0XCFCEA);
	MakeArray	(0XCFCEA,	0X30C0);
	MakeName	(0XCFCEA,	"ItemIcons");
	MakeByte	(0XD2DAA);
	MakeArray	(0XD2DAA,	0XDA);
	MakeName	(0XD2DAA,	"CursorTiles");
	MakeByte	(0XD2E84);
	MakeArray	(0XD2E84,	0X20);
	MakeName	(0XD2E84,	"BasePalette");
	MakeCode	(0XD2EA4);
	MakeCode	(x=0XD2EE4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XD2EEE);
	MakeCode	(x=0XD2EF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XD2F02);
	MakeCode	(0XD2F1E);
	MakeCode	(x=0XD2F26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0XD2F3A);
	MakeCode	(0XD2F48);
	MakeCode	(0XD2F4E);
	MakeCode	(x=0XD2F50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD2F5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD2F66);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD2FDA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD2FE0);
	OpHex		(x,	0);
	MakeCode	(x=0XD3002);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0XD3006);
	OpHex		(x,	0);
	MakeByte	(0XD301A);
	MakeArray	(0XD301A,	0X2C0);
	MakeName	(0XD301A,	"wl_TextInput");
	MakeByte	(0XD32DA);
	MakeByte	(0XD3308);
	MakeArray	(0XD3308,	0X686);
	MakeName	(0XD3308,	"EndingCreditsFont");
	MakeDword	(x=0XD398E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0XD398E,	"pt_Backgrounds");
	MakeDword	(x=0XD3992);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3996);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD399A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD399E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD39FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A02);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A06);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A0A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A1A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A2A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A36);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A46);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A4E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A5A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A5E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A62);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A66);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A6E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A72);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A76);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A7A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A82);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A92);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A96);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3A9E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3AA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3AA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3AAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3AAE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3AB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3AB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3ABA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3ABE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0XD3AC2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0XD3AC6);
	MakeArray	(0XD3AC6,	0X754);
	MakeName	(0XD3AC6,	"Background00");
	MakeByte	(0XD421A);
	MakeArray	(0XD421A,	0X694);
	MakeName	(0XD421A,	"Background01");
	MakeByte	(0XD48AE);
	MakeArray	(0XD48AE,	0XE08);
	MakeName	(0XD48AE,	"Background02");
	MakeByte	(0XD56B6);
	MakeArray	(0XD56B6,	0XF1A);
	MakeName	(0XD56B6,	"Background03");
	MakeByte	(0XD65D0);
	MakeArray	(0XD65D0,	0X922);
	MakeName	(0XD65D0,	"Background04");
	MakeByte	(0XD6EF2);
	MakeArray	(0XD6EF2,	0X914);
	MakeName	(0XD6EF2,	"Background05");
	MakeByte	(0XD7806);
	MakeArray	(0XD7806,	0XB62);
	MakeName	(0XD7806,	"Background06");
	MakeByte	(0XD8368);
	MakeArray	(0XD8368,	0XCAE);
	MakeName	(0XD8368,	"Background07");
	MakeByte	(0XD9016);
	MakeArray	(0XD9016,	0X1036);
	MakeName	(0XD9016,	"Background08");
	MakeByte	(0XDA04C);
	MakeArray	(0XDA04C,	0XF1E);
	MakeName	(0XDA04C,	"Background09");
	MakeByte	(0XDAF6A);
	MakeArray	(0XDAF6A,	0X1022);
	MakeName	(0XDAF6A,	"Background10");
	MakeByte	(0XDBF8C);
	MakeArray	(0XDBF8C,	0XE32);
	MakeName	(0XDBF8C,	"Background11");
	MakeByte	(0XDCDBE);
	MakeArray	(0XDCDBE,	0X872);
	MakeName	(0XDCDBE,	"Background12");
	MakeByte	(0XDD630);
	MakeArray	(0XDD630,	0XE5C);
	MakeName	(0XDD630,	"Background13");
	MakeByte	(0XDE48C);
	MakeArray	(0XDE48C,	0XAB6);
	MakeName	(0XDE48C,	"Background14");
	MakeByte	(0XDEF42);
	MakeArray	(0XDEF42,	0X908);
	MakeName	(0XDEF42,	"Background15");
	MakeByte	(0XDF84A);
	MakeArray	(0XDF84A,	0XC3C);
	MakeName	(0XDF84A,	"Background16");
	MakeByte	(0XE0486);
	MakeArray	(0XE0486,	0XB10);
	MakeName	(0XE0486,	"Background17");
	MakeByte	(0XE0F96);
	MakeArray	(0XE0F96,	0XEC8);
	MakeName	(0XE0F96,	"Background18");
	MakeByte	(0XE1E5E);
	MakeArray	(0XE1E5E,	0XD7A);
	MakeName	(0XE1E5E,	"Background19");
	MakeByte	(0XE2BD8);
	MakeArray	(0XE2BD8,	0X748);
	MakeName	(0XE2BD8,	"Background20");
	MakeByte	(0XE3320);
	MakeArray	(0XE3320,	0X588);
	MakeName	(0XE3320,	"Background21");
	MakeByte	(0XE38A8);
	MakeArray	(0XE38A8,	0XA96);
	MakeName	(0XE38A8,	"Background22");
	MakeByte	(0XE433E);
	MakeArray	(0XE433E,	0XC6E);
	MakeName	(0XE433E,	"Background23");
	MakeByte	(0XE4FAC);
	MakeArray	(0XE4FAC,	0XAEA);
	MakeName	(0XE4FAC,	"Background24");
	MakeByte	(0XE5A96);
	MakeArray	(0XE5A96,	0XEB8);
	MakeName	(0XE5A96,	"Background25");
	MakeByte	(0XE694E);
	MakeArray	(0XE694E,	0X1286);
	MakeName	(0XE694E,	"Background26");
	MakeByte	(0XE7BD4);
	MakeArray	(0XE7BD4,	0X1262);
	MakeName	(0XE7BD4,	"Background27");
	MakeByte	(0XE8E36);
	MakeArray	(0XE8E36,	0X5E8);
	MakeName	(0XE8E36,	"Background28");
	MakeByte	(0XE941E);
	MakeArray	(0XE941E,	0X50E);
	MakeName	(0XE941E,	"Background29");
	MakeByte	(0XE992C);
	MakeArray	(0XE992C,	0X9AA);
	MakeName	(0XE992C,	"Background30");
	MakeByte	(0XEA2D6);
	MakeArray	(0XEA2D6,	0XAFA);
	MakeName	(0XEA2D6,	"Background31");
	MakeByte	(0XEADD0);
	MakeArray	(0XEADD0,	0X3C4);
	MakeName	(0XEADD0,	"Background32");
	MakeByte	(0XEB194);
	MakeArray	(0XEB194,	0X37A);
	MakeName	(0XEB194,	"Background33");
	MakeByte	(0XEB50E);
	MakeArray	(0XEB50E,	0X730);
	MakeName	(0XEB50E,	"Background34");
	MakeByte	(0XEBC3E);
	MakeArray	(0XEBC3E,	0X590);
	MakeName	(0XEBC3E,	"Background35");
	MakeByte	(0XEC1CE);
	MakeArray	(0XEC1CE,	0X1380);
	MakeName	(0XEC1CE,	"Background36");
	MakeByte	(0XED54E);
	MakeArray	(0XED54E,	0XF50);
	MakeName	(0XED54E,	"Background37");
	MakeByte	(0XEE49E);
	MakeArray	(0XEE49E,	0XD14);
	MakeName	(0XEE49E,	"Background38");
	MakeByte	(0XEF1B2);
	MakeArray	(0XEF1B2,	0XEF0);
	MakeName	(0XEF1B2,	"Background39");
	MakeByte	(0XF00A2);
	MakeArray	(0XF00A2,	0XF40);
	MakeName	(0XF00A2,	"Background40");
	MakeByte	(0XF0FE2);
	MakeArray	(0XF0FE2,	0XDE8);
	MakeName	(0XF0FE2,	"Background41");
	MakeByte	(0XF1DCA);
	MakeArray	(0XF1DCA,	0XA3C);
	MakeName	(0XF1DCA,	"Background42");
	MakeByte	(0XF2806);
	MakeArray	(0XF2806,	0XCE8);
	MakeName	(0XF2806,	"Background43");
	MakeByte	(0XF34EE);
	MakeArray	(0XF34EE,	0X94E);
	MakeName	(0XF34EE,	"Background44");
	MakeByte	(0XF3E3C);
	MakeArray	(0XF3E3C,	0X9DE);
	MakeName	(0XF3E3C,	"Background45");
	MakeByte	(0XF481A);
	MakeArray	(0XF481A,	0XE4C);
	MakeName	(0XF481A,	"Background46");
	MakeByte	(0XF5666);
	MakeArray	(0XF5666,	0XAB6);
	MakeName	(0XF5666,	"Background47");
	MakeByte	(0XF611C);
	MakeArray	(0XF611C,	0X99E);
	MakeName	(0XF611C,	"Background48");
	MakeByte	(0XF6ABA);
	MakeArray	(0XF6ABA,	0X938);
	MakeName	(0XF6ABA,	"Background49");
	MakeByte	(0XF73F2);
	MakeArray	(0XF73F2,	0X109C);
	MakeName	(0XF73F2,	"Background50");
	MakeByte	(0XF848E);
	MakeArray	(0XF848E,	0X10BC);
	MakeName	(0XF848E,	"Background51");
	MakeByte	(0XF954A);
	MakeArray	(0XF954A,	0X11EE);
	MakeName	(0XF954A,	"Background52");
	MakeByte	(0XFA738);
	MakeArray	(0XFA738,	0X11EA);
	MakeName	(0XFA738,	"Background53");
	MakeByte	(0XFB922);
	MakeArray	(0XFB922,	0X104C);
	MakeName	(0XFB922,	"Background54");
	MakeByte	(0XFC96E);
	MakeArray	(0XFC96E,	0XE54);
	MakeName	(0XFC96E,	"Background55");
	MakeByte	(0XFD7C2);
	MakeArray	(0XFD7C2,	0XC30);
	MakeName	(0XFD7C2,	"Background56");
	MakeByte	(0XFE3F2);
	MakeArray	(0XFE3F2,	0XA32);
	MakeName	(0XFE3F2,	"Background57");
	MakeByte	(0XFEE24);
	MakeArray	(0XFEE24,	0X6C4);
	MakeName	(0XFEE24,	"Background58");
	MakeByte	(0XFF4E8);
	MakeArray	(0XFF4E8,	0X855);
	MakeName	(0XFF4E8,	"Background59");
	MakeArray	(0XFFD3D,	0X2C3);
	MakeDword	(x=0X100000);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X100000,	"p_pt_EnemyBattleSprites");
	MakeDword	(x=0X100004);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X100004,	"p_pt_EnemyAnimations");
	MakeDword	(x=0X100008);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X100008,	"pt_EnemyBattleSprites");
	MakeDword	(x=0X10000C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100010);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100014);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100018);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10001C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100020);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100024);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100028);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10002C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100030);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100034);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100038);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10003C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100040);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100044);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100048);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10004C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100050);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100054);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100058);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10005C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100060);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100064);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100068);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10006C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100070);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100074);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100078);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10007C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100080);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100084);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100088);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10008C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100090);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100094);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X100098);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X10009C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1000CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1000D0);
	MakeArray	(0X1000D0,	0X892);
	MakeName	(0X1000D0,	"EnemyBattleSprite00");
	MakeByte	(0X100962);
	MakeArray	(0X100962,	0XCEE);
	MakeName	(0X100962,	"EnemyBattleSprite01");
	MakeByte	(0X101650);
	MakeArray	(0X101650,	0XAB0);
	MakeName	(0X101650,	"EnemyBattleSprite02");
	MakeByte	(0X102100);
	MakeArray	(0X102100,	0X115C);
	MakeName	(0X102100,	"EnemyBattleSprite03");
	MakeByte	(0X10325C);
	MakeArray	(0X10325C,	0XFAE);
	MakeName	(0X10325C,	"EnemyBattleSprite04");
	MakeByte	(0X10420A);
	MakeArray	(0X10420A,	0XF1C);
	MakeName	(0X10420A,	"EnemyBattleSprite05");
	MakeByte	(0X105126);
	MakeArray	(0X105126,	0XB68);
	MakeName	(0X105126,	"EnemyBattleSprite06");
	MakeByte	(0X105C8E);
	MakeArray	(0X105C8E,	0XC38);
	MakeName	(0X105C8E,	"EnemyBattleSprite07");
	MakeByte	(0X1068C6);
	MakeArray	(0X1068C6,	0X1116);
	MakeName	(0X1068C6,	"EnemyBattleSprite08");
	MakeByte	(0X1079DC);
	MakeArray	(0X1079DC,	0X8B0);
	MakeName	(0X1079DC,	"EnemyBattleSprite09");
	MakeByte	(0X10828C);
	MakeArray	(0X10828C,	0X838);
	MakeName	(0X10828C,	"EnemyBattleSprite10");
	MakeByte	(0X108AC4);
	MakeArray	(0X108AC4,	0XBD8);
	MakeName	(0X108AC4,	"EnemyBattleSprite11");
	MakeByte	(0X10969C);
	MakeArray	(0X10969C,	0XAB8);
	MakeName	(0X10969C,	"EnemyBattleSprite12");
	MakeByte	(0X10A154);
	MakeArray	(0X10A154,	0X9D0);
	MakeName	(0X10A154,	"EnemyBattleSprite13");
	MakeByte	(0X10AB24);
	MakeArray	(0X10AB24,	0XE72);
	MakeName	(0X10AB24,	"EnemyBattleSprite14");
	MakeByte	(0X10B996);
	MakeArray	(0X10B996,	0X85C);
	MakeName	(0X10B996,	"EnemyBattleSprite15");
	MakeByte	(0X10C1F2);
	MakeArray	(0X10C1F2,	0X788);
	MakeName	(0X10C1F2,	"EnemyBattleSprite16");
	MakeByte	(0X10C97A);
	MakeArray	(0X10C97A,	0XC48);
	MakeName	(0X10C97A,	"EnemyBattleSprite17");
	MakeByte	(0X10D5C2);
	MakeArray	(0X10D5C2,	0X910);
	MakeName	(0X10D5C2,	"EnemyBattleSprite18");
	MakeByte	(0X10DED2);
	MakeArray	(0X10DED2,	0X1032);
	MakeName	(0X10DED2,	"EnemyBattleSprite19");
	MakeByte	(0X10EF04);
	MakeArray	(0X10EF04,	0X1148);
	MakeName	(0X10EF04,	"EnemyBattleSprite20");
	MakeByte	(0X11004C);
	MakeArray	(0X11004C,	0X192C);
	MakeName	(0X11004C,	"EnemyBattleSprite21");
	MakeByte	(0X111978);
	MakeArray	(0X111978,	0X106C);
	MakeName	(0X111978,	"EnemyBattleSprite22");
	MakeByte	(0X1129E4);
	MakeArray	(0X1129E4,	0X19A8);
	MakeName	(0X1129E4,	"EnemyBattleSprite23");
	MakeByte	(0X11438C);
	MakeArray	(0X11438C,	0XCBE);
	MakeName	(0X11438C,	"EnemyBattleSprite24");
	MakeByte	(0X11504A);
	MakeArray	(0X11504A,	0X8CA);
	MakeName	(0X11504A,	"EnemyBattleSprite25");
	MakeByte	(0X115914);
	MakeArray	(0X115914,	0X710);
	MakeName	(0X115914,	"EnemyBattleSprite26");
	MakeByte	(0X116024);
	MakeArray	(0X116024,	0X6B2);
	MakeName	(0X116024,	"EnemyBattleSprite27");
	MakeByte	(0X1166D6);
	MakeArray	(0X1166D6,	0XBCA);
	MakeName	(0X1166D6,	"EnemyBattleSprite28");
	MakeByte	(0X1172A0);
	MakeArray	(0X1172A0,	0XC68);
	MakeName	(0X1172A0,	"EnemyBattleSprite29");
	MakeByte	(0X117F08);
	MakeArray	(0X117F08,	0X5AE);
	MakeName	(0X117F08,	"EnemyBattleSprite30");
	MakeByte	(0X1184B6);
	MakeArray	(0X1184B6,	0XED6);
	MakeName	(0X1184B6,	"EnemyBattleSprite31");
	MakeByte	(0X11938C);
	MakeArray	(0X11938C,	0XC88);
	MakeName	(0X11938C,	"EnemyBattleSprite32");
	MakeByte	(0X11A014);
	MakeArray	(0X11A014,	0X50E);
	MakeName	(0X11A014,	"EnemyBattleSprite33");
	MakeByte	(0X11A522);
	MakeArray	(0X11A522,	0X1D5A);
	MakeName	(0X11A522,	"EnemyBattleSprite34");
	MakeByte	(0X11C27C);
	MakeArray	(0X11C27C,	0X112A);
	MakeName	(0X11C27C,	"EnemyBattleSprite35");
	MakeByte	(0X11D3A6);
	MakeArray	(0X11D3A6,	0XEA4);
	MakeName	(0X11D3A6,	"EnemyBattleSprite36");
	MakeByte	(0X11E24A);
	MakeArray	(0X11E24A,	0X1104);
	MakeName	(0X11E24A,	"EnemyBattleSprite37");
	MakeByte	(0X11F34E);
	MakeArray	(0X11F34E,	0X21EA);
	MakeName	(0X11F34E,	"EnemyBattleSprite38");
	MakeByte	(0X121538);
	MakeArray	(0X121538,	0XD1A);
	MakeName	(0X121538,	"EnemyBattleSprite39");
	MakeDword	(x=0X122252);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X122252,	"pt_EnemyAnimations");
	MakeDword	(x=0X122256);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12225A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12225E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122262);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122266);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12226A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12226E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122272);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122276);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12227A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12227E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122282);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122286);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12228A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12228E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122292);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122296);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12229A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12229E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222D2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1222FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122302);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122306);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12230A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12230E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122312);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122316);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12231A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12231E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122322);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122326);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12232A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12232E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122332);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122336);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12233A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12233E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122342);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122346);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12234A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12234E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122352);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122356);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12235A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_8(void) {
        auto x;
#define id x

	MakeDword	(x=0X12235E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122362);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X122366);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12236A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12236E);
	MakeArray	(0X12236E,	0XC);
	MakeName	(0X12236E,	"EnemyAnimation000");
	MakeByte	(0X12237A);
	MakeArray	(0X12237A,	0XC);
	MakeName	(0X12237A,	"EnemyAnimation001");
	MakeByte	(0X122386);
	MakeArray	(0X122386,	0XC);
	MakeName	(0X122386,	"EnemyAnimation002");
	MakeByte	(0X122392);
	MakeArray	(0X122392,	0XC);
	MakeName	(0X122392,	"EnemyAnimation003");
	MakeByte	(0X12239E);
	MakeArray	(0X12239E,	0XC);
	MakeName	(0X12239E,	"EnemyAnimation004");
	MakeByte	(0X1223AA);
	MakeArray	(0X1223AA,	0XC);
	MakeName	(0X1223AA,	"EnemyAnimation005");
	MakeByte	(0X1223B6);
	MakeArray	(0X1223B6,	0X10);
	MakeName	(0X1223B6,	"EnemyAnimation006");
	MakeByte	(0X1223C6);
	MakeArray	(0X1223C6,	0XC);
	MakeName	(0X1223C6,	"EnemyAnimation007");
	MakeByte	(0X1223D2);
	MakeArray	(0X1223D2,	0X8);
	MakeName	(0X1223D2,	"EnemyAnimation008");
	MakeByte	(0X1223DA);
	MakeArray	(0X1223DA,	0XC);
	MakeName	(0X1223DA,	"EnemyAnimation009");
	MakeByte	(0X1223E6);
	MakeArray	(0X1223E6,	0XC);
	MakeName	(0X1223E6,	"EnemyAnimation010");
	MakeByte	(0X1223F2);
	MakeArray	(0X1223F2,	0X1C);
	MakeName	(0X1223F2,	"EnemyAnimation011");
	MakeByte	(0X12240E);
	MakeArray	(0X12240E,	0X14);
	MakeName	(0X12240E,	"EnemyAnimation012");
	MakeByte	(0X122422);
	MakeArray	(0X122422,	0XC);
	MakeName	(0X122422,	"EnemyAnimation013");
	MakeByte	(0X12242E);
	MakeArray	(0X12242E,	0XC);
	MakeName	(0X12242E,	"EnemyAnimation014");
	MakeByte	(0X12243A);
	MakeArray	(0X12243A,	0X24);
	MakeName	(0X12243A,	"EnemyAnimation015");
	MakeByte	(0X12245E);
	MakeArray	(0X12245E,	0XC);
	MakeName	(0X12245E,	"EnemyAnimation016");
	MakeByte	(0X12246A);
	MakeArray	(0X12246A,	0X10);
	MakeName	(0X12246A,	"EnemyAnimation017");
	MakeByte	(0X12247A);
	MakeArray	(0X12247A,	0X10);
	MakeName	(0X12247A,	"EnemyAnimation018");
	MakeByte	(0X12248A);
	MakeArray	(0X12248A,	0XC);
	MakeName	(0X12248A,	"EnemyAnimation019");
	MakeByte	(0X122496);
	MakeArray	(0X122496,	0XC);
	MakeName	(0X122496,	"EnemyAnimation020");
	MakeByte	(0X1224A2);
	MakeArray	(0X1224A2,	0XC);
	MakeName	(0X1224A2,	"EnemyAnimation021");
	MakeByte	(0X1224AE);
	MakeArray	(0X1224AE,	0XC);
	MakeName	(0X1224AE,	"EnemyAnimation022");
	MakeByte	(0X1224BA);
	MakeArray	(0X1224BA,	0X10);
	MakeName	(0X1224BA,	"EnemyAnimation023");
	MakeByte	(0X1224CA);
	MakeArray	(0X1224CA,	0X8);
	MakeName	(0X1224CA,	"EnemyAnimation024");
	MakeByte	(0X1224D2);
	MakeArray	(0X1224D2,	0XC);
	MakeName	(0X1224D2,	"EnemyAnimation025");
	MakeByte	(0X1224DE);
	MakeArray	(0X1224DE,	0XC);
	MakeName	(0X1224DE,	"EnemyAnimation026");
	MakeByte	(0X1224EA);
	MakeArray	(0X1224EA,	0XC);
	MakeName	(0X1224EA,	"EnemyAnimation027");
	MakeByte	(0X1224F6);
	MakeArray	(0X1224F6,	0XC);
	MakeName	(0X1224F6,	"EnemyAnimation028");
	MakeByte	(0X122502);
	MakeArray	(0X122502,	0X8);
	MakeName	(0X122502,	"EnemyAnimation029");
	MakeByte	(0X12250A);
	MakeArray	(0X12250A,	0XC);
	MakeName	(0X12250A,	"EnemyAnimation030");
	MakeByte	(0X122516);
	MakeArray	(0X122516,	0XC);
	MakeName	(0X122516,	"EnemyAnimation031");
	MakeByte	(0X122522);
	MakeArray	(0X122522,	0XC);
	MakeName	(0X122522,	"EnemyAnimation032");
	MakeByte	(0X12252E);
	MakeArray	(0X12252E,	0X8);
	MakeName	(0X12252E,	"EnemyAnimation033");
	MakeByte	(0X122536);
	MakeArray	(0X122536,	0X10);
	MakeName	(0X122536,	"EnemyAnimation034");
	MakeByte	(0X122546);
	MakeArray	(0X122546,	0XC);
	MakeName	(0X122546,	"EnemyAnimation035");
	MakeByte	(0X122552);
	MakeArray	(0X122552,	0X30);
	MakeName	(0X122552,	"EnemyAnimation036");
	MakeByte	(0X122582);
	MakeArray	(0X122582,	0XC);
	MakeName	(0X122582,	"EnemyAnimation037");
	MakeByte	(0X12258E);
	MakeArray	(0X12258E,	0X10);
	MakeName	(0X12258E,	"EnemyAnimation038");
	MakeByte	(0X12259E);
	MakeArray	(0X12259E,	0XC);
	MakeName	(0X12259E,	"EnemyAnimation039");
	MakeByte	(0X1225AA);
	MakeArray	(0X1225AA,	0X14);
	MakeName	(0X1225AA,	"EnemyAnimation040");
	MakeByte	(0X1225BE);
	MakeArray	(0X1225BE,	0XC);
	MakeName	(0X1225BE,	"EnemyAnimation041");
	MakeByte	(0X1225CA);
	MakeArray	(0X1225CA,	0XC);
	MakeName	(0X1225CA,	"EnemyAnimation042");
	MakeByte	(0X1225D6);
	MakeArray	(0X1225D6,	0X10);
	MakeName	(0X1225D6,	"EnemyAnimation043");
	MakeByte	(0X1225E6);
	MakeArray	(0X1225E6,	0X10);
	MakeName	(0X1225E6,	"EnemyAnimation044");
	MakeByte	(0X1225F6);
	MakeArray	(0X1225F6,	0X10);
	MakeName	(0X1225F6,	"EnemyAnimation045");
	MakeByte	(0X122606);
	MakeArray	(0X122606,	0X10);
	MakeName	(0X122606,	"EnemyAnimation046");
	MakeByte	(0X122616);
	MakeArray	(0X122616,	0X8);
	MakeName	(0X122616,	"EnemyAnimation047");
	MakeByte	(0X12261E);
	MakeArray	(0X12261E,	0XC);
	MakeName	(0X12261E,	"EnemyAnimation048");
	MakeByte	(0X12262A);
	MakeArray	(0X12262A,	0X8);
	MakeName	(0X12262A,	"EnemyAnimation049");
	MakeByte	(0X122632);
	MakeArray	(0X122632,	0X8);
	MakeName	(0X122632,	"EnemyAnimation050");
	MakeByte	(0X12263A);
	MakeArray	(0X12263A,	0X8);
	MakeName	(0X12263A,	"EnemyAnimation051");
	MakeByte	(0X122642);
	MakeArray	(0X122642,	0XC);
	MakeName	(0X122642,	"EnemyAnimation052");
	MakeByte	(0X12264E);
	MakeArray	(0X12264E,	0XC);
	MakeName	(0X12264E,	"EnemyAnimation053");
	MakeByte	(0X12265A);
	MakeArray	(0X12265A,	0XC);
	MakeName	(0X12265A,	"EnemyAnimation054");
	MakeByte	(0X122666);
	MakeArray	(0X122666,	0X8);
	MakeName	(0X122666,	"EnemyAnimation055");
	MakeByte	(0X12266E);
	MakeArray	(0X12266E,	0XC);
	MakeName	(0X12266E,	"EnemyAnimation056");
	MakeByte	(0X12267A);
	MakeArray	(0X12267A,	0XC);
	MakeName	(0X12267A,	"EnemyAnimation057");
	MakeByte	(0X122686);
	MakeArray	(0X122686,	0XC);
	MakeName	(0X122686,	"EnemyAnimation058");
	MakeByte	(0X122692);
	MakeArray	(0X122692,	0XC);
	MakeName	(0X122692,	"EnemyAnimation059");
	MakeByte	(0X12269E);
	MakeArray	(0X12269E,	0XC);
	MakeName	(0X12269E,	"EnemyAnimation060");
	MakeByte	(0X1226AA);
	MakeArray	(0X1226AA,	0XC);
	MakeName	(0X1226AA,	"EnemyAnimation061");
	MakeByte	(0X1226B6);
	MakeArray	(0X1226B6,	0X20);
	MakeName	(0X1226B6,	"EnemyAnimation062");
	MakeByte	(0X1226D6);
	MakeArray	(0X1226D6,	0X8);
	MakeName	(0X1226D6,	"EnemyAnimation063");
	MakeByte	(0X1226DE);
	MakeArray	(0X1226DE,	0X10);
	MakeName	(0X1226DE,	"EnemyAnimation064");
	MakeByte	(0X1226EE);
	MakeArray	(0X1226EE,	0X1C);
	MakeName	(0X1226EE,	"EnemyAnimation065");
	MakeByte	(0X12270A);
	MakeArray	(0X12270A,	0X1C);
	MakeName	(0X12270A,	"EnemyAnimation066");
	MakeByte	(0X122726);
	MakeArray	(0X122726,	0XC);
	MakeName	(0X122726,	"EnemyAnimation067");
	MakeByte	(0X122732);
	MakeArray	(0X122732,	0XC);
	MakeName	(0X122732,	"EnemyAnimation068");
	MakeByte	(0X12273E);
	MakeArray	(0X12273E,	0XC);
	MakeName	(0X12273E,	"EnemyAnimation069");
	MakeByte	(0X12274A);
	MakeArray	(0X12274A,	0XE);
	MakeName	(0X12274A,	"EnemyAnimation070");
	MakeArray	(0X122758,	0X18A8);
	MakeCode	(0X124000);
	MakeCode	(0X124004);
	MakeCode	(0X124008);
	MakeCode	(0X12400C);
	MakeCode	(0X124010);
	MakeName	(0X124010,	"j_ExecutePostBattleScript");
	MakeCode	(0X124014);
	MakeCode	(0X124018);
	MakeCode	(0X12401C);
	MakeCode	(0X124020);
	MakeCode	(0X124024);
	MakeName	(0X124024,	"j_ExecuteBattlesceneScript");
	MakeCode	(0X124028);
	MakeCode	(0X12402C);
	MakeName	(0X12402C,	"j_LoadBattlesceneBackgrounds");
	MakeDword	(x=0X124030);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124030,	"p_SpellTiles_Freeze");
	MakeDword	(x=0X124034);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124034,	"p_SpellTiles_Bolt");
	MakeDword	(x=0X124038);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124038,	"p_SpellTiles_Blaze");
	MakeDword	(x=0X12403C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X12403C,	"p_SpellTiles_Status");
	MakeDword	(x=0X124040);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124040,	"p_SpellTiles_Desoul");
	MakeDword	(x=0X124044);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124044,	"p_SpellTiles_HealAuraDetox");
	MakeDword	(x=0X124048);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124048,	"p_SpellTiles_MachineGun");
	MakeDword	(x=0X12404C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X12404C,	"p_SpellTiles_FlyingDragon");
	MakeDword	(x=0X124050);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124050,	"p_SpellTiles_EnergyBlast");
	MakeDword	(x=0X124054);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124054,	"p_SpellTiles_Laser");
	MakeDword	(x=0X124058);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124058,	"p_SpellTiles_LightningBreath");
	MakeDword	(x=0X12405C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X12405C,	"p_SpellTiles_BusterShot");
	MakeDword	(x=0X124060);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124060,	"p_SpellTiles_FireBreath");
	MakeDword	(x=0X124064);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124064,	"p_SpellTiles_DemonBlaze");
	MakeDword	(x=0X124068);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X12406C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X124070);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X124074);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124074,	"p_ChapterEndTiles");
	MakeDword	(x=0X124078);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124078,	"p_IntroTiles_SpeckOfLight");
	MakeCode	(0X12407C);
	ExtLinA		(0X124082,	0,	"                module");
	MakeCode	(x=0X124082);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124082,	"ExecuteBattlesceneScript");
	MakeCode	(x=0X124086);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12408A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12409E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1240A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1240A8);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeName	(0X1240A8,	"rjt_BattlesceneScriptCommands");
	MakeWord	(x=0X1240AA);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240AC);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240AE);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240B0);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240B2);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240B4);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240B6);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240B8);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240BA);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240BC);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240BE);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240C0);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240C2);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240C4);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240C6);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240C8);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240CA);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeWord	(x=0X1240CC);
	OpOff		(x,	0,	0X1240A8);
	OpOff		(x,	128,	0X1240A8);
	OpOff		(x,	1,	0X1240A8);
	OpOff		(x,	129,	0X1240A8);
	MakeCode	(0X1240CE);
	ExtLinB		(0X1240D0,	0,	"                modend");
	MakeCode	(0X1240D2);
	MakeName	(0X1240D2,	"bsc00_");
	MakeCode	(x=0X1240D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1240DE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1240E2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1240E6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1240EC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1240F6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1240FA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1240FE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124108);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12410C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124110);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124116);
	OpDecimal	(x,	0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X12411C);
	MakeArray	(0X12411C,	0X4);
	MakeCode	(0X124120);
	MakeByte	(0X124132);
	MakeArray	(0X124132,	0X4);
	MakeCode	(0X124136);
	MakeCode	(x=0X12413A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12414A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124150);
	OpHex		(x,	0);
	MakeCode	(x=0X124160);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124176);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12417C);
	OpHex		(x,	0);
	MakeCode	(x=0X1241D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1241DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1241EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1241FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124204);
	OpHex		(x,	0);
	MakeCode	(x=0X124216);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12421C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12422A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124230);
	OpHex		(x,	0);
	MakeCode	(x=0X124240);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124244);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12424A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12425C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124266);
	MakeCode	(x=0X124274);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12428E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124292);
	OpHex		(x,	0);
	MakeCode	(x=0X1242A6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1242AC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1242B2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1242B8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1242BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1242CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1242D2);
	OpHex		(x,	0);
	MakeCode	(x=0X1242E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1242FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124300);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12430C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12431A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124322);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124328);
	OpHex		(x,	0);
	MakeCode	(x=0X12433A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124344);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12435C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124360);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12436C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12437A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12438C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124390);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124396);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12439A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1243A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1243A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1243C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1243CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1243DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1243EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1243F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124402);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124408);
	OpHex		(x,	0);
	MakeCode	(x=0X12442C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124432);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124438);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124442);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124452);
	OpEnumEx		(x,	0,	GetEnum("Fading"),0);
	MakeCode	(x=0X124490);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1244CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1244E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1244E8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1244F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1244FE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12450E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124516);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12452E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124534);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124546);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12454C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12455C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X124564);
	MakeCode	(x=0X1245F2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1245F2,	"bsc01_");
	MakeCode	(x=0X124628);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124632);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124666);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12466E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12467A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124686);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124690);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12469A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1246BE);
	MakeCode	(0X1246FE);
	MakeCode	(x=0X124704);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X124704,	"bsc02_");
	MakeCode	(0X12471C);
	MakeName	(0X12471C,	"bsc12_");
	MakeCode	(x=0X12471E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12473C);
	MakeArray	(0X12473C,	0X4);
	MakeCode	(0X124740);
	MakeCode	(x=0X124754);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124760);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12476C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124772);
	MakeName	(0X124772,	"bsc04_");
	MakeCode	(x=0X12477A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12478A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124790);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124798);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X124798,	"bsc03_");
	MakeCode	(x=0X12479E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1247AC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1247B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1247BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1247D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1247E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1247EE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1247F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124800,	"bsc17_");
	MakeCode	(x=0X124806);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124842);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124854);
	MakeCode	(0X124860);
	MakeCode	(x=0X12486A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12487C);
	MakeCode	(x=0X124882);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1248A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124922);
	MakeCode	(x=0X124926);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124930);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X124936);
	MakeArray	(0X124936,	0X4);
	MakeCode	(0X12493A);
	MakeCode	(x=0X124968);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1249AC);
	MakeCode	(0X1249D4);
	MakeName	(0X1249D4,	"bsc16_");
	MakeCode	(x=0X1249DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1249DC,	"bsc09_executeAllyReaction");
	MakeCode	(x=0X124A0C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124A10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X124A14);
	OpOff		(x,	0,	0X124A14);
	OpOff		(x,	128,	0X124A14);
	OpOff		(x,	1,	0X124A14);
	OpOff		(x,	129,	0X124A14);
	MakeWord	(x=0X124A16);
	OpOff		(x,	0,	0X124A14);
	OpOff		(x,	128,	0X124A14);
	OpOff		(x,	1,	0X124A14);
	OpOff		(x,	129,	0X124A14);
	MakeWord	(x=0X124A18);
	OpOff		(x,	0,	0X124A14);
	OpOff		(x,	128,	0X124A14);
	OpOff		(x,	1,	0X124A14);
	OpOff		(x,	129,	0X124A14);
	MakeCode	(0X124A1A);
	MakeByte	(0X124A22);
	MakeArray	(0X124A22,	0X4);
	MakeCode	(0X124A26);
	MakeCode	(x=0X124A56);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124A5E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124A66);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124B08);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124B22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124B4C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X124B4E);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X124B50);
	MakeCode	(x=0X124B52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124B52,	"bsc10_executeEnemyReaction");
	MakeCode	(x=0X124B82);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124B86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X124B8A);
	OpOff		(x,	0,	0X124B8A);
	OpOff		(x,	128,	0X124B8A);
	OpOff		(x,	1,	0X124B8A);
	OpOff		(x,	129,	0X124B8A);
	MakeWord	(x=0X124B8C);
	OpOff		(x,	0,	0X124B8A);
	OpOff		(x,	128,	0X124B8A);
	OpOff		(x,	1,	0X124B8A);
	OpOff		(x,	129,	0X124B8A);
	MakeWord	(x=0X124B8E);
	OpOff		(x,	0,	0X124B8A);
	OpOff		(x,	128,	0X124B8A);
	OpOff		(x,	1,	0X124B8A);
	OpOff		(x,	129,	0X124B8A);
	MakeCode	(0X124B90);
	MakeByte	(0X124B98);
	MakeArray	(0X124B98,	0X4);
	MakeCode	(0X124B9C);
	MakeCode	(x=0X124C22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124C3C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124C52);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X124C54);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X124C56);
	MakeCode	(0X124C58);
	MakeCode	(x=0X124C60);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124C70);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124C80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124C90);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124CA2);
	MakeCode	(x=0X124CB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124CCA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124CD4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124CDC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124CE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124D1E);
	MakeCode	(x=0X124D26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124D46);
	MakeCode	(x=0X124D4E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124D5E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124D6E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124D7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124D90);
	MakeCode	(x=0X124D9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124DB4);
	MakeCode	(x=0X124DBC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124DCE);
	MakeName	(0X124DCE,	"bsc11_giveEXP");
	MakeCode	(x=0X124DD0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124DE0);
	OpDecimal	(x,	0);
	MakeCode	(0X124DEE);
	MakeName	(0X124DEE,	"bsc13_");
	MakeCode	(x=0X124DF2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124DFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124DFA,	"bsc14_");
	MakeCode	(0X124E02);
	MakeName	(0X124E02,	"bsc18_displayMessageWithNoWait");
	MakeCode	(x=0X124E04);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124E08);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124E0C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124E12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124E44);
	MakeName	(0X124E44,	"bsc15_displayMessage");
	MakeCode	(x=0X124E46);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124E4A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124E4E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124E52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124E5A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124E8C);
	MakeCode	(x=0X124E8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124EA0);
	MakeCode	(x=0X124EA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X124EA8,	"\"[Dict][Line]\"");
	MakeCode	(x=0X124EAC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X124EB0);
	MakeName	(0X124EB8,	"SpeedUpBattleMessage");
	MakeCode	(x=0X124ECC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X124ECC,	"RefreshSpellAnimationScreenTint");
	MakeCode	(x=0X124ED6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124EDC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124EE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X124EE8,	"00: Blaze");
	MakeWord	(x=0X124EE8);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeName	(0X124EE8,	"rjt_ScreenTintRefreshes");
	MakeRptCmt	(0X124EEA,	"01: Freeze");
	MakeWord	(x=0X124EEA);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124EEC,	"02: Ice Breath");
	MakeWord	(x=0X124EEC);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124EEE,	"03: Flying Dragons");
	MakeWord	(x=0X124EEE);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124EF0,	"04: Assault Shell");
	MakeWord	(x=0X124EF0);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124EF2,	"05: Desoul");
	MakeWord	(x=0X124EF2);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124EF4,	"06: Debuff");
	MakeWord	(x=0X124EF4);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124EF6,	"07: Bolt");
	MakeWord	(x=0X124EF6);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124EF8,	"08: Healing");
	MakeWord	(x=0X124EF8);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124EFA,	"09: Healing");
	MakeWord	(x=0X124EFA);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124EFC,	"10: Fire Breath");
	MakeWord	(x=0X124EFC);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124EFE,	"11: Demon Blaze");
	MakeWord	(x=0X124EFE);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F00,	"12: Nothing");
	MakeWord	(x=0X124F00);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F02,	"13: Nothing");
	MakeWord	(x=0X124F02);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F04,	"14: Nothing");
	MakeWord	(x=0X124F04);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F06,	"15: Machine Gun");
	MakeWord	(x=0X124F06);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F08,	"16: Crossbow");
	MakeWord	(x=0X124F08);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F0A,	"17: Lightning Breath");
	MakeWord	(x=0X124F0A);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F0C,	"18: Laser");
	MakeWord	(x=0X124F0C);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F0E,	"19: Buster Shot");
	MakeWord	(x=0X124F0E);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F10,	"20: Sonic Wave");
	MakeWord	(x=0X124F10);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F12,	"21: Sonic Blast");
	MakeWord	(x=0X124F12);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F14,	"22: (unused)");
	MakeWord	(x=0X124F14);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F16,	"23: (unused)");
	MakeWord	(x=0X124F16);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeRptCmt	(0X124F18,	"24: (unused)");
	MakeWord	(x=0X124F18);
	OpOff		(x,	0,	0X124EE8);
	OpOff		(x,	128,	0X124EE8);
	OpOff		(x,	1,	0X124EE8);
	OpOff		(x,	129,	0X124EE8);
	MakeCode	(0X124F1A);
	MakeName	(0X124F1A,	"RefreshScreenTint_None");
	MakeCode	(x=0X124F1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124F24);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X124F38);
	MakeName	(0X124F38,	"bsc08_");
	MakeCode	(x=0X124F3A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124F44);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124F48);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124F4C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X124F56);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124F5C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124F6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124F70);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X124F7A,	"enable VInt");
	MakeCode	(x=0X124F7A);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeCode	(x=0X124F88);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124F94);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124F9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X124FA0,	"enable VInt");
	MakeCode	(x=0X124FA0);
	OpEnumEx		(x,	0,	GetEnum("VIntBitmap"),0);
	MakeCode	(x=0X124FB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124FC4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124FD8);
	OpHex		(x,	0);
	MakeCode	(x=0X124FEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X124FF0);
	OpHex		(x,	0);
	MakeCode	(x=0X12500A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125032);
	OpHex		(x,	0);
	MakeCode	(x=0X125068);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12506C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125082);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125086);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1250C2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1250C8);
	OpHex		(x,	0);
	MakeCode	(x=0X1250E4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12510C);
	OpHex		(x,	0);
	MakeCode	(x=0X12516E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125174);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12517C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12518C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1251A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1251B4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1251B4,	"bsc07_");
	MakeCode	(x=0X1251FE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125208);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12520C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125210);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X12522E);
	MakeCode	(x=0X125232);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125236);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12523A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125248);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12525A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12525E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125264);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12526A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125270);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125276);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12527C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125284);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125288);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1252B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1252B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1252C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1252CA);
	MakeCode	(x=0X1252D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12533A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125342);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X125352);
	MakeCode	(x=0X125356);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12535A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125376);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X125384);
	MakeCode	(0X125398);
	MakeCode	(x=0X12539E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1253A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1253B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1253C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1253CC);
	MakeCode	(x=0X1253E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1253EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125408);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12541E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125432);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12543A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125442);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125452);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12545A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125462);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12546A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125472);
	OpHex		(x,	0);
	MakeCode	(x=0X125478);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125496);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinA		(0X1254A4,	0,	"; sprite properties");
	ExtLinA		(0X1254A4,	1,	"                ");
	MakeWord	(0X1254A4);
	MakeWord	(0X1254A6);
	MakeWord	(0X1254A8);
	MakeWord	(0X1254AA);
	MakeWord	(0X1254AC);
	MakeWord	(0X1254AE);
	MakeWord	(0X1254B0);
	MakeWord	(0X1254B2);
	MakeWord	(0X1254B4);
	MakeWord	(0X1254B6);
	MakeWord	(0X1254B8);
	MakeWord	(0X1254BA);
	MakeWord	(0X1254BC);
	MakeWord	(0X1254BE);
	MakeWord	(0X1254C0);
	MakeWord	(0X1254C2);
	MakeWord	(0X1254C4);
	MakeWord	(0X1254C6);
	MakeWord	(0X1254C8);
	MakeWord	(0X1254CA);
	MakeWord	(0X1254CC);
	MakeWord	(0X1254CE);
	MakeWord	(0X1254D0);
	MakeWord	(0X1254D2);
	MakeWord	(0X1254D4);
	MakeWord	(0X1254D6);
	MakeWord	(0X1254D8);
	MakeWord	(0X1254DA);
	MakeWord	(0X1254DC);
	MakeWord	(0X1254DE);
	MakeWord	(0X1254E0);
	MakeWord	(0X1254E2);
	MakeWord	(0X1254E4);
	MakeWord	(0X1254E6);
	MakeWord	(0X1254E8);
	MakeWord	(0X1254EA);
	MakeWord	(0X1254EC);
	MakeWord	(0X1254EE);
	MakeWord	(0X1254F0);
	MakeWord	(0X1254F2);
	MakeWord	(0X1254F4);
	MakeWord	(0X1254F6);
	MakeWord	(0X1254F8);
	MakeWord	(0X1254FA);
	MakeWord	(0X1254FC);
	MakeWord	(0X1254FE);
	MakeWord	(0X125500);
	MakeWord	(0X125502);
	MakeWord	(0X125504);
	MakeWord	(0X125506);
	MakeWord	(0X125508);
	MakeWord	(0X12550A);
	MakeWord	(0X12550C);
	MakeWord	(0X12550E);
	MakeWord	(0X125510);
	MakeWord	(0X125512);
	MakeWord	(0X125514);
	MakeWord	(0X125516);
	MakeWord	(0X125518);
	MakeWord	(0X12551A);
	MakeWord	(0X12551C);
	MakeWord	(0X12551E);
	MakeWord	(0X125520);
	MakeWord	(0X125522);
	MakeWord	(0X125524);
	MakeWord	(0X125526);
	MakeWord	(0X125528);
	MakeWord	(0X12552A);
	MakeWord	(0X12552C);
	MakeWord	(0X12552E);
	MakeWord	(0X125530);
	MakeWord	(0X125532);
	MakeWord	(0X125534);
	MakeWord	(0X125536);
	MakeWord	(0X125538);
	MakeWord	(0X12553A);
	MakeWord	(0X12553C);
	MakeWord	(0X12553E);
	MakeWord	(0X125540);
	MakeWord	(0X125542);
	MakeWord	(0X125544);
	MakeWord	(0X125546);
	MakeWord	(0X125548);
	MakeWord	(0X12554A);
	MakeWord	(0X12554C);
	MakeWord	(0X12554E);
	MakeWord	(0X125550);
	MakeWord	(0X125552);
	MakeWord	(0X125554);
	MakeWord	(0X125556);
	MakeWord	(0X125558);
	MakeWord	(0X12555A);
	MakeWord	(0X12555C);
	MakeWord	(0X12555E);
	MakeWord	(0X125560);
	MakeWord	(0X125562);
	MakeWord	(0X125564);
	MakeWord	(0X125566);
	MakeWord	(0X125568);
	MakeWord	(0X12556A);
	MakeWord	(0X12556C);
	MakeWord	(0X12556E);
	MakeWord	(0X125570);
	MakeWord	(0X125572);
	MakeWord	(0X125574);
	MakeWord	(0X125576);
	MakeWord	(0X125578);
	MakeWord	(0X12557A);
	MakeWord	(0X12557C);
	MakeWord	(0X12557E);
	MakeWord	(0X125580);
	MakeWord	(0X125582);
	MakeWord	(0X125584);
	MakeWord	(0X125586);
	MakeWord	(0X125588);
	MakeWord	(0X12558A);
	MakeWord	(0X12558C);
	MakeWord	(0X12558E);
	MakeWord	(0X125590);
	MakeWord	(0X125592);
	MakeWord	(0X125594);
	MakeWord	(0X125596);
	MakeWord	(0X125598);
	MakeWord	(0X12559A);
	MakeWord	(0X12559C);
	MakeWord	(0X12559E);
	MakeWord	(0X1255A0);
	MakeWord	(0X1255A2);
	MakeWord	(0X1255A4);
	MakeWord	(0X1255A6);
	MakeWord	(0X1255A8);
	MakeWord	(0X1255AA);
	MakeWord	(0X1255AC);
	MakeWord	(0X1255AE);
	MakeWord	(0X1255B0);
	MakeWord	(0X1255B2);
	MakeWord	(0X1255B4);
	MakeWord	(0X1255B6);
	MakeWord	(0X1255B8);
	MakeWord	(0X1255BA);
	MakeWord	(0X1255BC);
	MakeWord	(0X1255BE);
	MakeWord	(0X1255C0);
	MakeWord	(0X1255C2);
	MakeWord	(0X1255C4);
	MakeWord	(0X1255C6);
	MakeWord	(0X1255C8);
	MakeWord	(0X1255CA);
	MakeCode	(0X1255CC);
	MakeCode	(x=0X1255EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12561E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125626);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12562E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X125636);
	OpHex		(x,	0);
	MakeCode	(x=0X12563C);
	OpHex		(x,	0);
	MakeCode	(x=0X12566E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125674);
	OpHex		(x,	0);
	MakeCode	(x=0X1256A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1256B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1256C8);
	MakeCode	(x=0X1256D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1256D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1256E6);
	MakeCode	(x=0X1256EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1256F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1256FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12570A);
	MakeByte	(0X12570B);
	MakeByte	(0X12570C);
	MakeByte	(0X12570D);
	MakeByte	(0X12570E);
	MakeByte	(0X12570F);
	MakeByte	(0X125710);
	MakeByte	(0X125711);
	MakeByte	(0X125712);
	MakeByte	(0X125713);
	MakeByte	(0X125714);
	MakeByte	(0X125715);
	MakeByte	(0X125716);
	MakeByte	(0X125717);
	MakeByte	(0X125718);
	MakeByte	(0X125719);
	MakeByte	(0X12571A);
	MakeByte	(0X12571B);
	MakeByte	(0X12571C);
	MakeByte	(0X12571D);
	MakeByte	(0X12571E);
	MakeByte	(0X12571F);
	MakeByte	(0X125720);
	MakeByte	(0X125721);
	MakeByte	(0X125722);
	MakeByte	(0X125723);
	MakeByte	(0X125724);
	MakeByte	(0X125725);
	MakeByte	(0X125726);
	MakeByte	(0X125727);
	MakeByte	(0X125728);
	MakeByte	(0X125729);
	MakeByte	(0X12572A);
	MakeByte	(0X12572B);
	MakeByte	(0X12572C);
	MakeByte	(0X12572D);
	MakeByte	(0X12572E);
	MakeByte	(0X12572F);
	MakeByte	(0X125730);
	MakeByte	(0X125731);
	MakeByte	(0X125732);
	MakeByte	(0X125733);
	MakeByte	(0X125734);
	MakeByte	(0X125735);
	MakeByte	(0X125736);
	MakeByte	(0X125737);
	MakeByte	(0X125738);
	MakeByte	(0X125739);
	MakeByte	(0X12573A);
	MakeByte	(0X12573B);
	MakeByte	(0X12573C);
	MakeByte	(0X12573D);
	MakeByte	(0X12573E);
	MakeByte	(0X12573F);
	MakeByte	(0X125740);
	MakeByte	(0X125741);
	MakeByte	(0X125742);
	MakeByte	(0X125743);
	MakeByte	(0X125744);
	MakeByte	(0X125745);
	MakeByte	(0X125746);
	MakeByte	(0X125747);
	MakeByte	(0X125748);
	MakeByte	(0X125749);
	MakeByte	(0X12574A);
	MakeByte	(0X12574B);
	MakeByte	(0X12574C);
	MakeByte	(0X12574D);
	MakeByte	(0X12574E);
	MakeByte	(0X12574F);
	MakeByte	(0X125750);
	MakeByte	(0X125751);
	MakeByte	(0X125752);
	MakeByte	(0X125753);
	MakeByte	(0X125754);
	MakeByte	(0X125755);
	MakeByte	(0X125756);
	MakeByte	(0X125757);
	MakeByte	(0X125758);
	MakeByte	(0X125759);
	MakeByte	(0X12575A);
	MakeByte	(0X12575B);
	MakeByte	(0X12575C);
	MakeByte	(0X12575D);
	MakeByte	(0X12575E);
	MakeByte	(0X12575F);
	MakeByte	(0X125760);
	MakeByte	(0X125761);
	MakeByte	(0X125762);
	MakeByte	(0X125763);
	MakeByte	(0X125764);
	MakeByte	(0X125765);
	MakeByte	(0X125766);
	MakeByte	(0X125767);
	MakeByte	(0X125768);
	MakeByte	(0X125769);
	MakeByte	(0X12576A);
	MakeByte	(0X12576B);
	MakeByte	(0X12576C);
	MakeByte	(0X12576D);
	MakeByte	(0X12576E);
	MakeByte	(0X12576F);
	MakeByte	(0X125770);
	MakeByte	(0X125771);
	MakeByte	(0X125772);
	MakeByte	(0X125773);
	MakeByte	(0X125774);
	MakeByte	(0X125775);
	MakeByte	(0X125776);
	MakeByte	(0X125777);
	MakeByte	(0X125778);
	MakeByte	(0X125779);
	MakeByte	(0X12577A);
	MakeByte	(0X12577B);
	MakeByte	(0X12577C);
	MakeByte	(0X12577D);
	MakeByte	(0X12577E);
	MakeByte	(0X12577F);
	MakeByte	(0X125780);
	MakeByte	(0X125781);
	MakeByte	(0X125782);
	MakeByte	(0X125783);
	MakeByte	(0X125784);
	MakeByte	(0X125785);
	MakeByte	(0X125786);
	MakeByte	(0X125787);
	MakeByte	(0X125788);
	MakeByte	(0X125789);
	MakeByte	(0X12578A);
	MakeByte	(0X12578B);
	MakeByte	(0X12578C);
	MakeByte	(0X12578D);
	MakeByte	(0X12578E);
	MakeByte	(0X12578F);
	MakeByte	(0X125790);
	MakeByte	(0X125791);
	MakeByte	(0X125792);
	MakeByte	(0X125793);
	MakeByte	(0X125794);
	MakeByte	(0X125795);
	MakeByte	(0X125796);
	MakeByte	(0X125797);
	MakeByte	(0X125798);
	MakeByte	(0X125799);
	MakeByte	(0X12579A);
	MakeByte	(0X12579B);
	MakeByte	(0X12579C);
	MakeByte	(0X12579D);
	MakeByte	(0X12579E);
	MakeByte	(0X12579F);
	MakeByte	(0X1257A0);
	MakeByte	(0X1257A1);
	MakeByte	(0X1257A2);
	MakeByte	(0X1257A3);
	MakeByte	(0X1257A4);
	MakeByte	(0X1257A5);
	MakeByte	(0X1257A6);
	MakeByte	(0X1257A7);
	MakeByte	(0X1257A8);
	MakeByte	(0X1257A9);
	MakeByte	(0X1257AA);
	MakeByte	(0X1257AB);
	MakeByte	(0X1257AC);
	MakeByte	(0X1257AD);
	MakeByte	(0X1257AE);
	MakeByte	(0X1257AF);
	MakeByte	(0X1257B0);
	MakeByte	(0X1257B1);
	MakeByte	(0X1257B2);
	MakeByte	(0X1257B3);
	MakeByte	(0X1257B4);
	MakeByte	(0X1257B5);
	MakeByte	(0X1257B6);
	MakeByte	(0X1257B7);
	MakeByte	(0X1257B8);
	MakeByte	(0X1257B9);
	MakeByte	(0X1257BA);
	MakeByte	(0X1257BB);
	MakeByte	(0X1257BC);
	MakeByte	(0X1257BD);
	MakeByte	(0X1257BE);
	MakeByte	(0X1257BF);
	MakeByte	(0X1257C0);
	MakeByte	(0X1257C1);
	MakeByte	(0X1257C2);
	MakeByte	(0X1257C3);
	MakeByte	(0X1257C4);
	MakeByte	(0X1257C5);
	MakeByte	(0X1257C6);
	MakeByte	(0X1257C7);
	MakeByte	(0X1257C8);
	MakeByte	(0X1257C9);
	MakeByte	(0X1257CA);
	MakeByte	(0X1257CB);
	MakeByte	(0X1257CC);
	MakeByte	(0X1257CD);
	MakeByte	(0X1257CE);
	MakeByte	(0X1257CF);
	MakeByte	(0X1257D0);
	MakeByte	(0X1257D1);
	MakeByte	(0X1257D2);
	MakeByte	(0X1257D3);
	MakeByte	(0X1257D4);
	MakeByte	(0X1257D5);
	MakeByte	(0X1257D6);
	MakeByte	(0X1257D7);
	MakeByte	(0X1257D8);
	MakeByte	(0X1257D9);
	MakeByte	(0X1257DA);
	MakeByte	(0X1257DB);
	MakeByte	(0X1257DC);
	MakeByte	(0X1257DD);
	MakeByte	(0X1257DE);
	MakeByte	(0X1257DF);
	MakeByte	(0X1257E0);
	MakeByte	(0X1257E1);
	MakeByte	(0X1257E2);
	MakeByte	(0X1257E3);
	MakeByte	(0X1257E4);
	MakeByte	(0X1257E5);
	MakeByte	(0X1257E6);
	MakeByte	(0X1257E7);
	MakeByte	(0X1257E8);
	MakeByte	(0X1257E9);
	MakeByte	(0X1257EA);
	MakeByte	(0X1257EB);
	MakeByte	(0X1257EC);
	MakeByte	(0X1257ED);
	MakeByte	(0X1257EE);
	MakeByte	(0X1257EF);
	MakeByte	(0X1257F0);
	MakeByte	(0X1257F1);
	MakeByte	(0X1257F2);
	MakeByte	(0X1257F3);
	MakeByte	(0X1257F4);
	MakeByte	(0X1257F5);
	MakeByte	(0X1257F6);
	MakeByte	(0X1257F7);
	MakeByte	(0X1257F8);
	MakeByte	(0X1257F9);
	MakeByte	(0X1257FA);
	MakeByte	(0X1257FB);
	MakeByte	(0X1257FC);
	MakeByte	(0X1257FD);
	MakeByte	(0X1257FE);
	MakeByte	(0X1257FF);
	MakeByte	(0X125800);
	MakeByte	(0X125801);
	MakeByte	(0X125802);
	MakeByte	(0X125803);
	MakeByte	(0X125804);
	MakeByte	(0X125805);
	MakeByte	(0X125806);
	MakeByte	(0X125807);
	MakeByte	(0X125808);
	MakeByte	(0X125809);
	MakeByte	(0X12580A);
	MakeByte	(0X12580B);
	MakeByte	(0X12580C);
	MakeByte	(0X12580D);
	MakeByte	(0X12580E);
	MakeByte	(0X12580F);
	MakeByte	(0X125810);
	MakeByte	(0X125811);
	MakeByte	(0X125812);
	MakeByte	(0X125813);
	MakeByte	(0X125814);
	MakeByte	(0X125815);
	MakeByte	(0X125816);
	MakeByte	(0X125817);
	MakeByte	(0X125818);
	MakeByte	(0X125819);
	MakeByte	(0X12581A);
	MakeByte	(0X12581B);
	MakeByte	(0X12581C);
	MakeByte	(0X12581D);
	MakeByte	(0X12581E);
	MakeByte	(0X12581F);
	MakeByte	(0X125820);
	MakeByte	(0X125821);
	MakeByte	(0X125822);
	MakeByte	(0X125823);
	MakeByte	(0X125824);
	MakeByte	(0X125825);
	MakeByte	(0X125826);
	MakeByte	(0X125827);
	MakeByte	(0X125828);
	MakeByte	(0X125829);
	MakeByte	(0X12582A);
	MakeByte	(0X12582B);
	MakeByte	(0X12582C);
	MakeByte	(0X12582D);
	MakeByte	(0X12582E);
	MakeByte	(0X12582F);
	MakeByte	(0X125830);
	MakeByte	(0X125831);
	MakeByte	(0X125832);
	MakeByte	(0X125833);
	MakeByte	(0X125834);
	MakeByte	(0X125835);
	MakeByte	(0X125836);
	MakeByte	(0X125837);
	MakeByte	(0X125838);
	MakeByte	(0X125839);
	MakeByte	(0X12583A);
	MakeByte	(0X12583B);
	MakeByte	(0X12583C);
	MakeByte	(0X12583D);
	MakeByte	(0X12583E);
	MakeByte	(0X12583F);
	MakeByte	(0X125840);
	MakeByte	(0X125841);
	MakeByte	(0X125842);
	MakeByte	(0X125843);
	MakeByte	(0X125844);
	MakeByte	(0X125845);
	MakeByte	(0X125846);
	MakeByte	(0X125847);
	MakeByte	(0X125848);
	MakeByte	(0X125849);
	MakeByte	(0X12584A);
	MakeByte	(0X12584B);
	MakeByte	(0X12584C);
	MakeByte	(0X12584D);
	MakeByte	(0X12584E);
	MakeByte	(0X12584F);
	MakeByte	(0X125850);
	MakeByte	(0X125851);
	MakeByte	(0X125852);
	MakeByte	(0X125853);
	MakeByte	(0X125854);
	MakeByte	(0X125855);
	MakeByte	(0X125856);
	MakeByte	(0X125857);
	MakeByte	(0X125858);
	MakeByte	(0X125859);
	MakeByte	(0X12585A);
	MakeByte	(0X12585B);
	MakeByte	(0X12585C);
	MakeByte	(0X12585D);
	MakeByte	(0X12585E);
	MakeByte	(0X12585F);
	MakeByte	(0X125860);
	MakeByte	(0X125861);
	MakeByte	(0X125862);
	MakeByte	(0X125863);
	MakeByte	(0X125864);
	MakeByte	(0X125865);
	MakeByte	(0X125866);
	MakeByte	(0X125867);
	MakeByte	(0X125868);
	MakeByte	(0X125869);
	MakeByte	(0X12586A);
	MakeByte	(0X12586B);
	MakeByte	(0X12586C);
	MakeByte	(0X12586D);
	MakeByte	(0X12586E);
	MakeByte	(0X12586F);
	MakeByte	(0X125870);
	MakeByte	(0X125871);
	MakeByte	(0X125872);
	MakeByte	(0X125873);
	MakeByte	(0X125874);
	MakeByte	(0X125875);
	MakeByte	(0X125876);
	MakeByte	(0X125877);
	MakeByte	(0X125878);
	MakeByte	(0X125879);
	MakeByte	(0X12587A);
	MakeByte	(0X12587B);
	MakeByte	(0X12587C);
	MakeByte	(0X12587D);
	MakeByte	(0X12587E);
	MakeByte	(0X12587F);
	MakeByte	(0X125880);
	MakeByte	(0X125881);
	MakeByte	(0X125882);
	MakeByte	(0X125883);
	MakeByte	(0X125884);
	MakeByte	(0X125885);
	MakeByte	(0X125886);
	MakeByte	(0X125887);
	MakeByte	(0X125888);
	MakeByte	(0X125889);
	MakeByte	(0X12588A);
	MakeByte	(0X12588B);
	MakeByte	(0X12588C);
	MakeByte	(0X12588D);
	MakeByte	(0X12588E);
	MakeByte	(0X12588F);
	MakeByte	(0X125890);
	MakeByte	(0X125891);
	MakeByte	(0X125892);
	MakeByte	(0X125893);
	MakeByte	(0X125894);
	MakeByte	(0X125895);
	MakeByte	(0X125896);
	MakeByte	(0X125897);
	MakeByte	(0X125898);
	MakeByte	(0X125899);
	MakeByte	(0X12589A);
	MakeByte	(0X12589B);
	MakeByte	(0X12589C);
	MakeByte	(0X12589D);
	MakeByte	(0X12589E);
	MakeByte	(0X12589F);
	MakeByte	(0X1258A0);
	MakeByte	(0X1258A1);
	MakeByte	(0X1258A2);
	MakeByte	(0X1258A3);
	MakeByte	(0X1258A4);
	MakeByte	(0X1258A5);
	MakeByte	(0X1258A6);
	MakeByte	(0X1258A7);
	MakeByte	(0X1258A8);
	MakeByte	(0X1258A9);
	MakeByte	(0X1258AA);
	MakeByte	(0X1258AB);
	MakeByte	(0X1258AC);
	MakeByte	(0X1258AD);
	MakeByte	(0X1258AE);
	MakeByte	(0X1258AF);
	MakeByte	(0X1258B0);
	MakeByte	(0X1258B1);
	MakeByte	(0X1258B2);
	MakeByte	(0X1258B3);
	MakeByte	(0X1258B4);
	MakeByte	(0X1258B5);
	MakeByte	(0X1258B6);
	MakeByte	(0X1258B7);
	MakeByte	(0X1258B8);
	MakeByte	(0X1258B9);
	MakeByte	(0X1258BA);
	MakeByte	(0X1258BB);
	MakeByte	(0X1258BC);
	MakeByte	(0X1258BD);
	MakeByte	(0X1258BE);
	MakeByte	(0X1258BF);
	MakeByte	(0X1258C0);
	MakeByte	(0X1258C1);
	MakeByte	(0X1258C2);
	MakeByte	(0X1258C3);
	MakeByte	(0X1258C4);
	MakeByte	(0X1258C5);
	MakeByte	(0X1258C6);
	MakeByte	(0X1258C7);
	MakeByte	(0X1258C8);
	MakeByte	(0X1258C9);
	MakeByte	(0X1258CA);
	MakeByte	(0X1258CB);
	MakeByte	(0X1258CC);
	MakeByte	(0X1258CD);
	MakeByte	(0X1258CE);
	MakeByte	(0X1258CF);
	MakeByte	(0X1258D0);
	MakeByte	(0X1258D1);
	MakeByte	(0X1258D2);
	MakeByte	(0X1258D3);
	MakeByte	(0X1258D4);
	MakeByte	(0X1258D5);
	MakeByte	(0X1258D6);
	MakeByte	(0X1258D7);
	MakeByte	(0X1258D8);
	MakeByte	(0X1258D9);
	MakeByte	(0X1258DA);
	MakeByte	(0X1258DB);
	MakeByte	(0X1258DC);
	MakeByte	(0X1258DD);
	MakeByte	(0X1258DE);
	MakeByte	(0X1258DF);
	MakeByte	(0X1258E0);
	MakeByte	(0X1258E1);
	MakeByte	(0X1258E2);
	MakeByte	(0X1258E3);
	MakeByte	(0X1258E4);
	MakeByte	(0X1258E5);
	MakeByte	(0X1258E6);
	MakeByte	(0X1258E7);
	MakeByte	(0X1258E8);
	MakeByte	(0X1258E9);
	MakeByte	(0X1258EA);
	MakeByte	(0X1258EB);
	MakeByte	(0X1258EC);
	MakeByte	(0X1258ED);
	MakeByte	(0X1258EE);
	MakeByte	(0X1258EF);
	MakeByte	(0X1258F0);
	MakeByte	(0X1258F1);
	MakeByte	(0X1258F2);
	MakeByte	(0X1258F3);
	MakeByte	(0X1258F4);
	MakeByte	(0X1258F5);
	MakeByte	(0X1258F6);
	MakeByte	(0X1258F7);
	MakeByte	(0X1258F8);
	MakeByte	(0X1258F9);
	MakeByte	(0X1258FA);
	MakeByte	(0X1258FB);
	MakeByte	(0X1258FC);
	MakeByte	(0X1258FD);
	MakeByte	(0X1258FE);
	MakeByte	(0X1258FF);
	MakeByte	(0X125900);
	MakeByte	(0X125901);
	MakeByte	(0X125902);
	MakeByte	(0X125903);
	MakeByte	(0X125904);
	MakeByte	(0X125905);
	MakeByte	(0X125906);
	MakeByte	(0X125907);
	MakeByte	(0X125908);
	MakeByte	(0X125909);
	MakeByte	(0X12590A);
	MakeByte	(0X12590B);
	MakeByte	(0X12590C);
	MakeByte	(0X12590D);
	MakeByte	(0X12590E);
	MakeByte	(0X12590F);
	MakeByte	(0X125910);
	MakeByte	(0X125911);
	MakeByte	(0X125912);
	MakeByte	(0X125913);
	MakeByte	(0X125914);
	MakeByte	(0X125915);
	MakeByte	(0X125916);
	MakeByte	(0X125917);
	MakeByte	(0X125918);
	MakeByte	(0X125919);
	MakeByte	(0X12591A);
	MakeByte	(0X12591B);
	MakeByte	(0X12591C);
	MakeByte	(0X12591D);
	MakeByte	(0X12591E);
	MakeByte	(0X12591F);
	MakeByte	(0X125920);
	MakeByte	(0X125921);
	MakeByte	(0X125922);
	MakeByte	(0X125923);
	MakeByte	(0X125924);
	MakeByte	(0X125925);
	MakeByte	(0X125926);
	MakeByte	(0X125927);
	MakeByte	(0X125928);
	MakeByte	(0X125929);
	MakeByte	(0X12592A);
	MakeByte	(0X12592B);
	MakeByte	(0X12592C);
	MakeByte	(0X12592D);
	MakeByte	(0X12592E);
	MakeByte	(0X12592F);
	MakeByte	(0X125930);
	MakeByte	(0X125931);
	MakeByte	(0X125932);
	MakeByte	(0X125933);
	MakeByte	(0X125934);
	MakeByte	(0X125935);
	MakeByte	(0X125936);
	MakeByte	(0X125937);
	MakeByte	(0X125938);
	MakeByte	(0X125939);
	MakeByte	(0X12593A);
	MakeByte	(0X12593B);
	MakeByte	(0X12593C);
	MakeByte	(0X12593D);
	MakeByte	(0X12593E);
	MakeByte	(0X12593F);
	MakeByte	(0X125940);
	MakeByte	(0X125941);
	MakeByte	(0X125942);
	MakeByte	(0X125943);
	MakeByte	(0X125944);
	MakeByte	(0X125945);
	MakeByte	(0X125946);
	MakeByte	(0X125947);
	MakeByte	(0X125948);
	MakeByte	(0X125949);
	MakeByte	(0X12594A);
	MakeByte	(0X12594B);
	MakeByte	(0X12594C);
	MakeByte	(0X12594D);
	MakeByte	(0X12594E);
	MakeByte	(0X12594F);
	MakeByte	(0X125950);
	MakeByte	(0X125951);
	MakeByte	(0X125952);
	MakeByte	(0X125953);
	MakeByte	(0X125954);
	MakeByte	(0X125955);
	MakeByte	(0X125956);
	MakeByte	(0X125957);
	MakeByte	(0X125958);
	MakeByte	(0X125959);
	MakeByte	(0X12595A);
	MakeByte	(0X12595B);
	MakeByte	(0X12595C);
	MakeByte	(0X12595D);
	MakeByte	(0X12595E);
	MakeByte	(0X12595F);
	MakeByte	(0X125960);
	MakeByte	(0X125961);
	MakeByte	(0X125962);
	MakeByte	(0X125963);
	MakeByte	(0X125964);
	MakeByte	(0X125965);
	MakeByte	(0X125966);
	MakeByte	(0X125967);
	MakeByte	(0X125968);
	MakeByte	(0X125969);
	MakeByte	(0X12596A);
	MakeByte	(0X12596B);
	MakeByte	(0X12596C);
	MakeByte	(0X12596D);
	MakeByte	(0X12596E);
	MakeByte	(0X12596F);
	MakeByte	(0X125970);
	MakeByte	(0X125971);
	MakeByte	(0X125972);
	MakeByte	(0X125973);
	MakeByte	(0X125974);
	MakeByte	(0X125975);
	MakeByte	(0X125976);
	MakeByte	(0X125977);
	MakeByte	(0X125978);
	MakeByte	(0X125979);
	MakeByte	(0X12597A);
	MakeByte	(0X12597B);
	MakeByte	(0X12597C);
	MakeByte	(0X12597D);
	MakeByte	(0X12597E);
	MakeByte	(0X12597F);
	MakeByte	(0X125980);
	MakeByte	(0X125981);
	MakeByte	(0X125982);
	MakeByte	(0X125983);
	MakeByte	(0X125984);
	MakeByte	(0X125985);
	MakeByte	(0X125986);
	MakeByte	(0X125987);
	MakeByte	(0X125988);
	MakeByte	(0X125989);
	MakeByte	(0X12598A);
	MakeByte	(0X12598B);
	MakeByte	(0X12598C);
	MakeByte	(0X12598D);
	MakeByte	(0X12598E);
	MakeByte	(0X12598F);
	MakeByte	(0X125990);
	MakeByte	(0X125991);
	MakeByte	(0X125992);
	MakeByte	(0X125993);
	MakeByte	(0X125994);
	MakeByte	(0X125995);
	MakeByte	(0X125996);
	MakeByte	(0X125997);
	MakeByte	(0X125998);
	MakeByte	(0X125999);
	MakeByte	(0X12599A);
	MakeByte	(0X12599B);
	MakeByte	(0X12599C);
	MakeByte	(0X12599D);
	MakeByte	(0X12599E);
	MakeByte	(0X12599F);
	MakeByte	(0X1259A0);
	MakeByte	(0X1259A1);
	MakeByte	(0X1259A2);
	MakeByte	(0X1259A3);
	MakeByte	(0X1259A4);
	MakeByte	(0X1259A5);
	MakeByte	(0X1259A6);
	MakeByte	(0X1259A7);
	MakeByte	(0X1259A8);
	MakeByte	(0X1259A9);
	MakeByte	(0X1259AA);
	MakeByte	(0X1259AB);
	MakeByte	(0X1259AC);
	MakeByte	(0X1259AD);
	MakeByte	(0X1259AE);
	MakeByte	(0X1259AF);
	MakeByte	(0X1259B0);
	MakeByte	(0X1259B1);
	MakeByte	(0X1259B2);
	MakeByte	(0X1259B3);
	MakeByte	(0X1259B4);
	MakeByte	(0X1259B5);
	MakeByte	(0X1259B6);
	MakeByte	(0X1259B7);
	MakeByte	(0X1259B8);
	MakeByte	(0X1259B9);
	MakeByte	(0X1259BA);
	MakeByte	(0X1259BB);
	MakeByte	(0X1259BC);
	MakeByte	(0X1259BD);
	MakeByte	(0X1259BE);
	MakeByte	(0X1259BF);
	MakeByte	(0X1259C0);
	MakeByte	(0X1259C1);
	MakeByte	(0X1259C2);
	MakeByte	(0X1259C3);
	MakeByte	(0X1259C4);
	MakeByte	(0X1259C5);
	MakeByte	(0X1259C6);
	MakeByte	(0X1259C7);
	MakeByte	(0X1259C8);
	MakeByte	(0X1259C9);
	MakeByte	(0X1259CA);
	MakeByte	(0X1259CB);
	MakeByte	(0X1259CC);
	MakeByte	(0X1259CD);
	MakeByte	(0X1259CE);
	MakeByte	(0X1259CF);
	MakeByte	(0X1259D0);
	MakeByte	(0X1259D1);
	MakeByte	(0X1259D2);
	MakeByte	(0X1259D3);
	MakeByte	(0X1259D4);
	MakeByte	(0X1259D5);
	MakeByte	(0X1259D6);
	MakeByte	(0X1259D7);
	MakeByte	(0X1259D8);
	MakeByte	(0X1259D9);
	MakeByte	(0X1259DA);
	MakeByte	(0X1259DB);
	MakeByte	(0X1259DC);
	MakeByte	(0X1259DD);
	MakeByte	(0X1259DE);
	MakeByte	(0X1259DF);
	MakeByte	(0X1259E0);
	MakeByte	(0X1259E1);
	MakeByte	(0X1259E2);
	MakeByte	(0X1259E3);
	MakeByte	(0X1259E4);
	MakeByte	(0X1259E5);
	MakeByte	(0X1259E6);
	MakeByte	(0X1259E7);
	MakeByte	(0X1259E8);
	MakeByte	(0X1259E9);
	MakeByte	(0X1259EA);
	MakeByte	(0X1259EB);
	MakeByte	(0X1259EC);
	MakeByte	(0X1259ED);
	MakeByte	(0X1259EE);
	MakeByte	(0X1259EF);
	MakeByte	(0X1259F0);
	MakeByte	(0X1259F1);
	MakeByte	(0X1259F2);
	MakeByte	(0X1259F3);
	MakeByte	(0X1259F4);
	MakeByte	(0X1259F5);
	MakeByte	(0X1259F6);
	MakeByte	(0X1259F7);
	MakeByte	(0X1259F8);
	MakeByte	(0X1259F9);
	MakeByte	(0X1259FA);
	MakeByte	(0X1259FB);
	MakeByte	(0X1259FC);
	MakeByte	(0X1259FD);
	MakeByte	(0X1259FE);
	MakeByte	(0X1259FF);
	MakeByte	(0X125A00);
	MakeByte	(0X125A01);
	MakeByte	(0X125A02);
	MakeByte	(0X125A03);
	MakeByte	(0X125A04);
	MakeByte	(0X125A05);
	MakeByte	(0X125A06);
	MakeByte	(0X125A07);
	MakeByte	(0X125A08);
	MakeByte	(0X125A09);
	MakeByte	(0X125A0A);
	MakeArray	(0X125A0A,	0X13E);
	MakeName	(0X125A0A,	"BackgroundTransitionTiles1");
	MakeByte	(0X125B48);
	MakeArray	(0X125B48,	0XF6);
	MakeName	(0X125B48,	"BackgroundTransitionTiles2");
	MakeByte	(0X125C3E);
	MakeByte	(0X125D54);
	MakeArray	(0X125D54,	0X1E2);
	MakeName	(0X125D54,	"StatusEffectsTiles");
	MakeCode	(0X125F36);
	MakeName	(0X125F36,	"VInt_UpdateBattlesceneGraphics");
	MakeCode	(0X125F54);
	MakeName	(0X125F54,	"UpdateEnemyBattleSprite");
	MakeCode	(0X125F7C);
	MakeName	(0X125F7C,	"UpdateAllyBattleSprite");
	MakeCode	(0X125FA4);
	MakeCode	(x=0X125FB4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125FCA);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X125FD4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X125FDC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X125FF2);
	MakeByte	(0X12603E);
	MakeByte	(0X12603F);
	MakeByte	(0X126040);
	MakeByte	(0X126041);
	MakeByte	(0X126042);
	MakeByte	(0X126043);
	MakeByte	(0X126044);
	MakeByte	(0X126045);
	MakeByte	(0X126046);
	MakeByte	(0X126047);
	MakeByte	(0X126048);
	MakeByte	(0X126049);
	MakeByte	(0X12604A);
	MakeByte	(0X12604B);
	MakeByte	(0X12604C);
	MakeByte	(0X12604D);
	MakeByte	(0X12604E);
	MakeByte	(0X12604F);
	MakeByte	(0X126050);
	MakeByte	(0X126051);
	MakeByte	(0X126052);
	MakeByte	(0X126053);
	MakeByte	(0X126054);
	MakeByte	(0X126055);
	MakeByte	(0X126056);
	MakeByte	(0X126057);
	MakeByte	(0X126058);
	MakeByte	(0X126059);
	MakeByte	(0X12605A);
	MakeByte	(0X12605B);
	MakeByte	(0X12605C);
	MakeByte	(0X12605D);
	MakeByte	(0X12605E);
	MakeByte	(0X12605F);
	MakeByte	(0X126060);
	MakeByte	(0X126061);
	MakeByte	(0X126062);
	MakeByte	(0X126063);
	MakeByte	(0X126064);
	MakeByte	(0X126065);
	MakeByte	(0X126066);
	MakeByte	(0X126067);
	MakeByte	(0X126068);
	MakeByte	(0X126069);
	MakeByte	(0X12606A);
	MakeByte	(0X12606B);
	MakeByte	(0X12606C);
	MakeByte	(0X12606D);
	MakeByte	(0X12606E);
	MakeByte	(0X12606F);
	MakeByte	(0X126070);
	MakeByte	(0X126071);
	MakeByte	(0X126072);
	MakeByte	(0X126073);
	MakeByte	(0X126074);
	MakeByte	(0X126075);
	MakeByte	(0X126076);
	MakeByte	(0X126077);
	MakeByte	(0X126078);
	MakeByte	(0X126079);
	MakeByte	(0X12607A);
	MakeByte	(0X12607B);
	MakeByte	(0X12607C);
	MakeByte	(0X12607D);
	MakeByte	(0X12607E);
	MakeByte	(0X12607F);
	MakeByte	(0X126080);
	MakeByte	(0X126081);
	MakeByte	(0X126082);
	MakeByte	(0X126083);
	MakeByte	(0X126084);
	MakeByte	(0X126085);
	MakeByte	(0X126086);
	MakeByte	(0X126087);
	MakeByte	(0X126088);
	MakeByte	(0X126089);
	MakeByte	(0X12608A);
	MakeByte	(0X12608B);
	MakeByte	(0X12608C);
	MakeByte	(0X12608D);
	MakeByte	(0X12608E);
	MakeByte	(0X12608F);
	MakeByte	(0X126090);
	MakeByte	(0X126091);
	MakeByte	(0X126092);
	MakeByte	(0X126093);
	MakeByte	(0X126094);
	MakeByte	(0X126095);
	MakeByte	(0X126096);
	MakeByte	(0X126097);
	MakeByte	(0X126098);
	MakeByte	(0X126099);
	MakeByte	(0X12609A);
	MakeByte	(0X12609B);
	MakeByte	(0X12609C);
	MakeByte	(0X12609D);
	MakeByte	(0X12609E);
	MakeByte	(0X12609F);
	MakeByte	(0X1260A0);
	MakeByte	(0X1260A1);
	MakeByte	(0X1260A2);
	MakeByte	(0X1260A3);
	MakeByte	(0X1260A4);
	MakeByte	(0X1260A5);
	MakeByte	(0X1260A6);
	MakeByte	(0X1260A7);
	MakeByte	(0X1260A8);
	MakeByte	(0X1260A9);
	MakeByte	(0X1260AA);
	MakeByte	(0X1260AB);
	MakeByte	(0X1260AC);
	MakeByte	(0X1260AD);
	MakeByte	(0X1260AE);
	MakeByte	(0X1260AF);
	MakeByte	(0X1260B0);
	MakeByte	(0X1260B1);
	MakeByte	(0X1260B2);
	MakeByte	(0X1260B3);
	MakeByte	(0X1260B4);
	MakeByte	(0X1260B5);
	MakeByte	(0X1260B6);
	MakeByte	(0X1260B7);
	MakeByte	(0X1260B8);
	MakeByte	(0X1260B9);
	MakeByte	(0X1260BA);
	MakeByte	(0X1260BB);
	MakeByte	(0X1260BC);
	MakeByte	(0X1260BD);
	MakeByte	(0X1260BE);
	MakeByte	(0X1260BF);
	MakeByte	(0X1260C0);
	MakeByte	(0X1260C1);
	MakeByte	(0X1260C2);
	MakeByte	(0X1260C3);
	MakeByte	(0X1260C4);
	MakeByte	(0X1260C5);
	MakeByte	(0X1260C6);
	MakeByte	(0X1260C7);
	MakeByte	(0X1260C8);
	MakeByte	(0X1260C9);
	MakeByte	(0X1260CA);
	MakeByte	(0X1260CB);
	MakeByte	(0X1260CC);
	MakeByte	(0X1260CD);
	MakeByte	(0X1260CE);
	MakeByte	(0X1260CF);
	MakeByte	(0X1260D0);
	MakeByte	(0X1260D1);
	MakeByte	(0X1260D2);
	MakeByte	(0X1260D3);
	MakeByte	(0X1260D4);
	MakeByte	(0X1260D5);
	MakeByte	(0X1260D6);
	MakeByte	(0X1260D7);
	MakeByte	(0X1260D8);
	MakeByte	(0X1260D9);
	MakeByte	(0X1260DA);
	MakeByte	(0X1260DB);
	MakeByte	(0X1260DC);
	MakeByte	(0X1260DD);
	MakeByte	(0X1260DE);
	MakeByte	(0X1260DF);
	MakeByte	(0X1260E0);
	MakeByte	(0X1260E1);
	MakeByte	(0X1260E2);
	MakeByte	(0X1260E3);
	MakeByte	(0X1260E4);
	MakeByte	(0X1260E5);
	MakeByte	(0X1260E6);
	MakeByte	(0X1260E7);
	MakeByte	(0X1260E8);
	MakeByte	(0X1260E9);
	MakeByte	(0X1260EA);
	MakeByte	(0X1260EB);
	MakeByte	(0X1260EC);
	MakeByte	(0X1260ED);
	MakeByte	(0X1260EE);
	MakeByte	(0X1260EF);
	MakeByte	(0X1260F0);
	MakeByte	(0X1260F1);
	MakeByte	(0X1260F2);
	MakeByte	(0X1260F3);
	MakeByte	(0X1260F4);
	MakeByte	(0X1260F5);
	MakeByte	(0X1260F6);
	MakeByte	(0X1260F7);
	MakeByte	(0X1260F8);
	MakeByte	(0X1260F9);
	MakeByte	(0X1260FA);
	MakeByte	(0X1260FB);
	MakeByte	(0X1260FC);
	MakeByte	(0X1260FD);
	MakeByte	(0X1260FE);
	MakeByte	(0X1260FF);
	MakeCode	(0X126100);
	MakeCode	(x=0X126110);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126116);
	OpHex		(x,	0);
	MakeCode	(0X126132);
	MakeCode	(0X126180);
	MakeCode	(x=0X126184);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1261DC);
	MakeCode	(x=0X1261E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1261F8);
	MakeCode	(0X126226);
	MakeCode	(0X126254);
	MakeCode	(0X12627A);
	MakeCode	(0X126284);
	MakeCode	(x=0X126290);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12629C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1262A8);
	MakeCode	(x=0X1262C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1262CE);
	MakeCode	(x=0X1262DA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1262E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1262FA);
	OpHex		(x,	0);
	MakeCode	(0X12630C);
	MakeName	(0X12630C,	"LoadWeaponPalette");
	MakeCode	(x=0X126316);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X126326);
	MakeName	(0X126326,	"LoadAllyBattlesprite");
	MakeCode	(x=0X126344);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12634C);
	MakeName	(0X12634C,	"LoadWeaponsprite");
	MakeCode	(x=0X12635E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126364);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X126380);
	MakeName	(0X126380,	"LoadPlatform");
	MakeCode	(x=0X126398);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1263A8);
	MakeName	(0X1263A8,	"DecompressBackgroundGraphics");
	MakeCode	(x=0X1263C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1263CA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1263E8);
	MakeName	(0X1263E8,	"LoadBattlesceneBackgrounds");
	MakeCode	(x=0X1263FA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1263FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126404);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12641C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126430);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126436);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X126458);
	MakeCode	(0X12645C);
	MakeCode	(x=0X126468);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12646C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12647E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X12647E,	"ExecuteSpellAnimation");
	MakeCode	(x=0X126490);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126494);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X126498);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeName	(0X126498,	"rjt_SpellAnimationSetups");
	MakeWord	(x=0X12649A);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12649C);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12649E);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264A0);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264A2);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264A4);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264A6);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264A8);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264AA);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264AC);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264AE);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264B0);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264B2);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264B4);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264B6);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264B8);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264BA);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264BC);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264BE);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264C0);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264C2);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264C4);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264C6);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264C8);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264CA);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264CC);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264CE);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264D0);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264D2);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264D4);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264D6);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264D8);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264DA);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264DC);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264DE);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264E0);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264E2);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264E4);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264E6);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264E8);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264EA);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264EC);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264EE);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264F0);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264F2);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264F4);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264F6);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264F8);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264FA);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264FC);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X1264FE);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126500);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126502);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126504);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126506);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126508);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12650A);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12650C);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12650E);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126510);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126512);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126514);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126516);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126518);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12651A);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12651C);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12651E);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126520);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126522);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126524);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126526);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126528);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12652A);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12652C);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X12652E);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeWord	(x=0X126530);
	OpOff		(x,	0,	0X126498);
	OpOff		(x,	128,	0X126498);
	OpOff		(x,	1,	0X126498);
	OpOff		(x,	129,	0X126498);
	MakeCode	(0X126532);
	MakeName	(0X126532,	"nullsub_126532");
	MakeCode	(0X126534);
	MakeName	(0X126534,	"sa00_HealingFairy_Mirrored");
	MakeCode	(0X12653A);
	MakeName	(0X12653A,	"sa01_HealingFairy");
	MakeCode	(0X126540);
	MakeName	(0X126540,	"sa04_Detox_Mirrored");
	MakeCode	(0X126546);
	MakeName	(0X126546,	"sa05_Detox");
	MakeCode	(x=0X12654C);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeName	(0X12654C,	"sa06_Quick");
	MakeCode	(0X126552);
	MakeName	(0X126552,	"sa08_Slow");
	MakeCode	(0X126558);
	MakeName	(0X126558,	"sa09_Slow_Mirrored");
	MakeCode	(x=0X12655E);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeName	(0X12655E,	"sa10_Boost");
	MakeCode	(0X126564);
	MakeName	(0X126564,	"sa12_Dispel");
	MakeCode	(0X12656A);
	MakeName	(0X12656A,	"sa13_Dispel_Mirrored");
	MakeCode	(x=0X126570);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeName	(0X126570,	"sa14_Shield");
	MakeCode	(0X126576);
	MakeName	(0X126576,	"sa16_Muddle");
	MakeCode	(0X12657C);
	MakeName	(0X12657C,	"sa17_Muddle_Mirrored");
	MakeCode	(0X126582);
	MakeName	(0X126582,	"sa18_Blaze1");
	MakeCode	(0X126588);
	MakeName	(0X126588,	"sa19_Blaze1_Mirrored");
	MakeCode	(0X12658E);
	MakeName	(0X12658E,	"sa20_Blaze2");
	MakeCode	(0X126594);
	MakeName	(0X126594,	"sa21_Blaze2_Mirrored");
	MakeCode	(0X12659A);
	MakeName	(0X12659A,	"sa22_Blaze3");
	MakeCode	(0X1265A0);
	MakeName	(0X1265A0,	"sa23_Blaze3_Mirrored");
	MakeCode	(0X1265A6);
	MakeName	(0X1265A6,	"sa24_Blaze4");
	MakeCode	(0X1265AC);
	MakeName	(0X1265AC,	"sa25_Blaze4_Mirrored");
	MakeCode	(0X1265B2);
	MakeName	(0X1265B2,	"sa26_Freeze1");
	MakeCode	(0X1265B8);
	MakeName	(0X1265B8,	"sa27_Freeze1_Mirrored");
	MakeCode	(0X1265BE);
	MakeName	(0X1265BE,	"sa28_Freeze2");
	MakeCode	(0X1265C4);
	MakeName	(0X1265C4,	"sa29_Freeze2_Mirrored");
	MakeCode	(0X1265CA);
	MakeName	(0X1265CA,	"sa30_Freeze3");
	MakeCode	(0X1265D0);
	MakeName	(0X1265D0,	"sa31_Freeze3_Mirrored");
	MakeCode	(0X1265D6);
	MakeName	(0X1265D6,	"sa32_Freeze4");
	MakeCode	(0X1265DC);
	MakeName	(0X1265DC,	"sa33_Freeze4_Mirrored");
	MakeCode	(0X1265E2);
	MakeName	(0X1265E2,	"sa34_Bolt1");
	MakeCode	(0X1265E8);
	MakeName	(0X1265E8,	"sa35_Bolt1_Mirrored");
	MakeCode	(0X1265EE);
	MakeName	(0X1265EE,	"sa36_Bolt2");
	MakeCode	(0X1265F4);
	MakeName	(0X1265F4,	"sa37_Bolt2_Mirrored");
	MakeCode	(0X1265FA);
	MakeName	(0X1265FA,	"sa38_Bolt3");
	MakeCode	(0X126600);
	MakeName	(0X126600,	"sa39_Bolt3_Mirrored");
	MakeCode	(0X126606);
	MakeName	(0X126606,	"sa40_Bolt4");
	MakeCode	(0X12660C);
	MakeName	(0X12660C,	"sa41_Bolt4_Mirrored");
	MakeCode	(0X126612);
	MakeName	(0X126612,	"sa42_Desoul");
	MakeCode	(0X126618);
	MakeName	(0X126618,	"sa43_Desoul_Mirrored");
	MakeCode	(0X12661E);
	MakeName	(0X12661E,	"sa44_Sleep");
	MakeCode	(0X126624);
	MakeName	(0X126624,	"sa45_Sleep_Mirrored");
	MakeCode	(0X12662A);
	MakeName	(0X12662A,	"sa46_FireBreath");
	MakeCode	(0X126630);
	MakeName	(0X126630,	"sa47_IceBreath");
	MakeCode	(0X126636);
	MakeName	(0X126636,	"sa49_MachineGun");
	MakeCode	(0X12663C);
	MakeName	(0X12663C,	"sa55_GreenLaser1_Mirrored");
	MakeCode	(0X126642);
	MakeName	(0X126642,	"sa57_GreenLaser2_Mirrored");
	MakeCode	(0X126648);
	MakeName	(0X126648,	"sa58_LaserEye");
	MakeCode	(0X12664E);
	MakeName	(0X12664E,	"sa69_Crossbow1");
	MakeCode	(0X126654);
	MakeName	(0X126654,	"sa75_Crossbow2");
	MakeCode	(0X12665A);
	MakeName	(0X12665A,	"sa76_Crossbow3");
	MakeCode	(x=0X126660);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X126660,	"sa62_CriticalHit");
	MakeWord	(x=0X126662);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X126664);
	MakeCode	(x=0X126666);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X126666,	"sa63_DemonSmile");
	MakeWord	(x=0X126668);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X12666A);
	MakeCode	(0X12666C);
	MakeName	(0X12666C,	"sa54_AssaultShell_Mirrored");
	MakeCode	(0X126672);
	MakeName	(0X126672,	"sa64_AssaultShell");
	MakeCode	(0X126678);
	MakeCode	(0X12667A);
	MakeName	(0X12667A,	"sa60_DemonBlaze1");
	MakeCode	(0X126680);
	MakeName	(0X126680,	"sa61_DemonBlaze2");
	MakeCode	(x=0X126686);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X126686,	"PlaySpellCastEffect");
	MakeWord	(x=0X126688);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X12668A);
	MakeCode	(x=0X12668C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X1266C0);
	MakeName	(0X1266C0,	"tbl_SpellCastEffectColors");
	MakeWord	(0X1266C2);
	MakeWord	(0X1266C4);
	MakeWord	(0X1266C6);
	MakeWord	(0X1266C8);
	MakeWord	(0X1266CA);
	MakeWord	(0X1266CC);
	MakeWord	(0X1266CE);
	MakeWord	(0X1266D0);
	MakeWord	(0X1266D2);
	MakeWord	(0X1266D4);
	MakeWord	(0X1266D6);
	MakeWord	(0X1266D8);
	MakeCode	(x=0X1266DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1266F0);
	MakeByte	(0X1266F1);
	MakeByte	(0X1266F2);
	MakeByte	(0X1266F3);
	MakeByte	(0X1266F4);
	MakeByte	(0X1266F5);
	MakeByte	(0X1266F6);
	MakeByte	(0X1266F7);
	MakeByte	(0X1266F8);
	MakeByte	(0X1266F9);
	MakeByte	(0X1266FA);
	MakeByte	(0X1266FB);
	MakeByte	(0X1266FC);
	MakeByte	(0X1266FD);
	MakeByte	(0X1266FE);
	MakeByte	(0X1266FF);
	MakeByte	(0X126700);
	MakeByte	(0X126701);
	MakeByte	(0X126702);
	MakeByte	(0X126703);
	MakeCode	(0X126704);
	MakeCode	(x=0X126708);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X126720);
	MakeByte	(0X126721);
	MakeByte	(0X126722);
	MakeByte	(0X126723);
	MakeByte	(0X126724);
	MakeByte	(0X126725);
	MakeByte	(0X126726);
	MakeByte	(0X126727);
	MakeByte	(0X126728);
	MakeByte	(0X126729);
	MakeCode	(x=0X12672A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X12672A,	"LoadSpellEntityLayout");
	MakeCode	(x=0X12675C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12676C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12678E);
	MakeName	(0X12678E,	"CopyPalettes");
	MakeCode	(x=0X126792);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126798);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X1267A2,	0,	"                ");
	MakeCode	(0X1267AC);
	MakeName	(0X1267AC,	"SetupScreenTint_Dark");
	MakeName	(0X1267AE,	"TintScreen_Dark");
	MakeCode	(x=0X1267B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X1267BC,	0,	"                ");
	MakeCode	(0X1267C6);
	MakeName	(0X1267C6,	"RefreshScreenTint_Dark");
	MakeName	(0X1267CC,	"RestoreSpellPalette");
	MakeCode	(x=0X1267D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1267D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1267E8);
	MakeName	(0X1267E8,	"CopySpellPalette");
	MakeCode	(x=0X1267EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1267F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1267FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126804);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X12680E,	0,	"                ");
	MakeCode	(0X126818);
	MakeCode	(x=0X12681C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X126826);
	MakeName	(0X126826,	"SetupScreenTint_Grey");
	MakeName	(0X12682A,	"TintScreen_Grey");
	MakeCode	(x=0X12682E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X126838,	"take red component of color");
	MakeRptCmt	(0X12683C,	"half it");
	MakeRptCmt	(0X126840,	"take green component of color");
	MakeRptCmt	(0X126846,	"add to red");
	MakeRptCmt	(0X12684A,	"take blue component of color");
	MakeRptCmt	(0X126850,	"divide it by 4");
	MakeRptCmt	(0X126854,	"add to green/red");
	MakeRptCmt	(0X126862,	"cap at maximum intensity");
	ExtLinB		(0X126870,	0,	"                ");
	MakeCode	(0X12687A);
	MakeCode	(x=0X126890);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1268AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1268FC);
	MakeName	(0X1268FC,	"RefreshScreenTint_Grey");
	MakeCode	(0X126908);
	MakeName	(0X126908,	"SetupScreenTint_Red");
	MakeName	(0X12690C,	"TintScreen_Red");
	MakeCode	(x=0X126910);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12691A,	"take only red component of color");
	MakeRptCmt	(0X12691E,	"double it");
	MakeRptCmt	(0X126926,	"cap at full red");
	MakeRptCmt	(0X12692A,	"half other colors");
	MakeRptCmt	(0X12692E,	"mix in new red value");
	ExtLinB		(0X126930,	0,	"                ");
	MakeCode	(0X12693A);
	MakeName	(0X12693A,	"RefreshScreenTint_Red");
	MakeCode	(0X126944);
	MakeName	(0X126948,	"TintScreen_Blue");
	MakeCode	(x=0X12694C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X126956,	"take blue component of color");
	MakeRptCmt	(0X12695A,	"double it");
	MakeRptCmt	(0X126962,	"cap at maximum intensity");
	MakeRptCmt	(0X126968,	"half other colors");
	MakeRptCmt	(0X12696C,	"mix in new blue value");
	ExtLinB		(0X12696E,	0,	"                ");
	MakeCode	(0X126978);
	MakeCode	(0X126982);
	MakeName	(0X126982,	"RestorePalettes");
	MakeCode	(x=0X126986);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12698C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1269A4);
	MakeCode	(x=0X1269A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1269AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1269C6);
	MakeArray	(0X1269C6,	0X28);
	MakeName	(0X1269C6,	"SpellPalette_Bolt");
	MakeCode	(0X1269EE);
	MakeName	(0X1269EE,	"LoadSpellGraphics_Bolt");
	MakeCode	(x=0X1269F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126A04);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X126A38);
	MakeName	(0X126A38,	"SetupSpellAnimation_Bolt");
	MakeCode	(x=0X126A42);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126A46);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126A4C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126A50);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126A66);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeByte	(0X126A6C);
	MakeArray	(0X126A6C,	0XA);
	MakeName	(0X126A6C,	"SpellPalette_Blaze");
	MakeCode	(0X126A76);
	MakeName	(0X126A76,	"LoadSpellGraphics_Blaze");
	MakeCode	(x=0X126A7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126A80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X126AB4);
	MakeName	(0X126AB4,	"SetupSpellAnimation_Blaze");
	MakeCode	(x=0X126ABA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126ABE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126AC2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126AC6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126AD0);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeCode	(0X126AD6);
	MakeName	(0X126AD6,	"ClearSpellEntities");
	MakeCode	(x=0X126ADA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X126AE4,	0,	"                ");
	MakeCode	(0X126AEE);
	MakeName	(0X126AEE,	"CreateMainBlazeEntity");
	MakeCode	(x=0X126AFC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X126B00,	"branch if animation is played on enemy side");
	MakeCode	(0X126B0C);
	MakeCode	(0X126B20);
	MakeName	(0X126B20,	"LoadSpellEntity");
	MakeCode	(x=0X126B24);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X126B2E,	"keep testing until free slot is found");
	MakeCode	(0X126B3C);
	MakeCode	(0X126B48);
	MakeName	(0X126B48,	"SetupSpellAnimation_AssaultShell");
	MakeByte	(0X126B4A);
	MakeArray	(0X126B4A,	0X4);
	MakeCode	(x=0X126B4E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126B52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126B88);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126B8C);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126B92);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126B96);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X126B9E);
	MakeArray	(0X126B9E,	0XA);
	MakeName	(0X126B9E,	"SpellPalette_Freeze");
	MakeCode	(0X126BA8);
	MakeName	(0X126BA8,	"LoadSpellGraphics_Freeze");
	MakeCode	(x=0X126BAE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126BB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X126BE6);
	MakeName	(0X126BE6,	"SetupSpellAnimation_Freeze");
	MakeCode	(x=0X126BEC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126BF0);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126BF6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126BFA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126C00);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeCode	(0X126C06);
	MakeName	(0X126C06,	"SetupSpellAnimation_IceBreath");
	MakeCode	(x=0X126C0C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126C10);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126C16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126C1A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126C20);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),1);
	MakeByte	(0X126C26);
	MakeArray	(0X126C26,	0XA);
	MakeName	(0X126C26,	"SpellPalette_DemonBlaze");
	MakeCode	(0X126C30);
	MakeName	(0X126C30,	"SetupSpellAnimation_DemonBlaze");
	MakeByte	(0X126C34);
	MakeArray	(0X126C34,	0X4);
	MakeCode	(0X126C38);
	MakeCode	(x=0X126C3C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126C40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126C74);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126C78);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126C7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126C82);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X126C8E);
	MakeArray	(0X126C8E,	0XA);
	MakeName	(0X126C8E,	"SpellPalette_Desoul");
	MakeCode	(0X126C98);
	MakeName	(0X126C98,	"SetupSpellAnimation_Desoul");
	MakeCode	(x=0X126C9C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126CA0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126CD0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126CD4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126CDA);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126CE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126CE4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126CEA);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeCode	(x=0X126CF0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X126D1E);
	MakeByte	(0X126D1F);
	MakeByte	(0X126D20);
	MakeByte	(0X126D21);
	MakeByte	(0X126D22);
	MakeByte	(0X126D23);
	MakeByte	(0X126D24);
	MakeByte	(0X126D25);
	MakeByte	(0X126D26);
	MakeByte	(0X126D27);
	MakeByte	(0X126D28);
	MakeByte	(0X126D29);
	MakeByte	(0X126D2A);
	MakeByte	(0X126D2B);
	MakeByte	(0X126D2C);
	MakeByte	(0X126D2D);
	MakeByte	(0X126D2E);
	MakeByte	(0X126D2F);
	MakeByte	(0X126D30);
	MakeByte	(0X126D31);
	MakeByte	(0X126D32);
	MakeByte	(0X126D33);
	MakeByte	(0X126D34);
	MakeByte	(0X126D35);
	MakeByte	(0X126D36);
	MakeByte	(0X126D37);
	MakeByte	(0X126D38);
	MakeByte	(0X126D39);
	MakeByte	(0X126D3A);
	MakeByte	(0X126D3B);
	MakeCode	(0X126D3C);
	MakeName	(0X126D3C,	"SetupSpellAnimation_Dispel");
	MakeCode	(x=0X126D50);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeCode	(0X126D54);
	MakeName	(0X126D54,	"SetupSpellAnimation_Muddle");
	MakeCode	(x=0X126D68);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeCode	(0X126D6C);
	MakeName	(0X126D6C,	"SetupSpellAnimation_Slow");
	MakeCode	(x=0X126D80);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeCode	(0X126D84);
	MakeName	(0X126D84,	"SetupSpellAnimation_Sleep");
	MakeCode	(x=0X126D98);
	OpEnumEx		(x,	0,	GetEnum("SpellCastColorsPerSpell"),0);
	MakeCode	(x=0X126DD2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126DD6);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126DDC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126DE0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X126DEA);
	MakeArray	(0X126DEA,	0X14);
	MakeName	(0X126DEA,	"SpellPalette_Healing");
	MakeCode	(0X126DFE);
	MakeName	(0X126DFE,	"SetupSpellAnimation_Healing");
	MakeCode	(x=0X126E00);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126E10);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126E46);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126E4A);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126E50);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126E54);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X126E78);
	MakeArray	(0X126E78,	0XA);
	MakeName	(0X126E78,	"SpellPalette_MachineGun");
	MakeCode	(x=0X126E82);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X126E82,	"SetupSpellAnimation_MachineGun");
	MakeWord	(x=0X126E84);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(x=0X126E86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126E8A);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	MakeByte	(0X126E90);
	MakeArray	(0X126E90,	0XA);
	MakeName	(0X126E90,	"SpellPalette_Crossbow");
	MakeCode	(x=0X126E9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X126E9A,	"SetupSpellAnimation_Crossbow");
	MakeCode	(x=0X126E9E);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	MakeCode	(x=0X126EA4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126EDC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126EE0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126EE4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126EE8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X126EF0);
	MakeArray	(0X126EF0,	0XA);
	MakeName	(0X126EF0,	"SpellPalette_BlueFlyingDragons");
	MakeCode	(x=0X126EFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X126EFA,	"sa74_BlueFlyingDragons");
	MakeCode	(x=0X126EFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126F32);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126F38);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126F3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126F42);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X126F4A);
	MakeArray	(0X126F4A,	0XA);
	MakeName	(0X126F4A,	"SpellPalette_YellowFlyingDragons");
	MakeCode	(x=0X126F54);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X126F54,	"sa71_YellowFlyingDragons");
	MakeCode	(x=0X126F58);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X126F6E);
	MakeArray	(0X126F6E,	0XA);
	MakeName	(0X126F6E,	"SpellPalette_YellowLightningBreath");
	MakeCode	(0X126F78);
	MakeName	(0X126F78,	"sa65_YellowLightningBreath");
	MakeCode	(x=0X126F7C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126F80);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126F92);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X126F98);
	MakeArray	(0X126F98,	0X4);
	MakeCode	(0X126F9C);
	MakeCode	(x=0X126FBE);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X126FC4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126FC8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X126FD0);
	MakeArray	(0X126FD0,	0XA);
	MakeName	(0X126FD0,	"SpellPalette_BlueLightningBreath");
	MakeCode	(0X126FDA);
	MakeName	(0X126FDA,	"sa72_BlueLightningBreath");
	MakeCode	(x=0X126FDE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126FE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X126FF4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X126FFE);
	MakeArray	(0X126FFE,	0XA);
	MakeName	(0X126FFE,	"SpellPalette_GreenLaser");
	MakeCode	(0X127008);
	MakeName	(0X127008,	"sa66_GreenLaser1");
	MakeCode	(x=0X12700A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X12700A,	"SetupSpellAnimation_GreenLaser");
	MakeWord	(x=0X12700C);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X12700E);
	MakeCode	(x=0X127012);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127016);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127028);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12704E);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X127054);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127058);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X127060);
	MakeArray	(0X127060,	0XA);
	MakeName	(0X127060,	"SpellPalette_BlueLaser");
	MakeCode	(0X12706A);
	MakeName	(0X12706A,	"sa73_BlueLaser");
	MakeCode	(x=0X12706C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X12706C,	"SetupSpellAnimation_LaserEye");
	MakeWord	(x=0X12706E);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X127070);
	MakeCode	(x=0X127074);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127078);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12708A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X127092);
	MakeArray	(0X127092,	0XA);
	MakeName	(0X127092,	"SpellPalette_BusterShot");
	MakeCode	(x=0X12709C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X12709C,	"sa70_BusterShot");
	MakeWord	(x=0X12709E);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X1270A0);
	MakeCode	(x=0X1270A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1270A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1270DC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1270E2);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1270E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1270EC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X1270F4);
	MakeArray	(0X1270F4,	0XA);
	MakeName	(0X1270F4,	"SpellPalette_EnergyBlast");
	MakeCode	(x=0X1270FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1270FE,	"sa68_SwordBeam");
	MakeCode	(x=0X127102);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127114);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X12711A);
	MakeArray	(0X12711A,	0X4);
	MakeCode	(0X12711E);
	MakeCode	(x=0X127140);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X127146);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12714A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X127152,	"unused green sword beam palette");
	MakeWord	(0X127152);
	MakeWord	(0X127154);
	MakeWord	(0X127156);
	MakeWord	(0X127158);
	MakeWord	(0X12715A);
	MakeCode	(x=0X12715C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X12715C,	"sa67_PowerFist");
	MakeWord	(x=0X12715E);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X127160);
	MakeCode	(x=0X127164);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127168);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12717A);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X127182);
	MakeArray	(0X127182,	0XA);
	MakeName	(0X127182,	"SpellPalette_FireBreath");
	MakeCode	(x=0X12718C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeName	(0X12718C,	"LoadSpellGraphics_FireBreath");
	MakeWord	(x=0X12718E);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X127190);
	MakeCode	(x=0X127196);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12719A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1271CE);
	MakeName	(0X1271CE,	"SetupSpellAnimation_FireBreath");
	MakeCode	(x=0X1271D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1271D8);
	OpEnumEx		(x,	0,	GetEnum("SpellAnimationEngine_Types"),0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1271DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1271E2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1271EC);
	MakeCode	(x=0X1271F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1271F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12723E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X12723E,	"UpdateSpellAnimation");
	MakeCode	(0X127248);
	MakeCode	(x=0X12724A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127250);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127254);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X127258);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeName	(0X127258,	"rjt_SpellAnimationUpdates");
	MakeWord	(x=0X12725A);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X12725C);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X12725E);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127260);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127262);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127264);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127266);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127268);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X12726A);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X12726C);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X12726E);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127270);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127272);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127274);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127276);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127278);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X12727A);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X12727C);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X12727E);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127280);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeWord	(x=0X127282);
	OpOff		(x,	0,	0X127258);
	OpOff		(x,	128,	0X127258);
	OpOff		(x,	1,	0X127258);
	OpOff		(x,	129,	0X127258);
	MakeCode	(0X127284);
	MakeName	(0X127284,	"nullsub_127284");
	MakeCode	(0X127286);
	MakeName	(0X127286,	"spellanimationUpdate_Bolt");
	MakeCode	(x=0X12728C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127292);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12729A);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12729E);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1272A2);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1272AA);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1272CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1272D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1272E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1272F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1272F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127320);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12732E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127332);
	OpHex		(x,	0);
	MakeCode	(x=0X127344);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12734E);
	MakeCode	(x=0X127368);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127384);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12739C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1273AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1273B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1273D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1273E0);
	MakeCode	(x=0X1273EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1273F8);
	MakeCode	(x=0X127424);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X127434);
	MakeArray	(0X127434,	0X4);
	MakeCode	(0X127438);
	MakeWord	(0X12743A);
	MakeWord	(0X12743C);
	MakeWord	(0X12743E);
	MakeWord	(0X127440);
	MakeWord	(0X127442);
	MakeWord	(0X127444);
	MakeWord	(0X127446);
	MakeWord	(0X127448);
	MakeByte	(0X12744A);
	MakeArray	(0X12744A,	0X12C);
	MakeName	(0X12744A,	"SpellEntityLayout_Bolt1");
	MakeByte	(0X127576);
	MakeArray	(0X127576,	0XF0);
	MakeName	(0X127576,	"SpellEntityLayout_Bolt2");
	MakeCode	(0X127666);
	MakeName	(0X127666,	"spellanimationUpdate_Blaze");
	MakeCode	(x=0X12766C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X127670,	"loop through animation entities");
	MakeCode	(x=0X127670);
	OpHex		(x,	0);
	MakeCode	(x=0X127672);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12767A);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X12767E,	"increment main blaze frame");
	MakeCode	(x=0X12767E);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127682);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X12768A,	"D3 = X position");
	MakeRptCmt	(0X12768C,	"D4 = Y position");
	MakeCode	(x=0X12768C);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X127690,	"set number of graphics pieces : 2 pieces");
	MakeCode	(x=0X127692);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X127696,	"branch if animation is cast on enemy side");
	MakeRptCmt	(0X127698,	"change layer of pieces (reversed)");
	MakeRptCmt	(0X12769C,	"change layer of pieces");
	MakeCode	(0X12769C);
	MakeCode	(x=0X12769E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1276A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1276AE,	"branch if spell level is greater than 2");
	MakeRptCmt	(0X1276B0,	"change size of main fire?");
	MakeCode	(x=0X1276B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1276C6,	"start at falling fireballs");
	MakeCode	(x=0X1276C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1276D2);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X1276D6,	"branch if fireball does not exist");
	MakeRptCmt	(0X1276DC,	"D3 = X position");
	MakeRptCmt	(0X1276DE,	"D4 = Y position");
	MakeCode	(x=0X1276DE);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1276E2);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X1276E6,	"fall 8 pixels per frame");
	MakeCode	(x=0X1276E6);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X1276EA,	"default to small fireballs");
	MakeCode	(x=0X1276EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1276FA,	"switch to big fireballs if level 4");
	MakeRptCmt	(0X127702,	"switch to medium fireballs if level 3");
	MakeRptCmt	(0X127718,	"random gfx variant : 50% chance of each?");
	MakeCode	(x=0X12771A);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X127722,	"at beginning, put at layer 0 so it goes behind UI");
	MakeCode	(x=0X127726);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X12772E,	"then shift up");
	MakeRptCmt	(0X127732,	"shift up more?");
	MakeCode	(0X127732);
	MakeCode	(x=0X127734);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12773E);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X127742,	"remove if goes too far down screen");
	MakeRptCmt	(0X127748,	"check for hitting ground?");
	MakeCode	(x=0X127748);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X127750,	"flicker bg orange");
	MakeCode	(x=0X127758);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X127764,	"shake screen");
	MakeCode	(x=0X127764);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X127768);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X12776E,	"branch if haven't hit yet");
	MakeRptCmt	(0X127770,	"after hitting, do explosion animation");
	MakeCode	(x=0X127770);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127784);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(0X12778A);
	MakeCode	(x=0X12778E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X127794,	"move to the right if cast by enemy");
	MakeRptCmt	(0X127796,	"start by moving left 5 pixels");
	MakeRptCmt	(0X1277A0,	"then add a random number -4 to 4");
	MakeRptCmt	(0X1277A2,	"total offset should be left 1 to 9 pixels");
	MakeCode	(x=0X1277A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1277AC,	"adjust graphics if cast by enemy");
	MakeCode	(x=0X1277B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1277C0,	"loop to next fireball");
	ExtLinB		(0X1277C4,	0,	"                ");
	MakeCode	(x=0X1277C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1277CC,	"branch if animation ending");
	MakeRptCmt	(0X1277D8,	"red screen flash?");
	MakeCode	(x=0X1277E0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X1277E8,	"if not, spawn new fireballs");
	MakeRptCmt	(0X1277F0,	"animation cleanup");
	MakeCode	(x=0X1277F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X127800,	"see if any fireballs are still falling");
	MakeRptCmt	(0X127804,	"if not, we can set the animation as finished");
	MakeCode	(x=0X127804);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X127812,	"end of frame cleanup");
	MakeCode	(0X127818);
	MakeName	(0X127818,	"CreateFireballObject");
	MakeCode	(x=0X12781A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X127826,	"don't spawn anything at level 1");
	MakeRptCmt	(0X127832,	"only spawn new one some % of the time");
	MakeRptCmt	(0X12783E,	"random starting X position");
	MakeCode	(x=0X127844);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12784A,	"offset starting X position when cast by ally");
	MakeRptCmt	(0X12784E,	"fixed starting Y position");
	MakeRptCmt	(0X127858,	"random starting frame");
	MakeRptCmt	(0X12785C,	"set exists flag");
	MakeByte	(0X127864);
	MakeArray	(0X127864,	0X64);
	MakeName	(0X127864,	"SpellEntityLayout_BlazeFireball");
	MakeByte	(0X1278C8);
	MakeArray	(0X1278C8,	0X3C);
	MakeName	(0X1278C8,	"SpellEntityLayout_BlazeMain");
	MakeCode	(0X127904);
	MakeName	(0X127904,	"spellanimationUpdate_AssaultShell");
	MakeCode	(x=0X127918);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127924);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12792E);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127934);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12793A);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127944);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127954);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(0X12795C);
	MakeCode	(x=0X12795E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127978);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1279A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1279B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1279D4);
	MakeName	(0X1279D4,	"SpawnNewEntity_AssaultShell");
	MakeCode	(x=0X1279FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127A02);
	OpDecimal	(x,	0);
	MakeCode	(x=0X127A06);
	OpDecimal	(x,	0);
	MakeCode	(0X127A0C);
	MakeCode	(x=0X127A0E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X127A12);
	OpDecimal	(x,	0);
	MakeByte	(0X127A2E);
	MakeArray	(0X127A2E,	0X4);
	MakeCode	(0X127A32);
	MakeByte	(0X127A3C);
	MakeArray	(0X127A3C,	0X32);
	MakeName	(0X127A3C,	"SpellEntityLayout_AssaultShell");
	MakeCode	(0X127A6E);
	MakeName	(0X127A6E,	"spellanimationUpdate_DemonBlaze");
	MakeCode	(x=0X127A74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127A80);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127A8E);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127A9A);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127A9E);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127AAE);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127AB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X127AC4);
	MakeCode	(x=0X127ADE);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127AE8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127AEC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127AFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127B0E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X127B1C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127B30);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X127B4C);
	MakeArray	(0X127B4C,	0XA);
	MakeName	(0X127B4C,	"SpellEntityLayout_DemonBlaze1");
	MakeByte	(0X127B56);
	MakeArray	(0X127B56,	0X6);
	MakeName	(0X127B56,	"SpellEntityLayout_DemonBlaze2");
	MakeCode	(0X127B5C);
	MakeName	(0X127B5C,	"spellanimationUpdate_FlyingDragons");
	MakeCode	(x=0X127B62);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127B6E);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X127B76,	"D3 = X position");
	MakeCode	(x=0X127B78);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127B7C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X127B88);
	MakeRptCmt	(0X127B90,	"D4 = Y position");
	MakeCode	(x=0X127B90);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127B94);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X127B9C);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127BA2);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127BB2);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X127BB6,	"set number of graphics pieces : 1 piece");
	MakeRptCmt	(0X127BB8,	"set layer of pieces");
	MakeCode	(x=0X127BCC);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127BD6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127BEA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X127BFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127C0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X127C2A);
	MakeName	(0X127C2A,	"SpawnNewEntity_Barrage");
	MakeCode	(x=0X127C3A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X127C66);
	MakeArray	(0X127C66,	0X4);
	MakeCode	(0X127C6A);
	MakeCode	(0X127C78);
	MakeByte	(0X127C9C);
	MakeArray	(0X127C9C,	0XA);
	MakeName	(0X127C9C,	"SpellEntityLayout_FlyingDragons");
	MakeByte	(0X127CA6);
	MakeByte	(0X127CA7);
	MakeByte	(0X127CA8);
	MakeByte	(0X127CA9);
	MakeCode	(0X127CAA);
	MakeName	(0X127CAA,	"spellanimationUpdate_Freeze");
	MakeCode	(x=0X127CB0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127CBC);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127CC8);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127CDE);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127CFA);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127CFE);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127D20);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127D28);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127D32);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127D3C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X127D44);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X127D56);
	MakeCode	(x=0X127D6A);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127D7E);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127D8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127DA4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127DBC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X127DCC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127DE0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X127DEE);
	MakeCode	(x=0X127DF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127DFC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127E00);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X127E04);
	OpOff		(x,	0,	0X127E04);
	OpOff		(x,	128,	0X127E04);
	OpOff		(x,	1,	0X127E04);
	OpOff		(x,	129,	0X127E04);
	MakeWord	(x=0X127E06);
	OpOff		(x,	0,	0X127E04);
	OpOff		(x,	128,	0X127E04);
	OpOff		(x,	1,	0X127E04);
	OpOff		(x,	129,	0X127E04);
	MakeWord	(x=0X127E08);
	OpOff		(x,	0,	0X127E04);
	OpOff		(x,	128,	0X127E04);
	OpOff		(x,	1,	0X127E04);
	OpOff		(x,	129,	0X127E04);
	MakeWord	(x=0X127E0A);
	OpOff		(x,	0,	0X127E04);
	OpOff		(x,	128,	0X127E04);
	OpOff		(x,	1,	0X127E04);
	OpOff		(x,	129,	0X127E04);
	MakeCode	(0X127E0C);
	MakeCode	(0X127E12);
	MakeCode	(0X127E18);
	MakeByte	(0X127E62);
	MakeArray	(0X127E62,	0X4);
	MakeCode	(0X127E66);
	MakeCode	(0X127E74);
	MakeName	(0X127E74,	"spellanimationUpdate_FireBreath");
	MakeCode	(x=0X127E7A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127E86);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X127E90,	"D6 = X position");
	MakeCode	(x=0X127E92);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127EC6);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127ECC);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127ED6);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127EF2);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127F06);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127F22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127F3C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127F54);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X127F64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127F78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X127F86);
	MakeName	(0X127F86,	"SpawnNewEntity_FireBreath");
	MakeCode	(0X127FC6);
	MakeName	(0X127FC6,	"spellanimationUpdate_IceBreath");
	MakeCode	(x=0X127FCC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X127FD8);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X127FE4);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128018);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12801C);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128026);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128042);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128058);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12806C);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeByte	(0X12807A);
	MakeArray	(0X12807A,	0X4);
	MakeCode	(0X12807E);
	MakeCode	(x=0X12808C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1280A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1280BE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1280CE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1280E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1280F0);
	MakeCode	(x=0X1280F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1280FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128102);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X128106);
	OpOff		(x,	0,	0X128106);
	OpOff		(x,	128,	0X128106);
	OpOff		(x,	1,	0X128106);
	OpOff		(x,	129,	0X128106);
	MakeWord	(x=0X128108);
	OpOff		(x,	0,	0X128106);
	OpOff		(x,	128,	0X128106);
	OpOff		(x,	1,	0X128106);
	OpOff		(x,	129,	0X128106);
	MakeWord	(x=0X12810A);
	OpOff		(x,	0,	0X128106);
	OpOff		(x,	128,	0X128106);
	OpOff		(x,	1,	0X128106);
	OpOff		(x,	129,	0X128106);
	MakeWord	(x=0X12810C);
	OpOff		(x,	0,	0X128106);
	OpOff		(x,	128,	0X128106);
	OpOff		(x,	1,	0X128106);
	OpOff		(x,	129,	0X128106);
	MakeCode	(0X12810E);
	MakeCode	(0X128114);
	MakeByte	(0X12815C);
	MakeArray	(0X12815C,	0XA0);
	MakeName	(0X12815C,	"SpellEntityLayout_Freeze");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_9(void) {
        auto x;
#define id x

	MakeCode	(0X1281FC);
	MakeName	(0X1281FC,	"spellanimationUpdate_Desoul");
	MakeCode	(x=0X128202);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128216);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128228);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128238);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128258);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12826E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128276);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12828C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12829E);
	MakeCode	(x=0X1282A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1282A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X1282A8);
	OpOff		(x,	0,	0X1282A8);
	OpOff		(x,	128,	0X1282A8);
	OpOff		(x,	1,	0X1282A8);
	OpOff		(x,	129,	0X1282A8);
	MakeWord	(x=0X1282AA);
	OpOff		(x,	0,	0X1282A8);
	OpOff		(x,	128,	0X1282A8);
	OpOff		(x,	1,	0X1282A8);
	OpOff		(x,	129,	0X1282A8);
	MakeWord	(x=0X1282AC);
	OpOff		(x,	0,	0X1282A8);
	OpOff		(x,	128,	0X1282A8);
	OpOff		(x,	1,	0X1282A8);
	OpOff		(x,	129,	0X1282A8);
	MakeWord	(x=0X1282AE);
	OpOff		(x,	0,	0X1282A8);
	OpOff		(x,	128,	0X1282A8);
	OpOff		(x,	1,	0X1282A8);
	OpOff		(x,	129,	0X1282A8);
	MakeCode	(x=0X1282B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1282B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1282C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1282CC);
	MakeArray	(0X1282CC,	0XA);
	MakeName	(0X1282CC,	"SpellEntityLayout_Desoul1");
	MakeByte	(0X1282D6);
	MakeArray	(0X1282D6,	0XA);
	MakeName	(0X1282D6,	"SpellEntityLayout_Desoul2");
	MakeCode	(x=0X1282E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1282E0,	"spellanimationUpdate_Debuff");
	MakeCode	(x=0X1282EC);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1282F6);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1282FC);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128302);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12830C);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128320);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12832C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128346);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128356);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12836A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12837A);
	MakeCode	(x=0X12838C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12839C);
	MakeByte	(0X1283C4);
	MakeArray	(0X1283C4,	0X1E);
	MakeName	(0X1283C4,	"SpellEntityLayout_Debuff");
	MakeCode	(x=0X1283E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1283EE);
	MakeCode	(0X1283F0);
	MakeCode	(x=0X1283F2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128412);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128424);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128428);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128432);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12843A);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128440);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12844A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128450);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128454);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12845C);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128468);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12846C);
	OpDecimal	(x,	0);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128474);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12847C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128480);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12848A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128492);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128498);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1284A2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1284A8);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1284AC);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1284B4);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1284C0);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1284C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1284CA);
	OpDecimal	(x,	0);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1284D2);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1284D8);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1284E0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1284E4);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1284EE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1284F6);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1284FC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128506);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12850C);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128510);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128518);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128524);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128528);
	OpDecimal	(x,	0);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128530);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128536);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X128536,	"UpdateSpellAnimation_Healing");
	MakeCode	(x=0X12853A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12853C);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128548);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12854C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X128554);
	OpOff		(x,	0,	0X128554);
	OpOff		(x,	128,	0X128554);
	OpOff		(x,	1,	0X128554);
	OpOff		(x,	129,	0X128554);
	MakeWord	(x=0X128556);
	OpOff		(x,	0,	0X128554);
	OpOff		(x,	128,	0X128554);
	OpOff		(x,	1,	0X128554);
	OpOff		(x,	129,	0X128554);
	MakeWord	(x=0X128558);
	OpOff		(x,	0,	0X128554);
	OpOff		(x,	128,	0X128554);
	OpOff		(x,	1,	0X128554);
	OpOff		(x,	129,	0X128554);
	MakeCode	(0X12855A);
	MakeCode	(0X128560);
	MakeCode	(x=0X128564);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12856E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128580);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128592);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128596);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128598);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12859E);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1285A8);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1285AC);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1285B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1285BC);
	MakeCode	(x=0X1285BE);
	OpDecimal	(x,	0);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1285C8);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1285D4);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1285D8);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1285DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X1285F4,	0,	"                ");
	MakeCode	(x=0X1285F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1285FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128604);
	OpDecimal	(x,	0);
	ExtLinB		(0X12860A,	0,	"                ");
	MakeCode	(x=0X128612);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X128618);
	MakeCode	(x=0X12861A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12862C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128630);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128634);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12863E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12864A);
	OpDecimal	(x,	0);
	MakeByte	(0X12865E);
	MakeArray	(0X12865E,	0XA0);
	MakeName	(0X12865E,	"SpellEntityLayout_Healing1");
	MakeByte	(0X1286FE);
	MakeArray	(0X1286FE,	0X32);
	MakeName	(0X1286FE,	"SpellEntityLayout_Healing2");
	MakeCode	(0X128730);
	MakeName	(0X128730,	"UpdateSpellAnimation_MachineGun");
	MakeCode	(x=0X128736);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128742);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X12874A,	"set sprite layer");
	MakeRptCmt	(0X12874C,	"set number of graphics pieces : 1 piece");
	MakeRptCmt	(0X12874E,	"set entity's X position");
	MakeCode	(x=0X128750);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128758);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12875C);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X12876E);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X128774);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X128798);
	MakeName	(0X128798,	"spellanimationUpdate_Crossbow");
	MakeCode	(x=0X12879E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1287AA);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X1287B2,	"set sprite layer");
	MakeRptCmt	(0X1287B4,	"set number of graphics pieces : 1 piece");
	MakeRptCmt	(0X1287B6,	"set entity's X position");
	MakeCode	(x=0X1287B8);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1287BC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1287CA);
	MakeCode	(x=0X1287D2);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1287D6);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1287E4);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1287EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128808);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128818);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128820);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128834);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12883E);
	MakeCode	(x=0X128856);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12885A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12885E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12888E);
	MakeArray	(0X12888E,	0X4);
	MakeCode	(0X128892);
	MakeWord	(0X128894);
	MakeWord	(0X128896);
	MakeWord	(0X128898);
	MakeWord	(0X12889A);
	MakeWord	(0X12889C);
	MakeWord	(0X12889E);
	MakeByte	(0X1288A0);
	MakeArray	(0X1288A0,	0X14);
	MakeName	(0X1288A0,	"SpellEntityLayout_MachineGun");
	ExtLinA		(0X1288B4,	0,	"        module");
	MakeCode	(x=0X1288B4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1288B4,	"UpdateSpellAnimation_LightningBreath");
	MakeRptCmt	(0X1288C0,	"set sprite layer");
	MakeRptCmt	(0X1288C2,	"set number of graphics pieces : 6 pieces");
	MakeCode	(x=0X1288C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1288D4);
	MakeCode	(x=0X1288DC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1288E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1288EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1288FA);
	MakeCode	(x=0X128902);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X128910);
	MakeArray	(0X128910,	0X78);
	MakeName	(0X128910,	"SpellEntityLayout_LightningBreath");
	MakeCode	(0X128988);
	MakeCode	(x=0X12898E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12899A);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X1289A2,	"D3 = X position");
	MakeCode	(x=0X1289A8);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1289B0);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1289BC);
	OpEnumEx		(x,	1,	GetEnum("SpellEntity_Offset"),0);
	MakeRptCmt	(0X1289C0,	"set number of graphics pieces : 2 pieces");
	MakeRptCmt	(0X1289C2,	"change layer of pieces");
	MakeCode	(x=0X1289DA);
	OpEnumEx		(x,	0,	GetEnum("SpellEntity_Offset"),0);
	MakeCode	(x=0X1289E4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X1289F4,	0,	"                ");
	MakeCode	(x=0X1289F8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128A08);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X128A14,	0,	"                ");
	MakeCode	(x=0X128A1C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128A38);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X128A38,	"spellanimationUpdate_Laser");
	MakeCode	(x=0X128A42);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128A52);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X128A5E,	"branch if animation is mirrored");
	ExtLinA		(0X128A64,	0,	"                ");
	ExtLinA		(0X128A64,	1,	"                ; Blue Laser");
	MakeCode	(x=0X128A64);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128A74);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128A84);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X128A98);
	MakeCode	(x=0X128AA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128AB6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128ABA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinA		(0X128AC4,	0,	"                ");
	ExtLinA		(0X128AC4,	1,	"                ; End animation");
	MakeCode	(x=0X128AC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128AD8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128ADE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128AE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X128AF2,	0,	"        modend");
	MakeByte	(0X128AF4);
	MakeByte	(0X128AF5);
	MakeByte	(0X128AF6);
	MakeByte	(0X128AF7);
	MakeByte	(0X128AF8);
	MakeByte	(0X128AF9);
	MakeByte	(0X128AFA);
	MakeByte	(0X128AFB);
	MakeByte	(0X128AFC);
	MakeByte	(0X128AFD);
	MakeByte	(0X128AFE);
	MakeByte	(0X128AFF);
	MakeByte	(0X128B00);
	MakeByte	(0X128B01);
	MakeByte	(0X128B02);
	MakeByte	(0X128B03);
	MakeByte	(0X128B04);
	MakeByte	(0X128B05);
	MakeByte	(0X128B06);
	MakeByte	(0X128B07);
	MakeByte	(0X128B08);
	MakeByte	(0X128B09);
	MakeByte	(0X128B0A);
	MakeByte	(0X128B0B);
	MakeByte	(0X128B0C);
	MakeByte	(0X128B0D);
	MakeByte	(0X128B0E);
	MakeByte	(0X128B0F);
	MakeByte	(0X128B10);
	MakeByte	(0X128B11);
	MakeByte	(0X128B12);
	MakeByte	(0X128B13);
	MakeByte	(0X128B14);
	MakeByte	(0X128B15);
	MakeByte	(0X128B16);
	MakeByte	(0X128B17);
	MakeByte	(0X128B18);
	MakeByte	(0X128B19);
	MakeByte	(0X128B1A);
	MakeByte	(0X128B1B);
	MakeByte	(0X128B1C);
	MakeByte	(0X128B1D);
	MakeByte	(0X128B1E);
	MakeByte	(0X128B1F);
	MakeByte	(0X128B20);
	MakeByte	(0X128B21);
	MakeByte	(0X128B22);
	MakeByte	(0X128B23);
	MakeByte	(0X128B24);
	MakeByte	(0X128B25);
	MakeByte	(0X128B26);
	MakeByte	(0X128B27);
	MakeByte	(0X128B28);
	MakeByte	(0X128B29);
	MakeByte	(0X128B2A);
	MakeByte	(0X128B2B);
	MakeByte	(0X128B2C);
	MakeByte	(0X128B2D);
	MakeByte	(0X128B2E);
	MakeByte	(0X128B2F);
	MakeByte	(0X128B30);
	MakeByte	(0X128B31);
	MakeByte	(0X128B32);
	MakeByte	(0X128B33);
	MakeByte	(0X128B34);
	MakeByte	(0X128B35);
	MakeByte	(0X128B36);
	MakeByte	(0X128B37);
	MakeByte	(0X128B38);
	MakeByte	(0X128B39);
	MakeByte	(0X128B3A);
	MakeByte	(0X128B3B);
	MakeByte	(0X128B3C);
	MakeByte	(0X128B3D);
	MakeByte	(0X128B3E);
	MakeByte	(0X128B3F);
	MakeByte	(0X128B40);
	MakeByte	(0X128B41);
	MakeByte	(0X128B42);
	MakeArray	(0X128B42,	0XA5);
	MakeName	(0X128B42,	"SpellEntityLayout_Laser");
	MakeByte	(0X128BE7);
	MakeArray	(0X128BE7,	0X3C);
	MakeName	(0X128BE7,	"SpellEntityLayout_LaserEye");
	MakeByte	(0X128C23);
	MakeArray	(0X128C23,	0XE1);
	MakeName	(0X128C23,	"SpellEntityLayout_Laser_Mirrored");
	MakeCode	(x=0X128D04);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X128D04,	"spellanimationUpdate_BusterShot");
	MakeCode	(x=0X128D14);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128D18);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128D1C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128D20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128D2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X128D42);
	MakeCode	(0X128D58);
	MakeCode	(x=0X128D5E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128D6C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X128D7E);
	MakeByte	(0X128D9E);
	MakeArray	(0X128D9E,	0X78);
	MakeName	(0X128D9E,	"SpellEntityLayout_BusterShot");
	MakeCode	(x=0X128E16);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X128E16,	"spellanimationUpdate_SwordBeam");
	MakeCode	(x=0X128E26);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128E2A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128E2E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128E32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128E40);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X128E4E);
	MakeCode	(0X128E64);
	MakeCode	(x=0X128E6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128E78);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X128E8A);
	MakeByte	(0X128E8B);
	MakeByte	(0X128E8C);
	MakeByte	(0X128E8D);
	MakeByte	(0X128E8E);
	MakeByte	(0X128E8F);
	MakeByte	(0X128E90);
	MakeByte	(0X128E91);
	MakeByte	(0X128E92);
	MakeByte	(0X128E93);
	MakeByte	(0X128E94);
	MakeByte	(0X128E95);
	MakeByte	(0X128E96);
	MakeByte	(0X128E97);
	MakeByte	(0X128E98);
	MakeByte	(0X128E99);
	MakeByte	(0X128E9A);
	MakeByte	(0X128E9B);
	MakeByte	(0X128E9C);
	MakeByte	(0X128E9D);
	MakeByte	(0X128E9E);
	MakeByte	(0X128E9F);
	MakeByte	(0X128EA0);
	MakeByte	(0X128EA1);
	MakeByte	(0X128EA2);
	MakeByte	(0X128EA3);
	MakeByte	(0X128EA4);
	MakeByte	(0X128EA5);
	MakeByte	(0X128EA6);
	MakeByte	(0X128EA7);
	MakeByte	(0X128EA8);
	MakeByte	(0X128EA9);
	MakeByte	(0X128EAA);
	MakeArray	(0X128EAA,	0X5A);
	MakeName	(0X128EAA,	"SpellEntityLayout_EnergyBlast");
	MakeCode	(x=0X128F04);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X128F04,	"spellanimationUpdate_PowerFist");
	MakeCode	(x=0X128F14);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128F18);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128F1C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128F20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128F32);
	OpDecimal	(x,	0);
	MakeCode	(x=0X128F36);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X128F54);
	MakeCode	(x=0X128F5A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128F68);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X128F78);
	MakeByte	(0X128F79);
	MakeByte	(0X128F7A);
	MakeByte	(0X128F7B);
	MakeByte	(0X128F7C);
	MakeByte	(0X128F7D);
	MakeByte	(0X128F7E);
	MakeByte	(0X128F7F);
	MakeByte	(0X128F80);
	MakeByte	(0X128F81);
	MakeByte	(0X128F82);
	MakeByte	(0X128F83);
	MakeByte	(0X128F84);
	MakeByte	(0X128F85);
	MakeByte	(0X128F86);
	MakeByte	(0X128F87);
	MakeByte	(0X128F88);
	MakeByte	(0X128F89);
	MakeByte	(0X128F8A);
	MakeByte	(0X128F8B);
	MakeByte	(0X128F8C);
	MakeByte	(0X128F8D);
	MakeByte	(0X128F8E);
	MakeByte	(0X128F8F);
	MakeByte	(0X128F90);
	MakeByte	(0X128F91);
	MakeByte	(0X128F92);
	MakeByte	(0X128F93);
	MakeByte	(0X128F94);
	MakeByte	(0X128F95);
	MakeByte	(0X128F96);
	MakeByte	(0X128F97);
	MakeCode	(0X128F98);
	MakeCode	(x=0X128FA0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128FC2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X128FCE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X128FD2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X128FD6);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FD8);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FDA);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FDC);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FDE);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FE0);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FE2);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FE4);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FE6);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FE8);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FEA);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FEC);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FEE);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FF0);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FF2);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FF4);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FF6);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FF8);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FFA);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FFC);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X128FFE);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X129000);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X129002);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X129004);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X129006);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X129008);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X12900A);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X12900C);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X12900E);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeWord	(x=0X129010);
	OpOff		(x,	0,	0X128FD6);
	OpOff		(x,	128,	0X128FD6);
	OpOff		(x,	1,	0X128FD6);
	OpOff		(x,	129,	0X128FD6);
	MakeCode	(0X129012);
	MakeRptCmt	(0X129072,	"\"[Hero]![Line]Goblins! Runefaust[Line]must be up to something![Wait2]\"");
	MakeCode	(x=0X129076);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1290CC,	"\"We can take them,[Line][Hero]![Wait2]\"");
	MakeCode	(x=0X1290D0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12911E,	"\"Move it, vermin! Find the key[Line]to this blasted door![Wait2]\"");
	MakeCode	(x=0X129122);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12913E,	"\"C'mon, we're almost in![Wait2]\"");
	MakeCode	(x=0X129142);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12915E,	"\"Where is that blasted key?[Wait2]\"");
	MakeCode	(x=0X129162);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12917E,	"\"What? Blast it! Those fools[Line]from Guardiana are here![Wait2]\"");
	MakeCode	(x=0X129182);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X1291C8);
	MakeArray	(0X1291C8,	0X4);
	MakeCode	(0X1291CC);
	MakeCode	(x=0X1291D6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1291E0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1291E6);
	OpDecimal	(x,	0);
	MakeCode	(x=0X129200);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X129206);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X129222,	"\"Earthquake![Wait2]\"");
	MakeCode	(x=0X129226);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X12922A);
	MakeArray	(0X12922A,	0X4);
	MakeCode	(0X12922E);
	MakeCode	(x=0X129234);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X129240);
	MakeArray	(0X129240,	0X4);
	MakeCode	(0X129244);
	MakeRptCmt	(0X129288,	"\"Attack, goblins and dwarves![Line]Strike a blow for the honor[Line]of Runefaust![Wait2]\"");
	MakeCode	(x=0X12928C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129292);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12929A);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X1292A2,	"\"The earthquake blocked the[Line]road. Head north, but be[Line]ready for battle.[Wait2]\"");
	MakeCode	(x=0X1292A6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1292F4,	"\"No one enters Guardiana while[Line]we live! For Darksol![Wait2]\"");
	MakeCode	(x=0X1292F8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129340,	"\"Death to Guardiana![Wait2]\"");
	MakeCode	(x=0X129344);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12938C,	"\"Death to Guardiana![Wait2]\"");
	MakeCode	(x=0X129390);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129396);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12939E);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X1293A6,	"\"[Hero]! Enemies await[Line]you on the road to Alterone.[Line]Take all precautions![Wait2]\"");
	MakeCode	(x=0X1293AA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X1293B6);
	MakeRptCmt	(0X12941A,	"\"Lowly worms, I shall crush[Line]you beneath my heel. Attack,[Line]soldiers of Runefaust![Wait2]\"");
	MakeCode	(x=0X12941E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12945A,	"\"Lord Kane, Lord Darksol[Line]commands you to return to[Line]Runefaust immediately.[Wait2]\"");
	MakeCode	(x=0X12945E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129484,	"\"Tell him I'm on my way.[Wait2]\"");
	MakeCode	(x=0X129488);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129494,	"\"Yes, sir.[Wait2]\"");
	MakeCode	(x=0X129498);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1294EA,	"\"A shame I can't stay to watch[Line]you meet your doom! My troops[Line]can handle the likes of you.[Wait2]\"");
	MakeCode	(x=0X1294EE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129526);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12952E);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X129536,	"\"Our enemies seek to stop you[Line]from reaching Anri in[Line]Manarina. You must succeed![Wait2]\"");
	MakeCode	(x=0X12953A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129546);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12954E);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X129556,	"\"Behold the dreaded Cavern of[Line]Darkness! You must defeat the[Line]monsters to gain the orb![Wait2]\"");
	MakeCode	(x=0X12955A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X129566);
	MakeRptCmt	(0X1295CA,	"\"Well, [Hero], remember[Line]me? You'll soon wish you'd[Line]taken my advice in Alterone![Wait2]\"");
	MakeCode	(x=0X1295CE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1295EA,	"\"Come, my pets! Look who's[Line]come to play with you. Why,[Line]it's the Shining Force![Wait2]\"");
	MakeCode	(x=0X1295EE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12960A,	"\"I leave you in good hands,[Line][Hero].[Wait2][Line]I have more vital matters[Line]to attend to right now![Wait2]\"");
	MakeCode	(x=0X12960E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12963E);
	MakeCode	(x=0X129674);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1296A4,	"\"Been praying, and well you[Line]might![Wait2]\"");
	MakeCode	(x=0X1296A8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X1296D0);
	MakeArray	(0X1296D0,	0X4);
	MakeCode	(0X1296D4);
	MakeRptCmt	(0X1296E2,	"\"You and your pitiful Shining[Line]Force cannot be saved by[Line]prayers! You won't escape![Wait2]\"");
	MakeCode	(x=0X1296E6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129702,	"\"How fitting that you perish[Line]in a former chapel of Light![Line][Wait2]\"");
	MakeCode	(x=0X129706);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129722,	"\"I leave you now in the care[Line]of my minions, who know well[Line]what to do with you....[Wait2]\"");
	MakeCode	(x=0X129726);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129742,	"\"Undead! Dispose of these[Line]pests once and for all![Wait2]\"");
	MakeCode	(x=0X129746);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12978E);
	MakeRptCmt	(0X1297FE,	"\"Master, we have found it![Wait2]\"");
	MakeCode	(x=0X129802);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129862,	"\"The Laser Eye! At last![Wait2]\"");
	MakeCode	(x=0X129866);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129882,	"\"This is the end of that[Line]cursed Shining Force![Wait2]\"");
	MakeCode	(x=0X129886);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1298A2,	"\"Get rid of those men from[Line]Bustoke. They are of no[Line]further use to us.[Wait2]\"");
	MakeCode	(x=0X1298A6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129906,	"\"Alert! Intruders![Wait2]\"");
	MakeCode	(x=0X12990A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12996A,	"\"What? The Shining Force![Wait2]\"");
	MakeCode	(x=0X12996E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X1299A2,	"\"Stop them! We must have time[Line]to remove the Laser Eye![Wait2]\"");
	MakeCode	(x=0X1299A6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X1299C4);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X1299CC);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X1299D4,	"\"Look, they are trying to[Line]block our way to the bridge.[Line]Attack them, Shining Force![Wait2]\"");
	MakeCode	(x=0X1299D8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X1299E4);
	MakeCode	(x=0X129A02);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X129A84,	"\"Traitor! You've betrayed Lord[Line]Kane![Wait2]\"");
	MakeCode	(x=0X129A88);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129AD8,	"\"I owe no allegiance to you or[Line]him, foul fiend that he is![Wait2]\"");
	MakeCode	(x=0X129ADC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129B2A,	"\"You are only a mercenary. You[Line]do what we pay you to do![Wait2]\"");
	MakeCode	(x=0X129B2E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129B7E,	"\"Here, I return your gold. I[Line]shall no longer follow your[Line]orders, toad![Wait2]\"");
	MakeCode	(x=0X129B82);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129BD0,	"\"If you are not with us, then[Line]you are against us![Wait2]\"");
	MakeCode	(x=0X129BD4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129C0A,	"\"I will have the pleasure of[Line]killing you myself![Wait2]\"");
	MakeCode	(x=0X129C0E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129C12);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X129C30);
	MakeArray	(0X129C30,	0X4);
	MakeCode	(0X129C34);
	MakeRptCmt	(0X129C76,	"\"Vile fiend! Aiiiieeeee....[Wait2]\"");
	MakeCode	(x=0X129C7A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X129C84);
	MakeArray	(0X129C84,	0X4);
	MakeCode	(0X129C88);
	MakeRptCmt	(0X129CD6,	"\"Ha, ha! Thus fall all who[Line]dare to oppose the will of[Line]Darksol![Wait2]\"");
	MakeCode	(x=0X129CDA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X129CE6);
	MakeRptCmt	(0X129D46,	"\"The time for battle has come.[Line]For King Ramladu![Wait2]\"");
	MakeCode	(x=0X129D4A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129D54);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X129D5C);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X129D64,	"\"General Elliott is said to be[Line]the finest swordsman in all[Line]of Rune.[Wait2][Line]Take care, [Hero]![Wait2]\"");
	MakeCode	(x=0X129D68);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129D74);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X129D7C);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X129D84,	"\"[Hero], you must break[Line]through to reach the harbor.[Line]Be careful, but be quick![Wait2]\"");
	MakeCode	(x=0X129D88);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X129D94);
	MakeRptCmt	(0X129DFA,	"\"At last we meet, [Hero].[Line]Soon you and your misfits[Line]will trouble us no longer![Wait2]\"");
	MakeCode	(x=0X129DFE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129E08);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X129E10);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X129E18,	"\"Yes, that is Balbazak, a[Line]commander of the Runefaust[Line]army. You must destroy him![Wait2]\"");
	MakeCode	(x=0X129E1C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129E28);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X129E30);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X129E38,	"\"The ship is surrounded by[Line]monsters, [Hero]![Line]Prepare to defend it![Wait2]\"");
	MakeCode	(x=0X129E3C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X129E50);
	MakeRptCmt	(0X129EAC,	"\"I invoke a path before[Line]me....What?[Wait2]\"");
	MakeCode	(x=0X129EB0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X129ECC,	"\"Shining Force! I was so[Line]close...so close! I shall[Line]destroy you all![Wait2]\"");
	MakeCode	(x=0X129ED0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129ED6);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X129EDE);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X129EE6,	"\"Here we go again. We were[Line]just about to land, too! Go[Line]get them![Wait2]\"");
	MakeCode	(x=0X129EEA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X129EFE);
	MakeRptCmt	(0X129F42,	"\"These Guardiana fools must be[Line]stopped. Kane's mission is[Line]vital. Attack![Wait2]\"");
	MakeCode	(x=0X129F46);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129F4A);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X129F52);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X129F5A,	"\"[Hero], you must quickly[Line]break through to Dragonia![Wait2]\"");
	MakeCode	(x=0X129F5E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X129F6A);
	MakeRptCmt	(0X129FB6,	"\"Ha! I knew you couldn't hide[Line]in there forever! Come on[Line]out, little hero![Wait2]\"");
	MakeCode	(x=0X129FBA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X129FC4);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X129FCC);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X129FD4,	"\"[Hero], be careful.[Line]Remember that Kane killed[Line]Varios![Wait2]\"");
	MakeCode	(x=0X129FD8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X129FE4);
	MakeRptCmt	(0X129FF4,	"\"Well, [Hero], we meet[Line]once more.  For the last time,[Line]I fear, as you will die here.[Wait2][Line]My minions shall take care of[Line]you, but if they fail, I await[Line]you in Demon Castle![Wait2]\"");
	MakeCode	(x=0X129FF8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A004);
	MakeRptCmt	(0X12A064,	"\"Well, here's the little hero[Line]coming for my Sword of Light![Line]Take it, if you dare![Wait2]\"");
	MakeCode	(x=0X12A068);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12A084,	"\"You'll never leave my castle,[Line]you pitiful fools![Wait2]\"");
	MakeCode	(x=0X12A088);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12A0A4,	"\"This is as close as you'll[Line]ever come to the Sword of[Line]Light![Wait2]\"");
	MakeCode	(x=0X12A0A8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A0B2);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12A0BA);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12A0C2,	"\"[Hero], take great care.[Line]Mishaela is a powerful[Line]wizardess, a dangerous foe![Wait2]\"");
	MakeCode	(x=0X12A0C6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A0D2);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12A0DA);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12A0E2,	"\"The Tower of the Ancients is[Line]to the east. Hurry, while[Line]there's still time![Wait2]\"");
	MakeCode	(x=0X12A0E6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A0F2);
	MakeRptCmt	(0X12A136,	"\"Stop them! Lord Darksol must[Line]not be disturbed![Wait2]\"");
	MakeCode	(x=0X12A13A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A13E);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12A146);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12A14E,	"\"We must get inside the tower![Line]Smash through these monsters[Line]quickly, [Hero]![Wait2]\"");
	MakeCode	(x=0X12A152);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A15E);
	MakeRptCmt	(0X12A16E,	"\"Screech! Kill...kill....[Wait2]\"");
	MakeCode	(x=0X12A172);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A17E);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12A186);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12A18E,	"\"To the south is Runefaust.[Line]Their army approaches. You[Line]must fight your way in.[Wait2]\"");
	MakeCode	(x=0X12A192);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A19E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12A1F4,	"\"Long have I waited for[Line]this moment, [Hero]![Line]Prepare to meet your death.[Wait2]\"");
	MakeCode	(x=0X12A1F8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A230);
	MakeCode	(x=0X12A244);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12A24C);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12A254,	"\"At last, [Hero]!  The[Line]Castle of the Ancients. The[Line]end is near, for good or ill![Wait2]\"");
	MakeCode	(x=0X12A258);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A262);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X12A2EA,	"\"None shall pass Colossus,[Line]the eternal sentinel![Line]Leave now![Wait2]\"");
	MakeCode	(x=0X12A2EE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A2F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12A35C);
	MakeArray	(0X12A35C,	0X4);
	MakeCode	(0X12A360);
	MakeCode	(x=0X12A368);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12A370);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12A378,	"\"Colossus! I've heard of it[Line]in legends! [Hero]![Line]They are attacking![Wait2]\"");
	MakeCode	(x=0X12A37C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X12A388);
	MakeByte	(0X12A389);
	MakeByte	(0X12A38A);
	MakeByte	(0X12A38B);
	MakeByte	(0X12A38C);
	MakeByte	(0X12A38D);
	MakeByte	(0X12A38E);
	MakeByte	(0X12A38F);
	MakeByte	(0X12A390);
	MakeByte	(0X12A391);
	MakeByte	(0X12A392);
	MakeByte	(0X12A393);
	MakeByte	(0X12A394);
	MakeByte	(0X12A395);
	MakeByte	(0X12A396);
	MakeByte	(0X12A397);
	MakeByte	(0X12A398);
	MakeByte	(0X12A399);
	MakeByte	(0X12A39A);
	MakeByte	(0X12A39B);
	MakeByte	(0X12A39C);
	MakeByte	(0X12A39D);
	MakeByte	(0X12A39E);
	MakeByte	(0X12A39F);
	MakeByte	(0X12A3A0);
	MakeByte	(0X12A3A1);
	MakeByte	(0X12A3A2);
	MakeByte	(0X12A3A3);
	MakeByte	(0X12A3A4);
	MakeByte	(0X12A3A5);
	MakeByte	(0X12A3A6);
	MakeByte	(0X12A3A7);
	MakeByte	(0X12A3A8);
	MakeByte	(0X12A3A9);
	MakeByte	(0X12A3AA);
	MakeByte	(0X12A3AB);
	MakeByte	(0X12A3AC);
	MakeByte	(0X12A3AD);
	MakeByte	(0X12A3AE);
	MakeByte	(0X12A3AF);
	MakeByte	(0X12A3B0);
	MakeByte	(0X12A3B1);
	MakeByte	(0X12A3B2);
	MakeByte	(0X12A3B3);
	MakeCode	(0X12A3B4);
	MakeCode	(x=0X12A3C8);
	OpHex		(x,	0);
	MakeCode	(x=0X12A3E6);
	OpHex		(x,	0);
	MakeCode	(x=0X12A422);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X12A432,	"\"Dark Dragon! Awake from your[Line]long sleep! The time has come[Line]for you to reclaim this land![Wait2]\"");
	MakeCode	(x=0X12A432);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12A436);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A440);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12A462);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X12A46C,	"\"Awaken, Dark Dragon![Line]Something is wrong....[Wait2]\"");
	MakeCode	(x=0X12A46C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12A470);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12A48C,	"\"[Hero]! Blast![Line]You have meddled for the last[Line]time! Kill them, my servants![Wait2]\"");
	MakeCode	(x=0X12A48C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12A490);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A49A);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12A4A2);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12A4AA,	"\"[Hero]! You must stop[Line]Darksol before he completes[Line]his foul ceremony! Attack![Wait2]\"");
	MakeCode	(x=0X12A4AA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12A4AE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A4BA);
	MakeCode	(x=0X12A4C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12A4CA);
	OpEnumEx		(x,	0,	GetEnum("ControllerInputs"),0);
	MakeCode	(x=0X12A4D4);
	OpSign		(x,	0);
	OpHex		(x,	0);
	MakeCode	(x=0X12A4DA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12A4E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12A4EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12A4EE);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeName	(0X12A4EE,	"rjt_BattleEndScripts");
	MakeWord	(x=0X12A4F0);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A4F2);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A4F4);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A4F6);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A4F8);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A4FA);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A4FC);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A4FE);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A500);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A502);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A504);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A506);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A508);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A50A);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A50C);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A50E);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A510);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A512);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A514);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A516);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A518);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A51A);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A51C);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A51E);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A520);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A522);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A524);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A526);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeWord	(x=0X12A528);
	OpOff		(x,	0,	0X12A4EE);
	OpOff		(x,	128,	0X12A4EE);
	OpOff		(x,	1,	0X12A4EE);
	OpOff		(x,	129,	0X12A4EE);
	MakeCode	(0X12A52A);
	MakeName	(0X12A52A,	"bes00");
	MakeRptCmt	(0X12A550,	"\"Fools...you have won here,[Line]but Lord Kane of Runefaust is[Line]even now attacking Guardiana![Wait2]\"");
	MakeCode	(x=0X12A554);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A560);
	MakeName	(0X12A560,	"nullsub_12A560");
	MakeCode	(0X12A562);
	MakeName	(0X12A562,	"bes05");
	MakeRptCmt	(0X12A588,	"\"No! It cannot be! After all[Line]these centuries....[Wait2]\"");
	MakeCode	(x=0X12A58C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A598);
	MakeName	(0X12A598,	"bes06");
	MakeRptCmt	(0X12A5A6,	"\"Fools! Light will never defeat[Line]the Darkness....[Wait2]\"");
	MakeCode	(x=0X12A5AA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A5B6);
	MakeName	(0X12A5B6,	"bes08");
	MakeRptCmt	(0X12A5DC,	"\"You think you've won, but[Line]you've failed. The Laser Eye[Line]is ours now![Wait2]\"");
	MakeCode	(x=0X12A5E0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A5EC);
	MakeName	(0X12A5EC,	"bes10");
	MakeRptCmt	(0X12A612,	"\"You may have beaten us here,[Line]but General Elliott will stop[Line]you in Pao![Wait2]\"");
	MakeCode	(x=0X12A616);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A622);
	MakeName	(0X12A622,	"bes11");
	MakeRptCmt	(0X12A650,	"\"Perhaps you have the strength[Line]to rescue King Ramladu and[Line]Runefaust! Stop Darksol![Wait2][Line]Promise that you will free[Line]Runefaust, known as Protectora[Line]before Darksol came....[Wait2]\"");
	MakeCode	(x=0X12A654);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A666);
	MakeName	(0X12A666,	"bes12");
	MakeCode	(0X12A68C);
	MakeCode	(x=0X12A6AE);
	OpDecimal	(x,	0);
	MakeName	(0X12A6AE,	"bes13");
	MakeCode	(x=0X12A6BA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12A6C2);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X12A6CA,	"\"[Hero]! Take the ship,[Line]but please spare my life![Line]Please![Wait2]\"");
	MakeCode	(x=0X12A6CE);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A6D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12A6DE,	"\"You don't want to[Line]kill me, do you?[Line]Please let me go.[Wait2]\"");
	MakeCode	(x=0X12A6E2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12A6E6,	"\"Thank you! Take the ship, go[Line]after Darksol![Wait2]\"");
	MakeCode	(0X12A6E6);
	MakeCode	(x=0X12A6EA);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12A6F4);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X12A72C,	"\"Balbazak, you betrayed me![Wait2]\"");
	MakeCode	(x=0X12A730);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12A744,	"\"No, no, please Darksol![Line]Leave me in peace![Wait2]\"");
	MakeCode	(x=0X12A748);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X12A752);
	MakeArray	(0X12A752,	0X4);
	MakeCode	(0X12A756);
	MakeRptCmt	(0X12A766,	"\"You disgust me, Balbazak![Line]Leave you in peace? I will[Line]leave you in pieces![Wait2]\"");
	MakeCode	(x=0X12A76A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12A784,	"\"Forgive me![Wait2]\"");
	MakeCode	(x=0X12A788);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12A7A2,	"\"Too late, worm! Receive your[Line]punishment for failure![Wait2]\"");
	MakeCode	(x=0X12A7A6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X12A7A8);
	MakeArray	(0X12A7A8,	0X4);
	MakeCode	(0X12A7AC);
	MakeRptCmt	(0X12A7E0,	"\"I am dying, [Hero]....[Line]You must kill Darksol...[Line]free Runefaust....[Wait2]\"");
	MakeCode	(x=0X12A7E4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A7F6);
	MakeName	(0X12A7F6,	"nullsub_12A7F6");
	MakeCode	(0X12A7F8);
	MakeName	(0X12A7F8,	"bes15");
	MakeRptCmt	(0X12A81E,	"\"Arrghh...I was so close...the[Line]way to Metapha...almost[Line]ours....[Wait2]\"");
	MakeCode	(x=0X12A822);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A82E);
	MakeName	(0X12A82E,	"nullsub_12A82E");
	MakeCode	(0X12A830);
	MakeName	(0X12A830,	"bes17");
	MakeRptCmt	(0X12A856,	"\"You'll never beat Kane,[Line]Shining Fools![Wait2]\"");
	MakeCode	(x=0X12A85A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A866);
	MakeName	(0X12A866,	"bes18");
	MakeRptCmt	(0X12A894,	"\"Arrgh! My mask[Line]is...breaking![Wait2]\"");
	MakeCode	(x=0X12A898);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X12A8A4);
	MakeArray	(0X12A8A4,	0X4);
	MakeCode	(0X12A8A8);
	MakeRptCmt	(0X12A8B2,	"\"Wh...where am I? I[Line]remember now. Darksol masked[Line]my face to control me....[Wait2][Line]What have I done?[Line]He even made me fight you![Line]Forgive me, [Hero]![Wait2]\"");
	MakeCode	(x=0X12A8B6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A8EC);
	MakeName	(0X12A8EC,	"nullsub_12A8EC");
	MakeCode	(0X12A8EE);
	MakeName	(0X12A8EE,	"bes20");
	MakeRptCmt	(0X12A91C,	"\"Though you can take...my[Line]sword...you will never...stop[Line]Darksol.[Wait2][Line]Dark Dragon will be set[Line]free....[Wait2]\"");
	MakeCode	(x=0X12A920);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A932);
	MakeName	(0X12A932,	"nullsub_12A932");
	MakeCode	(0X12A934);
	MakeName	(0X12A934,	"bes22");
	MakeRptCmt	(0X12A984,	"\"Lord Darksol...I have failed[Line]...they're coming...into the[Line]tower....[Wait2]\"");
	MakeCode	(x=0X12A988);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A994);
	MakeName	(0X12A994,	"bes23");
	MakeRptCmt	(0X12A9B0,	"\"This unit...now ceases to[Line]function...mission incomplete[Line]...system failure....[Wait2]\"");
	MakeCode	(x=0X12A9B4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12A9C6);
	MakeName	(0X12A9C6,	"bes24");
	MakeCode	(0X12A9DA);
	MakeName	(0X12A9DA,	"nullsub_12A9DA");
	MakeCode	(0X12A9DC);
	MakeName	(0X12A9DC,	"bes26");
	MakeRptCmt	(0X12A9F8,	"\"I am dying...but my mind is[Line]once more my own. Darksol[Line]was controlling me.[Wait2][Line]You must stop Darksol![Line]If he frees Dark Dragon,[Line]all of Rune is doomed.[Wait2][Line]He has gone to the gate,[Line]to summon the castle from the[Line]depths of the sea. Go![Wait2]\"");
	MakeCode	(x=0X12A9FC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12AA0E);
	MakeName	(0X12AA0E,	"bes27");
	MakeRptCmt	(0X12AA2A,	"\"Fools...Dark Dragon...will[Line]come...to destroy you....[Wait2]\"");
	MakeCode	(x=0X12AA2E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12AA40);
	MakeName	(0X12AA40,	"bes28");
	MakeRptCmt	(0X12AA5C,	"\"Dark Dragon! With my dying[Line]breath...I summon you....[Line]Arise, Dark Dragon![Wait2]\"");
	MakeCode	(x=0X12AA60);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12AA7A,	"\"[Dict][Line]\"");
	MakeCode	(x=0X12AA7E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12AA9A,	"\"Yes! At last, you are[Line]awakening![Wait2]\"");
	MakeCode	(x=0X12AA9E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12AAA0,	"\"I offer myself to you, Dark[Line]Dragon! Use my power to help[Line]you cast off your bonds.[Wait2]\"");
	MakeCode	(x=0X12AAA4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12AB44,	"\"You are free once more! Let[Line]all of Rune tremble! I die[Line]fulfilled! Cringe fools![Wait2]\"");
	MakeCode	(x=0X12AB48);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12AB7E);
	MakeName	(0X12AB7E,	"bes29");
	MakeCode	(0X12ABCA);
	MakeCode	(x=0X12ABCC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X12ABCC,	"ExecutePostBattleScript");
	MakeCode	(x=0X12ABD8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12ABDC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12ABE0);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeName	(0X12ABE0,	"rjt_PostBattleScripts");
	MakeWord	(x=0X12ABE2);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABE4);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABE6);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABE8);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABEA);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABEC);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABEE);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABF0);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABF2);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABF4);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABF6);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABF8);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABFA);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABFC);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12ABFE);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC00);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC02);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC04);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC06);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC08);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC0A);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC0C);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC0E);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC10);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC12);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC14);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC16);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC18);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeWord	(x=0X12AC1A);
	OpOff		(x,	0,	0X12ABE0);
	OpOff		(x,	128,	0X12ABE0);
	OpOff		(x,	1,	0X12ABE0);
	OpOff		(x,	129,	0X12ABE0);
	MakeCode	(x=0X12AC1C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12AC1E,	"Ancient gate post-battle cutscene.");
	MakeWord	(x=0X12AC1E);
	OpEnumEx		(x,	0,	GetEnum("Music"),0);
	MakeCode	(0X12AC20);
	MakeCode	(x=0X12AC2A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12AC34);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12AC3A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AC42);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12AC48);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AC56);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X12AC62);
	MakeArray	(0X12AC62,	0X4);
	MakeCode	(x=0X12AC66);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12AC6E);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12AC76,	"\"If that creature spoke truly,[Line]we must return to help defend[Line]Guardiana![Wait2]\"");
	MakeCode	(x=0X12AC7A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12AC84);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12AC8C);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12AC94);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12AC9C,	"\"Well done, Shining Force![Line]Now, enter Guardiana and find[Line]out what's happened there![Wait2]\"");
	MakeCode	(x=0X12ACA0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12ACAC);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12ACB4);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12ACBC,	"\"Excellent! Kane will have to[Line]do better than that to stop[Line]you. On to Alterone![Wait2]\"");
	MakeCode	(x=0X12ACC0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12ACCC);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12ACD4);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12ACDC,	"\"[Hero], there's no time[Line]to lose. Kane must be found[Line]and stopped at all costs.[Wait2][Line]Find out all you can and[Line]be sure to talk to the king[Line]of Alterone![Wait2]\"");
	MakeCode	(x=0X12ACE0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12ACFA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12AD04);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12AD0C);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12AD14,	"\"[Hero], now enter[Line]Manarina! We must inform[Line]Anri about Guardiana![Wait2]\"");
	MakeCode	(x=0X12AD18);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12AD24);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12AD2C);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12AD34,	"\"[Hero], the Orb of Light[Line]must be within that chest.[Line]Take it quickly![Wait2]\"");
	MakeCode	(x=0X12AD38);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12AD44);
	MakeCode	(x=0X12AD4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12ADF4,	"\"She...that evil woman...was[Line]going to take me to Runefaust,[Line]to feed me to a dragon![Wait2][Line]Thank you! I'm going home and[Line]I'm never leaving![Wait2]\"");
	MakeCode	(x=0X12ADF4);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12ADF8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12AE18);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X12AE56);
	MakeCode	(0X12AE6A);
	MakeCode	(x=0X12AE72);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12AE78);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12AE80);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12AE88,	"\"[Hero], the Moon Stone[Line]lies inside the cavern.[Wait2]\"");
	MakeCode	(x=0X12AE8C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12AEA8);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12AEB0);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12AEB8,	"\"Head for the bridge. We need[Line]to get across quickly![Wait2]\"");
	MakeCode	(x=0X12AEBC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12AEC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12AED2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12AEDC,	"12 = first enemy combatant");
	MakeCode	(x=0X12AEDC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AEDE);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AEE6);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AEEE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AF02);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AF06);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AF26);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AF42);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12AF44);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12AF4C,	"\"Whew! I thought I was a[Line]goner, but I caught a branch[Line]and just hung on.[Wait2]\"");
	MakeCode	(x=0X12AF4C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AF50);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12AF52);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AF6E);
	OpDecimal	(x,	0);
	MakeRptCmt	(0X12AF8C,	"\"A great battle! I don't know[Line]who you are, but I want to[Line]tag along![Wait2]\"");
	MakeCode	(x=0X12AF8C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AF90);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeComm	(0X12AFA0,	"branch to this location to skip Pelle's appearance and dialogue");
	MakeCode	(x=0X12AFA0);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12AFA8);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12AFB0,	"\"A good job getting to that[Line]Laser Eye. Hurry on to Pao.[Line]Evil is afoot![Wait2]\"");
	MakeCode	(x=0X12AFB0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AFB4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12AFC0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12AFC4,	"\"With the Laser Eye gone,[Line]the Shining Force heads toward[Line]the moving town of Pao.[Wait2][Line]Knowing that Runefaust is[Line]gathering its forces, our[Line]heroes hurried onward.[Wait2]\"");
	MakeCode	(x=0X12AFC4);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AFC8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12AFCC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12AFD8);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12AFE0);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12AFE8,	"\"Elliott was a great warrior...[Line]too bad he was our enemy.[Wait2][Line]But look, the traveling town[Line]of Pao is coming up again![Wait2]\"");
	MakeCode	(x=0X12AFEC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X12AFFC);
	MakeArray	(0X12AFFC,	0X4);
	MakeCode	(0X12B000);
	MakeCode	(x=0X12B008);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B026);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X12B038);
	MakeCode	(x=0X12B042);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B05C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B074);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X12B086);
	MakeArray	(0X12B086,	0X4);
	MakeCode	(0X12B08A);
	MakeCode	(0X12B092);
	MakeRptCmt	(0X12B0A2,	"\"Take the ship, as that fool[Line]said. You will not survive[Line]the voyage! Ha, ha, ha![Wait2]\"");
	MakeCode	(x=0X12B0A6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B0DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12B0DE,	"\"Thus did the Shining Force[Line]free Uranbatol and set sail[Line]for a land of legend....[Wait2]\"");
	MakeCode	(x=0X12B0E2);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B0F2);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B0FA);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B102,	"\"The ship was damaged in the[Line]battle. We must repair it.[Line]That island over there....[Wait2]\"");
	MakeCode	(x=0X12B106);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B110);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12B1C2,	"\"Thank you for destroying[Line]those monsters! My name is[Line]Shell of Waral.[Wait2][Line]You can repair your ship in[Line]Waral. Please follow me![Wait2]\"");
	MakeCode	(x=0X12B1C6);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B1EC);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B1F4);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B1FC,	"\"I've heard of Waral. We[Line]should be able to get the[Line]ship fixed there.[Wait2]\"");
	MakeCode	(x=0X12B200);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B216);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B21E);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B226,	"\"The ship's helm was destroyed[Line]in the battle. We're now[Line]adrift at sea![Wait2]\"");
	MakeCode	(x=0X12B22A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B236);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12B23A,	"\"The ship drifted off course,[Line]lost at sea. What will become[Line]of the Shining Force?[Wait2]\"");
	MakeCode	(x=0X12B23E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B256);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B25E);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B266,	"\"[Hero], you must[Line]stop Kane before he finds the[Line]Manual of the Seal. Onward![Wait2]\"");
	MakeCode	(x=0X12B26A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B276);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B27E);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B286,	"\"It seems that Darksol is[Line]behind all the evil afoot.[Line]Stop him and it all ends.[Wait2][Line]In any case, let's take[Line]another look at this village.[Wait2][Line]Check the shrine again....[Wait2]\"");
	MakeCode	(x=0X12B28A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B2B0);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B2B8);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B2C0,	"\"Mishaela is said to possess[Line]the Sword of Light. You must[Line]enter her castle and get it![Wait2][Line]With that legendary weapon,[Line]you stand a much better[Line]chance against Darksol.[Wait2]\"");
	MakeCode	(x=0X12B2C4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12B2D0);
	MakeCode	(x=0X12B2E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12B2EC,	"\"Will Darksol release Dark[Line]Dragon from the bonds of the[Line]Ancients?[Wait2][Line]Or will [Hero] stop[Line]Darksol and save all of[Line]Rune from the ultimate evil?[Wait2][Line]The Shining Force hurries[Line]on to Prompt....[Wait2]\"");
	MakeCode	(x=0X12B2F0);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B2FC);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B304);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B30C,	"\"With the Sword of Light you[Line]might be able to defeat[Line]Darksol. We shall see![Wait2]\"");
	MakeCode	(x=0X12B310);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B31C);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B324);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B32C,	"\"Now, on to the Tower of the[Line]Ancients![Wait2]\"");
	MakeCode	(x=0X12B330);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B33C);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B344);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B34C,	"\"Get in there, quickly![Wait2]\"");
	MakeCode	(x=0X12B350);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B35A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X12B36C);
	MakeCode	(x=0X12B378);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B380);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B388,	"\"Now, [Hero], into[Line]Runefaust![Wait2]\"");
	MakeCode	(x=0X12B38C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12B398);
	MakeRptCmt	(0X12B3A8,	"\"Is that the best you can do?[Line]Well, meet my robots,[Line]weaklings![Wait2]\"");
	MakeCode	(x=0X12B3AC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B3B6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B3C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12B3D0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B3E4);
	OpHex		(x,	0);
	MakeCode	(x=0X12B3FA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12B408);
	OpHex		(x,	0);
	MakeCode	(x=0X12B41E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12B42C);
	OpHex		(x,	0);
	MakeCode	(x=0X12B442);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12B450);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B45E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12B468);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B470);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B478);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B480,	"\"[Hero]! Darksol has[Line]already entered the Castle of[Line]the Ancients.  You must hurry![Wait2][Line]I found a secret passage[Line]to the gate. It is in the[Line]entry hall of this castle.[Wait2][Line]Return to town and make[Line]your final preparations. Then[Line]take the passage.[Wait2]\"");
	MakeCode	(x=0X12B484);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B490);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B498);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B4A0,	"\"You've destroyed Colossus![Line]But where is Darksol?[Wait2]\"");
	MakeCode	(x=0X12B4A4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X12B4AE);
	MakeArray	(0X12B4AE,	0X4);
	MakeCode	(0X12B4B2);
	MakeCode	(x=0X12B4E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12B4F0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B4F6);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12B510);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B516);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12B530);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12B550);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X12B55C);
	MakeArray	(0X12B55C,	0X4);
	MakeCode	(x=0X12B560);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B566);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B578);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B580);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B588,	"\"Use the staircase,[Line][Hero].[Line]Darksol must be up there![Wait2]\"");
	MakeCode	(x=0X12B58C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12B598);
	MakeByte	(0X12B5A4);
	MakeByte	(0X12B5A5);
	MakeByte	(0X12B5A6);
	MakeByte	(0X12B5A7);
	MakeByte	(0X12B5A8);
	MakeByte	(0X12B5A9);
	MakeByte	(0X12B5AA);
	MakeByte	(0X12B5AB);
	MakeByte	(0X12B5AC);
	MakeByte	(0X12B5AD);
	MakeByte	(0X12B5AE);
	MakeByte	(0X12B5AF);
	MakeByte	(0X12B5B0);
	MakeByte	(0X12B5B1);
	MakeByte	(0X12B5B2);
	MakeByte	(0X12B5B3);
	MakeByte	(0X12B5B4);
	MakeByte	(0X12B5B5);
	MakeByte	(0X12B5B6);
	MakeByte	(0X12B5B7);
	MakeByte	(0X12B5B8);
	MakeByte	(0X12B5B9);
	MakeByte	(0X12B5BA);
	MakeByte	(0X12B5BB);
	MakeByte	(0X12B5BC);
	MakeByte	(0X12B5BD);
	MakeByte	(0X12B5BE);
	MakeByte	(0X12B5BF);
	MakeByte	(0X12B5C0);
	MakeByte	(0X12B5C1);
	MakeByte	(0X12B5C2);
	MakeByte	(0X12B5C3);
	MakeByte	(0X12B5C4);
	MakeByte	(0X12B5C5);
	MakeByte	(0X12B5C6);
	MakeByte	(0X12B5C7);
	MakeByte	(0X12B5C8);
	MakeByte	(0X12B5C9);
	MakeByte	(0X12B5CA);
	MakeByte	(0X12B5CB);
	MakeByte	(0X12B5CC);
	MakeByte	(0X12B5CD);
	MakeByte	(0X12B5CE);
	MakeByte	(0X12B5CF);
	MakeByte	(0X12B5D0);
	MakeByte	(0X12B5D1);
	MakeByte	(0X12B5D2);
	MakeByte	(0X12B5D3);
	MakeByte	(0X12B5D4);
	MakeByte	(0X12B5D5);
	MakeByte	(0X12B5D6);
	MakeByte	(0X12B5D7);
	MakeByte	(0X12B5D8);
	MakeByte	(0X12B5D9);
	MakeByte	(0X12B5DA);
	MakeByte	(0X12B5DB);
	MakeByte	(0X12B5DC);
	MakeByte	(0X12B5DD);
	MakeByte	(0X12B5DE);
	MakeByte	(0X12B5DF);
	MakeByte	(0X12B5E0);
	MakeByte	(0X12B5E1);
	MakeByte	(0X12B5E2);
	MakeByte	(0X12B5E3);
	MakeByte	(0X12B5E4);
	MakeByte	(0X12B5E5);
	MakeByte	(0X12B5E6);
	MakeByte	(0X12B5E7);
	MakeCode	(x=0X12B5E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12B608);
	MakeCode	(x=0X12B622);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X12B62C);
	MakeByte	(0X12B62D);
	MakeByte	(0X12B62E);
	MakeByte	(0X12B62F);
	MakeByte	(0X12B630);
	MakeByte	(0X12B631);
	MakeByte	(0X12B632);
	MakeByte	(0X12B633);
	MakeByte	(0X12B634);
	MakeByte	(0X12B635);
	MakeByte	(0X12B636);
	MakeByte	(0X12B637);
	MakeCode	(x=0X12B638);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B640);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B648,	"\"Nooooo! These puny creatures[Line]cannot defeat the Lord of[Line]Darkness![Delay2][Delay2]\"");
	MakeCode	(x=0X12B64C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12B650,	"\"Never! I will not be banished[Line]again! The Powers of Darkness[Line]will sustain me![Delay2][Delay2]\"");
	MakeCode	(x=0X12B654);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B6A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12B71C);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B724);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B72E,	"\"Dark Dragon still lives![Line]Perhaps we cannot kill him![Line]There must be a way....[Delay2][Delay2]\"");
	MakeCode	(x=0X12B732);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12B736,	"\"[Hero]! Dark Dragon[Line]must be sealed away once[Line]again. And only you can do it![Delay2][Delay2]\"");
	MakeCode	(x=0X12B73A);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12B73E,	"\"Use the Chaos Breaker! Drive[Line]it through Dark Dragon![Delay2][Delay2]\"");
	MakeCode	(x=0X12B742);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B74C);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B754);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B75C,	"\"Fools! Nothing you do can[Line]stop me! I am Dark Dragon,[Line]Darkness incarnate![Delay2][Delay2]\"");
	MakeCode	(x=0X12B760);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B76A);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B772);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B77A,	"\"[Hero]! Stab him with[Line]the Chaos Breaker![Delay2][Delay2]\"");
	MakeCode	(x=0X12B77E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12B788);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12B7B0);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(x=0X12B7D4);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeCode	(x=0X12B800);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeByte	(0X12B808);
	MakeArray	(0X12B808,	0X4);
	MakeCode	(0X12B80C);
	MakeCode	(x=0X12B828);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeByte	(0X12B830);
	MakeArray	(0X12B830,	0X4);
	MakeCode	(0X12B834);
	MakeCode	(x=0X12B850);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeByte	(0X12B858);
	MakeArray	(0X12B858,	0X4);
	MakeCode	(0X12B85C);
	MakeByte	(0X12B864);
	MakeArray	(0X12B864,	0X4);
	MakeCode	(0X12B868);
	MakeCode	(x=0X12B872);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12B974);
	MakeArray	(0X12B974,	0X4);
	MakeCode	(0X12B978);
	MakeCode	(x=0X12B97C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12B986);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B98C);
	OpDecimal	(x,	0);
	MakeByte	(0X12B994);
	MakeArray	(0X12B994,	0X4);
	MakeCode	(x=0X12B998);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B99E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12B9A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12B9C8);
	MakeArray	(0X12B9C8,	0X4);
	MakeCode	(0X12B9CC);
	MakeCode	(x=0X12B9D2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12B9E2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X12B9E8);
	MakeArray	(0X12B9E8,	0X4);
	MakeCode	(x=0X12B9EC);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12B9F4);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12B9FC,	"\"[Hero]! The Castle of the[Line]Ancients is sinking! Let's[Line]get out of here![Delay2][Delay2]\"");
	MakeCode	(x=0X12BA00);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BA20);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X12BA24,	"\"But [Hero] cannot move![Delay2][Delay2]\"");
	MakeCode	(x=0X12BA28);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BA2C);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12BA34);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12BA3C,	"\"[Hero] is somehow bound[Line]to the Chaos Breaker![Delay2][Delay2]\"");
	MakeCode	(x=0X12BA40);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BA4A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12BA58);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12BA60);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12BA68,	"\"[Hero]! Break free! We[Line]won't leave without you![Delay2][Delay2]\"");
	MakeCode	(x=0X12BA6C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BA76);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12BA84);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeRptCmt	(0X12BA94,	"\"I can't get free, but you[Line]won't die with me![Delay2]\"");
	MakeCode	(x=0X12BA98);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X12BA9A);
	MakeArray	(0X12BA9A,	0X4);
	MakeCode	(x=0X12BA9E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12BAA4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12BAC0);
	MakeArray	(0X12BAC0,	0X4);
	MakeCode	(x=0X12BAC4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12BAC8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12BAEE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12BB04);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12BB0C);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12BB14,	"\"[Hero] used his Egress[Line]magic to save us. But[Line]where is [Hero]?[Delay2][Delay2]\"");
	MakeCode	(x=0X12BB18);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BB22);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12BB2A);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12BB32,	"\"That spell's supposed to[Line]get us all out. Why isn't[Line][Hero] here? Why, Nova?[Delay2][Delay2]\"");
	MakeCode	(x=0X12BB36);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BB40);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12BB48);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12BB50,	"\"I have no answers for you.[Line]Perhaps a great hero is[Line]needed to guard the seal.[Delay2][Line]Perhaps he must[Line]stand as an eternal vigil to[Line]prevent Dark Dragon's return.[Delay2][Delay2]\"");
	MakeCode	(x=0X12BB54);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BB5E);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12BB66);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12BB6E,	"\"But why did it have[Line]to be [Hero]? Any of us[Line]would have taken his place....[Delay2][Delay2]\"");
	MakeCode	(x=0X12BB72);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BB94);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12BB9C);
	OpEnumEx		(x,	0,	GetEnum("MapSprites"),0);
	MakeRptCmt	(0X12BBA4,	"\"I won't believe it![Line][Hero] will come back,[Line]I know it![Delay2]\"");
	MakeCode	(x=0X12BBA8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X12BBC4,	"\"Perhaps [Hero] will still[Line]come out. Wait, look at[Line]the castle![Delay2][Delay2]\"");
	MakeCode	(x=0X12BBC8);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X12BBE4);
	MakeArray	(0X12BBE4,	0X4);
	MakeCode	(0X12BBE8);
	MakeCode	(x=0X12BC12);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BC2A);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BC42);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BC5A);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BC72);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BC8A);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BCA2);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BCBA);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BCD2);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BCEA);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BD0C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12BD16);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12BD36);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12BD84);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X12BD8A);
	MakeArray	(0X12BD8A,	0X4);
	MakeCode	(x=0X12BD8E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12BD9C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12BDA8);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12BDB0);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeRptCmt	(0X12BDB8,	"\"No! It's gone...the castle...[Line]and [Hero] with it....[Delay2][Delay2]\"");
	MakeCode	(x=0X12BDBC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BDCC);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeByte	(0X12BE08);
	MakeArray	(0X12BE08,	0X4);
	MakeCode	(x=0X12BE0C);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeRptCmt	(0X12BE18,	"\"That's it. He didn't escape.[Line]He's gone....[Delay2][Delay2]\"");
	MakeCode	(x=0X12BE1C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BE26);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12BE2E);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeRptCmt	(0X12BE48,	"\"I won't believe it....[Delay2][Delay2]\"");
	MakeCode	(x=0X12BE4C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BE56);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeCode	(x=0X12BE5E);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeRptCmt	(0X12BE78,	"\"[Hero] has saved all of[Line]Rune. His sacrifice will be[Line]remembered forever.[Delay2][Line]And now, friends, it is[Line]time for us to begin the long[Line]journey home....[Delay2][Delay2]\"");
	MakeCode	(x=0X12BE7C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BE8E);
	OpEnumEx		(x,	0,	GetEnum("Portraits"),0);
	MakeRptCmt	(0X12BEB0,	"\"I won't believe it....[Delay2][Delay2]\"");
	MakeCode	(x=0X12BEB4);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12BEBE);
	OpEnumEx		(x,	0,	GetEnum("ForceMembers"),0);
	MakeCode	(x=0X12BEF6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12BEFA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X12BF0E,	"\"[Hero]!\"");
	MakeCode	(x=0X12BF12);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(0X12BF42);
	MakeCode	(0X12BF66);
	MakeCode	(0X12BF7C);
	MakeCode	(0X12BF92);
	MakeCode	(x=0X12BF94);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12BFA0);
	MakeCode	(x=0X12BFA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12BFA8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12BFAE);
	MakeByte	(0X12BFAF);
	MakeByte	(0X12BFB0);
	MakeByte	(0X12BFB1);
	MakeByte	(0X12BFB2);
	MakeByte	(0X12BFB3);
	MakeByte	(0X12BFB4);
	MakeByte	(0X12BFB5);
	MakeCode	(0X12BFB6);
	MakeName	(0X12BFB6,	"FindEntityForCutscene");
	MakeCode	(0X12BFD0);
	MakeName	(0X12BFD0,	"WasEntityKilledByLastAttack");
	MakeCode	(x=0X12BFD2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X12BFE8,	0,	"                ");
	MakeCode	(0X12BFF0);
	MakeCode	(x=0X12BFF4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C02E);
	OpDecimal	(x,	0);
	MakeCode	(0X12C036);
	MakeCode	(x=0X12C03A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C078);
	OpDecimal	(x,	0);
	MakeCode	(0X12C080);
	MakeCode	(0X12C09E);
	MakeCode	(0X12C0AE);
	MakeCode	(x=0X12C0C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C0E0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C0E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C0F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C0FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C106);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12C118);
	MakeCode	(0X12C130);
	MakeCode	(x=0X12C158);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C15C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(0X12C172);
	MakeWord	(0X12C174);
	MakeWord	(0X12C176);
	MakeWord	(0X12C178);
	MakeWord	(0X12C17A);
	MakeWord	(0X12C17C);
	MakeWord	(0X12C17E);
	MakeWord	(0X12C180);
	MakeWord	(0X12C182);
	MakeWord	(0X12C184);
	MakeWord	(0X12C186);
	MakeWord	(0X12C188);
	MakeWord	(0X12C18A);
	MakeWord	(0X12C18C);
	MakeWord	(0X12C18E);
	MakeWord	(0X12C190);
	MakeWord	(0X12C192);
	MakeWord	(0X12C194);
	MakeWord	(0X12C196);
	MakeWord	(0X12C198);
	MakeWord	(0X12C19A);
	MakeWord	(0X12C19C);
	MakeWord	(0X12C19E);
	MakeWord	(0X12C1A0);
	MakeWord	(0X12C1A2);
	MakeWord	(0X12C1A4);
	MakeWord	(0X12C1A6);
	MakeWord	(0X12C1A8);
	MakeWord	(0X12C1AA);
	MakeWord	(0X12C1AC);
	MakeWord	(0X12C1AE);
	MakeWord	(0X12C1B0);
	MakeWord	(0X12C1B2);
	MakeWord	(0X12C1B4);
	MakeWord	(0X12C1B6);
	MakeWord	(0X12C1B8);
	MakeCode	(0X12C1BA);
	MakeCode	(x=0X12C1BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12C1EC);
	MakeCode	(x=0X12C1F8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C1FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12C200);
	OpOff		(x,	0,	0X12C200);
	OpOff		(x,	128,	0X12C200);
	OpOff		(x,	1,	0X12C200);
	OpOff		(x,	129,	0X12C200);
	MakeWord	(x=0X12C202);
	OpOff		(x,	0,	0X12C200);
	OpOff		(x,	128,	0X12C200);
	OpOff		(x,	1,	0X12C200);
	OpOff		(x,	129,	0X12C200);
	MakeWord	(x=0X12C204);
	OpOff		(x,	0,	0X12C200);
	OpOff		(x,	128,	0X12C200);
	OpOff		(x,	1,	0X12C200);
	OpOff		(x,	129,	0X12C200);
	MakeWord	(x=0X12C206);
	OpOff		(x,	0,	0X12C200);
	OpOff		(x,	128,	0X12C200);
	OpOff		(x,	1,	0X12C200);
	OpOff		(x,	129,	0X12C200);
	MakeCode	(0X12C208);
	MakeCode	(0X12C21C);
	MakeCode	(0X12C224);
	MakeCode	(x=0X12C228);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C298);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C29E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12C2B4);
	MakeCode	(0X12C2BE);
	MakeCode	(x=0X12C2CC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12C2DC);
	MakeCode	(x=0X12C2EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C312);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C330);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12C342);
	MakeName	(0X12C34E,	"SetSpeechSfxForCutscene");
	MakeCode	(x=0X12C360);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(x=0X12C364);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12C36E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C37A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C3A2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C3A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C3D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C3DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X12C404);
	MakeCode	(x=0X12C408);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C412);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C416);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12C428);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X12C446);
	MakeCode	(x=0X12C44A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12C45A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X12C466);
	MakeArray	(0X12C466,	0X4);
	MakeRptCmt	(0X12C46A,	"\"([Name] joins the[Line]Shining Force!)\"");
	MakeCode	(0X12C46A);
	MakeCode	(x=0X12C46E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X12C480);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12C494);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C498);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeWord	(x=0X12C49C);
	OpOff		(x,	0,	0X12C49C);
	OpOff		(x,	128,	0X12C49C);
	OpOff		(x,	1,	0X12C49C);
	OpOff		(x,	129,	0X12C49C);
	MakeWord	(x=0X12C49E);
	OpOff		(x,	0,	0X12C49C);
	OpOff		(x,	128,	0X12C49C);
	OpOff		(x,	1,	0X12C49C);
	OpOff		(x,	129,	0X12C49C);
	MakeWord	(x=0X12C4A0);
	OpOff		(x,	0,	0X12C49C);
	OpOff		(x,	128,	0X12C49C);
	OpOff		(x,	1,	0X12C49C);
	OpOff		(x,	129,	0X12C49C);
	MakeWord	(x=0X12C4A2);
	OpOff		(x,	0,	0X12C49C);
	OpOff		(x,	128,	0X12C49C);
	OpOff		(x,	1,	0X12C49C);
	OpOff		(x,	129,	0X12C49C);
	MakeWord	(x=0X12C4A4);
	OpOff		(x,	0,	0X12C49C);
	OpOff		(x,	128,	0X12C49C);
	OpOff		(x,	1,	0X12C49C);
	OpOff		(x,	129,	0X12C49C);
	MakeWord	(x=0X12C4A6);
	OpOff		(x,	0,	0X12C49C);
	OpOff		(x,	128,	0X12C49C);
	OpOff		(x,	1,	0X12C49C);
	OpOff		(x,	129,	0X12C49C);
	MakeCode	(0X12C4A8);
	MakeName	(0X12C4A8,	"nullsub_2");
	MakeCode	(0X12C4AA);
	MakeCode	(x=0X12C4E8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C4EC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12C4FE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X12C524);
	MakeCode	(x=0X12C562);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C566);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12C578);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X12C59C);
	MakeCode	(x=0X12C5DA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C5DE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12C5F0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X12C608);
	MakeCode	(x=0X12C646);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C64A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12C65C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X12C678);
	MakeByte	(0X12C680);
	MakeArray	(0X12C680,	0X4);
	MakeCode	(0X12C684);
	MakeCode	(x=0X12C6C6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X12C6D0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12C73E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X12C744);
	OpDecimal	(x,	0);
	MakeCode	(x=0X12C752);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X12C7AA);
	MakeArray	(0X12C7AA,	0X4);
	MakeCode	(0X12C7AE);
	MakeByte	(0X12C7B0);
	MakeArray	(0X12C7B0,	0X420);
	MakeName	(0X12C7B0,	"SpellTiles_Freeze");
	MakeByte	(0X12CBD0);
	MakeArray	(0X12CBD0,	0X8AE);
	MakeName	(0X12CBD0,	"SpellTiles_Bolt");
	MakeByte	(0X12D47E);
	MakeArray	(0X12D47E,	0X924);
	MakeName	(0X12D47E,	"SpellTiles_Blaze");
	MakeByte	(0X12DDA2);
	MakeArray	(0X12DDA2,	0X24A);
	MakeName	(0X12DDA2,	"SpellTiles_Debuff");
	MakeByte	(0X12DFEC);
	MakeArray	(0X12DFEC,	0X310);
	MakeName	(0X12DFEC,	"SpellTiles_Desoul");
	MakeByte	(0X12E2FC);
	MakeArray	(0X12E2FC,	0X2E8);
	MakeName	(0X12E2FC,	"SpellTiles_Healing");
	MakeByte	(0X12E5E4);
	MakeArray	(0X12E5E4,	0X2C);
	MakeName	(0X12E5E4,	"SpellTiles_MachineGun");
	MakeByte	(0X12E610);
	MakeArray	(0X12E610,	0X82);
	MakeName	(0X12E610,	"SpellTiles_FlyingDragons");
	MakeByte	(0X12E692);
	MakeArray	(0X12E692,	0X22E);
	MakeName	(0X12E692,	"SpellTiles_EnergyBlast");
	MakeByte	(0X12E8C0);
	MakeArray	(0X12E8C0,	0XDE);
	MakeName	(0X12E8C0,	"SpellTiles_Laser");
	MakeByte	(0X12E99E);
	MakeArray	(0X12E99E,	0X424);
	MakeName	(0X12E99E,	"SpellTiles_LightningBreath");
	MakeByte	(0X12EDC2);
	MakeArray	(0X12EDC2,	0XFC);
	MakeName	(0X12EDC2,	"SpellTiles_BusterShot");
	MakeByte	(0X12EEBE);
	MakeArray	(0X12EEBE,	0X240);
	MakeName	(0X12EEBE,	"SpellTiles_FireBreath");
	MakeByte	(0X12F0FE);
	MakeArray	(0X12F0FE,	0X1E4);
	MakeName	(0X12F0FE,	"SpellTiles_DemonBlaze");
	MakeByte	(0X12F2E2);
	MakeByte	(0X12F502);
	MakeByte	(0X12F70E);
	MakeByte	(0X12F8E2);
	MakeArray	(0X12F8E2,	0X56);
	MakeName	(0X12F8E2,	"ChapterEndTiles");
	MakeByte	(0X12F938);
	MakeArray	(0X12F938,	0X4DE);
	MakeName	(0X12F938,	"IntroTiles_SpeckOfLight");
	MakeArray	(0X12FE16,	0X1EA);
	MakeDword	(x=0X130000);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X130000,	"p_pt_TextBanks");
	MakeCode	(0X130004);
	MakeName	(0X130004,	"PlayIntro");
	MakeCode	(x=0X130012);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13001C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X130032);
	OpHex		(x,	0);
	MakeCode	(x=0X130046);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X13004C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X130052);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13005C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X13006C,	"\"In ages long forgotten...\"");
	MakeCode	(x=0X130070);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X13007C,	"\"...Light fought Darkness for[Line]control of the world.\"");
	MakeCode	(x=0X130080);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X13008C,	"\"Dark Dragon led the evil[Line]hordes of Darkness.\"");
	MakeCode	(x=0X130090);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X13009C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1300A2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1300BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1300EE);
	OpHex		(x,	0);
	MakeCode	(x=0X130106);
	OpHex		(x,	0);
	MakeCode	(x=0X13011E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X130130);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X130142,	"\"The Ancients fought back with[Line]the Powers of Light.\"");
	MakeCode	(x=0X130146);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X130152,	"\"Dark Dragon was defeated and[Line]cast into another dimension.\"");
	MakeCode	(x=0X130156);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X130178);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13018E);
	OpHex		(x,	0);
	MakeCode	(x=0X1301A2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1301A8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1301AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1301B8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X1301C8,	"\"The Lord of Darkness vowed to[Line]return in 1,000 years.\"");
	MakeCode	(x=0X1301CC);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X1301EC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13021E);
	OpHex		(x,	0);
	MakeCode	(x=0X130236);
	OpHex		(x,	0);
	MakeCode	(x=0X13024E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X130264);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X130276);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeRptCmt	(0X130288,	"\"Time passed, and Dark Dragon[Line]was forgotten by all.\"");
	MakeCode	(x=0X13028C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X130298,	"\"Ten centuries of peace ruled[Line]the land of Rune.\"");
	MakeCode	(x=0X13029C);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeCode	(x=0X1302C2);
	OpHex		(x,	0);
	MakeCode	(x=0X1302DA);
	OpHex		(x,	0);
	MakeCode	(x=0X1302F2);
	OpHex		(x,	0);
	MakeCode	(x=0X13030A);
	OpHex		(x,	0);
	MakeCode	(x=0X130322);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X130334);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X13033A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X130340);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13034A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeRptCmt	(0X13035A,	"\"Until the kingdom of Runefaust[Line]brought war and fear to Rune.\"");
	MakeCode	(x=0X13035E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X13036A,	"\"Hordes of evil creatures[Line]ravaged every land.\"");
	MakeCode	(x=0X13036E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X13037A,	"\"Here and there, strongholds[Line]of Good still held out...\"");
	MakeCode	(x=0X13037E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeRptCmt	(0X13038A,	"\"...awaiting a Hero who could[Line]wield the Powers of Light!\"");
	MakeCode	(x=0X13038E);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeByte	(0X1303A0);
	MakeArray	(0X1303A0,	0X4);
	MakeCode	(0X1303A4);
	MakeByte	(0X1303B2);
	MakeArray	(0X1303B2,	0X4);
	MakeCode	(0X1303B6);
	MakeCode	(x=0X1303BE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeName	(0X1303C4,	"TitleScreen");
	MakeCode	(x=0X1303D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1303EA);
	OpHex		(x,	0);
	MakeCode	(x=0X130404);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13041A);
	OpHex		(x,	0);
	MakeCode	(x=0X130438);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X130464);
	MakeArray	(0X130464,	0X2A);
	MakeName	(0X130464,	"PressStartButtonLayout");
	MakeCode	(0X13048E);
	MakeCode	(x=0X130498);
	OpHex		(x,	0);
	MakeCode	(x=0X1304B2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1304C8);
	OpHex		(x,	0);
	MakeCode	(x=0X1304FE);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeName	(0X1304FE,	"CheckSkipToTitleScreen");
	MakeByte	(0X13050E);
	MakeArray	(0X13050E,	0X4);
	MakeCode	(0X130512);
	MakeByte	(0X13051C);
	MakeArray	(0X13051C,	0X4);
	MakeCode	(x=0X130520);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X13052A);
	MakeCode	(x=0X130536);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X130546);
	MakeArray	(0X130546,	0X4);
	MakeCode	(0X13054A);
	MakeCode	(0X130556);
	MakeByte	(0X130562);
	MakeByte	(0X130563);
	MakeByte	(0X130564);
	MakeByte	(0X130565);
	MakeByte	(0X130566);
	MakeByte	(0X130567);
	MakeByte	(0X130568);
	MakeByte	(0X130569);
	MakeByte	(0X13056A);
	MakeByte	(0X13056B);
	MakeByte	(0X13056C);
	MakeByte	(0X13056D);
	MakeByte	(0X13056E);
	MakeByte	(0X13056F);
	MakeByte	(0X130570);
	MakeByte	(0X130571);
	MakeByte	(0X130572);
	MakeByte	(0X130573);
	MakeByte	(0X130574);
	MakeByte	(0X130575);
	MakeByte	(0X130576);
	MakeByte	(0X130577);
	MakeByte	(0X130578);
	MakeByte	(0X130579);
	MakeByte	(0X13057A);
	MakeByte	(0X13057B);
	MakeByte	(0X13057C);
	MakeByte	(0X13057D);
	MakeByte	(0X13057E);
	MakeByte	(0X13057F);
	MakeDword	(x=0X130580);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X130584);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X130588);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13058C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X130590);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X130594);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X130598);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13059C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1305A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1305A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1305A8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1305AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1305B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1305B4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1305BA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1305C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1305C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1305CA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1305D2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1305D8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1305F8);
	MakeByte	(0X1305F9);
	MakeByte	(0X1305FA);
	MakeByte	(0X1305FB);
	MakeByte	(0X1305FC);
	MakeByte	(0X1305FD);
	MakeByte	(0X1305FE);
	MakeByte	(0X1305FF);
	MakeByte	(0X130600);
	MakeByte	(0X130601);
	MakeByte	(0X130602);
	MakeByte	(0X130603);
	MakeByte	(0X130604);
	MakeByte	(0X130605);
	MakeByte	(0X130606);
	MakeByte	(0X130607);
	MakeByte	(0X130608);
	MakeByte	(0X130609);
	MakeByte	(0X13060A);
	MakeByte	(0X13060B);
	MakeByte	(0X13060C);
	MakeByte	(0X13060D);
	MakeByte	(0X13060E);
	MakeByte	(0X13060F);
	MakeByte	(0X130610);
	MakeByte	(0X130611);
	MakeDword	(x=0X130612);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X130616);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13061A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13061E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X130622);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X130626);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13062A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X130630);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X130636);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13063A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X130640);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X130648);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X13064E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13066E);
	OpHex		(x,	0);
	MakeCode	(x=0X130678);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X13068C);
	MakeByte	(0X13068D);
	MakeByte	(0X13068E);
	MakeByte	(0X13068F);
	MakeByte	(0X130690);
	MakeByte	(0X130691);
	MakeByte	(0X130692);
	MakeByte	(0X130693);
	MakeCode	(x=0X130694);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1306A6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1306C4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1306CA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1306D0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1306D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1306DA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1306E0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1306EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X130706);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X13070A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13071A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X130722);
	MakeCode	(x=0X130728);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X130740);
	MakeByte	(0X130762);
	MakeByte	(0X130784);
	MakeByte	(0X1307A6);
	MakeByte	(0X1307C8);
	MakeByte	(0X1307EA);
	MakeByte	(0X13080C);
	MakeByte	(0X13082E);
	MakeByte	(0X130850);
	MakeByte	(0X13089A);
	MakeByte	(0X13091C);
	MakeByte	(0X130A3E);
	MakeByte	(0X130C40);
	MakeByte	(0X13100A);
	MakeByte	(0X131110);
	MakeByte	(0X131216);
	MakeByte	(0X13131C);
	MakeByte	(0X131422);
	MakeByte	(0X131528);
	MakeCode	(0X13162E);
	MakeName	(0X13162E,	"InitDisplay_Intro");
	MakeRptCmt	(0X131642,	"H32 cell mode, no interlace");
	MakeRptCmt	(0X13164A,	"scroll size : V64 cell, H32 cell");
	MakeRptCmt	(0X131652,	"scroll A table VRAM address : E000");
	MakeRptCmt	(0X13165A,	"scroll B table VRAM address : E000");
	MakeRptCmt	(0X131662,	"disable external interrupt, scanline H scroll");
	MakeCode	(x=0X13167E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X13168E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X131694);
	OpHex		(x,	0);
	MakeCode	(0X1316A8);
	MakeCode	(x=0X1316AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1316BE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1316C4);
	OpHex		(x,	0);
	MakeCode	(0X1316D8);
	MakeCode	(x=0X1316DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1316EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1316F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X131702);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X131708);
	OpHex		(x,	0);
	MakeByte	(0X13171C);
	MakeByte	(0X131A1C);
	MakeArray	(0X131A1C,	0X1B47);
	MakeName	(0X131A1C,	"TextBank00");
	MakeByte	(0X133563);
	MakeArray	(0X133563,	0X15C6);
	MakeName	(0X133563,	"TextBank01");
	MakeByte	(0X134B29);
	MakeArray	(0X134B29,	0X17B5);
	MakeName	(0X134B29,	"TextBank02");
	MakeByte	(0X1362DE);
	MakeArray	(0X1362DE,	0X181C);
	MakeName	(0X1362DE,	"TextBank03");
	MakeByte	(0X137AFA);
	MakeArray	(0X137AFA,	0X1671);
	MakeName	(0X137AFA,	"TextBank04");
	MakeByte	(0X13916B);
	MakeArray	(0X13916B,	0X1938);
	MakeName	(0X13916B,	"TextBank05");
	MakeByte	(0X13AAA3);
	MakeArray	(0X13AAA3,	0X13F4);
	MakeName	(0X13AAA3,	"TextBank06");
	MakeByte	(0X13BE97);
	MakeArray	(0X13BE97,	0X17CC);
	MakeName	(0X13BE97,	"TextBank07");
	MakeByte	(0X13D663);
	MakeArray	(0X13D663,	0X12A3);
	MakeName	(0X13D663,	"TextBank08");
	MakeDword	(x=0X13E906);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X13E906,	"pt_TextBanks");
	MakeDword	(x=0X13E90A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13E90E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13E912);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13E916);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13E91A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13E91E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13E922);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X13E926);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X13E92A);
	MakeArray	(0X13E92A,	0X56D6);
	MakeDword	(x=0X144000);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X144000,	"p_pt_AllyBattleSprites");
	MakeDword	(x=0X144004);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X144004,	"p_pt_AllyAnimations");
	MakeDword	(x=0X144008);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X144008,	"p_pt_WeaponSprites");
	MakeDword	(x=0X14400C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X14400C,	"p_WeaponPalettes");
	MakeDword	(x=0X144010);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X144010,	"p_pt_Platforms");
	MakeDword	(x=0X144014);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X144014,	"pt_AllyBattleSprites");
	MakeDword	(x=0X144018);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X14401C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144020);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144024);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144028);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X14402C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144030);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144034);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144038);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X14403C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144040);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144044);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144048);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X14404C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144050);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144054);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144058);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X14405C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144060);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144064);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144068);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X14406C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144070);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144074);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144078);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X14407C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144080);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144084);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144088);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X14408C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144090);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144094);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X144098);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X14409C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1440A0);
	MakeArray	(0X1440A0,	0XA34);
	MakeName	(0X1440A0,	"AllyBattleSprite00");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_10(void) {
        auto x;
#define id x

	MakeByte	(0X144AD4);
	MakeArray	(0X144AD4,	0X1012);
	MakeName	(0X144AD4,	"AllyBattleSprite01");
	MakeByte	(0X145AE6);
	MakeArray	(0X145AE6,	0X574);
	MakeName	(0X145AE6,	"AllyBattleSprite02");
	MakeByte	(0X14605A);
	MakeArray	(0X14605A,	0X16C0);
	MakeName	(0X14605A,	"AllyBattleSprite03");
	MakeByte	(0X14771A);
	MakeArray	(0X14771A,	0X5D0);
	MakeName	(0X14771A,	"AllyBattleSprite04");
	MakeByte	(0X147CEA);
	MakeArray	(0X147CEA,	0X92A);
	MakeName	(0X147CEA,	"AllyBattleSprite05");
	MakeByte	(0X148614);
	MakeArray	(0X148614,	0X584);
	MakeName	(0X148614,	"AllyBattleSprite06");
	MakeByte	(0X148B98);
	MakeArray	(0X148B98,	0X5D6);
	MakeName	(0X148B98,	"AllyBattleSprite07");
	MakeByte	(0X14916E);
	MakeArray	(0X14916E,	0X832);
	MakeName	(0X14916E,	"AllyBattleSprite08");
	MakeByte	(0X1499A0);
	MakeArray	(0X1499A0,	0XB5E);
	MakeName	(0X1499A0,	"AllyBattleSprite09");
	MakeByte	(0X14A4FE);
	MakeArray	(0X14A4FE,	0X1014);
	MakeName	(0X14A4FE,	"AllyBattleSprite10");
	MakeByte	(0X14B512);
	MakeArray	(0X14B512,	0X103C);
	MakeName	(0X14B512,	"AllyBattleSprite11");
	MakeByte	(0X14C54E);
	MakeArray	(0X14C54E,	0XC6E);
	MakeName	(0X14C54E,	"AllyBattleSprite12");
	MakeByte	(0X14D1BC);
	MakeArray	(0X14D1BC,	0X1768);
	MakeName	(0X14D1BC,	"AllyBattleSprite13");
	MakeByte	(0X14E924);
	MakeArray	(0X14E924,	0X17A2);
	MakeName	(0X14E924,	"AllyBattleSprite14");
	MakeByte	(0X1500C6);
	MakeArray	(0X1500C6,	0XCFA);
	MakeName	(0X1500C6,	"AllyBattleSprite15");
	MakeByte	(0X150DC0);
	MakeArray	(0X150DC0,	0X9D6);
	MakeName	(0X150DC0,	"AllyBattleSprite16");
	MakeByte	(0X151796);
	MakeArray	(0X151796,	0X78E);
	MakeName	(0X151796,	"AllyBattleSprite17");
	MakeByte	(0X151F24);
	MakeArray	(0X151F24,	0X1D2);
	MakeName	(0X151F24,	"AllyBattleSprite18");
	MakeByte	(0X1520F6);
	MakeArray	(0X1520F6,	0X1D7A);
	MakeName	(0X1520F6,	"AllyBattleSprite19");
	MakeByte	(0X153E70);
	MakeArray	(0X153E70,	0X1670);
	MakeName	(0X153E70,	"AllyBattleSprite20");
	MakeByte	(0X1554E0);
	MakeArray	(0X1554E0,	0X8A4);
	MakeName	(0X1554E0,	"AllyBattleSprite21");
	MakeByte	(0X155D84);
	MakeArray	(0X155D84,	0X113A);
	MakeName	(0X155D84,	"AllyBattleSprite22");
	MakeByte	(0X156EBE);
	MakeArray	(0X156EBE,	0X710);
	MakeName	(0X156EBE,	"AllyBattleSprite23");
	MakeByte	(0X1575CE);
	MakeArray	(0X1575CE,	0X6A2);
	MakeName	(0X1575CE,	"AllyBattleSprite24");
	MakeByte	(0X157C70);
	MakeArray	(0X157C70,	0X6EE);
	MakeName	(0X157C70,	"AllyBattleSprite25");
	MakeByte	(0X15835E);
	MakeArray	(0X15835E,	0X842);
	MakeName	(0X15835E,	"AllyBattleSprite26");
	MakeByte	(0X158BA0);
	MakeArray	(0X158BA0,	0XC42);
	MakeName	(0X158BA0,	"AllyBattleSprite27");
	MakeByte	(0X1597E2);
	MakeArray	(0X1597E2,	0XC5C);
	MakeName	(0X1597E2,	"AllyBattleSprite28");
	MakeByte	(0X15A43E);
	MakeArray	(0X15A43E,	0XFFC);
	MakeName	(0X15A43E,	"AllyBattleSprite29");
	MakeByte	(0X15B43A);
	MakeArray	(0X15B43A,	0XE84);
	MakeName	(0X15B43A,	"AllyBattleSprite30");
	MakeByte	(0X15C2BE);
	MakeArray	(0X15C2BE,	0X2016);
	MakeName	(0X15C2BE,	"AllyBattleSprite31");
	MakeByte	(0X15E2D4);
	MakeArray	(0X15E2D4,	0X152E);
	MakeName	(0X15E2D4,	"AllyBattleSprite32");
	MakeByte	(0X15F802);
	MakeArray	(0X15F802,	0XAE0);
	MakeName	(0X15F802,	"AllyBattleSprite33");
	MakeDword	(x=0X1602E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1602E2,	"pt_WeaponSprites");
	MakeDword	(x=0X1602E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1602EA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1602EE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1602F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1602F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1602FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X1602FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160302);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160306);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16030A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16030E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160312);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160316);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16031A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16031E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160322);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160326);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16032A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16032E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160332);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160336);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16033A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16033E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160342);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160346);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16034A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16034E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160352);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X160356);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16035A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X16035E);
	MakeArray	(0X16035E,	0X11A);
	MakeName	(0X16035E,	"WeaponSprite00");
	MakeByte	(0X160478);
	MakeArray	(0X160478,	0X178);
	MakeName	(0X160478,	"WeaponSprite01");
	MakeByte	(0X1605F0);
	MakeArray	(0X1605F0,	0X12E);
	MakeName	(0X1605F0,	"WeaponSprite02");
	MakeByte	(0X16071E);
	MakeArray	(0X16071E,	0X142);
	MakeName	(0X16071E,	"WeaponSprite03");
	MakeByte	(0X160860);
	MakeArray	(0X160860,	0X1C0);
	MakeName	(0X160860,	"WeaponSprite04");
	MakeByte	(0X160A20);
	MakeArray	(0X160A20,	0X6E);
	MakeName	(0X160A20,	"WeaponSprite05");
	MakeByte	(0X160A8E);
	MakeArray	(0X160A8E,	0X68);
	MakeName	(0X160A8E,	"WeaponSprite06");
	MakeByte	(0X160AF6);
	MakeArray	(0X160AF6,	0X82);
	MakeName	(0X160AF6,	"WeaponSprite07");
	MakeByte	(0X160B78);
	MakeArray	(0X160B78,	0X94);
	MakeName	(0X160B78,	"WeaponSprite08");
	MakeByte	(0X160C0C);
	MakeArray	(0X160C0C,	0X1D4);
	MakeName	(0X160C0C,	"WeaponSprite09");
	MakeByte	(0X160DE0);
	MakeArray	(0X160DE0,	0X1FC);
	MakeName	(0X160DE0,	"WeaponSprite10");
	MakeByte	(0X160FDC);
	MakeArray	(0X160FDC,	0X2EE);
	MakeName	(0X160FDC,	"WeaponSprite11");
	MakeByte	(0X1612CA);
	MakeArray	(0X1612CA,	0X1C6);
	MakeName	(0X1612CA,	"WeaponSprite12");
	MakeByte	(0X161490);
	MakeArray	(0X161490,	0X2FC);
	MakeName	(0X161490,	"WeaponSprite13");
	MakeByte	(0X16178C);
	MakeArray	(0X16178C,	0XE2);
	MakeName	(0X16178C,	"WeaponSprite14");
	MakeByte	(0X16186E);
	MakeArray	(0X16186E,	0X1F8);
	MakeName	(0X16186E,	"WeaponPalettes");
	MakeDword	(x=0X161A66);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X161A66,	"pt_AllyAnimations");
	MakeDword	(x=0X161A6A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A6E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A72);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A76);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A7A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A7E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A82);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A86);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A8A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A8E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A92);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A96);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A9A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161A9E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AA2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AAA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AAE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AB2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AB6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161ABA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161ABE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AC2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AC6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161ACA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161ACE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AD2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AD6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161ADA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161ADE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AE2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AE6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AEA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AEE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AF2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AF6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AFA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161AFE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B02);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B06);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B0A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B0E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B1A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B2A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B32);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B36);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B3A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B3E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B42);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B46);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B4A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X161B4E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X161B52);
	MakeArray	(0X161B52,	0X18);
	MakeName	(0X161B52,	"AllyAnimation000");
	MakeByte	(0X161B6A);
	MakeArray	(0X161B6A,	0X18);
	MakeName	(0X161B6A,	"AllyAnimation001");
	MakeByte	(0X161B82);
	MakeArray	(0X161B82,	0X20);
	MakeName	(0X161B82,	"AllyAnimation002");
	MakeByte	(0X161BA2);
	MakeArray	(0X161BA2,	0X20);
	MakeName	(0X161BA2,	"AllyAnimation003");
	MakeByte	(0X161BC2);
	MakeArray	(0X161BC2,	0X18);
	MakeName	(0X161BC2,	"AllyAnimation004");
	MakeByte	(0X161BDA);
	MakeArray	(0X161BDA,	0X18);
	MakeName	(0X161BDA,	"AllyAnimation005");
	MakeByte	(0X161BF2);
	MakeArray	(0X161BF2,	0X18);
	MakeName	(0X161BF2,	"AllyAnimation006");
	MakeByte	(0X161C0A);
	MakeArray	(0X161C0A,	0X18);
	MakeName	(0X161C0A,	"AllyAnimation007");
	MakeByte	(0X161C22);
	MakeArray	(0X161C22,	0X18);
	MakeName	(0X161C22,	"AllyAnimation008");
	MakeByte	(0X161C3A);
	MakeArray	(0X161C3A,	0X30);
	MakeName	(0X161C3A,	"AllyAnimation009");
	MakeByte	(0X161C6A);
	MakeArray	(0X161C6A,	0X18);
	MakeName	(0X161C6A,	"AllyAnimation010");
	MakeByte	(0X161C82);
	MakeArray	(0X161C82,	0X18);
	MakeName	(0X161C82,	"AllyAnimation011");
	MakeByte	(0X161C9A);
	MakeArray	(0X161C9A,	0X18);
	MakeName	(0X161C9A,	"AllyAnimation012");
	MakeByte	(0X161CB2);
	MakeArray	(0X161CB2,	0X18);
	MakeName	(0X161CB2,	"AllyAnimation013");
	MakeByte	(0X161CCA);
	MakeArray	(0X161CCA,	0X18);
	MakeName	(0X161CCA,	"AllyAnimation014");
	MakeByte	(0X161CE2);
	MakeArray	(0X161CE2,	0X20);
	MakeName	(0X161CE2,	"AllyAnimation015");
	MakeByte	(0X161D02);
	MakeArray	(0X161D02,	0X18);
	MakeName	(0X161D02,	"AllyAnimation016");
	MakeByte	(0X161D1A);
	MakeArray	(0X161D1A,	0X28);
	MakeName	(0X161D1A,	"AllyAnimation017");
	MakeByte	(0X161D42);
	MakeArray	(0X161D42,	0X10);
	MakeName	(0X161D42,	"AllyAnimation018");
	MakeByte	(0X161D52);
	MakeArray	(0X161D52,	0X18);
	MakeName	(0X161D52,	"AllyAnimation019");
	MakeByte	(0X161D6A);
	MakeArray	(0X161D6A,	0X18);
	MakeName	(0X161D6A,	"AllyAnimation020");
	MakeByte	(0X161D82);
	MakeArray	(0X161D82,	0X18);
	MakeName	(0X161D82,	"AllyAnimation021");
	MakeByte	(0X161D9A);
	MakeArray	(0X161D9A,	0X18);
	MakeName	(0X161D9A,	"AllyAnimation022");
	MakeByte	(0X161DB2);
	MakeArray	(0X161DB2,	0X18);
	MakeName	(0X161DB2,	"AllyAnimation023");
	MakeByte	(0X161DCA);
	MakeArray	(0X161DCA,	0X20);
	MakeName	(0X161DCA,	"AllyAnimation024");
	MakeByte	(0X161DEA);
	MakeArray	(0X161DEA,	0X30);
	MakeName	(0X161DEA,	"AllyAnimation025");
	MakeByte	(0X161E1A);
	MakeArray	(0X161E1A,	0X18);
	MakeName	(0X161E1A,	"AllyAnimation026");
	MakeByte	(0X161E32);
	MakeArray	(0X161E32,	0X30);
	MakeName	(0X161E32,	"AllyAnimation027");
	MakeByte	(0X161E62);
	MakeArray	(0X161E62,	0X18);
	MakeName	(0X161E62,	"AllyAnimation028");
	MakeByte	(0X161E7A);
	MakeArray	(0X161E7A,	0X28);
	MakeName	(0X161E7A,	"AllyAnimation029");
	MakeByte	(0X161EA2);
	MakeArray	(0X161EA2,	0X20);
	MakeName	(0X161EA2,	"AllyAnimation030");
	MakeByte	(0X161EC2);
	MakeArray	(0X161EC2,	0X20);
	MakeName	(0X161EC2,	"AllyAnimation031");
	MakeByte	(0X161EE2);
	MakeArray	(0X161EE2,	0X18);
	MakeName	(0X161EE2,	"AllyAnimation032");
	MakeByte	(0X161EFA);
	MakeArray	(0X161EFA,	0X20);
	MakeName	(0X161EFA,	"AllyAnimation033");
	MakeByte	(0X161F1A);
	MakeArray	(0X161F1A,	0X28);
	MakeName	(0X161F1A,	"AllyAnimation034");
	MakeByte	(0X161F42);
	MakeArray	(0X161F42,	0X18);
	MakeName	(0X161F42,	"AllyAnimation035");
	MakeByte	(0X161F5A);
	MakeArray	(0X161F5A,	0X40);
	MakeName	(0X161F5A,	"AllyAnimation036");
	MakeByte	(0X161F9A);
	MakeArray	(0X161F9A,	0X50);
	MakeName	(0X161F9A,	"AllyAnimation037");
	MakeByte	(0X161FEA);
	MakeArray	(0X161FEA,	0X20);
	MakeName	(0X161FEA,	"AllyAnimation038");
	MakeByte	(0X16200A);
	MakeArray	(0X16200A,	0X20);
	MakeName	(0X16200A,	"AllyAnimation039");
	MakeByte	(0X16202A);
	MakeArray	(0X16202A,	0X18);
	MakeName	(0X16202A,	"AllyAnimation040");
	MakeByte	(0X162042);
	MakeArray	(0X162042,	0X10);
	MakeName	(0X162042,	"AllyAnimation041");
	MakeByte	(0X162052);
	MakeArray	(0X162052,	0X18);
	MakeName	(0X162052,	"AllyAnimation042");
	MakeByte	(0X16206A);
	MakeArray	(0X16206A,	0X18);
	MakeName	(0X16206A,	"AllyAnimation043");
	MakeByte	(0X162082);
	MakeArray	(0X162082,	0X18);
	MakeName	(0X162082,	"AllyAnimation044");
	MakeByte	(0X16209A);
	MakeArray	(0X16209A,	0X18);
	MakeName	(0X16209A,	"AllyAnimation045");
	MakeByte	(0X1620B2);
	MakeArray	(0X1620B2,	0X20);
	MakeName	(0X1620B2,	"AllyAnimation046");
	MakeByte	(0X1620D2);
	MakeArray	(0X1620D2,	0X18);
	MakeName	(0X1620D2,	"AllyAnimation047");
	MakeByte	(0X1620EA);
	MakeArray	(0X1620EA,	0X20);
	MakeName	(0X1620EA,	"AllyAnimation048");
	MakeByte	(0X16210A);
	MakeArray	(0X16210A,	0X18);
	MakeName	(0X16210A,	"AllyAnimation049");
	MakeByte	(0X162122);
	MakeArray	(0X162122,	0X38);
	MakeName	(0X162122,	"AllyAnimation050");
	MakeByte	(0X16215A);
	MakeArray	(0X16215A,	0X40);
	MakeName	(0X16215A,	"AllyAnimation051");
	MakeByte	(0X16219A);
	MakeArray	(0X16219A,	0X38);
	MakeName	(0X16219A,	"AllyAnimation052");
	MakeByte	(0X1621D2);
	MakeArray	(0X1621D2,	0X18);
	MakeName	(0X1621D2,	"AllyAnimation053");
	MakeByte	(0X1621EA);
	MakeArray	(0X1621EA,	0X18);
	MakeName	(0X1621EA,	"AllyAnimation054");
	MakeByte	(0X162202);
	MakeArray	(0X162202,	0X20);
	MakeName	(0X162202,	"AllyAnimation055");
	MakeByte	(0X162222);
	MakeArray	(0X162222,	0X18);
	MakeName	(0X162222,	"AllyAnimation056");
	MakeByte	(0X16223A);
	MakeArray	(0X16223A,	0X18);
	MakeName	(0X16223A,	"AllyAnimation057");
	MakeByte	(0X162252);
	MakeArray	(0X162252,	0X18);
	MakeName	(0X162252,	"AllyAnimation058");
	MakeDword	(x=0X16226A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X16226A,	"pt_Platforms");
	MakeDword	(x=0X16226E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X162272);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X162276);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16227A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16227E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X162282);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X162286);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16228A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X16228E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X162292);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X162296);
	MakeArray	(0X162296,	0XE);
	MakeName	(0X162296,	"Platform00");
	MakeByte	(0X1622A4);
	MakeArray	(0X1622A4,	0X33E);
	MakeName	(0X1622A4,	"Platform01");
	MakeByte	(0X1625E2);
	MakeArray	(0X1625E2,	0X3A4);
	MakeName	(0X1625E2,	"Platform02");
	MakeByte	(0X162986);
	MakeArray	(0X162986,	0X3CC);
	MakeName	(0X162986,	"Platform03");
	MakeByte	(0X162D52);
	MakeArray	(0X162D52,	0X25A);
	MakeName	(0X162D52,	"Platform04");
	MakeByte	(0X162FAC);
	MakeArray	(0X162FAC,	0X40A);
	MakeName	(0X162FAC,	"Platform05");
	MakeByte	(0X1633B6);
	MakeArray	(0X1633B6,	0X356);
	MakeName	(0X1633B6,	"Platform06");
	MakeByte	(0X16370C);
	MakeArray	(0X16370C,	0X2FE);
	MakeName	(0X16370C,	"Platform07");
	MakeByte	(0X163A0A);
	MakeArray	(0X163A0A,	0X2B6);
	MakeName	(0X163A0A,	"Platform08");
	MakeByte	(0X163CC0);
	MakeArray	(0X163CC0,	0X33A);
	MakeName	(0X163CC0,	"Platform09");
	MakeArray	(0X163FFA,	0X6);
	MakeCode	(0X164000);
	MakeName	(0X164000,	"j_DisplaySegaLogo");
	MakeCode	(0X164004);
	MakeName	(0X164004,	"j_NameAlly");
	MakeCode	(0X164008);
	MakeName	(0X164008,	"j_CheckSavedGames");
	MakeCode	(0X16400C);
	MakeCode	(0X164010);
	MakeCode	(0X164014);
	MakeCode	(0X164018);
	MakeCode	(x=0X16401C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164024);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164032);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164040);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164056);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16405A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X164064);
	MakeCode	(x=0X16406E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16407C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X164094);
	MakeCode	(x=0X164096);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164100);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164104);
	OpHex		(x,	0);
	MakeCode	(x=0X164114);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164118);
	OpHex		(x,	0);
	MakeCode	(x=0X164126);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16412A);
	OpHex		(x,	0);
	MakeCode	(x=0X164138);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16413C);
	OpHex		(x,	0);
	MakeCode	(x=0X16414A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16414E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164170);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X164176);
	MakeCode	(x=0X16418C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164190);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1641DE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1641E6);
	MakeCode	(x=0X1641FC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164200);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16424E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X164254);
	MakeName	(0X164254,	"CheckSavedGames");
	MakeCode	(x=0X164262);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X164284);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16428C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X16429A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1642A2);
	MakeCode	(x=0X1642B2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1642B6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1642BC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1642C6);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1642D0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1642E4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1642EA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1642F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1642FA);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X164304);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16430E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X164314);
	MakeArray	(0X164314,	0X4);
	MakeCode	(x=0X164318);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X16431C);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X164326);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164330);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X164336);
	MakeArray	(0X164336,	0X4);
	MakeCode	(x=0X16433A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X16433E);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X16434A);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X164356);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X16436E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X164374);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164378);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164390);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1643A6);
	MakeArray	(0X1643A6,	0X4);
	MakeCode	(x=0X1643AA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1643B0);
	MakeCode	(x=0X1643BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1643C0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1643CE);
	MakeCode	(x=0X1643D4);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1643DE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1643E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1643EE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1643F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X164402);
	MakeCode	(0X16440E);
	MakeCode	(x=0X164416);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164426);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164434);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164442);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16444C);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(0X16445A);
	MakeCode	(x=0X16445C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164468);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16447A);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X164490);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164494);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1644B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1644C4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1644C8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X1644EA);
	MakeByte	(0X1644EB);
	MakeByte	(0X1644EC);
	MakeByte	(0X1644ED);
	MakeWord	(0X1644EE);
	MakeByte	(0X1644F0);
	MakeByte	(0X1644F1);
	MakeByte	(0X1644F2);
	MakeByte	(0X1644F3);
	MakeByte	(0X1644F4);
	MakeByte	(0X1644F5);
	MakeCode	(x=0X1644F6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X1644F6,	"NameAlly");
	MakeCode	(x=0X1644FA);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1644FE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164502);
	OpHex		(x,	0);
	MakeCode	(x=0X164512);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16452A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164554);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164558);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164586);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16459C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1645A4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1645B0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1645B4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1645BC);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X1645C8);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X1645D4);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X1645E0);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X1645EC);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X1645F8);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeCode	(x=0X164604);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeByte	(0X16461C);
	MakeArray	(0X16461C,	0X4);
	MakeCode	(0X164620);
	MakeCode	(x=0X164622);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16462C);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X16463A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164644);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164666);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X16468A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X164692);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X16469C);
	MakeCode	(x=0X1646A0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1646CE);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1646D8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1646E6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16470E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164714);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16472A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X164730);
	MakeCode	(x=0X164732);
	OpEnumEx		(x,	0,	GetEnum("Traps"),0);
	MakeWord	(x=0X164734);
	OpEnumEx		(x,	0,	GetEnum("Sfx"),0);
	MakeCode	(0X164736);
	MakeCode	(x=0X164738);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X164740);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X16474A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X164754);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16475A);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X16476C);
	MakeCode	(x=0X164784);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X164788);
	MakeArray	(0X164788,	0X4);
	MakeCode	(0X16478C);
	MakeCode	(x=0X164790);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X164798);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1647A2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1647AC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1647B2);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X1647C4);
	MakeCode	(x=0X1647DC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X1647E0);
	MakeArray	(0X1647E0,	0X4);
	MakeCode	(0X1647E4);
	MakeCode	(x=0X1647E8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1647F2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164800);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X164806);
	MakeArray	(0X164806,	0X4);
	MakeCode	(0X16480A);
	MakeCode	(x=0X16480E);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X164818);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164826);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeByte	(0X16482A);
	MakeArray	(0X16482A,	0X4);
	MakeCode	(0X16482E);
	MakeCode	(x=0X164834);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X16483C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164870);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X164876);
	MakeCode	(x=0X164878);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X16489C);
	MakeCode	(x=0X16489E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1648AE);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1648BA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1648D0);
	MakeCode	(x=0X1648E8);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X1648F0);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X164916);
	MakeCode	(x=0X16491A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16491E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164932);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16493C);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164944);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164948);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X164950);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(x=0X164956);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X16495C);
	MakeCode	(x=0X164960);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164964);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164976);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X16497E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X164982);
	OpSign		(x,	0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X16498A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X164990);
	MakeArray	(0X164990,	0X3C);
	MakeName	(0X164990,	"wl_164990");
	MakeByte	(0X1649CC);
	MakeArray	(0X1649CC,	0X3E);
	MakeName	(0X1649CC,	"TextHighlightTiles");
	MakeWord	(0X164A0A);
	MakeWord	(0X164A0C);
	MakeWord	(0X164A0E);
	MakeWord	(0X164A10);
	MakeDword	(x=0X164A12);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeName	(0X164A12,	"pt_ReaderMenuStrings");
	MakeDword	(x=0X164A16);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X164A1A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X164A1E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X164A22);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X164A26);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X164A2A);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeDword	(x=0X164A2E);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeStr		(0X164A32,	0X164A37);
	MakeName	(0X164A32,	"aNew");
	MakeStr		(0X164A37,	0X164A3D);
	MakeName	(0X164A37,	"aCont");
	MakeStr		(0X164A3D,	0X164A42);
	MakeName	(0X164A3D,	"aDel");
	MakeStr		(0X164A42,	0X164A48);
	MakeName	(0X164A42,	"aCopy");
	MakeStr		(0X164A48,	0X164A4B);
	MakeStr		(0X164A4B,	0X164A4E);
	MakeStr		(0X164A4E,	0X164A51);
	MakeStr		(0X164A51,	0X164A54);
	MakeStr		(0X164A54,	0X164A58);
	MakeName	(0X164A54,	"aCh_");
	MakeByte	(0X164A58);
	MakeByte	(0X164AD4);
	MakeByte	(0X164C74);
	MakeByte	(0X165152);
	MakeArray	(0X165152,	0X1168);
	MakeName	(0X165152,	"SimoneTiles1");
	MakeByte	(0X1662BA);
	MakeArray	(0X1662BA,	0X146);
	MakeName	(0X1662BA,	"SimoneTiles2");
	MakeRptCmt	(0X166400,	"girl w/book tiles?");
	MakeByte	(0X166400);
	MakeByte	(0X166980);
	MakeArray	(0X166980,	0X934);
	MakeName	(0X166980,	"SimoneTiles3");
	MakeByte	(0X1672B4);
	MakeByte	(0X1673CC);
	MakeCode	(0X1674E4);
	MakeName	(0X1674E4,	"DisplaySegaLogo");
	MakeCode	(x=0X1674F0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1674F4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1674FA);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X167516);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X167520);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X167526);
	OpHex		(x,	0);
	MakeCode	(x=0X167548);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X16756A);
	MakeArray	(0X16756A,	0X4);
	MakeCode	(0X16756E);
	MakeCode	(0X167576);
	MakeCode	(x=0X167580);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X167586);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X1675D0);
	MakeCode	(x=0X1675D4);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1675DC);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X1675E2);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeByte	(0X16761C);
	MakeArray	(0X16761C,	0X20);
	MakeName	(0X16761C,	"SegaLogoPalette");
	MakeByte	(0X16763C);
	MakeArray	(0X16763C,	0X4D6);
	MakeName	(0X16763C,	"SegaLogoTiles");
	MakeWord	(0X167B12);
	MakeWord	(0X167B14);
	MakeWord	(0X167B16);
	MakeWord	(0X167B18);
	MakeRptCmt	(0X167B1A,	"sprite properties");
	MakeByte	(0X167B1A);
	MakeName	(0X167B1A,	"spr_167B1A");
	MakeByte	(0X167E87);
	MakeCode	(0X167E94);
	MakeCode	(x=0X167E98);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X167EA0);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(x=0X167EA6);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	MakeCode	(0X167EF6);
	MakeByte	(0X167F02);
	MakeArray	(0X167F02,	0X9A);
	MakeName	(0X167F02,	"SegaLogoColors");
	MakeCode	(0X167F9C);
	MakeName	(0X167F9C,	"LoadSegaLogoPalette");
	MakeCode	(0X167FA8);
	MakeName	(0X167FA8,	"CalculateRomChecksum");
	MakeCode	(x=0X167FAE);
	OpEnumEx		(x,	0,	GetEnum("InputsBitmap"),0);
	MakeRptCmt	(0X167FB6,	"execute only if P1 START pressed");
	MakeCode	(x=0X167FB8);
	OpOff		(x,	0,	0X0);
	OpOff		(x,	128,	0X0);
	ExtLinB		(0X167FD8,	0,	"                ");
	MakeCode	(x=0X167FDC);
	OpOff		(x,	1,	0X0);
	OpOff		(x,	129,	0X0);
	MakeCode	(0X167FE2);
	MakeArray	(0X167FEA,	0X16);
	MakeByte	(0X168000);
	MakeArray	(0X168000,	0X8000);
	MakeByte	(0X170000);
	MakeArray	(0X170000,	0X6000);
	MakeByte	(0X176000);
	MakeArray	(0X176000,	0X2000);
	MakeName	(0X176000,	"SoundDriver");
	MakeByte	(0X178000);
	MakeArray	(0X178000,	0XAE0);
	MakeByte	(0X178AE0);
	MakeArray	(0X178AE0,	0X7520);
	MakeByte	(0X200000);
	MakeByte	(0X200001);
	MakeArray	(0X200001,	0X200);
	MakeName	(0X200001,	"SRAM_START");
	MakeByte	(0X200201);
	MakeArray	(0X200201,	0X2C);
	MakeName	(0X200201,	"SRAM_STRING");
	MakeByte	(0X20022D);
	MakeArray	(0X20022D,	0X2);
	MakeName	(0X20022D,	"SAVE_FLAGS");
	MakeByte	(0X20022F);
	MakeArray	(0X20022F,	0X2);
	MakeByte	(0X200231);
	MakeArray	(0X200231,	0X11F8);
	MakeName	(0X200231,	"SAVE_SLOT_1_DATA");
	MakeByte	(0X201429);
	MakeArray	(0X201429,	0X11F8);
	MakeName	(0X201429,	"SAVE_SLOT_2_DATA");
	MakeByte	(0X202621);
	MakeArray	(0X202621,	0X11F8);
	MakeName	(0X202621,	"SAVE_SLOT_3_DATA");
	MakeRptCmt	(0X203819,	"1 = sound test is activated");
	MakeByte	(0X203819);
	MakeArray	(0X203819,	0X7E6);
	MakeName	(0X203819,	"GAME_COMPLETED");
	MakeByte	(0X203FFF);
	MakeName	(0X203FFF,	"SRAM_END");
	MakeByte	(0XA00000);
	MakeArray	(0XA00000,	0X1303);
	MakeName	(0XA00000,	"Z80_Memory");
	MakeByte	(0XA01303);
	MakeName	(0XA01303,	"Z80_CHANNEL_1_NOT_IN_USE");
	MakeByte	(0XA01304);
	MakeArray	(0XA01304,	0XCF8);
	MakeByte	(0XA01FFC);
	MakeName	(0XA01FFC,	"Z80_SoundDriverFadeInData");
	MakeByte	(0XA01FFD);
	MakeName	(0XA01FFD,	"Z80_SoundDriverMusicLevel");
	MakeByte	(0XA01FFE);
	MakeByte	(0XA01FFF);
	MakeName	(0XA01FFF,	"Z80_SoundDriverCommand");
	MakeByte	(0XA02000);
	MakeArray	(0XA02000,	0XDFFF);
	MakeRptCmt	(0XA10000,	"7-MODE  (R)  0: Domestic Model\n             1: Overseas Model\n6-VMOD  (R)  0: NTSC CPU clock 7.67 MHz\n             1: PAL CPU clock 7.60 MHz\n5-DISK  (R)  0: FDD unit connected\n             1: FDD unit not connected\n4-RSV   (R)  Currently not used\n3-0 VER (R)  MEGA DRIVE version ($0 to $F)");
	MakeByte	(0XA10000);
	MakeName	(0XA10000,	"HW_Info");
	MakeByte	(0XA10001);
	MakeName	(0XA10001,	"HW_Info_LO_BYTE");
	MakeRptCmt	(0XA10002,	"PD7 (RW)\nPD6 (RW) TH\nPD5 (RW) TR\nPD4 (RW) TL\nPD3 (RW) RIGHT\nPD2 (RW) LEFT\nPD1 (RW) DOWN\nPDO (RW) UP\n");
	MakeWord	(0XA10002);
	MakeName	(0XA10002,	"DATA1");
	MakeWord	(0XA10004);
	MakeName	(0XA10004,	"DATA2");
	MakeWord	(0XA10006);
	MakeName	(0XA10006,	"DATA3");
	MakeRptCmt	(0XA10008,	"INT (RW) 0: TH-INT PROHIBITED\n         1: TH-INT ALLOWED\nPC6 (RW) 0: PD6 INPUT MODE\n         1: OUTPUT MODE\nPC5 (RW) 0: PD5 INPUT MODE\n         1: OUTPUT MODE\nPC4 (RW) 0: PD4 INPUT MODE\n         1: OUTPUT MODE\nPC3 (RW) 0: PD3 INPUT MODE\n         1: OUTPUT MODE\nPC2 (RW) 0: PD2 INPUT MODE\n         1: OUTPUT MODE\nPC1 (RW) 0: PD1 INPUT MODE\n         1: OUTPUT MODE\nPCO (RW) 0: PDO INPUT MODE\n         1: OUTPUT MODE");
	MakeWord	(0XA10008);
	MakeName	(0XA10008,	"CTRL1");
	MakeWord	(0XA1000A);
	MakeName	(0XA1000A,	"CTRL2");
	MakeWord	(0XA1000C);
	MakeName	(0XA1000C,	"CTRL3");
	MakeWord	(0XA1000E);
	MakeName	(0XA1000E,	"TxDATA1");
	MakeWord	(0XA10010);
	MakeName	(0XA10010,	"RxDATA1");
	MakeWord	(0XA10012);
	MakeName	(0XA10012,	"SCTRL1");
	MakeWord	(0XA10014);
	MakeName	(0XA10014,	"TxDATA2");
	MakeWord	(0XA10016);
	MakeName	(0XA10016,	"RxDATA2");
	MakeWord	(0XA10018);
	MakeName	(0XA10018,	"SCTRL2");
	MakeWord	(0XA1001A);
	MakeName	(0XA1001A,	"TxDATA3");
	MakeWord	(0XA1001C);
	MakeName	(0XA1001C,	"RxDATA3");
	MakeWord	(0XA1001E);
	MakeName	(0XA1001E,	"SCTRL3");
	MakeByte	(0XA10020);
	MakeArray	(0XA10020,	0XFDF);
	MakeRptCmt	(0XA11000,	"D8 ( W)   0: ROM MODE\n          1: D-RAM MODE");
	MakeWord	(0XA11000);
	MakeName	(0XA11000,	"MemMode");
	MakeByte	(0XA11002);
	MakeArray	(0XA11002,	0XFE);
	MakeRptCmt	(0XA11100,	"D8 ( W)   0: BUSREQ CANCEL\n          1: BUSREQ REQUEST\n   ( R)   0: CPU FUNCTION STOP ACCESSIBLE\n          1: FUNCTIONING");
	MakeWord	(0XA11100);
	MakeName	(0XA11100,	"Z80BusReq");
	MakeByte	(0XA11102);
	MakeArray	(0XA11102,	0XFE);
	MakeRptCmt	(0XA11200,	"D8 ( W)   0: RESET REQUEST\n          1: RESET CANCEL");
	MakeWord	(0XA11200);
	MakeName	(0XA11200,	"Z80BusReset");
	MakeByte	(0XA11202);
	MakeArray	(0XA11202,	0XDFD);
	MakeWord	(0XC00000);
	MakeName	(0XC00000,	"VDP_Data");
	MakeWord	(0XC00002);
	MakeWord	(0XC00004);
	MakeName	(0XC00004,	"VDP_Control");
	MakeWord	(0XC00006);
	MakeWord	(0XC00008);
	MakeName	(0XC00008,	"HV_Counter");
	MakeByte	(0XC0000A);
	MakeArray	(0XC0000A,	0X7);
	MakeByte	(0XC00011);
	MakeName	(0XC00011,	"PSG");
	MakeRptCmt	(0XFF0000,	"RAM start");
	MakeWord	(0XFF0000);
	MakeArray	(0XFF0000,	0X2);
	MakeName	(0XFF0000,	"PALETTE_1_CURRENT");
	MakeWord	(0XFF0004);
	MakeArray	(0XFF0004,	0X2);
	MakeName	(0XFF0004,	"PALETTE_1_CURRENT_02");
	MakeWord	(0XFF0008);
	MakeArray	(0XFF0008,	0X2);
	MakeName	(0XFF0008,	"PALETTE_1_CURRENT_04");
	MakeWord	(0XFF000C);
	MakeArray	(0XFF000C,	0X2);
	MakeName	(0XFF000C,	"PALETTE_1_CURRENT_06");
	MakeWord	(0XFF0010);
	MakeArray	(0XFF0010,	0X2);
	MakeName	(0XFF0010,	"PALETTE_1_CURRENT_08");
	MakeWord	(0XFF0014);
	MakeArray	(0XFF0014,	0X2);
	MakeName	(0XFF0014,	"PALETTE_1_CURRENT_10");
	MakeWord	(0XFF0018);
	MakeArray	(0XFF0018,	0X2);
	MakeName	(0XFF0018,	"PALETTE_1_CURRENT_12");
	MakeWord	(0XFF001C);
	MakeArray	(0XFF001C,	0X2);
	MakeName	(0XFF001C,	"PALETTE_1_CURRENT_14");
	MakeWord	(0XFF0020);
	MakeArray	(0XFF0020,	0X6);
	MakeName	(0XFF0020,	"PALETTE_2_CURRENT");
	MakeRptCmt	(0XFF002C,	"5 color entries patched into palette 2, used by spell animations");
	MakeWord	(0XFF002C);
	MakeName	(0XFF002C,	"PALETTE_2_CURRENT_06");
	MakeWord	(0XFF002E);
	MakeName	(0XFF002E,	"PALETTE_2_CURRENT_07");
	MakeWord	(0XFF0030);
	MakeArray	(0XFF0030,	0X8);
	MakeName	(0XFF0030,	"PALETTE_2_CURRENT_08");
	MakeWord	(0XFF0040);
	MakeArray	(0XFF0040,	0X10);
	MakeName	(0XFF0040,	"PALETTE_3_CURRENT");
	MakeWord	(0XFF0060);
	MakeArray	(0XFF0060,	0X10);
	MakeName	(0XFF0060,	"PALETTE_4_CURRENT");
	MakeWord	(0XFF0080);
	MakeName	(0XFF0080,	"PALETTE_1_BASE");
	MakeWord	(0XFF0082);
	MakeName	(0XFF0082,	"PALETTE_1_BASE_01");
	MakeWord	(0XFF0084);
	MakeArray	(0XFF0084,	0XE);
	MakeName	(0XFF0084,	"PALETTE_1_BASE_02");
	MakeWord	(0XFF00A0);
	MakeName	(0XFF00A0,	"PALETTE_2_BASE");
	MakeWord	(0XFF00A2);
	MakeArray	(0XFF00A2,	0X5);
	MakeName	(0XFF00A2,	"PALETTE_2_BASE_01");
	MakeRptCmt	(0XFF00AC,	"copy of spell animation palette");
	MakeWord	(0XFF00AC);
	MakeArray	(0XFF00AC,	0X5);
	MakeName	(0XFF00AC,	"PALETTE_2_BASE_06");
	MakeWord	(0XFF00B6);
	MakeArray	(0XFF00B6,	0X5);
	MakeName	(0XFF00B6,	"PALETTE_2_BASE_11");
	MakeWord	(0XFF00C0);
	MakeArray	(0XFF00C0,	0X10);
	MakeName	(0XFF00C0,	"PALETTE_3_BASE");
	MakeWord	(0XFF00E0);
	MakeArray	(0XFF00E0,	0X10);
	MakeName	(0XFF00E0,	"PALETTE_4_BASE");
	MakeDword	(0XFF0100);
	MakeArray	(0XFF0100,	0X28);
	MakeName	(0XFF0100,	"HORIZONTAL_SCROLL_DATA");
	MakeDword	(0XFF01A0);
	MakeArray	(0XFF01A0,	0X10);
	MakeWord	(0XFF01E0);
	MakeArray	(0XFF01E0,	0X9F);
	MakeWord	(0XFF031E);
	MakeArray	(0XFF031E,	0XF1);
	MakeWord	(0XFF0500);
	MakeArray	(0XFF0500,	0X28);
	MakeName	(0XFF0500,	"VERTICAL_SCROLL_DATA");
	MakeByte	(0XFF0550);
	MakeArray	(0XFF0550,	0X230);
	MakeName	(0XFF0550,	"DMA_QUEUE");
	MakeByte	(0XFF0780);
	MakeArray	(0XFF0780,	0X400);
	MakeName	(0XFF0780,	"VDP_COMMAND_QUEUE");
	MakeByte	(0XFF0B80);
	MakeArray	(0XFF0B80,	0X100);
	MakeRptCmt	(0XFF0C80,	"start of sprite properties table -- 64 entries, 8 bytes per entry : \n    0-1 = y\n    2   = size\n    3   = link\n    4-5 = tile + flags\n    6-7 = x");
	MakeWord	(0XFF0C80);
	MakeName	(0XFF0C80,	"SPRITE_00_PROPERTIES");
	MakeByte	(0XFF0C82);
	MakeName	(0XFF0C82,	"SPRITE_00_SIZE");
	MakeRptCmt	(0XFF0C83,	"linked sprite index");
	MakeByte	(0XFF0C83);
	MakeArray	(0XFF0C83,	0X3);
	MakeName	(0XFF0C83,	"SPRITE_00_LINK");
	MakeWord	(0XFF0C86);
	MakeName	(0XFF0C86,	"SPRITE_00_X");
	MakeWord	(0XFF0C88);
	MakeName	(0XFF0C88,	"SPRITE_01_PROPERTIES");
	MakeByte	(0XFF0C8A);
	MakeArray	(0XFF0C8A,	0X8);
	MakeName	(0XFF0C8A,	"SPRITE_01_SIZE");
	MakeByte	(0XFF0C92);
	MakeArray	(0XFF0C92,	0X6);
	MakeName	(0XFF0C92,	"SPRITE_02_SIZE");
	MakeWord	(0XFF0C98);
	MakeArray	(0XFF0C98,	0X10);
	MakeName	(0XFF0C98,	"SPRITE_03_PROPERTIES");
	MakeWord	(0XFF0CB8);
	MakeArray	(0XFF0CB8,	0X24);
	MakeName	(0XFF0CB8,	"SPRITE_07_PROPERTIES");
	MakeWord	(0XFF0D00);
	MakeArray	(0XFF0D00,	0XC);
	MakeName	(0XFF0D00,	"SPRITE_16_PROPERTIES");
	MakeWord	(0XFF0D18);
	MakeArray	(0XFF0D18,	0X4);
	MakeName	(0XFF0D18,	"SPRITE_19_PROPERTIES");
	MakeWord	(0XFF0D20);
	MakeArray	(0XFF0D20,	0X4);
	MakeName	(0XFF0D20,	"SPRITE_20_PROPERTIES");
	MakeByte	(0XFF0D28);
	MakeArray	(0XFF0D28,	0X3);
	MakeName	(0XFF0D28,	"SPRITE_21_PROPERTIES");
	MakeByte	(0XFF0D2B);
	MakeArray	(0XFF0D2B,	0X5);
	MakeName	(0XFF0D2B,	"SPRITE_21_LINK");
	MakeWord	(0XFF0D30);
	MakeArray	(0XFF0D30,	0X2);
	MakeName	(0XFF0D30,	"SPRITE_22_PROPERTIES");
	MakeWord	(0XFF0D34);
	MakeName	(0XFF0D34,	"SPRITE_22_TILE_FLAGS");
	MakeWord	(0XFF0D36);
	MakeName	(0XFF0D36,	"SPRITE_22_X");
	MakeWord	(0XFF0D38);
	MakeArray	(0XFF0D38,	0X4);
	MakeName	(0XFF0D38,	"SPRITE_23_PROPERTIES");
	MakeWord	(0XFF0D40);
	MakeArray	(0XFF0D40,	0X4);
	MakeName	(0XFF0D40,	"SPRITE_24_PROPERTIES");
	MakeWord	(0XFF0D48);
	MakeArray	(0XFF0D48,	0X1C);
	MakeName	(0XFF0D48,	"SPRITE_25_PROPERTIES");
	MakeWord	(0XFF0D80);
	MakeArray	(0XFF0D80,	0X3);
	MakeName	(0XFF0D80,	"SPRITE_32_PROPERTIES");
	MakeWord	(0XFF0D86);
	MakeArray	(0XFF0D86,	0X52);
	MakeName	(0XFF0D86,	"SPRITE_32_X");
	MakeByte	(0XFF0E2A);
	MakeArray	(0XFF0E2A,	0X6);
	MakeName	(0XFF0E2A,	"SPRITE_53_SIZE");
	MakeWord	(0XFF0E30);
	MakeArray	(0XFF0E30,	0X3);
	MakeName	(0XFF0E30,	"SPRITE_54_PROPERTIES");
	MakeWord	(0XFF0E36);
	MakeArray	(0XFF0E36,	0X25);
	MakeName	(0XFF0E36,	"SPRITE_54_X");
	MakeRptCmt	(0XFF0E80,	"numeric value to write tiles from");
	MakeByte	(0XFF0E80);
	MakeArray	(0XFF0E80,	0X5);
	MakeName	(0XFF0E80,	"LOADED_NUMBER");
	MakeByte	(0XFF0E85);
	MakeArray	(0XFF0E85,	0XF);
	MakeByte	(0XFF0E94);
	MakeName	(0XFF0E94,	"VINT_PARAMS");
	MakeByte	(0XFF0E95);
	MakeName	(0XFF0E95,	"VDP_COMMAND_COUNTER");
	MakeByte	(0XFF0E96);
	MakeName	(0XFF0E96,	"DMA_QUEUE_SIZE");
	MakeRptCmt	(0XFF0E97,	"80=start, 40=A, 20=C, 10=B, 8=right, 4=left, 2=down, 1=up");
	MakeByte	(0XFF0E97);
	MakeName	(0XFF0E97,	"P1_INPUT");
	MakeRptCmt	(0XFF0E98,	"80=start, 40=A, 20=C, 10=B, 8=right, 4=left, 2=down, 1=up");
	MakeByte	(0XFF0E98);
	MakeName	(0XFF0E98,	"P2_INPUT");
	MakeRptCmt	(0XFF0E99,	"Contains P1_INPUT when INPUT_REPEAT_DELAYER counter max reached");
	MakeByte	(0XFF0E99);
	MakeName	(0XFF0E99,	"CURRENT_PLAYER_INPUT");
	MakeByte	(0XFF0E9A);
	MakeByte	(0XFF0E9B);
	MakeByte	(0XFF0E9C);
	MakeName	(0XFF0E9C,	"FRAME_COUNTER");
	MakeByte	(0XFF0E9D);
	MakeRptCmt	(0XFF0E9E,	"up to 4 word values :\nxx FC : update music volume to xx");
	MakeWord	(0XFF0E9E);
	MakeArray	(0XFF0E9E,	0X4);
	MakeName	(0XFF0E9E,	"SOUND_COMMAND_QUEUE");
	MakeRptCmt	(0XFF0EA6,	"up to $A");
	MakeByte	(0XFF0EA6);
	MakeName	(0XFF0EA6,	"MUSIC_STACK_LENGTH");
	MakeRptCmt	(0XFF0EA7,	"history of music previously played");
	MakeByte	(0XFF0EA7);
	MakeArray	(0XFF0EA7,	0XA);
	MakeName	(0XFF0EA7,	"MUSIC_STACK");
	MakeRptCmt	(0XFF0EB1,	"if set, check if music's being played");
	MakeByte	(0XFF0EB1);
	MakeName	(0XFF0EB1,	"WAIT_FOR_MUSIC_END");
	MakeByte	(0XFF0EB2);
	MakeName	(0XFF0EB2,	"LAST_DIRECTIONAL_INPUT");
	MakeRptCmt	(0XFF0EB3,	"applies a delay before using input again when hold");
	MakeByte	(0XFF0EB3);
	MakeArray	(0XFF0EB3,	0X3);
	MakeName	(0XFF0EB3,	"INPUT_REPEAT_DELAYER");
	MakeByte	(0XFF0EB6);
	MakeName	(0XFF0EB6,	"SECONDS_COUNTER_FRAMES");
	MakeRptCmt	(0XFF0EB7,	"screen effect / transition");
	MakeByte	(0XFF0EB7);
	MakeArray	(0XFF0EB7,	0X2);
	MakeName	(0XFF0EB7,	"FADING_SETTING");
	MakeByte	(0XFF0EB9);
	MakeName	(0XFF0EB9,	"FADING_COUNTER_MAX");
	MakeRptCmt	(0XFF0EBA,	"decremented when value $8x");
	MakeByte	(0XFF0EBA);
	MakeName	(0XFF0EBA,	"FADING_POINTER");
	MakeRptCmt	(0XFF0EBB,	"has to be 01 to start fade routine");
	MakeByte	(0XFF0EBB);
	MakeName	(0XFF0EBB,	"FADING_COUNTER");
	MakeRptCmt	(0XFF0EBC,	"palette fading bitfield (1=1st palette, 2=2nd, 4=3rd, 8=4th)");
	MakeByte	(0XFF0EBC);
	MakeName	(0XFF0EBC,	"FADING_PALETTE_FLAGS");
	MakeRptCmt	(0XFF0EBD,	"bit7 is set when VInt is enabled");
	MakeByte	(0XFF0EBD);
	MakeName	(0XFF0EBD,	"VINT_ENABLED");
	MakeByte	(0XFF0EBE);
	MakeArray	(0XFF0EBE,	0X2);
	MakeName	(0XFF0EBE,	"VINT_WAIT_TOGGLE");
	MakeWord	(0XFF0EC0);
	MakeName	(0XFF0EC0,	"TEMP_DMA_VALUE");
	MakeRptCmt	(0XFF0EC2,	"RNG result");
	MakeWord	(0XFF0EC2);
	MakeName	(0XFF0EC2,	"RANDOM_SEED");
	MakeWord	(0XFF0EC4);
	MakeWord	(0XFF0EC6);
	MakeWord	(0XFF0EC8);
	MakeName	(0XFF0EC8,	"VDP_REG00_STATUS");
	MakeByte	(0XFF0ECA);
	MakeName	(0XFF0ECA,	"VDP_REG01_STATUS");
	MakeByte	(0XFF0ECB);
	MakeArray	(0XFF0ECB,	0X14);
	MakeName	(0XFF0ECB,	"VDP_REG01_VALUE");
	MakeByte	(0XFF0EDF);
	MakeArray	(0XFF0EDF,	0XA);
	MakeName	(0XFF0EDF,	"VDP_REG0B_VALUE");
	MakeByte	(0XFF0EE9);
	MakeArray	(0XFF0EE9,	0X5);
	MakeName	(0XFF0EE9,	"VDP_REG10_VALUE");
	MakeDword	(0XFF0EEE);
	MakeName	(0XFF0EEE,	"VDP_COMMAND_QUEUE_POINTER");
	MakeDword	(0XFF0EF2);
	MakeName	(0XFF0EF2,	"DMA_QUEUE_POINTER");
	MakeDword	(0XFF0EF6);
	MakeArray	(0XFF0EF6,	0X2);
	MakeName	(0XFF0EF6,	"VINT_CONTEXTUAL_FUNCTION_ADDRESS");
	MakeDword	(0XFF0EFE);
	MakeRptCmt	(0XFF0F02,	"first direction moved (same as above) if still moving (or holding move buttons)");
	MakeByte	(0XFF0F02);
	MakeName	(0XFF0F02,	"PRIMARY_WALKING_DIRECTION");
	MakeByte	(0XFF0F03);
	MakeArray	(0XFF0F03,	0XF9);
	MakeByte	(0XFF0FFC);
	MakeByte	(0XFF0FFD);
	MakeByte	(0XFF0FFE);
	MakeArray	(0XFF0FFE,	0X100);
	MakeName	(0XFF0FFE,	"FF0FFE_LOADING_SPACE");
	MakeByte	(0XFF10FE);
	MakeArray	(0XFF10FE,	0X40);
	MakeByte	(0XFF113E);
	MakeArray	(0XFF113E,	0X1EC2);
	MakeRptCmt	(0XFF3000,	"RAM used for decompressing graphics");
	MakeByte	(0XFF3000);
	MakeName	(0XFF3000,	"FF3000_LOADING_SPACE");
	MakeByte	(0XFF3001);
	MakeArray	(0XFF3001,	0X3);
	MakeByte	(0XFF3004);
	MakeArray	(0XFF3004,	0X11C);
	MakeByte	(0XFF3120);
	MakeArray	(0XFF3120,	0X120);
	MakeByte	(0XFF3240);
	MakeArray	(0XFF3240,	0X5C);
	MakeByte	(0XFF329C);
	MakeArray	(0XFF329C,	0X67);
	MakeByte	(0XFF3303);
	MakeArray	(0XFF3303,	0XB9);
	MakeByte	(0XFF33BC);
	MakeArray	(0XFF33BC,	0X67);
	MakeByte	(0XFF3423);
	MakeArray	(0XFF3423,	0X3DD);
	MakeByte	(0XFF3800);
	MakeArray	(0XFF3800,	0X800);
	MakeByte	(0XFF4000);
	MakeArray	(0XFF4000,	0X240);
	MakeByte	(0XFF4240);
	MakeArray	(0XFF4240,	0X240);
	MakeByte	(0XFF4480);
	MakeArray	(0XFF4480,	0X240);
	MakeByte	(0XFF46C0);
	MakeArray	(0XFF46C0,	0X140);
	MakeByte	(0XFF4800);
	MakeArray	(0XFF4800,	0X100);
	MakeByte	(0XFF4900);
	MakeArray	(0XFF4900,	0X700);
	MakeWord	(0XFF5000);
	MakeName	(0XFF5000,	"MAP_SPRITE_POSITION");
	MakeByte	(0XFF5002);
	MakeName	(0XFF5002,	"MAP_SPRITE_FACING");
	MakeByte	(0XFF5003);
	MakeName	(0XFF5003,	"MAP_SPRITE_GFX");
	MakeWord	(0XFF5004);
	MakeName	(0XFF5004,	"MAP_SPRITE_X_RELATIVE_TO_PLAYER");
	MakeWord	(0XFF5006);
	MakeName	(0XFF5006,	"MAP_SPRITE_Y_RELATIVE_TO_PLAYER");
	MakeRptCmt	(0XFF5009,	"map sprite something something frame?");
	MakeByte	(0XFF5009);
	MakeByte	(0XFF500A);
	MakeArray	(0XFF500A,	0X2);
	MakeName	(0XFF500A,	"FRAMES_BETWEEN_EVENT_STEPS");
	MakeRptCmt	(0XFF500C,	"map sprite event command frame?");
	MakeWord	(0XFF500C);
	MakeRptCmt	(0XFF500F,	"map sprite lock counter?");
	MakeByte	(0XFF500F);
	MakeByte	(0XFF5010);
	MakeByte	(0XFF5011);
	MakeArray	(0XFF5011,	0X3);
	MakeWord	(0XFF5014);
	MakeArray	(0XFF5014,	0X3);
	MakeWord	(0XFF501A);
	MakeByte	(0XFF501C);
	MakeByte	(0XFF501D);
	MakeArray	(0XFF501D,	0X2);
	MakeByte	(0XFF501F);
	MakeByte	(0XFF5020);
	MakeByte	(0XFF5021);
	MakeByte	(0XFF5022);
	MakeArray	(0XFF5022,	0X8);
	MakeWord	(0XFF502A);
	MakeWord	(0XFF502C);
	MakeByte	(0XFF502F);
	MakeWord	(0XFF5030);
	MakeByte	(0XFF5032);
	MakeArray	(0XFF5032,	0X2);
	MakeWord	(0XFF5034);
	MakeArray	(0XFF5034,	0X3);
	MakeWord	(0XFF503A);
	MakeByte	(0XFF503C);
	MakeArray	(0XFF503C,	0X2);
	MakeWord	(0XFF5040);
	MakeByte	(0XFF5042);
	MakeArray	(0XFF5042,	0X4);
	MakeWord	(0XFF5046);
	MakeArray	(0XFF5046,	0X2);
	MakeWord	(0XFF504A);
	MakeWord	(0XFF504C);
	MakeArray	(0XFF504C,	0X2);
	MakeByte	(0XFF5050);
	MakeByte	(0XFF5051);
	MakeArray	(0XFF5051,	0X3);
	MakeDword	(0XFF5054);
	MakeWord	(0XFF505A);
	MakeWord	(0XFF505C);
	MakeArray	(0XFF505C,	0X2);
	MakeWord	(0XFF5060);
	MakeArray	(0XFF5060,	0X5);
	MakeWord	(0XFF506A);
	MakeWord	(0XFF506C);
	MakeArray	(0XFF506C,	0X2);
	MakeWord	(0XFF5070);
	MakeArray	(0XFF5070,	0X5);
	MakeWord	(0XFF507A);
	MakeByte	(0XFF507D);
	MakeArray	(0XFF507D,	0X3);
	MakeWord	(0XFF5080);
	MakeByte	(0XFF5082);
	MakeArray	(0XFF5082,	0X8);
	MakeWord	(0XFF508A);
	MakeByte	(0XFF508C);
	MakeByte	(0XFF508D);
	MakeArray	(0XFF508D,	0X3);
	MakeWord	(0XFF5090);
	MakeArray	(0XFF5090,	0X5);
	MakeWord	(0XFF509A);
	MakeByte	(0XFF509D);
	MakeArray	(0XFF509D,	0X3);
	MakeWord	(0XFF50A0);
	MakeByte	(0XFF50A2);
	MakeArray	(0XFF50A2,	0X2);
	MakeWord	(0XFF50A4);
	MakeWord	(0XFF50A6);
	MakeArray	(0XFF50A6,	0X2);
	MakeWord	(0XFF50AA);
	MakeWord	(0XFF50AC);
	MakeArray	(0XFF50AC,	0X2);
	MakeByte	(0XFF50B1);
	MakeByte	(0XFF50B3);
	MakeWord	(0XFF50B4);
	MakeArray	(0XFF50B4,	0X3);
	MakeWord	(0XFF50BA);
	MakeByte	(0XFF50BD);
	MakeArray	(0XFF50BD,	0X3);
	MakeWord	(0XFF50C0);
	MakeArray	(0XFF50C0,	0X5);
	MakeWord	(0XFF50CA);
	MakeByte	(0XFF50CD);
	MakeArray	(0XFF50CD,	0X3);
	MakeByte	(0XFF50D0);
	MakeByte	(0XFF50D1);
	MakeByte	(0XFF50D2);
	MakeArray	(0XFF50D2,	0X8);
	MakeWord	(0XFF50DA);
	MakeByte	(0XFF50DC);
	MakeByte	(0XFF50DD);
	MakeArray	(0XFF50DD,	0X3);
	MakeByte	(0XFF50E0);
	MakeByte	(0XFF50E1);
	MakeByte	(0XFF50E2);
	MakeArray	(0XFF50E2,	0X8);
	MakeWord	(0XFF50EA);
	MakeByte	(0XFF50EC);
	MakeByte	(0XFF50ED);
	MakeArray	(0XFF50ED,	0X3);
	MakeByte	(0XFF50F0);
	MakeByte	(0XFF50F1);
	MakeByte	(0XFF50F2);
	MakeArray	(0XFF50F2,	0X7);
	MakeByte	(0XFF50F9);
	MakeArray	(0XFF50F9,	0X4);
	MakeByte	(0XFF50FD);
	MakeArray	(0XFF50FD,	0X3);
	MakeWord	(0XFF5100);
	MakeByte	(0XFF5102);
	MakeArray	(0XFF5102,	0XA);
	MakeByte	(0XFF510C);
	MakeByte	(0XFF510D);
	MakeArray	(0XFF510D,	0X4);
	MakeByte	(0XFF5111);
	MakeArray	(0XFF5111,	0XC);
	MakeByte	(0XFF511D);
	MakeArray	(0XFF511D,	0X4);
	MakeByte	(0XFF5121);
	MakeArray	(0XFF5121,	0X9);
	MakeWord	(0XFF512A);
	MakeByte	(0XFF512C);
	MakeByte	(0XFF512D);
	MakeArray	(0XFF512D,	0X3);
	MakeByte	(0XFF5130);
	MakeByte	(0XFF5131);
	MakeArray	(0XFF5131,	0X9);
	MakeWord	(0XFF513A);
	MakeByte	(0XFF513C);
	MakeByte	(0XFF513D);
	MakeArray	(0XFF513D,	0X3);
	MakeByte	(0XFF5140);
	MakeByte	(0XFF5141);
	MakeArray	(0XFF5141,	0XF);
	MakeByte	(0XFF5150);
	MakeByte	(0XFF5151);
	MakeByte	(0XFF5152);
	MakeByte	(0XFF5153);
	MakeArray	(0XFF5153,	0X7);
	MakeWord	(0XFF515A);
	MakeByte	(0XFF515C);
	MakeByte	(0XFF515D);
	MakeArray	(0XFF515D,	0X2);
	MakeByte	(0XFF515F);
	MakeByte	(0XFF5160);
	MakeByte	(0XFF5161);
	MakeByte	(0XFF5162);
	MakeArray	(0XFF5162,	0X8);
	MakeWord	(0XFF516A);
	MakeByte	(0XFF516C);
	MakeArray	(0XFF516C,	0X3);
	MakeByte	(0XFF516F);
	MakeByte	(0XFF5170);
	MakeByte	(0XFF5171);
	MakeByte	(0XFF5172);
	MakeArray	(0XFF5172,	0XE);
	MakeByte	(0XFF5180);
	MakeByte	(0XFF5181);
	MakeByte	(0XFF5182);
	MakeArray	(0XFF5182,	0XB);
	MakeByte	(0XFF518D);
	MakeArray	(0XFF518D,	0X3);
	MakeByte	(0XFF5190);
	MakeByte	(0XFF5191);
	MakeArray	(0XFF5191,	0X5);
	MakeWord	(0XFF5196);
	MakeArray	(0XFF5196,	0X3);
	MakeByte	(0XFF519C);
	MakeByte	(0XFF519D);
	MakeArray	(0XFF519D,	0X4);
	MakeByte	(0XFF51A1);
	MakeArray	(0XFF51A1,	0X2);
	MakeByte	(0XFF51A3);
	MakeArray	(0XFF51A3,	0XD);
	MakeWord	(0XFF51B0);
	MakeByte	(0XFF51B2);
	MakeByte	(0XFF51B3);
	MakeWord	(0XFF51B4);
	MakeWord	(0XFF51B6);
	MakeByte	(0XFF51B8);
	MakeByte	(0XFF51B9);
	MakeArray	(0XFF51B9,	0X8);
	MakeByte	(0XFF51C1);
	MakeArray	(0XFF51C1,	0XF);
	MakeByte	(0XFF51D0);
	MakeArray	(0XFF51D0,	0XA);
	MakeWord	(0XFF51DA);
	MakeByte	(0XFF51DC);
	MakeByte	(0XFF51DD);
	MakeArray	(0XFF51DD,	0X3);
	MakeByte	(0XFF51E0);
	MakeArray	(0XFF51E0,	0XA);
	MakeWord	(0XFF51EA);
	MakeByte	(0XFF51EC);
	MakeByte	(0XFF51ED);
	MakeArray	(0XFF51ED,	0X13);
	MakeByte	(0XFF5200);
	MakeArray	(0XFF5200,	0X4E);
	MakeByte	(0XFF524E);
	MakeArray	(0XFF524E,	0X4E);
	MakeByte	(0XFF529C);
	MakeArray	(0XFF529C,	0X4E);
	MakeByte	(0XFF52EA);
	MakeArray	(0XFF52EA,	0XD16);
	MakeName	(0XFF52EA,	"MAP_DATA");
	MakeByte	(0XFF6000);
	MakeArray	(0XFF6000,	0X12EA);
	MakeByte	(0XFF72EA);
	MakeArray	(0XFF72EA,	0X2000);
	MakeByte	(0XFF92EA);
	MakeArray	(0XFF92EA,	0X916);
	MakeByte	(0XFF9C00);
	MakeName	(0XFF9C00,	"CURRENT_CHAPTER");
	MakeByte	(0XFF9C01);
	MakeName	(0XFF9C01,	"CURRENT_REGION");
	MakeByte	(0XFF9C02);
	MakeName	(0XFF9C02,	"CURRENT_MAP");
	MakeByte	(0XFF9C03);
	MakeArray	(0XFF9C03,	0X2);
	MakeName	(0XFF9C03,	"CURRENT_MAP_VERSION");
	MakeByte	(0XFF9C05);
	MakeName	(0XFF9C05,	"MESSAGE_SPEED");
	MakeRptCmt	(0XFF9C06,	"1 = do not display");
	MakeByte	(0XFF9C06);
	MakeName	(0XFF9C06,	"DISPLAY_BATTLE_MESSAGES_TOGGLE");
	MakeRptCmt	(0XFF9C07,	"current position in turn order list");
	MakeByte	(0XFF9C07);
	MakeName	(0XFF9C07,	"CURRENT_BATTLE_TURN");
	MakeByte	(0XFF9C08);
	MakeArray	(0XFF9C08,	0X40);
	MakeName	(0XFF9C08,	"TURN_ORDER");
	MakeWord	(0XFF9C48);
	MakeName	(0XFF9C48,	"SCREEN_POSITION");
	MakeRptCmt	(0XFF9C4A,	"XXYY");
	MakeWord	(0XFF9C4A);
	MakeName	(0XFF9C4A,	"CURSOR_POSITION");
	MakeByte	(0XFF9C4C);
	MakeName	(0XFF9C4C,	"EGRESS_LOCATION");
	MakeByte	(0XFF9C4D);
	MakeName	(0XFF9C4D,	"VICTORY_EXIT");
	MakeByte	(0XFF9C4E);
	MakeArray	(0XFF9C4E,	0X3);
	MakeName	(0XFF9C4E,	"EVENT_FLAGS");
	MakeByte	(0XFF9C51);
	MakeByte	(0XFF9C52);
	MakeByte	(0XFF9C53);
	MakeByte	(0XFF9C54);
	MakeArray	(0XFF9C54,	0X2);
	MakeByte	(0XFF9C56);
	MakeByte	(0XFF9C57);
	MakeByte	(0XFF9C58);
	MakeByte	(0XFF9C59);
	MakeByte	(0XFF9C5A);
	MakeByte	(0XFF9C5B);
	MakeByte	(0XFF9C5C);
	MakeByte	(0XFF9C5D);
	MakeArray	(0XFF9C5D,	0X2);
	MakeByte	(0XFF9C5F);
	MakeByte	(0XFF9C60);
	MakeArray	(0XFF9C60,	0XE);
	MakeByte	(0XFF9C6E);
	MakeArray	(0XFF9C6E,	0X10);
	MakeByte	(0XFF9C7E);
	MakeArray	(0XFF9C7E,	0X8);
	MakeName	(0XFF9C7E,	"LASER_EYE_COUNTDOWN");
	MakeRptCmt	(0XFF9C86,	"world cutscene script");
	MakeByte	(0XFF9C86);
	MakeName	(0XFF9C86,	"WORLD_CUTSCENE_SCRIPT");
	MakeByte	(0XFF9C87);
	MakeByte	(0XFF9C88);
	MakeArray	(0XFF9C88,	0X2);
	MakeDword	(0XFF9C8A);
	MakeName	(0XFF9C8A,	"FORCE_MEMBER_FLAGS");
	MakeDword	(0XFF9C8E);
	MakeName	(0XFF9C8E,	"CURRENT_GOLD");
	MakeByte	(0XFF9C92);
	MakeArray	(0XFF9C92,	0X4D8);
	MakeName	(0XFF9C92,	"FORCE_MEMBERS_DATA");
	MakeByte	(0XFFA16A);
	MakeArray	(0XFFA16A,	0X20);
	MakeName	(0XFFA16A,	"PROMOTED_AT_LEVELS");
	MakeByte	(0XFFA18A);
	MakeArray	(0XFFA18A,	0XC);
	MakeName	(0XFFA18A,	"BATTLE_PARTY_MEMBERS");
	MakeByte	(0XFFA196);
	MakeArray	(0XFFA196,	0X20);
	MakeName	(0XFFA196,	"DEALS_ITEMS");
	MakeByte	(0XFFA1B6);
	MakeArray	(0XFFA1B6,	0X10);
	MakeName	(0XFFA1B6,	"COMBATANT_DATA");
	MakeByte	(0XFFA1C6);
	MakeArray	(0XFFA1C6,	0X2);
	MakeName	(0XFFA1C6,	"COMBATANT_1_ENTITY");
	MakeByte	(0XFFA1C8);
	MakeArray	(0XFFA1C8,	0X1EE);
	MakeName	(0XFFA1C8,	"COMBATANT_1_Y");
	MakeByte	(0XFFA3B6);
	MakeArray	(0XFFA3B6,	0XC0);
	MakeName	(0XFFA3B6,	"SAVED_BATTLE_DATA");
	MakeByte	(0XFFA476);
	MakeArray	(0XFFA476,	0X20);
	MakeByte	(0XFFA496);
	MakeArray	(0XFFA496,	0X2A);
	MakeRptCmt	(0XFFA4C0,	"passability flags table : bit 0 = allowed to pass through, bit 1 = allowed to stay");
	MakeByte	(0XFFA4C0);
	MakeArray	(0XFFA4C0,	0X400);
	MakeName	(0XFFA4C0,	"PASSABILITY_FLAGS");
	MakeRptCmt	(0XFFA8C0,	"uses:\n - distance to position table\n - targets list length\n - shop inventory (also other item lists?)");
	MakeWord	(0XFFA8C0);
	MakeName	(0XFFA8C0,	"TABLE_AT_FFA8C0");
	MakeRptCmt	(0XFFA8C2,	"uses:\n\n    - target positions");
	MakeByte	(0XFFA8C2);
	MakeArray	(0XFFA8C2,	0X7C);
	MakeWord	(0XFFA93E);
	MakeName	(0XFFA93E,	"SHOP_INVENTORY_LENGTH");
	MakeRptCmt	(0XFFA940,	"currently highlighted shop inventory slot");
	MakeWord	(0XFFA940);
	MakeRptCmt	(0XFFA942,	"current shop inventory page");
	MakeWord	(0XFFA942);
	MakeWord	(0XFFA944);
	MakeByte	(0XFFA946);
	MakeName	(0XFFA946,	"TARGETS_LIST");
	MakeByte	(0XFFA947);
	MakeArray	(0XFFA947,	0X41);
	MakeByte	(0XFFA988);
	MakeArray	(0XFFA988,	0X42);
	MakeName	(0XFFA988,	"TARGET_PRIORITY_TABLE");
	MakeWord	(0XFFA9CA);
	MakeWord	(0XFFA9CC);
	MakeRptCmt	(0XFFA9CE,	"index of message displayed after a battle turn");
	MakeWord	(0XFFA9CE);
	MakeName	(0XFFA9CE,	"AFTER_TURN_MESSAGE_INDEX");
	MakeWord	(0XFFA9D0);
	MakeName	(0XFFA9D0,	"AFTER_TURN_MESSAGE_ARG_NAME_1");
	MakeWord	(0XFFA9D2);
	MakeName	(0XFFA9D2,	"AFTER_TURN_MESSAGE_ARG_NAME_2");
	MakeDword	(0XFFA9D4);
	MakeName	(0XFFA9D4,	"AFTER_TURN_MESSAGE_ARG_NUMBER");
	MakeRptCmt	(0XFFA9D8,	"battle action : HP change");
	MakeWord	(0XFFA9D8);
	MakeName	(0XFFA9D8,	"EFFECT_HP_CHANGE");
	MakeRptCmt	(0XFFA9DA,	"battle action : MP change (?)");
	MakeWord	(0XFFA9DA);
	MakeName	(0XFFA9DA,	"EFFECT_MP_CHANGE");
	MakeRptCmt	(0XFFA9DC,	"battle action : status effects change");
	MakeWord	(0XFFA9DC);
	MakeName	(0XFFA9DC,	"EFFECT_STATUS_CHANGE");
	MakeWord	(0XFFA9DE);
	MakeName	(0XFFA9DE,	"EFFECT_REACTION");
	MakeWord	(0XFFA9E0);
	MakeName	(0XFFA9E0,	"BATTLE_MESSAGE_INDEX_1");
	MakeWord	(0XFFA9E2);
	MakeArray	(0XFFA9E2,	0X2);
	MakeName	(0XFFA9E2,	"BATTLE_MESSAGE_ARG_NAME_1");
	MakeDword	(0XFFA9E6);
	MakeName	(0XFFA9E6,	"BATTLE_MESSAGE_ARG_NUMBER_1");
	MakeWord	(0XFFA9EA);
	MakeName	(0XFFA9EA,	"BATTLE_MESSAGE_INDEX_2");
	MakeWord	(0XFFA9EC);
	MakeArray	(0XFFA9EC,	0X2);
	MakeName	(0XFFA9EC,	"BATTLE_MESSAGE_ARG_NAME_2");
	MakeDword	(0XFFA9F0);
	MakeName	(0XFFA9F0,	"BATTLE_MESSAGE_ARG_NUMBER_2");
	MakeByte	(0XFFA9F4);
	MakeArray	(0XFFA9F4,	0X6);
	MakeName	(0XFFA9F4,	"STATS_TO_GAIN");
	MakeByte	(0XFFA9FA);
	MakeArray	(0XFFA9FA,	0X2C6);
	MakeName	(0XFFA9FA,	"SPELLS_TO_LEARN");
	MakeByte	(0XFFACC0);
	MakeArray	(0XFFACC0,	0X400);
	MakeName	(0XFFACC0,	"TERRAIN_DATA");
	MakeByte	(0XFFB0C0);
	MakeArray	(0XFFB0C0,	0X400);
	MakeByte	(0XFFB4C0);
	MakeName	(0XFFB4C0,	"CAMERA_XSPEED");
	MakeByte	(0XFFB4C1);
	MakeName	(0XFFB4C1,	"CAMERA_YSPEED");
	MakeByte	(0XFFB4C2);
	MakeName	(0XFFB4C2,	"CURSOR_XSPEED");
	MakeByte	(0XFFB4C3);
	MakeName	(0XFFB4C3,	"CURSOR_YSPEED");
	MakeByte	(0XFFB4C4);
	MakeName	(0XFFB4C4,	"UPDATE_SCREEN_TOGGLE");
	MakeByte	(0XFFB4C5);
	MakeByte	(0XFFB4C6);
	MakeName	(0XFFB4C6,	"ACTOR_BLINKING_TOGGLE");
	MakeRptCmt	(0XFFB4C7,	"targeting cursor index");
	MakeByte	(0XFFB4C7);
	MakeName	(0XFFB4C7,	"AREA_CURSOR_INDEX");
	MakeByte	(0XFFB4C8);
	MakeRptCmt	(0XFFB4C9,	"combatant index");
	MakeByte	(0XFFB4C9);
	MakeByte	(0XFFB4CA);
	MakeByte	(0XFFB4CB);
	MakeByte	(0XFFB4CC);
	MakeByte	(0XFFB4CD);
	MakeByte	(0XFFB4CE);
	MakeByte	(0XFFB4CF);
	MakeByte	(0XFFB4D0);
	MakeByte	(0XFFB4D1);
	MakeByte	(0XFFB4D2);
	MakeByte	(0XFFB4D3);
	MakeByte	(0XFFB4D4);
	MakeRptCmt	(0XFFB4D5,	"facing searchable? (in battle) (menu type?)");
	MakeByte	(0XFFB4D5);
	MakeByte	(0XFFB4D6);
	MakeName	(0XFFB4D6,	"SPRITE_DIRECTION");
	MakeByte	(0XFFB4D7);
	MakeByte	(0XFFB4D8);
	MakeArray	(0XFFB4D8,	0X2);
	MakeByte	(0XFFB4DA);
	MakeByte	(0XFFB4DB);
	MakeArray	(0XFFB4DB,	0X6);
	MakeByte	(0XFFB4E1);
	MakeArray	(0XFFB4E1,	0X9);
	MakeDword	(0XFFB4EA);
	MakeByte	(0XFFB4EE);
	MakeArray	(0XFFB4EE,	0X3);
	MakeByte	(0XFFB4F1);
	MakeByte	(0XFFB4F2);
	MakeByte	(0XFFB4F3);
	MakeArray	(0XFFB4F3,	0X1D);
	MakeWord	(0XFFB510);
	MakeArray	(0XFFB510,	0X5);
	MakeRptCmt	(0XFFB51A,	"start of spell cast setup data");
	MakeByte	(0XFFB51A);
	MakeName	(0XFFB51A,	"CASTER_INDEX");
	MakeRptCmt	(0XFFB51B,	"battle action type : \n    0 = attack\n    1 = cast spell\n    2 = use item\n    3 = ?");
	MakeByte	(0XFFB51B);
	MakeName	(0XFFB51B,	"BATTLE_ACTION_TYPE");
	MakeRptCmt	(0XFFB51C,	"or item slot");
	MakeByte	(0XFFB51C);
	MakeName	(0XFFB51C,	"SPELL_INDEX");
	MakeByte	(0XFFB51D);
	MakeName	(0XFFB51D,	"TARGET_INDEX");
	MakeByte	(0XFFB51E);
	MakeName	(0XFFB51E,	"TARGET_X");
	MakeRptCmt	(0XFFB51F,	"end of spell cast setup data");
	MakeByte	(0XFFB51F);
	MakeName	(0XFFB51F,	"TARGET_Y");
	MakeByte	(0XFFB520);
	MakeByte	(0XFFB521);
	MakeByte	(0XFFB522);
	MakeByte	(0XFFB523);
	MakeByte	(0XFFB524);
	MakeByte	(0XFFB525);
	MakeByte	(0XFFB526);
	MakeArray	(0XFFB526,	0X2);
	MakeName	(0XFFB526,	"CURRENT_MENU");
	MakeByte	(0XFFB528);
	MakeName	(0XFFB528,	"CURRENT_DIAMOND_MENU_SELECTION");
	MakeByte	(0XFFB529);
	MakeByte	(0XFFB52A);
	MakeByte	(0XFFB52B);
	MakeArray	(0XFFB52B,	0XA);
	MakeByte	(0XFFB535);
	MakeByte	(0XFFB536);
	MakeByte	(0XFFB537);
	MakeByte	(0XFFB538);
	MakeByte	(0XFFB539);
	MakeByte	(0XFFB53A);
	MakeByte	(0XFFB53B);
	MakeByte	(0XFFB53C);
	MakeName	(0XFFB53C,	"SPEECH_SOUND_TOGGLE");
	MakeRptCmt	(0XFFB53D,	"1 = save game function is disabled");
	MakeByte	(0XFFB53D);
	MakeName	(0XFFB53D,	"SAVE_GAME_DISABLED_TOGGLE");
	MakeByte	(0XFFB53E);
	MakeArray	(0XFFB53E,	0X2);
	MakeRptCmt	(0XFFB540,	"weapon sprite animation data?");
	MakeByte	(0XFFB540);
	MakeByte	(0XFFB541);
	MakeByte	(0XFFB542);
	MakeByte	(0XFFB543);
	MakeWord	(0XFFB544);
	MakeWord	(0XFFB546);
	MakeWord	(0XFFB548);
	MakeWord	(0XFFB54A);
	MakeWord	(0XFFB54C);
	MakeByte	(0XFFB54E);
	MakeArray	(0XFFB54E,	0X1C);
	MakeWord	(0XFFB56A);
	MakeWord	(0XFFB56C);
	MakeByte	(0XFFB56E);
	MakeArray	(0XFFB56E,	0X1C);
	MakeWord	(0XFFB58A);
	MakeByte	(0XFFB58C);
	MakeArray	(0XFFB58C,	0X20);
	MakeByte	(0XFFB5AC);
	MakeName	(0XFFB5AC,	"IS_DISPLAYING_PORTRAIT");
	MakeRptCmt	(0XFFB5AD,	"flag for whether or not we're done with typewritering");
	MakeByte	(0XFFB5AD);
	MakeName	(0XFFB5AD,	"CURRENTLY_TYPEWRITING");
	MakeWord	(0XFFB5AE);
	MakeByte	(0XFFB5B0);
	MakeByte	(0XFFB5B1);
	MakeArray	(0XFFB5B1,	0XA);
	MakeRptCmt	(0XFFB5BB,	"caster side : 1 = force, 2 = enemy?");
	MakeByte	(0XFFB5BB);
	MakeByte	(0XFFB5BC);
	MakeName	(0XFFB5BC,	"IS_SPELLANIM_PLAYING");
	MakeByte	(0XFFB5BD);
	MakeName	(0XFFB5BD,	"IS_SPELLANIM_FINISHED");
	MakeRptCmt	(0XFFB5BE,	"spell animation version");
	MakeByte	(0XFFB5BE);
	MakeName	(0XFFB5BE,	"SPELLANIM_VERSION");
	MakeComm	(0XFFB5BF,	"spell animation type");
	MakeRptCmt	(0XFFB5BF,	"animation argument 2? (anim type?)");
	MakeByte	(0XFFB5BF);
	MakeName	(0XFFB5BF,	"SPELLANIM_TYPE");
	MakeRptCmt	(0XFFB5C0,	"Start of spell object properties table : 4 words per entry\n 0: X position\n 1: Y position\n 2: is slot in use?\n 3: frame number");
	MakeWord	(0XFFB5C0);
	MakeName	(0XFFB5C0,	"SPELLENTITY_PROPERTIES");
	MakeWord	(0XFFB5C2);
	MakeWord	(0XFFB5C4);
	MakeArray	(0XFFB5C4,	0X2);
	MakeWord	(0XFFB5C8);
	MakeWord	(0XFFB5CA);
	MakeArray	(0XFFB5CA,	0X3);
	MakeWord	(0XFFB5D0);
	MakeArray	(0XFFB5D0,	0X2);
	MakeWord	(0XFFB5D4);
	MakeArray	(0XFFB5D4,	0X6);
	MakeWord	(0XFFB5E0);
	MakeArray	(0XFFB5E0,	0X2);
	MakeWord	(0XFFB5E4);
	MakeArray	(0XFFB5E4,	0X16);
	MakeWord	(0XFFB610);
	MakeArray	(0XFFB610,	0X24);
	MakeWord	(0XFFB658);
	MakeArray	(0XFFB658,	0X30);
	MakeRptCmt	(0XFFB6B8,	"related to screen shake effect");
	MakeWord	(0XFFB6B8);
	MakeArray	(0XFFB6B8,	0X3);
	MakeByte	(0XFFB6BE);
	MakeArray	(0XFFB6BE,	0X102);
	MakeWord	(0XFFB7C0);
	MakeName	(0XFFB7C0,	"SCREEN_ADJUSTED_CURSOR_X");
	MakeWord	(0XFFB7C2);
	MakeName	(0XFFB7C2,	"SCREEN_ADJUSTED_CURSOR_Y");
	MakeRptCmt	(0XFFB7C4,	"entity, combatant, chest, etc., currently being interacted with");
	MakeWord	(0XFFB7C4);
	MakeName	(0XFFB7C4,	"CURRENT_OBJECT");
	MakeRptCmt	(0XFFB7C6,	"item slot to give");
	MakeWord	(0XFFB7C6);
	MakeRptCmt	(0XFFB7C8,	"force member index to give item to");
	MakeWord	(0XFFB7C8);
	MakeWord	(0XFFB7CA);
	MakeArray	(0XFFB7CA,	0X5);
	MakeRptCmt	(0XFFB7D4,	"window size");
	MakeWord	(0XFFB7D4);
	MakeName	(0XFFB7D4,	"WINDOW_SIZE");
	MakeRptCmt	(0XFFB7D6,	"window position");
	MakeWord	(0XFFB7D6);
	MakeName	(0XFFB7D6,	"WINDOW_POSITION");
	MakeRptCmt	(0XFFB7D8,	"window width ?");
	MakeWord	(0XFFB7D8);
	MakeRptCmt	(0XFFB7DA,	"window layout data");
	MakeByte	(0XFFB7DA);
	MakeArray	(0XFFB7DA,	0X12);
	MakeName	(0XFFB7DA,	"WINDOW_LAYOUT_LOADING_SPACE");
	MakeByte	(0XFFB7EC);
	MakeArray	(0XFFB7EC,	0X4);
	MakeRptCmt	(0XFFB7F0,	"used when speaking to force members in headquarters");
	MakeByte	(0XFFB7F0);
	MakeArray	(0XFFB7F0,	0X4);
	MakeName	(0XFFB7F0,	"CURRENT_SPEAKER_NAME_VDPTILES");
	MakeByte	(0XFFB7F4);
	MakeArray	(0XFFB7F4,	0X8);
	MakeByte	(0XFFB7FC);
	MakeArray	(0XFFB7FC,	0X8);
	MakeByte	(0XFFB804);
	MakeArray	(0XFFB804,	0X4);
	MakeRptCmt	(0XFFB808,	"member status window : class name");
	MakeByte	(0XFFB808);
	MakeArray	(0XFFB808,	0X2);
	MakeByte	(0XFFB80A);
	MakeArray	(0XFFB80A,	0X2);
	MakeByte	(0XFFB80C);
	MakeArray	(0XFFB80C,	0X4);
	MakeByte	(0XFFB810);
	MakeArray	(0XFFB810,	0X6);
	MakeByte	(0XFFB816);
	MakeArray	(0XFFB816,	0XC);
	MakeByte	(0XFFB822);
	MakeArray	(0XFFB822,	0XA);
	MakeRptCmt	(0XFFB82C,	"member status window : status effects indicators");
	MakeByte	(0XFFB82C);
	MakeArray	(0XFFB82C,	0X2);
	MakeByte	(0XFFB82E);
	MakeArray	(0XFFB82E,	0X6);
	MakeByte	(0XFFB834);
	MakeArray	(0XFFB834,	0X6);
	MakeRptCmt	(0XFFB83A,	"magic menu window : spell name\nitem menu window : item name");
	MakeByte	(0XFFB83A);
	MakeArray	(0XFFB83A,	0X12);
	MakeRptCmt	(0XFFB84C,	"member status window : status effects indicators (2nd row)");
	MakeByte	(0XFFB84C);
	MakeArray	(0XFFB84C,	0X2);
	MakeByte	(0XFFB84E);
	MakeArray	(0XFFB84E,	0X2);
	MakeByte	(0XFFB850);
	MakeArray	(0XFFB850,	0X4);
	MakeByte	(0XFFB854);
	MakeArray	(0XFFB854,	0X4);
	MakeByte	(0XFFB858);
	MakeArray	(0XFFB858,	0X8);
	MakeByte	(0XFFB860);
	MakeArray	(0XFFB860,	0X4);
	MakeByte	(0XFFB864);
	MakeArray	(0XFFB864,	0X8);
	MakeByte	(0XFFB86C);
	MakeArray	(0XFFB86C,	0X2);
	MakeRptCmt	(0XFFB86E,	"member status window : LV");
	MakeByte	(0XFFB86E);
	MakeArray	(0XFFB86E,	0XE);
	MakeByte	(0XFFB87C);
	MakeArray	(0XFFB87C,	0X8);
	MakeRptCmt	(0XFFB884,	"member status window : ATTACK");
	MakeByte	(0XFFB884);
	MakeArray	(0XFFB884,	0X2);
	MakeByte	(0XFFB886);
	MakeArray	(0XFFB886,	0X6);
	MakeRptCmt	(0XFFB88C,	"magic menu window : MP cost");
	MakeByte	(0XFFB88C);
	MakeArray	(0XFFB88C,	0X8);
	MakeByte	(0XFFB894);
	MakeArray	(0XFFB894,	0X2C);
	MakeRptCmt	(0XFFB8C0,	"member status window : current HP");
	MakeByte	(0XFFB8C0);
	MakeArray	(0XFFB8C0,	0X4);
	MakeRptCmt	(0XFFB8C4,	"member status window : max HP");
	MakeByte	(0XFFB8C4);
	MakeArray	(0XFFB8C4,	0X18);
	MakeRptCmt	(0XFFB8DC,	"member status window : DEFENSE");
	MakeByte	(0XFFB8DC);
	MakeArray	(0XFFB8DC,	0X3C);
	MakeRptCmt	(0XFFB918,	"member status window : current MP");
	MakeByte	(0XFFB918);
	MakeArray	(0XFFB918,	0X4);
	MakeRptCmt	(0XFFB91C,	"member status window : max MP");
	MakeByte	(0XFFB91C);
	MakeArray	(0XFFB91C,	0X18);
	MakeRptCmt	(0XFFB934,	"member status window : MOVE");
	MakeByte	(0XFFB934);
	MakeArray	(0XFFB934,	0X36);
	MakeByte	(0XFFB96A);
	MakeArray	(0XFFB96A,	0XA);
	MakeByte	(0XFFB974);
	MakeArray	(0XFFB974,	0X2);
	MakeRptCmt	(0XFFB976,	"member status window : EX");
	MakeByte	(0XFFB976);
	MakeArray	(0XFFB976,	0XA);
	MakeByte	(0XFFB980);
	MakeArray	(0XFFB980,	0XC);
	MakeRptCmt	(0XFFB98C,	"member status window : AGILITY");
	MakeByte	(0XFFB98C);
	MakeArray	(0XFFB98C,	0X14);
	MakeByte	(0XFFB9A0);
	MakeArray	(0XFFB9A0,	0X8);
	MakeByte	(0XFFB9A8);
	MakeArray	(0XFFB9A8,	0X6);
	MakeByte	(0XFFB9AE);
	MakeArray	(0XFFB9AE,	0X28);
	MakeByte	(0XFFB9D6);
	MakeArray	(0XFFB9D6,	0X36);
	MakeByte	(0XFFBA0C);
	MakeArray	(0XFFBA0C,	0XE);
	MakeRptCmt	(0XFFBA1A,	"member status window : spells start");
	MakeByte	(0XFFBA1A);
	MakeArray	(0XFFBA1A,	0X12);
	MakeByte	(0XFFBA2C);
	MakeArray	(0XFFBA2C,	0X16);
	MakeByte	(0XFFBA42);
	MakeArray	(0XFFBA42,	0X4);
	MakeByte	(0XFFBA46);
	MakeArray	(0XFFBA46,	0X12);
	MakeByte	(0XFFBA58);
	MakeArray	(0XFFBA58,	0X1FA);
	MakeWord	(0XFFBC52);
	MakeName	(0XFFBC52,	"MAP_WIDTH");
	MakeWord	(0XFFBC54);
	MakeArray	(0XFFBC54,	0X2);
	MakeName	(0XFFBC54,	"MAP_HEIGHT");
	MakeWord	(0XFFBC58);
	MakeWord	(0XFFBC5A);
	MakeWord	(0XFFBC5C);
	MakeWord	(0XFFBC5E);
	MakeRptCmt	(0XFFBC60,	"tileset animation?");
	MakeWord	(0XFFBC60);
	MakeWord	(0XFFBC62);
	MakeWord	(0XFFBC64);
	MakeRptCmt	(0XFFBC66,	"tileset animation frame (water and such)");
	MakeWord	(0XFFBC66);
	MakeRptCmt	(0XFFBC68,	"tileset animation?");
	MakeWord	(0XFFBC68);
	MakeWord	(0XFFBC6A);
	MakeName	(0XFFBC6A,	"ENEMY_BATTLE_SPRITE");
	MakeWord	(0XFFBC6C);
	MakeName	(0XFFBC6C,	"ENEMY_BATTLE_PALETTE");
	MakeRptCmt	(0XFFBC6E,	"battle sprite number?");
	MakeWord	(0XFFBC6E);
	MakeName	(0XFFBC6E,	"ALLY_BATTLE_SPRITE");
	MakeWord	(0XFFBC70);
	MakeName	(0XFFBC70,	"ALLY_BATTLE_PALETTE");
	MakeWord	(0XFFBC72);
	MakeName	(0XFFBC72,	"BATTLESCENE_ENEMY");
	MakeWord	(0XFFBC74);
	MakeName	(0XFFBC74,	"BATTLESCENE_ALLY");
	MakeRptCmt	(0XFFBC76,	"animation type?");
	MakeWord	(0XFFBC76);
	MakeRptCmt	(0XFFBC78,	"copy of equipped weapon index used during battlescene command execution");
	MakeWord	(0XFFBC78);
	MakeWord	(0XFFBC7A);
	MakeName	(0XFFBC7A,	"ENEMY_BATTLESPRITE_ANIMATION_SPEED");
	MakeWord	(0XFFBC7C);
	MakeName	(0XFFBC7C,	"ENEMY_BATTLESPRITE_ANIMATION_COUNTER");
	MakeWord	(0XFFBC7E);
	MakeName	(0XFFBC7E,	"ALLY_BATTLESPRITE_ANIMATION_SPEED");
	MakeWord	(0XFFBC80);
	MakeName	(0XFFBC80,	"ALLY_BATTLESPRITE_ANIMATION_COUNTER");
	MakeWord	(0XFFBC82);
	MakeArray	(0XFFBC82,	0X2);
	MakeName	(0XFFBC82,	"ENEMY_BATTLE_ANIMATION");
	MakeWord	(0XFFBC86);
	MakeArray	(0XFFBC86,	0X2);
	MakeName	(0XFFBC86,	"ALLY_BATTLE_ANIMATION");
	MakeWord	(0XFFBC8A);
	MakeWord	(0XFFBC8C);
	MakeRptCmt	(0XFFBC8E,	"start of battlescene data table");
	MakeByte	(0XFFBC8E);
	MakeArray	(0XFFBC8E,	0X400);
	MakeName	(0XFFBC8E,	"BATTLE_SCENE_ACTORS");
	MakeRptCmt	(0XFFC08E,	"indexes of characters/enemies killed by last attack");
	MakeByte	(0XFFC08E);
	MakeArray	(0XFFC08E,	0X1C);
	MakeName	(0XFFC08E,	"ENTITIES_KILLED_BY_LAST_ATTACK_LIST");
	MakeByte	(0XFFC0AA);
	MakeArray	(0XFFC0AA,	0X8);
	MakeWord	(0XFFC0B2);
	MakeArray	(0XFFC0B2,	0X2);
	MakeRptCmt	(0XFFC0B6,	"VDP tile entry for either the \"Cl\", \"Fw\", or \"Eq\" symbols displayed in some instances of the members list screen");
	MakeWord	(0XFFC0B6);
	MakeName	(0XFFC0B6,	"MEMBERS_LIST_SYMBOL");
	MakeWord	(0XFFC0B8);
	MakeName	(0XFFC0B8,	"CURRENT_SAVE_SLOT");
	MakeWord	(0XFFC0BA);
	MakeArray	(0XFFC0BA,	0X2);
	MakeWord	(0XFFC0BE);
	MakeName	(0XFFC0BE,	"SPEECH_SFX");
	MakeByte	(0XFFC0C0);
	MakeArray	(0XFFC0C0,	0X10);
	MakeByte	(0XFFC0D0);
	MakeArray	(0XFFC0D0,	0X70);
	MakeByte	(0XFFC140);
	MakeRptCmt	(0XFFC141,	"don't play sound if !=0 ?");
	MakeByte	(0XFFC141);
	MakeArray	(0XFFC141,	0X83);
	MakeName	(0XFFC141,	"DONT_SEND_SOUND_COMMANDS");
	MakeWord	(0XFFC1C4);
	MakeWord	(0XFFC1C6);
	MakeWord	(0XFFC1C8);
	MakeName	(0XFFC1C8,	"ROM_CHECKSUM");
	MakeByte	(0XFFC1CA);
	MakeName	(0XFFC1CA,	"DEBUG_MODE_ACTIVATED");
	MakeByte	(0XFFC1CB);
	MakeName	(0XFFC1CB,	"DEBUG_MODE_UNLOCKED");
	MakeByte	(0XFFC1CC);
	MakeArray	(0XFFC1CC,	0X34);
	MakeRptCmt	(0XFFC200,	"move costs table : -1 = blocked space");
	MakeByte	(0XFFC200);
	MakeArray	(0XFFC200,	0X400);
	MakeName	(0XFFC200,	"MOVE_COSTS");
	MakeRptCmt	(0XFFC600,	"targeting group flags\n\n    bit 0 = friends\n    bit 1 = foes\n    bit 2 = target all of the above (e.g., Aura level 4)");
	MakeByte	(0XFFC600);
	MakeArray	(0XFFC600,	0X2);
	MakeName	(0XFFC600,	"TARGETING_GROUP_BITFIELD");
	MakeRptCmt	(0XFFC602,	"start of battle pointers");
	MakeDword	(0XFFC602);
	MakeName	(0XFFC602,	"BATTLE_HEADER_POINTER");
	MakeDword	(0XFFC606);
	MakeName	(0XFFC606,	"AI_REGIONS_POINTER");
	MakeDword	(0XFFC60A);
	MakeDword	(0XFFC60E);
	MakeName	(0XFFC60E,	"ENEMY_DATA_POINTER");
	MakeDword	(0XFFC612);
	MakeDword	(0XFFC616);
	MakeName	(0XFFC616,	"ENEMIES_LIST_POINTER");
	MakeDword	(0XFFC61A);
	MakeName	(0XFFC61A,	"FORCE_POSITIONS_POINTER");
	MakeDword	(0XFFC61E);
	MakeName	(0XFFC61E,	"ENEMY_POSITIONS_POINTER");
	MakeDword	(0XFFC622);
	MakeName	(0XFFC622,	"ENEMY_BEHAVIORS_POINTER");
	MakeRptCmt	(0XFFC626,	"end of battle pointers");
	MakeByte	(0XFFC626);
	MakeByte	(0XFFC627);
	MakeByte	(0XFFC628);
	MakeArray	(0XFFC628,	0X500);
	MakeName	(0XFFC628,	"ENEMY_DATA");
	MakeByte	(0XFFCB28);
	MakeArray	(0XFFCB28,	0X10);
	MakeWord	(0XFFCB38);
	MakeWord	(0XFFCB3A);
	MakeWord	(0XFFCB3C);
	MakeRptCmt	(0XFFCB3E,	"0 = regular\n1 = special (e.g., elemental breaths, laser, machine gun, demon blaze)");
	MakeByte	(0XFFCB3E);
	MakeName	(0XFFCB3E,	"CURRENT_ATTACK_TYPE");
	MakeRptCmt	(0XFFCB3F,	"0 = attack\n1 = cast spell\n2 = use item");
	MakeByte	(0XFFCB3F);
	MakeName	(0XFFCB3F,	"CURRENT_BATTLEACTION_TYPE");
	MakeByte	(0XFFCB40);
	MakeName	(0XFFCB40,	"CURRENT_ITEM_OR_SPELL");
	MakeByte	(0XFFCB41);
	MakeByte	(0XFFCB42);
	MakeName	(0XFFCB42,	"CURRENT_RANGE");
	MakeByte	(0XFFCB43);
	MakeName	(0XFFCB43,	"CURRENT_EFFECT");
	MakeRptCmt	(0XFFCB44,	"bit 0: target friends\nbit 1: target foes\nbit 2: affect all targeted group members on map (e.g., Aura level 4)");
	MakeByte	(0XFFCB44);
	MakeArray	(0XFFCB44,	0X2);
	MakeName	(0XFFCB44,	"TARGETING_RANGE_BITFIELD");
	MakeWord	(0XFFCB46);
	MakeName	(0XFFCB46,	"CURRENT_RANGE_MAX_DISTANCE");
	MakeWord	(0XFFCB48);
	MakeName	(0XFFCB48,	"CURRENT_RANGE_MIN_DISTANCE");
	MakeByte	(0XFFCB4A);
	MakeName	(0XFFCB4A,	"TRIGGERED_AI_REGIONS");
	MakeByte	(0XFFCB4B);
	MakeDword	(0XFFCB4C);
	MakeName	(0XFFCB4C,	"PRIORITY_ROUTINE_ADDRESS");
	MakeWord	(0XFFCB50);
	MakeName	(0XFFCB50,	"EXPERIENCE_TO_GAIN");
	MakeWord	(0XFFCB52);
	MakeName	(0XFFCB52,	"COINS_TO_GAIN");
	MakeRptCmt	(0XFFCB54,	"whether to drop item? other flags?");
	MakeWord	(0XFFCB54);
	MakeName	(0XFFCB54,	"ITEM_DROPPED_FLAG");
	MakeWord	(0XFFCB56);
	MakeName	(0XFFCB56,	"ITEM_TO_DROP");
	MakeRptCmt	(0XFFCB58,	"amount of damage to inflict");
	MakeWord	(0XFFCB58);
	MakeWord	(0XFFCB5A);
	MakeName	(0XFFCB5A,	"MP_COST_OF_SPELL_BEING_CAST");
	MakeWord	(0XFFCB5C);
	MakeName	(0XFFCB5C,	"NUMBER_OF_ATTACKS");
	MakeRptCmt	(0XFFCB5E,	"critical hit damage multiplier, in units of 0.5");
	MakeWord	(0XFFCB5E);
	MakeName	(0XFFCB5E,	"DAMAGE_MULTIPLIER");
	MakeRptCmt	(0XFFCB60,	"currently selected item slot number");
	MakeWord	(0XFFCB60);
	MakeName	(0XFFCB60,	"SELECTED_ITEM_SLOT");
	MakeRptCmt	(0XFFCB62,	"currently selected item index");
	MakeWord	(0XFFCB62);
	MakeName	(0XFFCB62,	"SELECTED_ITEM_ENTRY");
	MakeByte	(0XFFCB64);
	MakeRptCmt	(0XFFCB65,	"battle message offset (+463)");
	MakeByte	(0XFFCB65);
	MakeName	(0XFFCB65,	"BATTLE_MESSAGE_OFFSET");
	MakeByte	(0XFFCB66);
	MakeName	(0XFFCB66,	"SPECIAL_ATTACK_PERCENT");
	MakeByte	(0XFFCB67);
	MakeName	(0XFFCB67,	"SPECIAL_ATTACK_INDEX");
	MakeByte	(0XFFCB68);
	MakeName	(0XFFCB68,	"BATTLE_SCENE_ALLY");
	MakeByte	(0XFFCB69);
	MakeName	(0XFFCB69,	"BATTLE_SCENE_ENEMY");
	MakeRptCmt	(0XFFCB6A,	"bit 0 set = chance to paralyze, bit 1 set = chance to inflict damage back to attacker");
	MakeByte	(0XFFCB6A);
	MakeName	(0XFFCB6A,	"CURSED_ITEMS_SETTINGS");
	MakeByte	(0XFFCB6B);
	MakeByte	(0XFFCB6C);
	MakeArray	(0XFFCB6C,	0X2);
	MakeRptCmt	(0XFFCB6E,	"Are actor and target on the same team? (Equals $FFFF if true.)");
	MakeWord	(0XFFCB6E);
	MakeName	(0XFFCB6E,	"OPPONENT_TARGET_INDEX");
	MakeRptCmt	(0XFFCB70,	"start of battlescene data (10 bytes)");
	MakeWord	(0XFFCB70);
	MakeName	(0XFFCB70,	"BATTLESCENE_MESSAGE_INDEX");
	MakeRptCmt	(0XFFCB72,	"battlescene actor's combatant index");
	MakeWord	(0XFFCB72);
	MakeName	(0XFFCB72,	"BATTLESCENE_ACTOR_INDEX");
	MakeRptCmt	(0XFFCB74,	"index of item or spell being used");
	MakeWord	(0XFFCB74);
	MakeName	(0XFFCB74,	"BATTLESCENE_ITEM_OR_SPELL_INDEX");
	MakeDword	(0XFFCB76);
	MakeName	(0XFFCB76,	"BATTLESCENE_SPELL_LEVEL");
	MakeDword	(0XFFCB7A);
	MakeByte	(0XFFCB7E);
	MakeArray	(0XFFCB7E,	0X2);
	MakeName	(0XFFCB7E,	"CANNOT_USE_ITEM_FLAG");
	MakeRptCmt	(0XFFCB80,	"set to 1 if true");
	MakeByte	(0XFFCB80);
	MakeName	(0XFFCB80,	"IS_ASLEEP_FLAG");
	MakeByte	(0XFFCB81);
	MakeName	(0XFFCB81,	"IS_POISONED_FLAG");
	MakeRptCmt	(0XFFCB82,	"force members list length");
	MakeWord	(0XFFCB82);
	MakeName	(0XFFCB82,	"FORCE_MEMBERS_LIST_LENGTH");
	MakeRptCmt	(0XFFCB84,	"force members list");
	MakeByte	(0XFFCB84);
	MakeName	(0XFFCB84,	"FORCE_MEMBERS_LIST");
	MakeByte	(0XFFCB85);
	MakeArray	(0XFFCB85,	0X21);
	MakeWord	(0XFFCBA6);
	MakeName	(0XFFCBA6,	"BATTLESCENE_SPRITE_INDEX");
	MakeWord	(0XFFCBA8);
	MakeName	(0XFFCBA8,	"BATTLESCENE_PALETTE_INDEX");
	MakeWord	(0XFFCBAA);
	MakeName	(0XFFCBAA,	"BATTLESCENE_ANIMATION_INDEX");
	MakeWord	(0XFFCBAC);
	MakeWord	(0XFFCBAE);
	MakeName	(0XFFCBAE,	"EQUIPPED_WEAPON_INDEX");
	MakeWord	(0XFFCBB0);
	MakeName	(0XFFCBB0,	"WEAPON_SPRITE_INDEX");
	MakeRptCmt	(0XFFCBB2,	"related to: special attacks, critical hits, and Max's Dark Dragon finisher");
	MakeByte	(0XFFCBB2);
	MakeName	(0XFFCBB2,	"BATTLE_ANIMATION_TYPE");
	MakeByte	(0XFFCBB3);
	MakeByte	(0XFFCBB4);
	MakeArray	(0XFFCBB4,	0X12);
	MakeName	(0XFFCBB4,	"DISPLAYED_EMEMY_NAME");
	MakeByte	(0XFFCBC6);
	MakeName	(0XFFCBC6,	"DEBUG_SPECIAL_ATTACK");
	MakeRptCmt	(0XFFCBC7,	"always double attack if != 0");
	MakeByte	(0XFFCBC7);
	MakeName	(0XFFCBC7,	"DEBUG_DOUBLE_ATTACK");
	MakeRptCmt	(0XFFCBC8,	"item always crack when set");
	MakeByte	(0XFFCBC8);
	MakeName	(0XFFCBC8,	"DEBUG_CRACK_ITEM");
	MakeRptCmt	(0XFFCBC9,	"status effect application always succeeds if != 0");
	MakeByte	(0XFFCBC9);
	MakeArray	(0XFFCBC9,	0X437);
	MakeName	(0XFFCBC9,	"DEBUG_EFFECT_FAILURE");
	MakeRptCmt	(0XFFD000,	"Plane A layout");
	MakeByte	(0XFFD000);
	MakeArray	(0XFFD000,	0X40);
	MakeName	(0XFFD000,	"PLANE_A_MAP_LAYOUT");
	MakeByte	(0XFFD040);
	MakeArray	(0XFFD040,	0X42);
	MakeWord	(0XFFD082);
	MakeArray	(0XFFD082,	0X1D);
	MakeWord	(0XFFD0BC);
	MakeArray	(0XFFD0BC,	0X42);
	MakeByte	(0XFFD140);
	MakeArray	(0XFFD140,	0X80);
	MakeByte	(0XFFD1C0);
	MakeArray	(0XFFD1C0,	0X23F);
	MakeByte	(0XFFD3FF);
	MakeArray	(0XFFD3FF,	0X89);
	MakeByte	(0XFFD488);
	MakeArray	(0XFFD488,	0X180);
	MakeName	(0XFFD488,	"REGION_LOCK_STRING_1");
	MakeByte	(0XFFD608);
	MakeArray	(0XFFD608,	0X8A);
	MakeName	(0XFFD608,	"REGION_LOCK_STRING_2");
	MakeWord	(0XFFD692);
	MakeArray	(0XFFD692,	0X7B);
	MakeByte	(0XFFD788);
	MakeArray	(0XFFD788,	0X17A);
	MakeName	(0XFFD788,	"REGION_LOCK_STRING_3");
	MakeWord	(0XFFD902);
	MakeArray	(0XFFD902,	0X1F);
	MakeByte	(0XFFD940);
	MakeArray	(0XFFD940,	0X40);
	MakeByte	(0XFFD980);
	MakeArray	(0XFFD980,	0X4);
	MakeWord	(0XFFD984);
	MakeArray	(0XFFD984,	0X1E);
	MakeByte	(0XFFD9C0);
	MakeArray	(0XFFD9C0,	0X276);
	MakeDword	(0XFFDC36);
	MakeArray	(0XFFDC36,	0X14);
	MakeByte	(0XFFDC86);
	MakeArray	(0XFFDC86,	0X37A);
	MakeByte	(0XFFE000);
	MakeArray	(0XFFE000,	0X1000);
	MakeByte	(0XFFF000);
	MakeName	(0XFFF000,	"CURRENT_SHOP");
	MakeByte	(0XFFF001);
	MakeWord	(0XFFF002);
	MakeArray	(0XFFF002,	0X2);
	MakeDword	(0XFFF006);
	MakeByte	(0XFFF00A);
	MakeByte	(0XFFF00B);
	MakeByte	(0XFFF00C);
	MakeByte	(0XFFF00D);
	MakeByte	(0XFFF00E);
	MakeArray	(0XFFF00E,	0X7F2);
	MakeByte	(0XFFF800);
	MakeName	(0XFFF800,	"MAP_WIDTH_0");
	MakeByte	(0XFFF801);
	MakeName	(0XFFF801,	"MAP_HEIGHT_0");
	MakeByte	(0XFFF802);
	MakeName	(0XFFF802,	"TEXT_X_POSITION");
	MakeByte	(0XFFF803);
	MakeName	(0XFFF803,	"TEXT_Y_POSITION");
	MakeByte	(0XFFF804);
	MakeByte	(0XFFF805);
	MakeName	(0XFFF805,	"COMPRESSED_STRING_LENGTH");
	MakeByte	(0XFFF806);
	MakeRptCmt	(0XFFF807,	"map something something...?");
	MakeByte	(0XFFF807);
	MakeByte	(0XFFF808);
	MakeName	(0XFFF808,	"DIALOG_INDEX");
	MakeRptCmt	(0XFFF809,	"determines which huffman tree to use for next symbol decoding");
	MakeByte	(0XFFF809);
	MakeName	(0XFFF809,	"DECODED_TEXT_SYMBOL");
	MakeByte	(0XFFF80A);
	MakeByte	(0XFFF80B);
	MakeByte	(0XFFF80C);
	MakeArray	(0XFFF80C,	0XC);
	MakeName	(0XFFF80C,	"MAP_SPRITES_LIST");
	MakeByte	(0XFFF818);
	MakeName	(0XFFF818,	"TEMP_INPUT_STATES");
	MakeByte	(0XFFF819);
	MakeByte	(0XFFF81A);
	MakeByte	(0XFFF81B);
	MakeRptCmt	(0XFFF81C,	"gets set to $FF before clearing GUI layer?");
	MakeByte	(0XFFF81C);
	MakeByte	(0XFFF81D);
	MakeArray	(0XFFF81D,	0X2);
	MakeByte	(0XFFF81F);
	MakeByte	(0XFFF820);
	MakeRptCmt	(0XFFF821,	"diagonal input? 1=UR, 2=DR, 3=DL, 4=UL?");
	MakeByte	(0XFFF821);
	MakeByte	(0XFFF822);
	MakeArray	(0XFFF822,	0XE);
	MakeWord	(0XFFF830);
	MakeWord	(0XFFF832);
	MakeRptCmt	(0XFFF834,	"some form of counter?");
	MakeWord	(0XFFF834);
	MakeByte	(0XFFF836);
	MakeArray	(0XFFF836,	0XC);
	MakeWord	(0XFFF842);
	MakeWord	(0XFFF844);
	MakeName	(0XFFF844,	"MESSAGE_ARG_NAME_1");
	MakeWord	(0XFFF846);
	MakeName	(0XFFF846,	"MESSAGE_ARG_NAME_2");
	MakeWord	(0XFFF848);
	MakeArray	(0XFFF848,	0X2);
	MakeName	(0XFFF848,	"MESSAGE_ARG_NAME_3");
	MakeByte	(0XFFF84C);
	MakeArray	(0XFFF84C,	0X40);
	MakeName	(0XFFF84C,	"DIALOG_STRING_TO_PRINT");
	MakeByte	(0XFFF88C);
	MakeArray	(0XFFF88C,	0X40);
	MakeWord	(0XFFF8CC);
	MakeWord	(0XFFF8CE);
	MakeName	(0XFFF8CE,	"TILE_NUMBER");
	MakeWord	(0XFFF8D0);
	MakeName	(0XFFF8D0,	"TILE_EVENT");
	MakeRptCmt	(0XFFF8D2,	"tile roof group?");
	MakeWord	(0XFFF8D2);
	MakeRptCmt	(0XFFF8D4,	"tile roof group?");
	MakeWord	(0XFFF8D4);
	MakeRptCmt	(0XFFF8D6,	"offset based on tile position?");
	MakeWord	(0XFFF8D6);
	MakeWord	(0XFFF8D8);
	MakeWord	(0XFFF8DA);
	MakeName	(0XFFF8DA,	"STRING_BYTE");
	MakeWord	(0XFFF8DC);
	MakeName	(0XFFF8DC,	"STRING_BIT_COUNTER");
	MakeWord	(0XFFF8DE);
	MakeWord	(0XFFF8E0);
	MakeWord	(0XFFF8E2);
	MakeWord	(0XFFF8E4);
	MakeArray	(0XFFF8E4,	0X3);
	MakeWord	(0XFFF8EA);
	MakeWord	(0XFFF8EC);
	MakeArray	(0XFFF8EC,	0XA);
	MakeRptCmt	(0XFFF900,	"contains current number loaded for printing");
	MakeDword	(0XFFF900);
	MakeName	(0XFFF900,	"MESSAGE_ARG_NUMBER");
	MakeRptCmt	(0XFFF904,	"address of current ASCII byte in RAM (for printing names in messages)");
	MakeDword	(0XFFF904);
	MakeName	(0XFFF904,	"CURRENT_MESSAGE_ASCII_BYTE_ADDRESS");
	MakeRptCmt	(0XFFF908,	"address of current Huffman-encoded script byte");
	MakeDword	(0XFFF908);
	MakeName	(0XFFF908,	"COMPRESSED_STRING_POINTER");
	MakeRptCmt	(0XFFF90C,	"address of current name index in RAM");
	MakeDword	(0XFFF90C);
	MakeName	(0XFFF90C,	"CURRENT_MESSAGE_NAME_INDEX_ADDRESS");
	MakeDword	(0XFFF910);
	MakeDword	(0XFFF914);
	MakeDword	(0XFFF918);
	MakeDword	(0XFFF91C);
	MakeDword	(0XFFF920);
	MakeDword	(0XFFF924);
	MakeDword	(0XFFF928);
	MakeDword	(0XFFF92C);
	MakeName	(0XFFF92C,	"MAP_SPRITE_DATA_POINTER");
	MakeByte	(0XFFF930);
	MakeArray	(0XFFF930,	0X8);
	MakeDword	(0XFFF938);
	MakeDword	(0XFFF93C);
	MakeArray	(0XFFF93C,	0X1AF);
	MakeDword	(0XFFFFF8);
	MakeName	(0XFFFFF8,	"ERRCODE_DWORD0");
	MakeDword	(0XFFFFFC);
	MakeName	(0XFFFFFC,	"ERRCODE_DWORD1");
}

static Functions_0(void) {

	MakeFunction    (0X200,0X204);
	SetFunctionFlags(0X200,0x80);
	MakeFunction    (0X204,0X208);
	SetFunctionFlags(0X204,0x80);
	MakeFunction    (0X208,0X20C);
	SetFunctionFlags(0X208,0x80);
	MakeFunction    (0X20C,0X210);
	SetFunctionFlags(0X20C,0x80);
	MakeFunction    (0X210,0X214);
	SetFunctionFlags(0X210,0x80);
	MakeFunction    (0X214,0X218);
	SetFunctionFlags(0X214,0x80);
	MakeFunction    (0X218,0X21C);
	SetFunctionFlags(0X218,0x80);
	MakeFunction    (0X21C,0X220);
	SetFunctionFlags(0X21C,0x80);
	MakeFunction    (0X220,0X224);
	SetFunctionFlags(0X220,0x80);
	MakeFunction    (0X224,0X228);
	SetFunctionFlags(0X224,0x80);
	MakeFunction    (0X228,0X22C);
	SetFunctionFlags(0X228,0x80);
	MakeFunction    (0X22C,0X230);
	SetFunctionFlags(0X22C,0x80);
	MakeFunction    (0X230,0X234);
	SetFunctionFlags(0X230,0x80);
	MakeFunction    (0X234,0X238);
	SetFunctionFlags(0X234,0x80);
	MakeFunction    (0X238,0X23C);
	SetFunctionFlags(0X238,0x80);
	MakeFunction    (0X23C,0X240);
	SetFunctionFlags(0X23C,0xc0);
	MakeFunction    (0X240,0X244);
	SetFunctionFlags(0X240,0x80);
	MakeFunction    (0X244,0X248);
	SetFunctionFlags(0X244,0x80);
	MakeFunction    (0X248,0X24C);
	SetFunctionFlags(0X248,0x80);
	MakeFunction    (0X24C,0X250);
	SetFunctionFlags(0X24C,0x80);
	MakeFunction    (0X250,0X254);
	SetFunctionFlags(0X250,0x80);
	MakeFunction    (0X254,0X258);
	SetFunctionFlags(0X254,0x80);
	MakeFunction    (0X258,0X25C);
	SetFunctionFlags(0X258,0xc0);
	MakeFunction    (0X25C,0X260);
	SetFunctionFlags(0X25C,0xc0);
	MakeFunction    (0X260,0X264);
	SetFunctionFlags(0X260,0xc0);
	MakeFunction    (0X264,0X268);
	SetFunctionFlags(0X264,0xc0);
	MakeFunction    (0X268,0X26C);
	SetFunctionFlags(0X268,0x80);
	MakeFunction    (0X26C,0X270);
	SetFunctionFlags(0X26C,0x80);
	MakeFunction    (0X270,0X274);
	SetFunctionFlags(0X270,0x80);
	MakeFunction    (0X274,0X278);
	SetFunctionFlags(0X274,0xc0);
	MakeFunction    (0X278,0X27C);
	SetFunctionFlags(0X278,0x80);
	MakeFunction    (0X27C,0X280);
	SetFunctionFlags(0X27C,0x80);
	MakeFunction    (0X280,0X284);
	SetFunctionFlags(0X280,0x80);
	MakeFunction    (0X284,0X288);
	SetFunctionFlags(0X284,0x80);
	MakeFunction    (0X288,0X28C);
	SetFunctionFlags(0X288,0x80);
	MakeFunction    (0X28C,0X290);
	SetFunctionFlags(0X28C,0x80);
	MakeFunction    (0X290,0X294);
	SetFunctionFlags(0X290,0xc0);
	MakeFunction    (0X294,0X298);
	SetFunctionFlags(0X294,0xc0);
	MakeFunction    (0X298,0X29C);
	SetFunctionFlags(0X298,0x80);
	MakeFunction    (0X29C,0X2A0);
	SetFunctionFlags(0X29C,0x80);
	MakeFunction    (0X2A0,0X2A4);
	SetFunctionFlags(0X2A0,0xc0);
	MakeFunction    (0X2A4,0X2A8);
	SetFunctionFlags(0X2A4,0xc0);
	MakeFunction    (0X2A8,0X2AC);
	SetFunctionFlags(0X2A8,0xc0);
	MakeFunction    (0X2AC,0X2B0);
	SetFunctionFlags(0X2AC,0xc0);
	MakeFunction    (0X2B0,0X2B4);
	SetFunctionFlags(0X2B0,0xc0);
	MakeFunction    (0X2B4,0X2B8);
	SetFunctionFlags(0X2B4,0xc0);
	MakeFunction    (0X2B8,0X2BC);
	SetFunctionFlags(0X2B8,0x80);
	MakeFunction    (0X2BC,0X2C0);
	SetFunctionFlags(0X2BC,0x80);
	MakeFunction    (0X2C0,0X2C4);
	SetFunctionFlags(0X2C0,0xc0);
	MakeFunction    (0X2C4,0X2C8);
	SetFunctionFlags(0X2C4,0x80);
	MakeFunction    (0X2C8,0X2CC);
	SetFunctionFlags(0X2C8,0x80);
	MakeFunction    (0X2CC,0X2D0);
	SetFunctionFlags(0X2CC,0x80);
	MakeFunction    (0X2D0,0X2D4);
	SetFunctionFlags(0X2D0,0xc0);
	MakeFunction    (0X2D4,0X2D8);
	SetFunctionFlags(0X2D4,0x80);
	MakeFunction    (0X2D8,0X2DC);
	SetFunctionFlags(0X2D8,0x80);
	MakeFunction    (0X2DC,0X2E0);
	SetFunctionFlags(0X2DC,0x80);
	MakeFunction    (0X2E0,0X2E4);
	SetFunctionFlags(0X2E0,0x80);
	MakeFunction    (0X2E4,0X2E8);
	SetFunctionFlags(0X2E4,0x80);
	MakeFunction    (0X2E8,0X2EC);
	SetFunctionFlags(0X2E8,0xc0);
	MakeFunction    (0X2EC,0X2F0);
	SetFunctionFlags(0X2EC,0x80);
	MakeFunction    (0X2F0,0X2F4);
	SetFunctionFlags(0X2F0,0x80);
	MakeFunction    (0X2F4,0X2F8);
	SetFunctionFlags(0X2F4,0x80);
	MakeFunction    (0X2F8,0X2FC);
	SetFunctionFlags(0X2F8,0x80);
	MakeFunction    (0X2FC,0X300);
	SetFunctionFlags(0X2FC,0x80);
	MakeFunction    (0X300,0X304);
	SetFunctionFlags(0X300,0x80);
	MakeFunction    (0X304,0X308);
	SetFunctionFlags(0X304,0x80);
	MakeFunction    (0X308,0X30C);
	SetFunctionFlags(0X308,0x80);
	MakeFunction    (0X30C,0X310);
	SetFunctionFlags(0X30C,0x80);
	MakeFunction    (0X310,0X314);
	SetFunctionFlags(0X310,0x80);
	MakeFunction    (0X314,0X318);
	SetFunctionFlags(0X314,0x80);
	MakeFunction    (0X318,0X31C);
	SetFunctionFlags(0X318,0x80);
	MakeFunction    (0X31C,0X320);
	SetFunctionFlags(0X31C,0x80);
	MakeFunction    (0X320,0X324);
	SetFunctionFlags(0X320,0x80);
	MakeFunction    (0X324,0X328);
	SetFunctionFlags(0X324,0x80);
	MakeFunction    (0X328,0X32C);
	SetFunctionFlags(0X328,0xc0);
	MakeFunction    (0X32C,0X330);
	SetFunctionFlags(0X32C,0x80);
	MakeFunction    (0X330,0X334);
	SetFunctionFlags(0X330,0x80);
	MakeFunction    (0X334,0X338);
	SetFunctionFlags(0X334,0x80);
	MakeFunction    (0X338,0X33C);
	SetFunctionFlags(0X338,0x80);
	MakeFunction    (0X33C,0X340);
	SetFunctionFlags(0X33C,0x80);
	MakeFunction    (0X340,0X344);
	SetFunctionFlags(0X340,0x80);
	MakeFunction    (0X344,0X348);
	SetFunctionFlags(0X344,0x80);
	MakeFunction    (0X348,0X34C);
	SetFunctionFlags(0X348,0x80);
	MakeFunction    (0X34C,0X350);
	SetFunctionFlags(0X34C,0x80);
	MakeFunction    (0X350,0X354);
	SetFunctionFlags(0X350,0x80);
	MakeFunction    (0X354,0X358);
	SetFunctionFlags(0X354,0x80);
	MakeFunction    (0X358,0X35C);
	SetFunctionFlags(0X358,0x80);
	MakeFunction    (0X35C,0X360);
	SetFunctionFlags(0X35C,0x80);
	MakeFunction    (0X360,0X364);
	SetFunctionFlags(0X360,0xc0);
	MakeFunction    (0X364,0X368);
	SetFunctionFlags(0X364,0xc0);
	MakeFunction    (0X368,0X36C);
	SetFunctionFlags(0X368,0xc0);
	MakeFunction    (0X36C,0X370);
	SetFunctionFlags(0X36C,0xc0);
	MakeFunction    (0X370,0X374);
	SetFunctionFlags(0X370,0x80);
	MakeFunction    (0X374,0X378);
	SetFunctionFlags(0X374,0x80);
	MakeFunction    (0X378,0X37C);
	SetFunctionFlags(0X378,0x80);
	MakeFunction    (0X37C,0X380);
	SetFunctionFlags(0X37C,0x80);
	MakeFunction    (0X380,0X384);
	SetFunctionFlags(0X380,0x80);
	MakeFunction    (0X384,0X388);
	SetFunctionFlags(0X384,0x80);
	MakeFunction    (0X388,0X38C);
	SetFunctionFlags(0X388,0x80);
	MakeFunction    (0X38C,0X390);
	SetFunctionFlags(0X38C,0x80);
	MakeFunction    (0X390,0X394);
	SetFunctionFlags(0X390,0x80);
	MakeFunction    (0X394,0X398);
	SetFunctionFlags(0X394,0x80);
	MakeFunction    (0X398,0X3A6);
	SetFunctionFlags(0X398,0x0);
	MakeFunction    (0X3A6,0X3E0);
	SetFunctionFlags(0X3A6,0x0);
	MakeNameEx(0X3B0, "@ClearRam_Loop", SN_LOCAL);
	MakeNameEx(0X3CA, "@SetVdpReg_Loop", SN_LOCAL);
	MakeFunction    (0X3E0,0X454);
	SetFunctionFlags(0X3E0,0x0);
	MakeFunction    (0X47A,0X58A);
	SetFunctionFlags(0X47A,0x0);
	MakeFunction    (0X592,0X5EA);
	SetFunctionFlags(0X592,0x0);
	MakeFunction    (0X5EA,0X5F0);
	SetFunctionFlags(0X5EA,0x0);
	MakeFunction    (0X5F0,0X5FA);
	SetFunctionFlags(0X5F0,0x0);
	MakeFunction    (0X5FA,0X62E);
	SetFunctionFlags(0X5FA,0x0);
	MakeFrame(0X5FA, 0X0, 0, 0X0);
	MakeFunction    (0X62E,0X646);
	SetFunctionFlags(0X62E,0x0);
	MakeFrame(0X62E, 0X0, 0, 0X0);
	MakeFunction    (0X646,0X65E);
	SetFunctionFlags(0X646,0x0);
	MakeFrame(0X646, 0X0, 0, 0X0);
	MakeFunction    (0X65E,0X676);
	SetFunctionFlags(0X65E,0x0);
	MakeFrame(0X65E, 0X0, 0, 0X0);
	MakeFunction    (0X676,0X68E);
	SetFunctionFlags(0X676,0x0);
	MakeFrame(0X676, 0X0, 0, 0X0);
	MakeFunction    (0X68E,0X694);
	SetFunctionFlags(0X68E,0x0);
	MakeFunction    (0X694,0X698);
	SetFunctionFlags(0X694,0x0);
	MakeFunction    (0X698,0X6A8);
	SetFunctionFlags(0X698,0x0);
	MakeFunction    (0X6A8,0X6B8);
	SetFunctionFlags(0X6A8,0x0);
	MakeFunction    (0X6B8,0X6C8);
	SetFunctionFlags(0X6B8,0x0);
	MakeFunction    (0X6C8,0X6D8);
	SetFunctionFlags(0X6C8,0x0);
	MakeFunction    (0X6D8,0X728);
	SetFunctionFlags(0X6D8,0x0);
	MakeNameEx(0X70C, "@Skip", SN_LOCAL);
	MakeFunction    (0X728,0X74C);
	SetFunctionFlags(0X728,0x0);
	MakeFunction    (0X74C,0X760);
	SetFunctionFlags(0X74C,0x0);
	MakeFunction    (0X760,0X768);
	SetFunctionFlags(0X760,0x0);
	MakeFunction    (0X768,0X7EC);
	SetFunctionFlags(0X768,0x0);
	MakeFunction    (0X7EC,0X82C);
	SetFunctionFlags(0X7EC,0x0);
	MakeNameEx(0X820, "@Loop", SN_LOCAL);
	MakeNameEx(0X82A, "@Return", SN_LOCAL);
	MakeFunction    (0X82C,0X8BA);
	SetFunctionFlags(0X82C,0x0);
	MakeFunction    (0X8BA,0XAA4);
	SetFunctionFlags(0X8BA,0x0);
	MakeFunction    (0XAA4,0XAA6);
	SetFunctionFlags(0XAA4,0x0);
	MakeFunction    (0XAA6,0XAA8);
	SetFunctionFlags(0XAA6,0x0);
	MakeFunction    (0XAA8,0XAD6);
	SetFunctionFlags(0XAA8,0x0);
	MakeFrame(0XAA8, 0X0, 0, 0X0);
	MakeFunction    (0XAD6,0XB4C);
	SetFunctionFlags(0XAD6,0x0);
	MakeFunction    (0XB9C,0XB9E);
	SetFunctionFlags(0XB9C,0x0);
	MakeFunction    (0XB9E,0XBB2);
	SetFunctionFlags(0XB9E,0x0);
	MakeNameEx(0XBA2, "@Wait", SN_LOCAL);
	MakeFunction    (0XBB2,0XBC8);
	SetFunctionFlags(0XBB2,0x0);
	MakeFunction    (0XBC8,0XBEC);
	SetFunctionFlags(0XBC8,0x0);
	MakeFunction    (0XBEC,0XC00);
	SetFunctionFlags(0XBEC,0x0);
	MakeFrame(0XBEC, 0X0, 0, 0X0);
	MakeFunction    (0XC00,0XC12);
	SetFunctionFlags(0XC00,0x0);
	MakeFunction    (0XC22,0XC2C);
	SetFunctionFlags(0XC22,0x0);
	MakeFunction    (0XC2C,0XC36);
	SetFunctionFlags(0XC2C,0x0);
	MakeFunction    (0XC36,0XC44);
	SetFunctionFlags(0XC36,0x0);
	MakeFunction    (0XC44,0XC50);
	SetFunctionFlags(0XC44,0x0);
	MakeFunction    (0XC50,0XC54);
	SetFunctionFlags(0XC50,0x0);
	MakeFunction    (0XC54,0XC58);
	SetFunctionFlags(0XC54,0x0);
	MakeFunction    (0XC58,0XC62);
	SetFunctionFlags(0XC58,0x0);
	MakeFunction    (0XC62,0XC6C);
	SetFunctionFlags(0XC62,0x0);
	MakeFunction    (0XC6C,0XC8A);
	SetFunctionFlags(0XC6C,0x0);
	MakeFrame(0XC6C, 0X0, 0, 0X0);
	MakeNameEx(0XC80, "@Loop", SN_LOCAL);
	MakeFunction    (0XC8A,0XCCE);
	SetFunctionFlags(0XC8A,0x0);
	MakeFunction    (0XCCE,0XCD4);
	SetFunctionFlags(0XCCE,0x0);
	MakeFunction    (0XCD4,0XCD8);
	SetFunctionFlags(0XCD4,0x0);
	MakeFrame(0XCD4, 0X0, 0, 0X0);
	MakeFunction    (0XCD8,0XCE0);
	SetFunctionFlags(0XCD8,0x0);
	MakeFunction    (0XCE0,0XCEC);
	SetFunctionFlags(0XCE0,0x0);
	MakeFunction    (0XCEC,0XCF8);
	SetFunctionFlags(0XCEC,0x0);
	MakeFunction    (0XCF8,0XD04);
	SetFunctionFlags(0XCF8,0x0);
	MakeFunction    (0XD04,0XD0C);
	SetFunctionFlags(0XD04,0x0);
	MakeFunction    (0XD0C,0XD36);
	SetFunctionFlags(0XD0C,0x0);
	MakeNameEx(0XD24, "@Wait", SN_LOCAL);
	MakeFunction    (0XD36,0XDD2);
	SetFunctionFlags(0XD36,0x0);
	MakeFunction    (0XDD2,0XDD6);
	SetFunctionFlags(0XDD2,0x0);
	MakeFrame(0XDD2, 0X0, 0, 0X0);
	MakeFunction    (0XDD6,0XE0A);
	SetFunctionFlags(0XDD6,0x0);
	MakeFunction    (0XE0A,0XE30);
	SetFunctionFlags(0XE0A,0x0);
	MakeNameEx(0XE18, "@Loop", SN_LOCAL);
	MakeFunction    (0XE30,0XE66);
	SetFunctionFlags(0XE30,0x0);
	MakeNameEx(0XE5A, "@Loop", SN_LOCAL);
	MakeFunction    (0XE66,0XE80);
	SetFunctionFlags(0XE66,0x0);
	MakeNameEx(0XE76, "@Wait", SN_LOCAL);
	MakeFunction    (0XE80,0XE96);
	SetFunctionFlags(0XE80,0x0);
	MakeNameEx(0XE8A, "@Loop", SN_LOCAL);
	MakeNameEx(0XE90, "@Done", SN_LOCAL);
	MakeFunction    (0XE96,0XEA0);
	SetFunctionFlags(0XE96,0x0);
	MakeFunction    (0XEA0,0XEA6);
	SetFunctionFlags(0XEA0,0x0);
	MakeFunction    (0XEA6,0XEB0);
	SetFunctionFlags(0XEA6,0x0);
	MakeFunction    (0XEB0,0XEB6);
	SetFunctionFlags(0XEB0,0x0);
	MakeFunction    (0XEB6,0XEF0);
	SetFunctionFlags(0XEB6,0x0);
	MakeFunction    (0XEF0,0XF0A);
	SetFunctionFlags(0XEF0,0x0);
	MakeFunction    (0XF0A,0XF42);
	SetFunctionFlags(0XF0A,0x0);
	MakeFunction    (0XF42,0XF52);
	SetFunctionFlags(0XF42,0x0);
	MakeFunction    (0XF52,0XF5C);
	SetFunctionFlags(0XF52,0x0);
	MakeFrame(0XF52, 0X0, 0, 0X0);
	MakeFunction    (0XF5C,0XFE8);
	SetFunctionFlags(0XF5C,0x0);
	MakeFunction    (0XFE8,0X1018);
	SetFunctionFlags(0XFE8,0x0);
	MakeFunction    (0X1018,0X10D2);
	SetFunctionFlags(0X1018,0x0);
	MakeFunction    (0X10D2,0X115A);
	SetFunctionFlags(0X10D2,0x0);
	MakeFunction    (0X115A,0X1180);
	SetFunctionFlags(0X115A,0x0);
	MakeFunction    (0X1180,0X11D0);
	SetFunctionFlags(0X1180,0x0);
	MakeFunction    (0X11D0,0X11EC);
	SetFunctionFlags(0X11D0,0x0);
	MakeFunction    (0X11EC,0X11F8);
	SetFunctionFlags(0X11EC,0x0);
	MakeFunction    (0X11F8,0X1234);
	SetFunctionFlags(0X11F8,0x0);
	MakeFunction    (0X1234,0X1250);
	SetFunctionFlags(0X1234,0x0);
	MakeFunction    (0X1250,0X125C);
	SetFunctionFlags(0X1250,0x0);
	MakeFunction    (0X125C,0X126C);
	SetFunctionFlags(0X125C,0x0);
	MakeFunction    (0X126C,0X1284);
	SetFunctionFlags(0X126C,0x0);
	MakeFunction    (0X1284,0X1294);
	SetFunctionFlags(0X1284,0x0);
	MakeFunction    (0X1294,0X12BA);
	SetFunctionFlags(0X1294,0x0);
	MakeFunction    (0X12BA,0X12E0);
	SetFunctionFlags(0X12BA,0x0);
	MakeFunction    (0X12E0,0X12E6);
	SetFunctionFlags(0X12E0,0x0);
	MakeFunction    (0X12E6,0X137E);
	SetFunctionFlags(0X12E6,0x0);
	MakeNameEx(0X1358, "@Wait", SN_LOCAL);
	MakeFunction    (0X137E,0X13BE);
	SetFunctionFlags(0X137E,0x0);
	MakeFunction    (0X13E8,0X13EA);
	SetFunctionFlags(0X13E8,0x0);
	MakeFunction    (0X13EA,0X1410);
	SetFunctionFlags(0X13EA,0x0);
	MakeFunction    (0X1410,0X1428);
	SetFunctionFlags(0X1410,0x0);
	MakeFunction    (0X1428,0X144E);
	SetFunctionFlags(0X1428,0x0);
	MakeFunction    (0X144E,0X1460);
	SetFunctionFlags(0X144E,0x0);
	MakeNameEx(0X145E, "@Return", SN_LOCAL);
	MakeFunction    (0X1460,0X1482);
	SetFunctionFlags(0X1460,0x0);
	MakeNameEx(0X1470, "@Wait", SN_LOCAL);
	MakeNameEx(0X1480, "@Return", SN_LOCAL);
	MakeFunction    (0X1482,0X14C4);
	SetFunctionFlags(0X1482,0x0);
	MakeFunction    (0X14C4,0X14E2);
	SetFunctionFlags(0X14C4,0x0);
	MakeNameEx(0X14DC, "@Done", SN_LOCAL);
	MakeFunction    (0X14E2,0X14EE);
	SetFunctionFlags(0X14E2,0x0);
	MakeFunction    (0X14EE,0X150E);
	SetFunctionFlags(0X14EE,0x0);
	MakeFunction    (0X150E,0X1526);
	SetFunctionFlags(0X150E,0x0);
	MakeNameEx(0X1516, "@Wait", SN_LOCAL);
	MakeFunction    (0X1526,0X1550);
	SetFunctionFlags(0X1526,0x0);
	MakeFunction    (0X1550,0X157C);
	SetFunctionFlags(0X1550,0x0);
	MakeNameEx(0X155E, "@Loop", SN_LOCAL);
	MakeFunction    (0X157C,0X1594);
	SetFunctionFlags(0X157C,0x0);
	MakeFunction    (0X1794,0X17C0);
	SetFunctionFlags(0X1794,0x0);
	MakeFunction    (0X17C0,0X1814);
	SetFunctionFlags(0X17C0,0x0);
	MakeFunction    (0X1856,0X1880);
	SetFunctionFlags(0X1856,0x0);
	MakeFunction    (0X1880,0X18A0);
	SetFunctionFlags(0X1880,0x0);
	MakeFunction    (0X18A0,0X18C4);
	SetFunctionFlags(0X18A0,0x0);
	MakeFunction    (0X18C4,0X18DC);
	SetFunctionFlags(0X18C4,0x0);
	MakeFunction    (0X18DC,0X18EC);
	SetFunctionFlags(0X18DC,0x0);
	MakeFunction    (0X18EC,0X191C);
	SetFunctionFlags(0X18EC,0x0);
	MakeFunction    (0X191C,0X1948);
	SetFunctionFlags(0X191C,0x0);
	MakeFunction    (0X1948,0X198E);
	SetFunctionFlags(0X1948,0x0);
	MakeNameEx(0X1984, "@Loop", SN_LOCAL);
	MakeFunction    (0X198E,0X1A0E);
	SetFunctionFlags(0X198E,0x0);
	MakeFunction    (0X1A0E,0X1A92);
	SetFunctionFlags(0X1A0E,0x0);
	MakeFunction    (0X1A92,0X1AB6);
	SetFunctionFlags(0X1A92,0x0);
	MakeFunction    (0X1AB6,0X1AD4);
	SetFunctionFlags(0X1AB6,0x0);
	MakeNameEx(0X1ACA, "@Loop", SN_LOCAL);
	MakeFunction    (0X1AD4,0X1AF0);
	SetFunctionFlags(0X1AD4,0x0);
	MakeNameEx(0X1ADA, "@Loop", SN_LOCAL);
	MakeNameEx(0X1AE8, "@Continue", SN_LOCAL);
	MakeFunction    (0X1AF0,0X1B1E);
	SetFunctionFlags(0X1AF0,0x0);
	MakeFunction    (0X1B1E,0X1B34);
	SetFunctionFlags(0X1B1E,0x0);
	MakeFunction    (0X1B34,0X1B4A);
	SetFunctionFlags(0X1B34,0x0);
	MakeFunction    (0X1B4A,0X1B6E);
	SetFunctionFlags(0X1B4A,0x0);
	MakeFunction    (0X1CC6,0X1CD8);
	SetFunctionFlags(0X1CC6,0x0);
	MakeFunction    (0X1CD8,0X1CFE);
	SetFunctionFlags(0X1CD8,0x0);
	MakeFunction    (0X1CFE,0X1D36);
	SetFunctionFlags(0X1CFE,0x0);
	MakeFunction    (0X1D36,0X1D4A);
	SetFunctionFlags(0X1D36,0x0);
	MakeNameEx(0X1D48, "@Return", SN_LOCAL);
	MakeFunction    (0X1D4A,0X1D96);
	SetFunctionFlags(0X1D4A,0x0);
	MakeFunction    (0X1D96,0X1D9E);
	SetFunctionFlags(0X1D96,0x0);
	MakeFunction    (0X1D9E,0X1DA6);
	SetFunctionFlags(0X1D9E,0x0);
	MakeFunction    (0X1DA6,0X1DB2);
	SetFunctionFlags(0X1DA6,0x0);
	MakeFunction    (0X1DB2,0X1DBE);
	SetFunctionFlags(0X1DB2,0x0);
	MakeFunction    (0X1DBE,0X1DCA);
	SetFunctionFlags(0X1DBE,0x0);
	MakeFunction    (0X1DCA,0X1DD6);
	SetFunctionFlags(0X1DCA,0x0);
	MakeFunction    (0X1DD6,0X1DE2);
	SetFunctionFlags(0X1DD6,0x0);
	MakeFunction    (0X1DE2,0X1DEE);
	SetFunctionFlags(0X1DE2,0x0);
	MakeFunction    (0X1DEE,0X1DFA);
	SetFunctionFlags(0X1DEE,0x0);
	MakeFunction    (0X1DFA,0X1E06);
	SetFunctionFlags(0X1DFA,0x0);
	MakeFunction    (0X1E06,0X1E14);
	SetFunctionFlags(0X1E06,0x0);
	MakeFunction    (0X1E14,0X1E22);
	SetFunctionFlags(0X1E14,0x0);
	MakeFunction    (0X1E22,0X1E30);
	SetFunctionFlags(0X1E22,0x0);
	MakeFunction    (0X1E30,0X1E3E);
	SetFunctionFlags(0X1E30,0x0);
	MakeFunction    (0X1E3E,0X1E4C);
	SetFunctionFlags(0X1E3E,0x0);
	MakeFunction    (0X1E4C,0X1E5A);
	SetFunctionFlags(0X1E4C,0x0);
	MakeFunction    (0X1E5A,0X1E68);
	SetFunctionFlags(0X1E5A,0x0);
	MakeFunction    (0X1E68,0X1E76);
	SetFunctionFlags(0X1E68,0x0);
	MakeFunction    (0X1E76,0X1E9E);
	SetFunctionFlags(0X1E76,0x0);
	MakeFunction    (0X2046,0X208C);
	SetFunctionFlags(0X2046,0x0);
	MakeFunction    (0X208C,0X20C4);
	SetFunctionFlags(0X208C,0x0);
	MakeFunction    (0X20C4,0X20DA);
	SetFunctionFlags(0X20C4,0x0);
	MakeFunction    (0X20DA,0X20E0);
	SetFunctionFlags(0X20DA,0x0);
	MakeFunction    (0X20E0,0X2100);
	SetFunctionFlags(0X20E0,0x0);
	MakeNameEx(0X20FE, "@Return", SN_LOCAL);
	MakeFunction    (0X2100,0X2124);
	SetFunctionFlags(0X2100,0x0);
	MakeFunction    (0X2124,0X214C);
	SetFunctionFlags(0X2124,0x0);
	MakeNameEx(0X213C, "@GoToNextString", SN_LOCAL);
	MakeNameEx(0X214A, "@Return", SN_LOCAL);
	MakeFunction    (0X214C,0X21C2);
	SetFunctionFlags(0X214C,0x0);
	MakeFunction    (0X21C8,0X21DE);
	SetFunctionFlags(0X21C8,0x0);
	MakeFunction    (0X21DE,0X21E2);
	SetFunctionFlags(0X21DE,0x80);
	MakeFunction    (0X21E2,0X21E6);
	SetFunctionFlags(0X21E2,0x80);
	MakeFunction    (0X21E6,0X21EA);
	SetFunctionFlags(0X21E6,0x80);
	MakeFunction    (0X21EA,0X21EE);
	SetFunctionFlags(0X21EA,0x80);
	MakeFunction    (0X21EE,0X21F2);
	SetFunctionFlags(0X21EE,0xc0);
	MakeFunction    (0X21F2,0X21F6);
	SetFunctionFlags(0X21F2,0x80);
	MakeFunction    (0X21F6,0X21FA);
	SetFunctionFlags(0X21F6,0x80);
	MakeFunction    (0X21FA,0X21FE);
	SetFunctionFlags(0X21FA,0xc0);
	MakeFunction    (0X21FE,0X2202);
	SetFunctionFlags(0X21FE,0x80);
	MakeFunction    (0X2202,0X2206);
	SetFunctionFlags(0X2202,0x80);
	MakeFunction    (0X2206,0X220A);
	SetFunctionFlags(0X2206,0x80);
	MakeFunction    (0X220A,0X220E);
	SetFunctionFlags(0X220A,0x80);
	MakeFunction    (0X220E,0X2212);
	SetFunctionFlags(0X220E,0x80);
	MakeFunction    (0X2212,0X2216);
	SetFunctionFlags(0X2212,0x80);
	MakeFunction    (0X2216,0X221A);
	SetFunctionFlags(0X2216,0x80);
	MakeFunction    (0X221A,0X221E);
	SetFunctionFlags(0X221A,0x80);
	MakeFunction    (0X221E,0X2222);
	SetFunctionFlags(0X221E,0x80);
	MakeFunction    (0X2232,0X2236);
	SetFunctionFlags(0X2232,0x80);
	MakeFunction    (0X223A,0X223E);
	SetFunctionFlags(0X223A,0x80);
	MakeFunction    (0X223E,0X2242);
	SetFunctionFlags(0X223E,0x80);
	MakeFunction    (0X2242,0X2246);
	SetFunctionFlags(0X2242,0x80);
	MakeFunction    (0X2246,0X224C);
	SetFunctionFlags(0X2246,0x0);
	MakeFunction    (0X224C,0X2280);
	SetFunctionFlags(0X224C,0x0);
	MakeFunction    (0X2280,0X228A);
	SetFunctionFlags(0X2280,0x0);
	MakeFunction    (0X2296,0X22A2);
	SetFunctionFlags(0X2296,0x0);
	MakeFunction    (0X22A2,0X22A4);
	SetFunctionFlags(0X22A2,0x0);
	MakeFunction    (0X22A4,0X22B0);
	SetFunctionFlags(0X22A4,0x0);
	MakeFunction    (0X22B0,0X22BC);
	SetFunctionFlags(0X22B0,0x0);
	MakeFunction    (0X22BC,0X22C8);
	SetFunctionFlags(0X22BC,0x0);
	MakeFunction    (0X22C8,0X22FC);
	SetFunctionFlags(0X22C8,0x0);
	MakeFunction    (0X230A,0X2318);
	SetFunctionFlags(0X230A,0x0);
	MakeFunction    (0X2318,0X231A);
	SetFunctionFlags(0X2318,0x0);
	MakeFunction    (0X231A,0X234E);
	SetFunctionFlags(0X231A,0x0);
	MakeFunction    (0X2354,0X235A);
	SetFunctionFlags(0X2354,0x0);
	MakeFunction    (0X235A,0X237E);
	SetFunctionFlags(0X235A,0x0);
	MakeFunction    (0X237E,0X23B4);
	SetFunctionFlags(0X237E,0x0);
	MakeFunction    (0X23B4,0X23DE);
	SetFunctionFlags(0X23B4,0x0);
	MakeFunction    (0X23DE,0X23EC);
	SetFunctionFlags(0X23DE,0x0);
	MakeFunction    (0X23EC,0X2430);
	SetFunctionFlags(0X23EC,0x0);
	MakeFunction    (0X2430,0X244C);
	SetFunctionFlags(0X2430,0x0);
	MakeFunction    (0X244C,0X2458);
	SetFunctionFlags(0X244C,0x0);
	MakeFunction    (0X2458,0X2466);
	SetFunctionFlags(0X2458,0x0);
	MakeFunction    (0X2466,0X2468);
	SetFunctionFlags(0X2466,0x40);
	MakeFunction    (0X2468,0X2478);
	SetFunctionFlags(0X2468,0x0);
	MakeFunction    (0X2478,0X248E);
	SetFunctionFlags(0X2478,0x0);
	MakeFunction    (0X25D0,0X29F8);
	SetFunctionFlags(0X25D0,0x0);
	MakeFunction    (0X29F8,0X2F72);
	SetFunctionFlags(0X29F8,0x0);
	MakeFunction    (0X2F72,0X2F94);
	SetFunctionFlags(0X2F72,0x0);
	MakeFunction    (0X2F94,0X2FB6);
	SetFunctionFlags(0X2F94,0x0);
	MakeFunction    (0X2FB6,0X2FD8);
	SetFunctionFlags(0X2FB6,0x0);
	MakeFunction    (0X2FD8,0X2FFA);
	SetFunctionFlags(0X2FD8,0x0);
	MakeFunction    (0X2FFA,0X300A);
	SetFunctionFlags(0X2FFA,0x0);
	MakeFunction    (0X300A,0X3018);
	SetFunctionFlags(0X300A,0x0);
	MakeFunction    (0X3018,0X3028);
	SetFunctionFlags(0X3018,0x0);
	MakeFunction    (0X3028,0X3046);
	SetFunctionFlags(0X3028,0x0);
	MakeFunction    (0X3046,0X3054);
	SetFunctionFlags(0X3046,0x0);
	MakeFunction    (0X3054,0X3062);
	SetFunctionFlags(0X3054,0x0);
	MakeFunction    (0X3062,0X3072);
	SetFunctionFlags(0X3062,0x0);
	MakeFunction    (0X3072,0X3082);
	SetFunctionFlags(0X3072,0x0);
	MakeFunction    (0X3082,0X309A);
	SetFunctionFlags(0X3082,0x0);
	MakeFunction    (0X309A,0X312A);
	SetFunctionFlags(0X309A,0x0);
	MakeFunction    (0X312A,0X313A);
	SetFunctionFlags(0X312A,0x0);
	MakeFunction    (0X313A,0X327E);
	SetFunctionFlags(0X313A,0x0);
	MakeFunction    (0X327E,0X3284);
	SetFunctionFlags(0X327E,0x80);
	MakeFunction    (0X3284,0X32EC);
	SetFunctionFlags(0X3284,0x0);
	MakeFunction    (0X32EC,0X3380);
	SetFunctionFlags(0X32EC,0x0);
	MakeFunction    (0X3380,0X343A);
	SetFunctionFlags(0X3380,0x0);
	MakeFunction    (0X3442,0X34EC);
	SetFunctionFlags(0X3442,0x0);
	MakeFunction    (0X34EC,0X3542);
	SetFunctionFlags(0X34EC,0x0);
	MakeFunction    (0X3542,0X3652);
	SetFunctionFlags(0X3542,0x0);
	MakeFunction    (0X3652,0X3660);
	SetFunctionFlags(0X3652,0x0);
	MakeFunction    (0X3660,0X3758);
	SetFunctionFlags(0X3660,0x0);
	MakeNameEx(0X3682, "@CheckSramString_Loop", SN_LOCAL);
	MakeNameEx(0X36DA, "@Slot2", SN_LOCAL);
	MakeNameEx(0X3718, "@Slot3", SN_LOCAL);
	MakeNameEx(0X3756, "@Return", SN_LOCAL);
	MakeFunction    (0X3758,0X3774);
	SetFunctionFlags(0X3758,0x0);
	MakeFunction    (0X37B6,0X37D6);
	SetFunctionFlags(0X37B6,0x0);
	MakeNameEx(0X37C4, "@Loop", SN_LOCAL);
	MakeNameEx(0X37D4, "@Return", SN_LOCAL);
	MakeFunction    (0X37D6,0X37EE);
	SetFunctionFlags(0X37D6,0x0);
	MakeNameEx(0X37DC, "@Loop", SN_LOCAL);
	MakeFunction    (0X37EE,0X37F4);
	SetFunctionFlags(0X37EE,0x0);
	MakeFrame(0X37EE, 0X0, 0, 0X0);
	MakeFunction    (0X37F4,0X3826);
	SetFunctionFlags(0X37F4,0x0);
	MakeFunction    (0X3826,0X3852);
	SetFunctionFlags(0X3826,0x0);
	MakeNameEx(0X3834, "@Slot2", SN_LOCAL);
	MakeNameEx(0X3842, "@Slot3", SN_LOCAL);
	MakeNameEx(0X3848, "@Continue", SN_LOCAL);
	MakeFunction    (0X3852,0X38E4);
	SetFunctionFlags(0X3852,0x0);
	MakeFunction    (0X38E4,0X394C);
	SetFunctionFlags(0X38E4,0x0);
	MakeFunction    (0X3A44,0X3B06);
	SetFunctionFlags(0X3A44,0x0);
	MakeFunction    (0X3B16,0X3B8E);
	SetFunctionFlags(0X3B16,0x0);
	MakeFunction    (0X3B8E,0X3BD2);
	SetFunctionFlags(0X3B8E,0x0);
	MakeFunction    (0X3BD2,0X3C18);
	SetFunctionFlags(0X3BD2,0x0);
	MakeFunction    (0X3C18,0X3C5E);
	SetFunctionFlags(0X3C18,0x0);
	MakeFunction    (0X3C5E,0X3CAA);
	SetFunctionFlags(0X3C5E,0x0);
	MakeFunction    (0X3CAA,0X3CF2);
	SetFunctionFlags(0X3CAA,0x0);
	MakeFunction    (0X3CF2,0X3D3A);
	SetFunctionFlags(0X3CF2,0x0);
	MakeFunction    (0X3D3A,0X3D80);
	SetFunctionFlags(0X3D3A,0x0);
	MakeFunction    (0X3D80,0X3F0E);
	SetFunctionFlags(0X3D80,0x0);
	MakeFunction    (0X3F0E,0X3F26);
	SetFunctionFlags(0X3F0E,0x0);
	MakeFunction    (0X3F36,0X3F4C);
	SetFunctionFlags(0X3F36,0x0);
	MakeFunction    (0X3F5A,0X3F6E);
	SetFunctionFlags(0X3F5A,0x0);
	MakeFunction    (0X3F76,0X3F7E);
	SetFunctionFlags(0X3F76,0x0);
	MakeFunction    (0X3F7E,0X3FA6);
	SetFunctionFlags(0X3F7E,0x0);
	MakeFunction    (0X3FA6,0X3FAE);
	SetFunctionFlags(0X3FA6,0x0);
	MakeFunction    (0X3FAE,0X3FB6);
	SetFunctionFlags(0X3FAE,0x0);
	MakeFunction    (0X3FB6,0X4012);
	SetFunctionFlags(0X3FB6,0x0);
	MakeFunction    (0X4012,0X401A);
	SetFunctionFlags(0X4012,0x0);
	MakeFunction    (0X401A,0X4032);
	SetFunctionFlags(0X401A,0x0);
	MakeFrame(0X401A, 0X0, 0, 0X0);
	MakeFunction    (0X4032,0X403A);
	SetFunctionFlags(0X4032,0x0);
	MakeFrame(0X4032, 0X0, 0, 0X0);
	MakeFunction    (0X403A,0X4066);
	SetFunctionFlags(0X403A,0x0);
	MakeFunction    (0X4066,0X407C);
	SetFunctionFlags(0X4066,0x0);
	MakeFunction    (0X408E,0X40A2);
	SetFunctionFlags(0X408E,0x0);
	MakeFunction    (0X40A8,0X40B0);
	SetFunctionFlags(0X40A8,0x0);
	MakeFunction    (0X40B0,0X40B8);
	SetFunctionFlags(0X40B0,0x0);
	MakeFunction    (0X40B8,0X40C0);
	SetFunctionFlags(0X40B8,0x0);
	MakeFunction    (0X40C0,0X40CE);
	SetFunctionFlags(0X40C0,0x0);
	MakeFunction    (0X40CE,0X40DC);
	SetFunctionFlags(0X40CE,0x0);
	MakeFunction    (0X40DC,0X40EA);
	SetFunctionFlags(0X40DC,0x0);
	MakeFunction    (0X40EA,0X4162);
	SetFunctionFlags(0X40EA,0x0);
	MakeFunction    (0X4162,0X4198);
	SetFunctionFlags(0X4162,0x0);
	MakeFunction    (0X4198,0X41D6);
	SetFunctionFlags(0X4198,0x0);
	MakeFunction    (0X41D6,0X41EC);
	SetFunctionFlags(0X41D6,0x0);
	MakeFunction    (0X41F4,0X4208);
	SetFunctionFlags(0X41F4,0x0);
	MakeFunction    (0X420C,0X421A);
	SetFunctionFlags(0X420C,0x0);
	MakeFunction    (0X421A,0X423E);
	SetFunctionFlags(0X421A,0x0);
	MakeFunction    (0X423E,0X424C);
	SetFunctionFlags(0X423E,0x0);
	MakeFunction    (0X424C,0X427A);
	SetFunctionFlags(0X424C,0x0);
	MakeFunction    (0X427A,0X42D4);
	SetFunctionFlags(0X427A,0x0);
	MakeFunction    (0X42D4,0X42EA);
	SetFunctionFlags(0X42D4,0x0);
	MakeFunction    (0X42FC,0X4310);
	SetFunctionFlags(0X42FC,0x0);
	MakeFunction    (0X4316,0X4324);
	SetFunctionFlags(0X4316,0x0);
	MakeFunction    (0X4324,0X435E);
	SetFunctionFlags(0X4324,0x0);
	MakeFunction    (0X435E,0X4366);
	SetFunctionFlags(0X435E,0x0);
	MakeFunction    (0X4366,0X437A);
	SetFunctionFlags(0X4366,0x0);
	MakeFunction    (0X4380,0X4388);
	SetFunctionFlags(0X4380,0x0);
	MakeFunction    (0X4388,0X4396);
	SetFunctionFlags(0X4388,0x0);
	MakeFunction    (0X4396,0X43CE);
	SetFunctionFlags(0X4396,0x0);
	MakeFunction    (0X43CE,0X43DC);
	SetFunctionFlags(0X43CE,0x0);
	MakeFunction    (0X43DC,0X43E2);
	SetFunctionFlags(0X43DC,0x0);
	MakeFunction    (0X43E2,0X43EA);
	SetFunctionFlags(0X43E2,0x0);
	MakeFunction    (0X43EA,0X43FE);
	SetFunctionFlags(0X43EA,0x0);
	MakeFunction    (0X4406,0X4436);
	SetFunctionFlags(0X4406,0x0);
	MakeFunction    (0X4436,0X4466);
	SetFunctionFlags(0X4436,0x0);
	MakeFunction    (0X4466,0X448A);
	SetFunctionFlags(0X4466,0x0);
	MakeFunction    (0X448A,0X44A0);
	SetFunctionFlags(0X448A,0x0);
	MakeFunction    (0X44AE,0X44C2);
	SetFunctionFlags(0X44AE,0x0);
	MakeFunction    (0X44C8,0X44E0);
	SetFunctionFlags(0X44C8,0x0);
	MakeFunction    (0X44E0,0X44EE);
	SetFunctionFlags(0X44E0,0x0);
	MakeFunction    (0X44EE,0X4508);
	SetFunctionFlags(0X44EE,0x0);
	MakeFunction    (0X4508,0X453A);
	SetFunctionFlags(0X4508,0x0);
	MakeFunction    (0X453A,0X4546);
	SetFunctionFlags(0X453A,0x0);
	MakeFunction    (0X4546,0X4552);
	SetFunctionFlags(0X4546,0x0);
	MakeFunction    (0X4552,0X459E);
	SetFunctionFlags(0X4552,0x0);
	MakeFunction    (0X459E,0X45B4);
	SetFunctionFlags(0X459E,0x0);
	MakeFunction    (0X45B4,0X45CC);
	SetFunctionFlags(0X45B4,0x0);
	MakeFunction    (0X45CC,0X45E2);
	SetFunctionFlags(0X45CC,0x0);
	MakeFunction    (0X45EE,0X4602);
	SetFunctionFlags(0X45EE,0x0);
	MakeFunction    (0X4608,0X4610);
	SetFunctionFlags(0X4608,0x0);
	MakeFunction    (0X4610,0X4618);
	SetFunctionFlags(0X4610,0x0);
	MakeFunction    (0X4618,0X463C);
	SetFunctionFlags(0X4618,0x0);
	MakeFunction    (0X463C,0X465A);
	SetFunctionFlags(0X463C,0x0);
	MakeFunction    (0X465A,0X46A8);
	SetFunctionFlags(0X465A,0x0);
	MakeFunction    (0X46A8,0X46AE);
	SetFunctionFlags(0X46A8,0x0);
	MakeFunction    (0X46AE,0X46E4);
	SetFunctionFlags(0X46AE,0x0);
	MakeFunction    (0X46E4,0X46FA);
	SetFunctionFlags(0X46E4,0x0);
	MakeFunction    (0X4706,0X471A);
	SetFunctionFlags(0X4706,0x0);
	MakeFunction    (0X471A,0X4726);
	SetFunctionFlags(0X471A,0x0);
	MakeFunction    (0X4726,0X472E);
	SetFunctionFlags(0X4726,0x0);
	MakeFunction    (0X472E,0X474A);
	SetFunctionFlags(0X472E,0x0);
	MakeFunction    (0X474A,0X4758);
	SetFunctionFlags(0X474A,0x0);
	MakeFunction    (0X4758,0X47D0);
	SetFunctionFlags(0X4758,0x0);
	MakeFunction    (0X47D0,0X4814);
	SetFunctionFlags(0X47D0,0x0);
	MakeFunction    (0X4814,0X482A);
	SetFunctionFlags(0X4814,0x0);
	MakeFunction    (0X483E,0X4876);
	SetFunctionFlags(0X483E,0x0);
	MakeFunction    (0X4876,0X487E);
	SetFunctionFlags(0X4876,0x0);
	MakeFunction    (0X487E,0X488C);
	SetFunctionFlags(0X487E,0x0);
	MakeFunction    (0X48A4,0X48E4);
	SetFunctionFlags(0X48A4,0x0);
	MakeFunction    (0X48E4,0X492C);
	SetFunctionFlags(0X48E4,0x0);
	MakeFunction    (0X492C,0X4932);
	SetFunctionFlags(0X492C,0x0);
	MakeFunction    (0X4964,0X497C);
	SetFunctionFlags(0X4964,0x0);
	MakeFunction    (0X497C,0X49EE);
	SetFunctionFlags(0X497C,0x0);
	MakeFunction    (0X4C0E,0X4C22);
	SetFunctionFlags(0X4C0E,0x0);
	MakeFunction    (0X4C32,0X4CC6);
	SetFunctionFlags(0X4C32,0x0);
	MakeFunction    (0X4CC6,0X4CFC);
	SetFunctionFlags(0X4CC6,0x0);
	MakeFunction    (0X4CFC,0X4D00);
	SetFunctionFlags(0X4CFC,0x0);
	MakeFunction    (0X4D00,0X4D20);
	SetFunctionFlags(0X4D00,0x0);
	MakeFunction    (0X4D20,0X4D4E);
	SetFunctionFlags(0X4D20,0x0);
	MakeFunction    (0X4D4E,0X4D64);
	SetFunctionFlags(0X4D4E,0x0);
	MakeFunction    (0X4D64,0X4D88);
	SetFunctionFlags(0X4D64,0x0);
	MakeFunction    (0X4D88,0X4D9A);
	SetFunctionFlags(0X4D88,0x0);
	MakeFunction    (0X4D9A,0X4F00);
	SetFunctionFlags(0X4D9A,0x0);
	MakeFunction    (0X4F00,0X50E2);
	SetFunctionFlags(0X4F00,0x0);
	MakeFunction    (0X51D2,0X530E);
	SetFunctionFlags(0X51D2,0x0);
	MakeFunction    (0X550C,0X5532);
	SetFunctionFlags(0X550C,0x0);
	MakeFunction    (0X5532,0X5544);
	SetFunctionFlags(0X5532,0x0);
	MakeFunction    (0X5544,0X5556);
	SetFunctionFlags(0X5544,0x0);
	MakeFunction    (0X5556,0X5568);
	SetFunctionFlags(0X5556,0x0);
	MakeFunction    (0X5568,0X557A);
	SetFunctionFlags(0X5568,0x0);
	MakeFunction    (0X557A,0X558E);
	SetFunctionFlags(0X557A,0x0);
	MakeFunction    (0X558E,0X55CC);
	SetFunctionFlags(0X558E,0x0);
	MakeFunction    (0X560C,0X5616);
	SetFunctionFlags(0X560C,0x0);
	MakeFrame(0X560C, 0X0, 0, 0X0);
	MakeFunction    (0X5616,0X5744);
	SetFunctionFlags(0X5616,0x0);
	MakeFunction    (0X5744,0X57BA);
	SetFunctionFlags(0X5744,0x0);
	MakeFunction    (0X57BA,0X57EA);
	SetFunctionFlags(0X57BA,0x0);
	MakeFunction    (0X5A18,0X5A82);
	SetFunctionFlags(0X5A18,0x0);
	MakeFunction    (0X5A82,0X5A88);
	SetFunctionFlags(0X5A82,0x80);
	MakeFunction    (0X5A88,0X5A9E);
	SetFunctionFlags(0X5A88,0x0);
	MakeFunction    (0X5A9E,0X5B4A);
	SetFunctionFlags(0X5A9E,0x0);
	MakeFunction    (0X5B4A,0X5B54);
	SetFunctionFlags(0X5B4A,0x0);
	MakeFunction    (0X5B54,0X5B84);
	SetFunctionFlags(0X5B54,0x0);
	MakeFunction    (0X5B8C,0X5CE6);
	SetFunctionFlags(0X5B8C,0x0);
	MakeFunction    (0X5CE6,0X5CFC);
	SetFunctionFlags(0X5CE6,0x0);
	MakeFunction    (0X5CFC,0X5CFE);
	SetFunctionFlags(0X5CFC,0x0);
	MakeFunction    (0X5CFE,0X5EA0);
	SetFunctionFlags(0X5CFE,0x0);
	MakeFunction    (0X5EA0,0X5F4C);
	SetFunctionFlags(0X5EA0,0x0);
	MakeFunction    (0X5F4C,0X5FD6);
	SetFunctionFlags(0X5F4C,0x0);
	MakeFunction    (0X5FD6,0X5FE2);
	SetFunctionFlags(0X5FD6,0x0);
	MakeFunction    (0X5FE2,0X5FF8);
	SetFunctionFlags(0X5FE2,0x0);
	MakeFunction    (0X5FF8,0X6038);
	SetFunctionFlags(0X5FF8,0x0);
	MakeFunction    (0X6068,0X6078);
	SetFunctionFlags(0X6068,0x0);
	MakeFunction    (0X6078,0X609E);
	SetFunctionFlags(0X6078,0x0);
	MakeNameEx(0X608A, "@Loop", SN_LOCAL);
	MakeNameEx(0X6098, "@Break", SN_LOCAL);
	MakeFunction    (0X60AE,0X617C);
	SetFunctionFlags(0X60AE,0x0);
	MakeFunction    (0X617C,0X61D0);
	SetFunctionFlags(0X617C,0x0);
	MakeFunction    (0X61D0,0X6268);
	SetFunctionFlags(0X61D0,0x0);
	MakeFunction    (0X6268,0X628A);
	SetFunctionFlags(0X6268,0x0);
	MakeFunction    (0X6292,0X63B4);
	SetFunctionFlags(0X6292,0x0);
	MakeFunction    (0X63B4,0X6588);
	SetFunctionFlags(0X63B4,0x0);
	MakeFunction    (0X6588,0X6650);
	SetFunctionFlags(0X6588,0x0);
	MakeFunction    (0X6650,0X66FA);
	SetFunctionFlags(0X6650,0x0);
	MakeFunction    (0X66FA,0X6706);
	SetFunctionFlags(0X66FA,0x0);
	MakeFunction    (0X6706,0X679A);
	SetFunctionFlags(0X6706,0x0);
	MakeFunction    (0X679A,0X6894);
	SetFunctionFlags(0X679A,0x0);
	MakeNameEx(0X67C2, "@ClearEntities_Loop", SN_LOCAL);
	MakeNameEx(0X6804, "@PositionBattlePartyMembers_Loop", SN_LOCAL);
	MakeNameEx(0X682C, "@PositionReservePartyMembers", SN_LOCAL);
	MakeNameEx(0X6838, "@PositionReservePartyMembers_Loop", SN_LOCAL);
	MakeFunction    (0X6894,0X689C);
	SetFunctionFlags(0X6894,0x0);
	MakeFunction    (0X689C,0X690A);
	SetFunctionFlags(0X689C,0x0);
	MakeFunction    (0X690A,0X6916);
	SetFunctionFlags(0X690A,0x0);
	MakeFunction    (0X691E,0X6932);
	SetFunctionFlags(0X691E,0x0);
	MakeFunction    (0X6932,0X693A);
	SetFunctionFlags(0X6932,0x0);
	MakeFunction    (0X693A,0X69CA);
	SetFunctionFlags(0X693A,0x0);
	MakeFunction    (0X69CA,0X69D4);
	SetFunctionFlags(0X69CA,0x0);
	MakeFunction    (0X6A2E,0X6A7E);
	SetFunctionFlags(0X6A2E,0x0);
	MakeFunction    (0X6A7E,0X6AB8);
	SetFunctionFlags(0X6A7E,0x0);
	MakeFunction    (0X6B38,0X6C6E);
	SetFunctionFlags(0X6B38,0x0);
	MakeFunction    (0X6C6E,0X6CB6);
	SetFunctionFlags(0X6C6E,0x0);
	MakeFunction    (0X6CB6,0X6FA0);
	SetFunctionFlags(0X6CB6,0x0);
	MakeFunction    (0X6FA0,0X6FE6);
	SetFunctionFlags(0X6FA0,0x0);
	MakeNameEx(0X6FE4, "@Return", SN_LOCAL);
	MakeFunction    (0X6FE6,0X7020);
	SetFunctionFlags(0X6FE6,0x0);
	MakeFunction    (0X7020,0X703A);
	SetFunctionFlags(0X7020,0x0);
	MakeFunction    (0X703A,0X7054);
	SetFunctionFlags(0X703A,0x0);
	MakeFunction    (0X7054,0X7090);
	SetFunctionFlags(0X7054,0x0);
	MakeFunction    (0X7090,0X70A4);
	SetFunctionFlags(0X7090,0x0);
	MakeFunction    (0X70A4,0X70A6);
	SetFunctionFlags(0X70A4,0x0);
	MakeFunction    (0X70A6,0X70E0);
	SetFunctionFlags(0X70A6,0x0);
	MakeFunction    (0X70E8,0X7104);
	SetFunctionFlags(0X70E8,0x0);
	MakeFunction    (0X7104,0X71A2);
	SetFunctionFlags(0X7104,0x0);
	MakeFunction    (0X71A2,0X71C0);
	SetFunctionFlags(0X71A2,0x0);
	MakeFunction    (0X71C0,0X72A0);
	SetFunctionFlags(0X71C0,0x0);
	MakeFunction    (0X72A0,0X72D8);
	SetFunctionFlags(0X72A0,0x0);
	MakeFunction    (0X735A,0X73D4);
	SetFunctionFlags(0X735A,0x0);
	MakeFunction    (0X73D4,0X73EE);
	SetFunctionFlags(0X73D4,0x0);
	MakeNameEx(0X73D8, "@Loop", SN_LOCAL);
	MakeNameEx(0X73EC, "@Return", SN_LOCAL);
	MakeFunction    (0X77A4,0X788C);
	SetFunctionFlags(0X77A4,0x0);
	MakeFunction    (0X788C,0X7898);
	SetFunctionFlags(0X788C,0x0);
	MakeFunction    (0X7898,0X790A);
	SetFunctionFlags(0X7898,0x0);
	MakeFunction    (0X790A,0X79D6);
	SetFunctionFlags(0X790A,0x0);
	MakeFunction    (0X79D6,0X7AA6);
	SetFunctionFlags(0X79D6,0x0);
	MakeFunction    (0X7AA6,0X7B1A);
	SetFunctionFlags(0X7AA6,0x0);
	MakeFunction    (0X7B1A,0X7B58);
	SetFunctionFlags(0X7B1A,0x0);
	MakeFunction    (0X8000,0X8004);
	SetFunctionFlags(0X8000,0x80);
	MakeFunction    (0X8004,0X8008);
	SetFunctionFlags(0X8004,0x80);
	MakeFunction    (0X8008,0X800C);
	SetFunctionFlags(0X8008,0x80);
	MakeFunction    (0X800C,0X8010);
	SetFunctionFlags(0X800C,0x80);
	MakeFunction    (0X8010,0X8014);
	SetFunctionFlags(0X8010,0x80);
	MakeFunction    (0X8014,0X8018);
	SetFunctionFlags(0X8014,0x80);
	MakeFunction    (0X8018,0X801C);
	SetFunctionFlags(0X8018,0x80);
	MakeFunction    (0X801C,0X8020);
	SetFunctionFlags(0X801C,0xc0);
	MakeFunction    (0X8020,0X8024);
	SetFunctionFlags(0X8020,0xc0);
	MakeFunction    (0X8024,0X8028);
	SetFunctionFlags(0X8024,0x80);
	MakeFunction    (0X8028,0X802C);
	SetFunctionFlags(0X8028,0x80);
	MakeFunction    (0X802C,0X8030);
	SetFunctionFlags(0X802C,0x80);
	MakeFunction    (0X8030,0X8034);
	SetFunctionFlags(0X8030,0x80);
	MakeFunction    (0X8034,0X8038);
	SetFunctionFlags(0X8034,0x80);
	MakeFunction    (0X8038,0X803C);
	SetFunctionFlags(0X8038,0x80);
	MakeFunction    (0X803C,0X8040);
	SetFunctionFlags(0X803C,0x80);
	MakeFunction    (0X8040,0X8044);
	SetFunctionFlags(0X8040,0x80);
	MakeFunction    (0X8044,0X8048);
	SetFunctionFlags(0X8044,0x80);
	MakeFunction    (0X8048,0X804C);
	SetFunctionFlags(0X8048,0x80);
	MakeFunction    (0X804C,0X8050);
	SetFunctionFlags(0X804C,0xc0);
	MakeFunction    (0X8050,0X8054);
	SetFunctionFlags(0X8050,0xc0);
	MakeFunction    (0X8054,0X8058);
	SetFunctionFlags(0X8054,0x80);
	MakeFunction    (0X8058,0X805C);
	SetFunctionFlags(0X8058,0x80);
	MakeFunction    (0X805C,0X8060);
	SetFunctionFlags(0X805C,0x80);
	MakeFunction    (0X8060,0X8064);
	SetFunctionFlags(0X8060,0x80);
	MakeFunction    (0X8064,0X8068);
	SetFunctionFlags(0X8064,0x80);
	MakeFunction    (0X8068,0X806C);
	SetFunctionFlags(0X8068,0x80);
	MakeFunction    (0X806C,0X8070);
	SetFunctionFlags(0X806C,0x80);
	MakeFunction    (0X8070,0X8074);
	SetFunctionFlags(0X8070,0xc0);
	MakeFunction    (0X8074,0X8078);
	SetFunctionFlags(0X8074,0x80);
	MakeFunction    (0X8078,0X807C);
	SetFunctionFlags(0X8078,0x80);
	MakeFunction    (0X807C,0X8080);
	SetFunctionFlags(0X807C,0x80);
	MakeFunction    (0X8080,0X8084);
	SetFunctionFlags(0X8080,0x80);
	MakeFunction    (0X8084,0X8088);
	SetFunctionFlags(0X8084,0x80);
	MakeFunction    (0X8088,0X808C);
	SetFunctionFlags(0X8088,0x80);
	MakeFunction    (0X808C,0X8090);
	SetFunctionFlags(0X808C,0x80);
	MakeFunction    (0X8090,0X8094);
	SetFunctionFlags(0X8090,0x80);
	MakeFunction    (0X8094,0X8098);
	SetFunctionFlags(0X8094,0xc0);
	MakeFunction    (0X8098,0X809C);
	SetFunctionFlags(0X8098,0x80);
	MakeFunction    (0X809C,0X80A0);
	SetFunctionFlags(0X809C,0x80);
	MakeFunction    (0X80A0,0X80A4);
	SetFunctionFlags(0X80A0,0x80);
	MakeFunction    (0X80A4,0X80A8);
	SetFunctionFlags(0X80A4,0x80);
	MakeFunction    (0X80A8,0X80AC);
	SetFunctionFlags(0X80A8,0x80);
	MakeFunction    (0X80AC,0X80B0);
	SetFunctionFlags(0X80AC,0x80);
	MakeFunction    (0X80B0,0X80B4);
	SetFunctionFlags(0X80B0,0x80);
	MakeFunction    (0X80B4,0X80B8);
	SetFunctionFlags(0X80B4,0x80);
	MakeFunction    (0X80B8,0X80BC);
	SetFunctionFlags(0X80B8,0x80);
	MakeFunction    (0X80BC,0X80C0);
	SetFunctionFlags(0X80BC,0x80);
	MakeFunction    (0X80C0,0X80C4);
	SetFunctionFlags(0X80C0,0x80);
	MakeFunction    (0X80C4,0X80C8);
	SetFunctionFlags(0X80C4,0x80);
	MakeFunction    (0X80C8,0X80CC);
	SetFunctionFlags(0X80C8,0x80);
	MakeFunction    (0X80CC,0X80D0);
	SetFunctionFlags(0X80CC,0x80);
	MakeFunction    (0X80D0,0X80D4);
	SetFunctionFlags(0X80D0,0x80);
	MakeFunction    (0X80D4,0X80D8);
	SetFunctionFlags(0X80D4,0x80);
	MakeFunction    (0X80D8,0X80DC);
	SetFunctionFlags(0X80D8,0x80);
	MakeFunction    (0X80DC,0X80E0);
	SetFunctionFlags(0X80DC,0x80);
	MakeFunction    (0X80E0,0X80E2);
	SetFunctionFlags(0X80E0,0x0);
	MakeFunction    (0X80E2,0X811A);
	SetFunctionFlags(0X80E2,0x0);
	MakeFunction    (0X811A,0X830A);
	SetFunctionFlags(0X811A,0x0);
	MakeFunction    (0X830A,0X8332);
	SetFunctionFlags(0X830A,0x0);
	MakeFunction    (0X8332,0X83E6);
	SetFunctionFlags(0X8332,0x0);
	MakeFunction    (0X83E6,0X849C);
	SetFunctionFlags(0X83E6,0x0);
	MakeFunction    (0X849C,0X84AE);
	SetFunctionFlags(0X849C,0x0);
	MakeFunction    (0X84AE,0X853E);
	SetFunctionFlags(0X84AE,0x0);
	MakeFunction    (0X853E,0X85C2);
	SetFunctionFlags(0X853E,0x0);
	MakeFunction    (0X85C2,0X8650);
	SetFunctionFlags(0X85C2,0x0);
	MakeFunction    (0X8650,0X86DA);
	SetFunctionFlags(0X8650,0x0);
	MakeFunction    (0X86DA,0X875A);
	SetFunctionFlags(0X86DA,0x0);
	MakeFunction    (0X875A,0X8770);
	SetFunctionFlags(0X875A,0x0);
	MakeFunction    (0X8770,0X87A2);
	SetFunctionFlags(0X8770,0x0);
	MakeFunction    (0X87AA,0X87D2);
	SetFunctionFlags(0X87AA,0x0);
	MakeFunction    (0X87D2,0X8986);
	SetFunctionFlags(0X87D2,0x0);
	MakeFunction    (0X8986,0X89FE);
	SetFunctionFlags(0X8986,0x0);
	MakeFunction    (0X89FE,0X8A22);
	SetFunctionFlags(0X89FE,0x0);
	MakeNameEx(0X8A20, "@Return", SN_LOCAL);
	MakeFunction    (0X8A22,0X8A8A);
	SetFunctionFlags(0X8A22,0x0);
	MakeFunction    (0X8A8A,0X8AF4);
	SetFunctionFlags(0X8A8A,0x0);
	MakeFunction    (0X8AF4,0X8B80);
	SetFunctionFlags(0X8AF4,0x0);
	MakeFunction    (0X8B80,0X8BA8);
	SetFunctionFlags(0X8B80,0x0);
	MakeNameEx(0X8BA6, "@Return", SN_LOCAL);
	MakeFunction    (0X8BA8,0X8C12);
	SetFunctionFlags(0X8BA8,0x0);
	MakeFunction    (0X8C12,0X8C7C);
	SetFunctionFlags(0X8C12,0x0);
	MakeFunction    (0X8C7C,0X8CD4);
	SetFunctionFlags(0X8C7C,0x0);
	MakeFunction    (0X8CD4,0X8D66);
	SetFunctionFlags(0X8CD4,0x0);
	MakeFunction    (0X8D66,0X8D6E);
	SetFunctionFlags(0X8D66,0x0);
	MakeFunction    (0X8D6E,0X8DDE);
	SetFunctionFlags(0X8D6E,0x0);
	MakeFunction    (0X8DDE,0X8DE0);
	SetFunctionFlags(0X8DDE,0x0);
	MakeFunction    (0X8DE0,0X8DE2);
	SetFunctionFlags(0X8DE0,0x0);
	MakeFunction    (0X8DE2,0X8E52);
	SetFunctionFlags(0X8DE2,0x0);
	MakeFunction    (0X8E52,0X8EBC);
	SetFunctionFlags(0X8E52,0x0);
	MakeFunction    (0X8EBC,0X8F5C);
	SetFunctionFlags(0X8EBC,0x0);
	MakeNameEx(0X8EC4, "@ClearList_Loop", SN_LOCAL);
	MakeNameEx(0X8ED0, "@RandomizeAgility_Loop", SN_LOCAL);
	MakeNameEx(0X8EE8, "@Continue", SN_LOCAL);
	MakeNameEx(0X8F18, "@Default", SN_LOCAL);
	MakeNameEx(0X8F22, "@MoveTurnOrderData", SN_LOCAL);
	MakeNameEx(0X8F26, "@LoadTurnOrderData", SN_LOCAL);
	MakeNameEx(0X8F38, "@Sort", SN_LOCAL);
	MakeNameEx(0X8F3A, "@Sort_MainLoop", SN_LOCAL);
	MakeNameEx(0X8F40, "@Sort_InnerLoop", SN_LOCAL);
	MakeNameEx(0X8F50, "@Next", SN_LOCAL);
	MakeFunction    (0X8F5C,0X8F9E);
	SetFunctionFlags(0X8F5C,0x0);
	MakeFunction    (0X9126,0X930E);
	SetFunctionFlags(0X9126,0x0);
	MakeFunction    (0X93C4,0X93E4);
	SetFunctionFlags(0X93C4,0x0);
	MakeFunction    (0X944C,0X945C);
	SetFunctionFlags(0X944C,0x0);
	MakeFunction    (0X945C,0X9478);
	SetFunctionFlags(0X945C,0x0);
	MakeFunction    (0X9486,0X9488);
	SetFunctionFlags(0X9486,0x0);
	MakeFunction    (0X9488,0X9498);
	SetFunctionFlags(0X9488,0x0);
	MakeFunction    (0X94A8,0X94AA);
	SetFunctionFlags(0X94A8,0x0);
	MakeFunction    (0X94AA,0X94AC);
	SetFunctionFlags(0X94AA,0x0);
	MakeFunction    (0X94AC,0X94BC);
	SetFunctionFlags(0X94AC,0x0);
	MakeFunction    (0X94BC,0X94BE);
	SetFunctionFlags(0X94BC,0x0);
	MakeFunction    (0X94BE,0X94CE);
	SetFunctionFlags(0X94BE,0x0);
	MakeFunction    (0X94CE,0X94DE);
	SetFunctionFlags(0X94CE,0x0);
	MakeFunction    (0X94DE,0X94EE);
	SetFunctionFlags(0X94DE,0x0);
	MakeFunction    (0X94EE,0X94F0);
	SetFunctionFlags(0X94EE,0x0);
	MakeFunction    (0X94F0,0X9500);
	SetFunctionFlags(0X94F0,0x0);
	MakeFunction    (0X9500,0X9502);
	SetFunctionFlags(0X9500,0x0);
	MakeFunction    (0X9502,0X9512);
	SetFunctionFlags(0X9502,0x0);
	MakeFunction    (0X9512,0X9542);
	SetFunctionFlags(0X9512,0x0);
	MakeFunction    (0X9542,0X9544);
	SetFunctionFlags(0X9542,0x0);
	MakeFunction    (0X9544,0X9554);
	SetFunctionFlags(0X9544,0x0);
	MakeFunction    (0X9554,0X9564);
	SetFunctionFlags(0X9554,0x0);
	MakeFunction    (0X9564,0X9566);
	SetFunctionFlags(0X9564,0x0);
	MakeFunction    (0X9566,0X9576);
	SetFunctionFlags(0X9566,0x0);
	MakeFunction    (0X9576,0X9578);
	SetFunctionFlags(0X9576,0x0);
	MakeFunction    (0X9578,0X95E2);
	SetFunctionFlags(0X9578,0x0);
	MakeFunction    (0X95E2,0X95E4);
	SetFunctionFlags(0X95E2,0x0);
	MakeFunction    (0X95E4,0X9602);
	SetFunctionFlags(0X95E4,0x0);
	MakeFunction    (0X9602,0X968A);
	SetFunctionFlags(0X9602,0x0);
	MakeFunction    (0X968A,0X96AE);
	SetFunctionFlags(0X968A,0x0);
	MakeFunction    (0X96AE,0X96FC);
	SetFunctionFlags(0X96AE,0x0);
	MakeFunction    (0X96FC,0X9718);
	SetFunctionFlags(0X96FC,0x0);
	MakeFunction    (0X9718,0X9734);
	SetFunctionFlags(0X9718,0x0);
	MakeFunction    (0X9734,0X9754);
	SetFunctionFlags(0X9734,0x0);
	MakeFunction    (0X97F4,0X9872);
	SetFunctionFlags(0X97F4,0x0);
	MakeFunction    (0X9872,0X98A8);
	SetFunctionFlags(0X9872,0x0);
	MakeFunction    (0X98A8,0X9940);
	SetFunctionFlags(0X98A8,0x0);
	MakeFunction    (0X9940,0X99CC);
	SetFunctionFlags(0X9940,0x0);
	MakeFunction    (0X99CC,0X99FC);
	SetFunctionFlags(0X99CC,0x0);
	MakeFunction    (0X99FC,0X9A0E);
	SetFunctionFlags(0X99FC,0x0);
	MakeFunction    (0X9A8A,0X9A8C);
	SetFunctionFlags(0X9A8A,0x0);
	MakeFrame(0X9A8A, 0X0, 0, 0X0);
	MakeFunction    (0X9A8C,0X9A9A);
	SetFunctionFlags(0X9A8C,0x0);
	MakeFunction    (0X9A9A,0X9B4E);
	SetFunctionFlags(0X9A9A,0x0);
	MakeFunction    (0X9B4E,0X9BAA);
	SetFunctionFlags(0X9B4E,0x0);
	MakeFunction    (0X9BAA,0X9BCA);
	SetFunctionFlags(0X9BAA,0x0);
	MakeFunction    (0X9BD0,0X9D08);
	SetFunctionFlags(0X9BD0,0x0);
	MakeFunction    (0X9D08,0X9FB0);
	SetFunctionFlags(0X9D08,0x0);
	MakeFunction    (0X9FB0,0XA026);
	SetFunctionFlags(0X9FB0,0x0);
	MakeFunction    (0XA1AE,0XA202);
	SetFunctionFlags(0XA1AE,0x0);
	MakeFunction    (0XA202,0XA30A);
	SetFunctionFlags(0XA202,0x0);
	MakeFunction    (0XA30A,0XA374);
	SetFunctionFlags(0XA30A,0x0);
	MakeFunction    (0XA37C,0XA3EE);
	SetFunctionFlags(0XA37C,0x0);
	MakeFunction    (0XA3EE,0XA530);
	SetFunctionFlags(0XA3EE,0x0);
	MakeFunction    (0XA530,0XA5EA);
	SetFunctionFlags(0XA530,0x0);
	MakeFunction    (0XA5EA,0XA650);
	SetFunctionFlags(0XA5EA,0x0);
	MakeFunction    (0XA650,0XA656);
	SetFunctionFlags(0XA650,0x0);
	MakeFunction    (0XA656,0XA6CE);
	SetFunctionFlags(0XA656,0x0);
	MakeFunction    (0XA6CE,0XA8C0);
	SetFunctionFlags(0XA6CE,0x0);
	MakeFunction    (0XA8C0,0XA8D4);
	SetFunctionFlags(0XA8C0,0x0);
	MakeFunction    (0XA8D4,0XAAAA);
	SetFunctionFlags(0XA8D4,0x0);
	MakeFrame(0XA8D4, 0X0, 0, 0X0);
	MakeFunction    (0XAAAA,0XAAE4);
	SetFunctionFlags(0XAAAA,0x0);
	MakeFunction    (0XAAE4,0XAB08);
	SetFunctionFlags(0XAAE4,0x0);
	MakeFunction    (0XAB10,0XAB16);
	SetFunctionFlags(0XAB10,0xc0);
	MakeFunction    (0XAB16,0XAB1C);
	SetFunctionFlags(0XAB16,0xc0);
	MakeFunction    (0XAB1C,0XAB22);
	SetFunctionFlags(0XAB1C,0xc0);
	MakeFunction    (0XAB2C,0XAB40);
	SetFunctionFlags(0XAB2C,0x0);
	MakeFunction    (0XAB40,0XAB5C);
	SetFunctionFlags(0XAB40,0x0);
	MakeFunction    (0XAB5C,0XAB9C);
	SetFunctionFlags(0XAB5C,0x0);
	MakeFunction    (0XAB9C,0XABEE);
	SetFunctionFlags(0XAB9C,0x0);
	MakeFunction    (0XABF6,0XAC44);
	SetFunctionFlags(0XABF6,0x0);
	MakeFunction    (0XAC44,0XAC62);
	SetFunctionFlags(0XAC44,0x0);
	MakeFunction    (0XAC80,0XAC84);
	SetFunctionFlags(0XAC80,0x0);
	MakeFunction    (0XAC86,0XACD4);
	SetFunctionFlags(0XAC86,0x0);
	MakeFunction    (0XACD4,0XACE4);
	SetFunctionFlags(0XACD4,0x0);
	MakeFunction    (0XACE4,0XAD3A);
	SetFunctionFlags(0XACE4,0x0);
	MakeFunction    (0XAD3A,0XADA6);
	SetFunctionFlags(0XAD3A,0x0);
	MakeFunction    (0XADA6,0XADB8);
	SetFunctionFlags(0XADA6,0x0);
	MakeFunction    (0XADB8,0XADC8);
	SetFunctionFlags(0XADB8,0x0);
	MakeFunction    (0XADD0,0XADD4);
	SetFunctionFlags(0XADD0,0x0);
	MakeFrame(0XADD0, 0X1, 0, 0X0);
	MakeFunction    (0XADD4,0XADD8);
	SetFunctionFlags(0XADD4,0x0);
	MakeFrame(0XADD4, 0XFFFFFFFF, 0, 0X0);
	MakeFunction    (0XADD8,0XADDC);
	SetFunctionFlags(0XADD8,0x0);
	MakeFrame(0XADD8, 0X1, 0, 0X0);
	MakeFunction    (0XADDC,0XADE0);
	SetFunctionFlags(0XADDC,0x0);
	MakeFrame(0XADDC, 0XFFFFFFFF, 0, 0X0);
	MakeFunction    (0XAE36,0XAE3A);
	SetFunctionFlags(0XAE36,0x0);
	MakeFunction    (0XAE3A,0XAEA8);
	SetFunctionFlags(0XAE3A,0x0);
	MakeNameEx(0XAE56, "@Loop", SN_LOCAL);
	MakeFunction    (0XAEA8,0XAF66);
	SetFunctionFlags(0XAEA8,0x0);
	MakeFunction    (0XAF66,0XAF70);
	SetFunctionFlags(0XAF66,0x0);
	MakeFunction    (0XAF70,0XAF84);
	SetFunctionFlags(0XAF70,0x0);
	MakeFunction    (0XAF84,0XB030);
	SetFunctionFlags(0XAF84,0x0);
	MakeFunction    (0XB030,0XB042);
	SetFunctionFlags(0XB030,0x0);
	MakeFunction    (0XB042,0XB054);
	SetFunctionFlags(0XB042,0x0);
	MakeFunction    (0XB054,0XB092);
	SetFunctionFlags(0XB054,0x0);
	MakeFunction    (0XB092,0XB0B8);
	SetFunctionFlags(0XB092,0x0);
	MakeFunction    (0XB0B8,0XB274);
	SetFunctionFlags(0XB0B8,0x0);
	MakeFunction    (0XB274,0XB29C);
	SetFunctionFlags(0XB274,0x0);
	MakeFunction    (0XB29C,0XB2AC);
	SetFunctionFlags(0XB29C,0x0);
	MakeNameEx(0XB2AA, "@Return", SN_LOCAL);
	MakeFunction    (0XB2AC,0XB46A);
	SetFunctionFlags(0XB2AC,0x0);
	MakeFunction    (0XB46E,0XB4A6);
	SetFunctionFlags(0XB46E,0x0);
	MakeFunction    (0XB4A6,0XB4F8);
	SetFunctionFlags(0XB4A6,0x0);
	MakeFunction    (0XB4F8,0XB5F2);
	SetFunctionFlags(0XB4F8,0x0);
	MakeFunction    (0XB5F2,0XB67C);
	SetFunctionFlags(0XB5F2,0x0);
	MakeFrame(0XB5F2, 0X0, 0, 0X0);
	MakeNameEx(0XB610, "@WriteSpells_Loop", SN_LOCAL);
	MakeNameEx(0XB6FC, "WriteNothingStringUnderSpells", SN_LOCAL);
	MakeNameEx(0XB710, "WriteItemNamesAndIcons", SN_LOCAL);
	MakeNameEx(0XB72A, "@WriteItems_Loop", SN_LOCAL);
	MakeNameEx(0XB782, "@NextItem", SN_LOCAL);
	MakeNameEx(0XB78A, "@Return", SN_LOCAL);
	MakeNameEx(0XB79C, "WriteNothingStringUnderItems", SN_LOCAL);
	MakeFunction    (0XB7B4,0XB7D8);
	SetFunctionFlags(0XB7B4,0x0);
	MakeFunction    (0XB7D8,0XB87A);
	SetFunctionFlags(0XB7D8,0x0);
	MakeFunction    (0XB87A,0XB900);
	SetFunctionFlags(0XB87A,0x0);
	MakeFunction    (0XB900,0XB926);
	SetFunctionFlags(0XB900,0x0);
	MakeFunction    (0XB926,0XB936);
	SetFunctionFlags(0XB926,0x0);
	MakeFunction    (0XB936,0XB982);
	SetFunctionFlags(0XB936,0x0);
	MakeFunction    (0XBE3A,0XBE50);
	SetFunctionFlags(0XBE3A,0x0);
	MakeFunction    (0XBE50,0XBE6C);
	SetFunctionFlags(0XBE50,0x0);
	MakeFunction    (0XBE94,0XBEC0);
	SetFunctionFlags(0XBE94,0x0);
	MakeFunction    (0XBEC0,0XBEE0);
	SetFunctionFlags(0XBEC0,0x0);
	MakeFunction    (0XBEE0,0XBF08);
	SetFunctionFlags(0XBEE0,0x0);
	MakeFunction    (0XBF08,0XBF10);
	SetFunctionFlags(0XBF08,0x0);
	MakeFunction    (0XBF10,0XBF14);
	SetFunctionFlags(0XBF10,0x0);
	MakeFunction    (0XBF14,0XC154);
	SetFunctionFlags(0XBF14,0x0);
	MakeFunction    (0XC154,0XC16A);
	SetFunctionFlags(0XC154,0x0);
	MakeFunction    (0XC16A,0XC1A6);
	SetFunctionFlags(0XC16A,0x0);
	MakeFunction    (0XC1A6,0XC1DA);
	SetFunctionFlags(0XC1A6,0x0);
	MakeFunction    (0XC1DA,0XC1EA);
	SetFunctionFlags(0XC1DA,0x0);
	MakeFunction    (0XC1EA,0XC244);
	SetFunctionFlags(0XC1EA,0x0);
	MakeFunction    (0XC244,0XC262);
	SetFunctionFlags(0XC244,0x0);
	MakeFunction    (0XC262,0XC29C);
	SetFunctionFlags(0XC262,0x0);
	MakeFunction    (0XC29C,0XC362);
	SetFunctionFlags(0XC29C,0x0);
	MakeFunction    (0XC3AA,0XC46A);
	SetFunctionFlags(0XC3AA,0x0);
	MakeFunction    (0XC46A,0XC480);
	SetFunctionFlags(0XC46A,0x0);
	MakeFunction    (0XC480,0XC6C6);
	SetFunctionFlags(0XC480,0x0);
	MakeFunction    (0XC6C6,0XC6EE);
	SetFunctionFlags(0XC6C6,0x0);
	MakeNameEx(0XC6E0, "@Continue", SN_LOCAL);
	MakeNameEx(0XC6EC, "@Return", SN_LOCAL);
	MakeFunction    (0XC73A,0XC74E);
	SetFunctionFlags(0XC73A,0x0);
	MakeFunction    (0XCED8,0XCF1E);
	SetFunctionFlags(0XCED8,0x0);
	MakeFunction    (0XCF1E,0XCF66);
	SetFunctionFlags(0XCF1E,0x0);
	MakeFunction    (0XCF66,0XCF8C);
	SetFunctionFlags(0XCF66,0x0);
	MakeFunction    (0XCF8C,0XCFA6);
	SetFunctionFlags(0XCF8C,0x0);
	MakeFunction    (0XCFA6,0XCFAC);
	SetFunctionFlags(0XCFA6,0x0);
	MakeFrame(0XCFA6, 0X0, 0, 0X0);
	MakeFunction    (0XCFAC,0XD19A);
	SetFunctionFlags(0XCFAC,0x0);
	MakeFunction    (0XD19A,0XD1AE);
	SetFunctionFlags(0XD19A,0x0);
	MakeFunction    (0XD1B2,0XD1D8);
	SetFunctionFlags(0XD1B2,0x0);
	MakeFunction    (0XD1D8,0XD21E);
	SetFunctionFlags(0XD1D8,0x0);
	MakeFunction    (0XD21E,0XD230);
	SetFunctionFlags(0XD21E,0x0);
	MakeNameEx(0XD226, "@CheckMaxValue", SN_LOCAL);
	MakeNameEx(0XD22E, "@Return", SN_LOCAL);
	MakeFunction    (0XD32C,0XD39A);
	SetFunctionFlags(0XD32C,0x0);
	MakeFunction    (0XD75A,0XD774);
	SetFunctionFlags(0XD75A,0x0);
	MakeFunction    (0XD774,0XDA12);
	SetFunctionFlags(0XD774,0x0);
	MakeFunction    (0XDA12,0XDA28);
	SetFunctionFlags(0XDA12,0x0);
	MakeFunction    (0XDA28,0XDA3E);
	SetFunctionFlags(0XDA28,0x0);
	MakeFunction    (0XDA3E,0XDA78);
	SetFunctionFlags(0XDA3E,0x0);
	MakeFunction    (0XDA78,0XDA86);
	SetFunctionFlags(0XDA78,0x0);
	MakeFunction    (0XDA86,0XDAAA);
	SetFunctionFlags(0XDA86,0x0);
	MakeFunction    (0XDAAA,0XDADA);
	SetFunctionFlags(0XDAAA,0x0);
	MakeFunction    (0XDAE2,0XDAFC);
	SetFunctionFlags(0XDAE2,0x0);
	MakeFunction    (0XDAFC,0XDB76);
	SetFunctionFlags(0XDAFC,0x0);
	MakeFunction    (0XDB76,0XDB92);
	SetFunctionFlags(0XDB76,0x0);
	MakeFunction    (0XDB92,0XDC6E);
	SetFunctionFlags(0XDB92,0x0);
	MakeFunction    (0XDC6E,0XDCA4);
	SetFunctionFlags(0XDC6E,0x0);
	MakeFunction    (0XDCFA,0XDD0A);
	SetFunctionFlags(0XDCFA,0x0);
	MakeFunction    (0XDEC0,0XDEE4);
	SetFunctionFlags(0XDEC0,0x0);
	MakeFunction    (0XDEE4,0XDF08);
	SetFunctionFlags(0XDEE4,0x0);
	MakeFunction    (0XDF08,0XDF30);
	SetFunctionFlags(0XDF08,0x0);
	MakeFunction    (0XDF30,0XDF7E);
	SetFunctionFlags(0XDF30,0x0);
	MakeFunction    (0XDFEC,0XE02C);
	SetFunctionFlags(0XDFEC,0x0);
	MakeFunction    (0XE02C,0XE0B4);
	SetFunctionFlags(0XE02C,0x0);
	MakeFunction    (0XE0B4,0XE0F6);
	SetFunctionFlags(0XE0B4,0x0);
	MakeFunction    (0XE156,0XE1B4);
	SetFunctionFlags(0XE156,0x0);
	MakeFunction    (0XE1B4,0XE20A);
	SetFunctionFlags(0XE1B4,0x0);
	MakeFunction    (0XE20A,0XE286);
	SetFunctionFlags(0XE20A,0x0);
	MakeFunction    (0XE286,0XE2C2);
	SetFunctionFlags(0XE286,0x0);
	MakeFunction    (0XE2C2,0XE2D6);
	SetFunctionFlags(0XE2C2,0x0);
	MakeFunction    (0XE2D6,0XE2E8);
	SetFunctionFlags(0XE2D6,0x0);
	MakeFunction    (0XE2E8,0XE322);
	SetFunctionFlags(0XE2E8,0x0);
	MakeFunction    (0XE49E,0XE67A);
	SetFunctionFlags(0XE49E,0x0);
	MakeFunction    (0XE67A,0XE71A);
	SetFunctionFlags(0XE67A,0x0);
	MakeFunction    (0XE71A,0XE7A2);
	SetFunctionFlags(0XE71A,0x0);
	MakeFunction    (0XE7A2,0XE802);
	SetFunctionFlags(0XE7A2,0x0);
	MakeFunction    (0XE802,0XE83C);
	SetFunctionFlags(0XE802,0x0);
	MakeFunction    (0XE83C,0XE85A);
	SetFunctionFlags(0XE83C,0x0);
	MakeFunction    (0XE85A,0XE8C6);
	SetFunctionFlags(0XE85A,0x0);
	MakeFunction    (0XE8C6,0XE8FE);
	SetFunctionFlags(0XE8C6,0x0);
	MakeFunction    (0XE8FE,0XE900);
	SetFunctionFlags(0XE8FE,0x80);
	MakeFunction    (0XE900,0XE956);
	SetFunctionFlags(0XE900,0x0);
	MakeFunction    (0XE956,0XE98E);
	SetFunctionFlags(0XE956,0x0);
	MakeFunction    (0XE98E,0XE992);
	SetFunctionFlags(0XE98E,0x80);
	MakeFunction    (0XE992,0XE9F0);
	SetFunctionFlags(0XE992,0x0);
	MakeFunction    (0XE9F0,0XEA04);
	SetFunctionFlags(0XE9F0,0x0);
	MakeFunction    (0XEA04,0XEA66);
	SetFunctionFlags(0XEA04,0x0);
	MakeFunction    (0XEA66,0XEA72);
	SetFunctionFlags(0XEA66,0x0);
	MakeFunction    (0XEA72,0XEAA2);
	SetFunctionFlags(0XEA72,0x0);
	MakeFunction    (0XEAA2,0XEBB2);
	SetFunctionFlags(0XEAA2,0x0);
	MakeFunction    (0XEBB2,0XEBC0);
	SetFunctionFlags(0XEBB2,0x0);
	MakeFunction    (0XEBE0,0XEC28);
	SetFunctionFlags(0XEBE0,0x0);
	MakeFunction    (0XEC28,0XECA6);
	SetFunctionFlags(0XEC28,0x0);
	MakeFunction    (0XECA6,0XED5C);
	SetFunctionFlags(0XECA6,0x0);
	MakeFunction    (0XED5C,0XEDCC);
	SetFunctionFlags(0XED5C,0x0);
	MakeFunction    (0XEDCC,0XEE72);
	SetFunctionFlags(0XEDCC,0x0);
	MakeFunction    (0XEE9A,0XEEAC);
	SetFunctionFlags(0XEE9A,0x0);
	MakeFunction    (0XEEAC,0XEEEC);
	SetFunctionFlags(0XEEAC,0x0);
	MakeFunction    (0XEEEC,0XEF98);
	SetFunctionFlags(0XEEEC,0x0);
	MakeFunction    (0XEF98,0XF06A);
	SetFunctionFlags(0XEF98,0x0);
	MakeFunction    (0XF61E,0XF63A);
	SetFunctionFlags(0XF61E,0x0);
	MakeFunction    (0XF63A,0XF7CE);
	SetFunctionFlags(0XF63A,0x0);
	MakeFunction    (0XF7CE,0XFA46);
	SetFunctionFlags(0XF7CE,0x0);
	MakeFunction    (0XFA46,0XFA6C);
	SetFunctionFlags(0XFA46,0x0);
	MakeFunction    (0XFAC6,0XFB38);
	SetFunctionFlags(0XFAC6,0x0);
	MakeFunction    (0XFB38,0XFB68);
	SetFunctionFlags(0XFB38,0x0);
	MakeFunction    (0XFB68,0XFBD6);
	SetFunctionFlags(0XFB68,0x0);
	MakeFunction    (0XFBD6,0XFBF4);
	SetFunctionFlags(0XFBD6,0x0);
	MakeFunction    (0XFBF4,0XFC94);
	SetFunctionFlags(0XFBF4,0x0);
	MakeFrame(0XFBF4, 0X1, 0, 0X0);
	MakeFunction    (0XFC94,0XFD58);
	SetFunctionFlags(0XFC94,0x0);
	MakeFunction    (0X10000,0X10004);
	SetFunctionFlags(0X10000,0x80);
	MakeFunction    (0X10004,0X10008);
	SetFunctionFlags(0X10004,0xc0);
	MakeFunction    (0X10008,0X1000C);
	SetFunctionFlags(0X10008,0x80);
	MakeFunction    (0X1000C,0X10010);
	SetFunctionFlags(0X1000C,0x80);
	MakeFunction    (0X10010,0X10014);
	SetFunctionFlags(0X10010,0x80);
	MakeFunction    (0X10014,0X10018);
	SetFunctionFlags(0X10014,0x80);
	MakeFunction    (0X10018,0X1001C);
	SetFunctionFlags(0X10018,0x80);
	MakeFunction    (0X10020,0X10024);
	SetFunctionFlags(0X10020,0x80);
	MakeFunction    (0X10024,0X10028);
	SetFunctionFlags(0X10024,0x80);
	MakeFunction    (0X10028,0X1002C);
	SetFunctionFlags(0X10028,0x80);
	MakeFunction    (0X10038,0X1003E);
	SetFunctionFlags(0X10038,0x80);
	MakeFunction    (0X1003E,0X10040);
	SetFunctionFlags(0X1003E,0x0);
	MakeFunction    (0X10040,0X10046);
	SetFunctionFlags(0X10040,0xc0);
	MakeFunction    (0X10046,0X10048);
	SetFunctionFlags(0X10046,0x0);
	MakeFunction    (0X10048,0X1004E);
	SetFunctionFlags(0X10048,0xc0);
	MakeFunction    (0X1004E,0X10050);
	SetFunctionFlags(0X1004E,0x0);
	MakeFunction    (0X10050,0X1005C);
	SetFunctionFlags(0X10050,0x0);
	MakeFunction    (0X1005C,0X1010E);
	SetFunctionFlags(0X1005C,0x0);
	MakeFunction    (0X1010E,0X10180);
	SetFunctionFlags(0X1010E,0x0);
	MakeFunction    (0X102D6,0X10310);
	SetFunctionFlags(0X102D6,0x0);
	MakeFunction    (0X10310,0X103EC);
	SetFunctionFlags(0X10310,0x0);
	MakeFunction    (0X1042C,0X1046C);
	SetFunctionFlags(0X1042C,0x0);
	MakeFunction    (0X1046C,0X104AC);
	SetFunctionFlags(0X1046C,0x0);
	MakeFunction    (0X104AC,0X104EC);
	SetFunctionFlags(0X104AC,0x0);
	MakeFunction    (0X104EC,0X1052C);
	SetFunctionFlags(0X104EC,0x0);
	MakeFunction    (0X1052C,0X10574);
	SetFunctionFlags(0X1052C,0x0);
	MakeFunction    (0X10574,0X105BA);
	SetFunctionFlags(0X10574,0x0);
	MakeFunction    (0X105BA,0X10606);
	SetFunctionFlags(0X105BA,0x0);
	MakeFunction    (0X10606,0X106E4);
	SetFunctionFlags(0X10606,0x0);
	MakeFunction    (0X106E4,0X106EC);
	SetFunctionFlags(0X106E4,0x0);
	MakeFunction    (0X106EC,0X106F6);
	SetFunctionFlags(0X106EC,0x0);
	MakeFunction    (0X106F6,0X1071E);
	SetFunctionFlags(0X106F6,0x0);
	MakeFunction    (0X1071E,0X107C6);
	SetFunctionFlags(0X1071E,0x0);
	MakeFunction    (0X107C6,0X1083A);
	SetFunctionFlags(0X107C6,0x0);
	MakeFunction    (0X10842,0X108BC);
	SetFunctionFlags(0X10842,0x0);
	MakeFunction    (0X108BC,0X1096C);
	SetFunctionFlags(0X108BC,0x0);
	MakeFunction    (0X1096C,0X10A6E);
	SetFunctionFlags(0X1096C,0x0);
	MakeFunction    (0X10A6E,0X10AA0);
	SetFunctionFlags(0X10A6E,0x0);
	MakeFunction    (0X10AA0,0X10AEE);
	SetFunctionFlags(0X10AA0,0x0);
	MakeFunction    (0X10AEE,0X10AFC);
	SetFunctionFlags(0X10AEE,0x0);
	MakeFunction    (0X10AFC,0X10B26);
	SetFunctionFlags(0X10AFC,0x0);
	MakeFunction    (0X10B26,0X10B5E);
	SetFunctionFlags(0X10B26,0x0);
	MakeFunction    (0X10B9E,0X10BA4);
	SetFunctionFlags(0X10B9E,0x0);
	MakeFunction    (0X10BA4,0X10BBC);
	SetFunctionFlags(0X10BA4,0x0);
	MakeFunction    (0X10BBC,0X10C00);
	SetFunctionFlags(0X10BBC,0x0);
	MakeFunction    (0X10C00,0X10C56);
	SetFunctionFlags(0X10C00,0x0);
	MakeFunction    (0X10C60,0X10C6C);
	SetFunctionFlags(0X10C60,0x0);
	MakeFunction    (0X10C6C,0X10C70);
	SetFunctionFlags(0X10C6C,0x0);
	MakeFunction    (0X10C70,0X10CA4);
	SetFunctionFlags(0X10C70,0x0);
	MakeFunction    (0X10CA4,0X10CCE);
	SetFunctionFlags(0X10CA4,0x0);
	MakeFunction    (0X10CCE,0X10CF6);
	SetFunctionFlags(0X10CCE,0x0);
	MakeFunction    (0X10CFE,0X10D20);
	SetFunctionFlags(0X10CFE,0x0);
	MakeFunction    (0X10D20,0X10D26);
	SetFunctionFlags(0X10D20,0x0);
	MakeFunction    (0X10D26,0X10D2C);
	SetFunctionFlags(0X10D26,0x0);
	MakeFunction    (0X10D2C,0X10D44);
	SetFunctionFlags(0X10D2C,0x0);
	MakeFunction    (0X10D44,0X10D8A);
	SetFunctionFlags(0X10D44,0x0);
	MakeFunction    (0X10D8A,0X10D92);
	SetFunctionFlags(0X10D8A,0x0);
	MakeFunction    (0X10D92,0X10DA0);
	SetFunctionFlags(0X10D92,0x0);
	MakeFunction    (0X10DA0,0X10DAE);
	SetFunctionFlags(0X10DA0,0x0);
	MakeFunction    (0X10DAE,0X10DBC);
	SetFunctionFlags(0X10DAE,0x0);
	MakeFunction    (0X10DBC,0X10DCA);
	SetFunctionFlags(0X10DBC,0x0);
	MakeFunction    (0X10DCA,0X10DD8);
	SetFunctionFlags(0X10DCA,0x0);
	MakeFunction    (0X10DD8,0X10DE6);
	SetFunctionFlags(0X10DD8,0x0);
	MakeFunction    (0X10DE6,0X10DF2);
	SetFunctionFlags(0X10DE6,0x0);
	MakeFunction    (0X10DF2,0X10DFE);
	SetFunctionFlags(0X10DF2,0x0);
	MakeFunction    (0X10DFE,0X10E0A);
	SetFunctionFlags(0X10DFE,0x0);
	MakeFunction    (0X10E0A,0X10E16);
	SetFunctionFlags(0X10E0A,0x0);
	MakeFunction    (0X10E16,0X10E22);
	SetFunctionFlags(0X10E16,0x0);
	MakeFunction    (0X10E22,0X10E38);
	SetFunctionFlags(0X10E22,0x0);
	MakeFunction    (0X10E38,0X10E60);
	SetFunctionFlags(0X10E38,0x0);
	MakeFunction    (0X10E60,0X10E9A);
	SetFunctionFlags(0X10E60,0x0);
	MakeFunction    (0X10EA8,0X10EE2);
	SetFunctionFlags(0X10EA8,0x0);
	MakeFunction    (0X10EE2,0X10F46);
	SetFunctionFlags(0X10EE2,0x0);
	MakeFunction    (0X10F46,0X10FA0);
	SetFunctionFlags(0X10F46,0x0);
	MakeFunction    (0X10FA0,0X10FB0);
	SetFunctionFlags(0X10FA0,0x0);
	MakeFunction    (0X10FB0,0X10FEE);
	SetFunctionFlags(0X10FB0,0x0);
	MakeFunction    (0X10FEE,0X10FFA);
	SetFunctionFlags(0X10FEE,0x0);
	MakeFunction    (0X10FFA,0X1103C);
	SetFunctionFlags(0X10FFA,0x0);
	MakeFunction    (0X1103C,0X1106C);
	SetFunctionFlags(0X1103C,0x0);
	MakeFunction    (0X1106C,0X1107A);
	SetFunctionFlags(0X1106C,0x0);
	MakeFunction    (0X1107A,0X11092);
	SetFunctionFlags(0X1107A,0x0);
	MakeFunction    (0X11092,0X1111E);
	SetFunctionFlags(0X11092,0x0);
	MakeFunction    (0X11126,0X11148);
	SetFunctionFlags(0X11126,0x0);
	MakeFunction    (0X11148,0X112BA);
	SetFunctionFlags(0X11148,0x0);
	MakeFunction    (0X112BA,0X113B8);
	SetFunctionFlags(0X112BA,0x0);
	MakeFunction    (0X113B8,0X113C2);
	SetFunctionFlags(0X113B8,0x0);
	MakeFunction    (0X113EE,0X113F4);
	SetFunctionFlags(0X113EE,0x0);
	MakeFunction    (0X114EC,0X114F2);
	SetFunctionFlags(0X114EC,0x0);
	MakeFunction    (0X114F2,0X114F8);
	SetFunctionFlags(0X114F2,0x0);
	MakeFunction    (0X114F8,0X11530);
	SetFunctionFlags(0X114F8,0x0);
	MakeFunction    (0X11530,0X11554);
	SetFunctionFlags(0X11530,0x0);
	MakeFunction    (0X11554,0X11570);
	SetFunctionFlags(0X11554,0x0);
	MakeFunction    (0X11570,0X115A4);
	SetFunctionFlags(0X11570,0x0);
	MakeFunction    (0X115A4,0X115F8);
	SetFunctionFlags(0X115A4,0x0);
	MakeFunction    (0X115F8,0X116F0);
	SetFunctionFlags(0X115F8,0x0);
	MakeFunction    (0X116F0,0X118C6);
	SetFunctionFlags(0X116F0,0x0);
	MakeFunction    (0X118C6,0X1190A);
	SetFunctionFlags(0X118C6,0x0);
	MakeFunction    (0X1190A,0X11940);
	SetFunctionFlags(0X1190A,0x0);
	MakeFunction    (0X11940,0X1195C);
	SetFunctionFlags(0X11940,0x0);
	MakeFunction    (0X1195C,0X11A30);
	SetFunctionFlags(0X1195C,0x0);
	MakeFunction    (0X11A30,0X11B14);
	SetFunctionFlags(0X11A30,0x0);
	MakeFunction    (0X11B4A,0X11BA0);
	SetFunctionFlags(0X11B4A,0x0);
	MakeFunction    (0X11BA0,0X11C0C);
	SetFunctionFlags(0X11BA0,0x0);
	MakeFunction    (0X11C0C,0X11C5C);
	SetFunctionFlags(0X11C0C,0x0);
	MakeFunction    (0X11C5C,0X11D2E);
	SetFunctionFlags(0X11C5C,0x0);
	MakeFunction    (0X11D36,0X11D52);
	SetFunctionFlags(0X11D36,0x0);
	MakeNameEx(0X11D40, "@Loop", SN_LOCAL);
	MakeNameEx(0X11D50, "@Return", SN_LOCAL);
	MakeFunction    (0X11D52,0X11D84);
	SetFunctionFlags(0X11D52,0x0);
	MakeFunction    (0X11D84,0X11DAA);
	SetFunctionFlags(0X11D84,0x0);
	MakeFunction    (0X11DAA,0X11DE6);
	SetFunctionFlags(0X11DAA,0x0);
	MakeFunction    (0X11DE6,0X11E0C);
	SetFunctionFlags(0X11DE6,0x0);
	MakeFunction    (0X11E0C,0X11E4C);
	SetFunctionFlags(0X11E0C,0x0);
	MakeFunction    (0X11E4C,0X11E72);
	SetFunctionFlags(0X11E4C,0x0);
	MakeFunction    (0X11E72,0X11EB2);
	SetFunctionFlags(0X11E72,0x0);
	MakeFunction    (0X11EB2,0X11EE0);
	SetFunctionFlags(0X11EB2,0x0);
	MakeFunction    (0X11F00,0X11F24);
	SetFunctionFlags(0X11F00,0x0);
	MakeFunction    (0X11F24,0X11F2C);
	SetFunctionFlags(0X11F24,0x0);
	MakeFunction    (0X11F2C,0X11F3A);
	SetFunctionFlags(0X11F2C,0x0);
	MakeFunction    (0X11F3A,0X11F4A);
	SetFunctionFlags(0X11F3A,0x0);
	MakeFunction    (0X11F4A,0X11F7C);
	SetFunctionFlags(0X11F4A,0x0);
	MakeFunction    (0X11F7C,0X11FA0);
	SetFunctionFlags(0X11F7C,0x0);
	MakeFunction    (0X11FA0,0X11FA8);
	SetFunctionFlags(0X11FA0,0x0);
	MakeFunction    (0X11FA8,0X11FB6);
	SetFunctionFlags(0X11FA8,0x0);
	MakeFunction    (0X11FB6,0X11FC6);
	SetFunctionFlags(0X11FB6,0x0);
	MakeFunction    (0X11FC6,0X11FF8);
	SetFunctionFlags(0X11FC6,0x0);
	MakeFunction    (0X11FF8,0X12C00);
	SetFunctionFlags(0X11FF8,0x0);
	MakeFunction    (0X12C62,0X12D06);
	SetFunctionFlags(0X12C62,0x0);
	MakeFunction    (0X12D06,0X12D72);
	SetFunctionFlags(0X12D06,0x0);
	MakeFunction    (0X12D74,0X12D8A);
	SetFunctionFlags(0X12D74,0x0);
	MakeNameEx(0X12D88, "@Return", SN_LOCAL);
	MakeFunction    (0X131A4,0X131B2);
	SetFunctionFlags(0X131A4,0x0);
	MakeFunction    (0X131B2,0X131BE);
	SetFunctionFlags(0X131B2,0x0);
	MakeFunction    (0X131BE,0X131F8);
	SetFunctionFlags(0X131BE,0x0);
	MakeFunction    (0X131F8,0X13214);
	SetFunctionFlags(0X131F8,0x0);
	MakeFunction    (0X13214,0X13248);
	SetFunctionFlags(0X13214,0x0);
	MakeFunction    (0X13248,0X137CA);
	SetFunctionFlags(0X13248,0x0);
	MakeFunction    (0X137CA,0X13804);
	SetFunctionFlags(0X137CA,0x0);
	MakeFrame(0X137CA, 0X1, 0, 0X0);
	MakeFunction    (0X13804,0X13828);
	SetFunctionFlags(0X13804,0x0);
	MakeFunction    (0X13828,0X139BE);
	SetFunctionFlags(0X13828,0x0);
	MakeFunction    (0X13A30,0X13A36);
	SetFunctionFlags(0X13A30,0x0);
	MakeFunction    (0X13A36,0X13D1E);
	SetFunctionFlags(0X13A36,0x80);
	MakeFrame(0X13A36, 0X0, 0, 0X0);
	MakeFunction    (0X13D1E,0X13D2C);
	SetFunctionFlags(0X13D1E,0x0);
	MakeFunction    (0X13D2C,0X13D38);
	SetFunctionFlags(0X13D2C,0x0);
	MakeFunction    (0X13D38,0X13D44);
	SetFunctionFlags(0X13D38,0x0);
	MakeFunction    (0X13D44,0X13D54);
	SetFunctionFlags(0X13D44,0x0);
	MakeFunction    (0X13D54,0X13DB0);
	SetFunctionFlags(0X13D54,0x0);
	MakeFunction    (0X13DB0,0X13DBE);
	SetFunctionFlags(0X13DB0,0x0);
	MakeFunction    (0X13DBE,0X13DD2);
	SetFunctionFlags(0X13DBE,0x0);
	MakeFunction    (0X13DD2,0X13EA0);
	SetFunctionFlags(0X13DD2,0x0);
	MakeFunction    (0X13EA0,0X13ED2);
	SetFunctionFlags(0X13EA0,0x0);
	MakeFunction    (0X13ED2,0X13F04);
	SetFunctionFlags(0X13ED2,0x0);
	MakeFrame(0X13ED2, 0XFFFFFFFF, 0, 0X0);
	MakeFunction    (0X13F04,0X13F60);
	SetFunctionFlags(0X13F04,0x0);
	MakeFunction    (0X13F60,0X13F70);
	SetFunctionFlags(0X13F60,0x0);
	MakeFunction    (0X13F70,0X13F80);
	SetFunctionFlags(0X13F70,0x0);
	MakeFunction    (0X13F80,0X13FB0);
	SetFunctionFlags(0X13F80,0x0);
	MakeFrame(0X13F80, 0X0, 0, 0X0);
	MakeFunction    (0X13FD2,0X14038);
	SetFunctionFlags(0X13FD2,0x0);
	MakeFunction    (0X14038,0X14090);
	SetFunctionFlags(0X14038,0x0);
	MakeFunction    (0X14090,0X140B6);
	SetFunctionFlags(0X14090,0x0);
	MakeFunction    (0X140B6,0X14198);
	SetFunctionFlags(0X140B6,0x0);
	MakeFunction    (0X14198,0X141AC);
	SetFunctionFlags(0X14198,0x0);
	MakeFunction    (0X141AC,0X141BC);
	SetFunctionFlags(0X141AC,0x0);
	MakeFunction    (0X141BC,0X141C6);
	SetFunctionFlags(0X141BC,0x0);
	MakeFunction    (0X141C6,0X141D6);
	SetFunctionFlags(0X141C6,0x0);
	MakeFunction    (0X141D6,0X141F2);
	SetFunctionFlags(0X141D6,0x0);
	MakeFunction    (0X141F2,0X14206);
	SetFunctionFlags(0X141F2,0x0);
	MakeFunction    (0X14206,0X14216);
	SetFunctionFlags(0X14206,0x0);
	MakeFunction    (0X14216,0X1423E);
	SetFunctionFlags(0X14216,0x0);
	MakeFunction    (0X1423E,0X14262);
	SetFunctionFlags(0X1423E,0x0);
	MakeFunction    (0X14262,0X14292);
	SetFunctionFlags(0X14262,0x0);
	MakeFunction    (0X14292,0X142D8);
	SetFunctionFlags(0X14292,0x0);
	MakeFunction    (0X142D8,0X14300);
	SetFunctionFlags(0X142D8,0x0);
	MakeFunction    (0X14300,0X14336);
	SetFunctionFlags(0X14300,0x0);
	MakeFunction    (0X14336,0X14356);
	SetFunctionFlags(0X14336,0x0);
	MakeFunction    (0X14356,0X14394);
	SetFunctionFlags(0X14356,0x0);
	MakeFunction    (0X14394,0X1439E);
	SetFunctionFlags(0X14394,0x0);
	MakeFunction    (0X1439E,0X143AE);
	SetFunctionFlags(0X1439E,0x0);
	MakeFunction    (0X143AE,0X143C0);
	SetFunctionFlags(0X143AE,0x0);
	MakeFunction    (0X143C0,0X143D4);
	SetFunctionFlags(0X143C0,0x0);
	MakeFunction    (0X143D4,0X143E0);
	SetFunctionFlags(0X143D4,0x0);
	MakeFunction    (0X143E0,0X143EC);
	SetFunctionFlags(0X143E0,0x0);
	MakeFunction    (0X143EC,0X143F6);
	SetFunctionFlags(0X143EC,0x0);
	MakeFunction    (0X143F6,0X14402);
	SetFunctionFlags(0X143F6,0x0);
	MakeFunction    (0X14402,0X1440E);
	SetFunctionFlags(0X14402,0x0);
	MakeFunction    (0X1440E,0X14420);
	SetFunctionFlags(0X1440E,0x0);
	MakeFunction    (0X14420,0X1444A);
	SetFunctionFlags(0X14420,0x0);
	MakeFunction    (0X1444A,0X1445C);
	SetFunctionFlags(0X1444A,0x0);
	MakeFunction    (0X1445C,0X1447E);
	SetFunctionFlags(0X1445C,0x0);
	MakeFunction    (0X1447E,0X144C2);
	SetFunctionFlags(0X1447E,0x0);
	MakeFunction    (0X144C2,0X144E0);
	SetFunctionFlags(0X144C2,0x0);
	MakeFunction    (0X144E0,0X14532);
	SetFunctionFlags(0X144E0,0x0);
	MakeFunction    (0X14532,0X14544);
	SetFunctionFlags(0X14532,0x0);
	MakeFunction    (0X14544,0X145A4);
	SetFunctionFlags(0X14544,0x0);
	MakeFunction    (0X145A4,0X145B0);
	SetFunctionFlags(0X145A4,0x0);
	MakeFunction    (0X145B0,0X145BC);
	SetFunctionFlags(0X145B0,0x0);
	MakeFunction    (0X145BC,0X145C8);
	SetFunctionFlags(0X145BC,0x0);
	MakeFunction    (0X145C8,0X145F6);
	SetFunctionFlags(0X145C8,0x0);
	MakeFunction    (0X145F6,0X145FE);
	SetFunctionFlags(0X145F6,0x0);
	MakeFunction    (0X145FE,0X14606);
	SetFunctionFlags(0X145FE,0x0);
	MakeFunction    (0X14606,0X1460E);
	SetFunctionFlags(0X14606,0x0);
	MakeFunction    (0X1460E,0X14616);
	SetFunctionFlags(0X1460E,0x0);
	MakeFunction    (0X14616,0X1461E);
	SetFunctionFlags(0X14616,0x0);
	MakeFunction    (0X1461E,0X14626);
	SetFunctionFlags(0X1461E,0x0);
	MakeFunction    (0X14626,0X14648);
	SetFunctionFlags(0X14626,0x0);
	MakeFunction    (0X14648,0X1467C);
	SetFunctionFlags(0X14648,0x0);
	MakeFunction    (0X1467C,0X14684);
	SetFunctionFlags(0X1467C,0x0);
	MakeFunction    (0X14684,0X1468C);
	SetFunctionFlags(0X14684,0x0);
	MakeFunction    (0X1468C,0X14694);
	SetFunctionFlags(0X1468C,0x0);
	MakeFunction    (0X14694,0X146AA);
	SetFunctionFlags(0X14694,0x0);
	MakeFunction    (0X146AA,0X146CA);
	SetFunctionFlags(0X146AA,0x0);
	MakeFunction    (0X146CA,0X146D2);
	SetFunctionFlags(0X146CA,0x0);
	MakeFunction    (0X146D2,0X146DA);
	SetFunctionFlags(0X146D2,0x0);
	MakeFunction    (0X146DA,0X146E2);
	SetFunctionFlags(0X146DA,0x0);
	MakeFunction    (0X146E2,0X146EA);
	SetFunctionFlags(0X146E2,0x0);
	MakeFunction    (0X146EA,0X1470A);
	SetFunctionFlags(0X146EA,0x0);
	MakeFunction    (0X1470A,0X1472C);
	SetFunctionFlags(0X1470A,0x0);
	MakeFunction    (0X1472C,0X14738);
	SetFunctionFlags(0X1472C,0x0);
	MakeFunction    (0X14738,0X14770);
	SetFunctionFlags(0X14738,0x0);
	MakeFunction    (0X14770,0X1477C);
	SetFunctionFlags(0X14770,0x0);
	MakeFunction    (0X1477C,0X1479A);
	SetFunctionFlags(0X1477C,0x0);
	MakeFunction    (0X1479A,0X147A6);
	SetFunctionFlags(0X1479A,0x0);
	MakeFunction    (0X147A6,0X147B2);
	SetFunctionFlags(0X147A6,0x0);
	MakeFunction    (0X147B2,0X147BE);
	SetFunctionFlags(0X147B2,0x0);
	MakeFunction    (0X147BE,0X147D2);
	SetFunctionFlags(0X147BE,0x0);
	MakeFunction    (0X147D2,0X147F2);
	SetFunctionFlags(0X147D2,0x0);
	MakeFunction    (0X147F2,0X147FE);
	SetFunctionFlags(0X147F2,0x0);
	MakeFunction    (0X147FE,0X1480A);
	SetFunctionFlags(0X147FE,0x0);
	MakeFunction    (0X1480A,0X1482E);
	SetFunctionFlags(0X1480A,0x0);
	MakeFunction    (0X1482E,0X1483A);
	SetFunctionFlags(0X1482E,0x0);
	MakeFunction    (0X1483A,0X14846);
	SetFunctionFlags(0X1483A,0x0);
	MakeFunction    (0X14846,0X148C2);
	SetFunctionFlags(0X14846,0x0);
	MakeFunction    (0X148C2,0X148DE);
	SetFunctionFlags(0X148C2,0x0);
	MakeFunction    (0X148DE,0X14958);
	SetFunctionFlags(0X148DE,0x0);
	MakeFunction    (0X14958,0X14964);
	SetFunctionFlags(0X14958,0x0);
	MakeFunction    (0X14964,0X14970);
	SetFunctionFlags(0X14964,0x0);
	MakeFunction    (0X14970,0X149AE);
	SetFunctionFlags(0X14970,0x0);
	MakeFunction    (0X149AE,0X149B8);
	SetFunctionFlags(0X149AE,0x0);
	MakeFunction    (0X149B8,0X149CC);
	SetFunctionFlags(0X149B8,0x0);
	MakeFunction    (0X149CC,0X149E0);
	SetFunctionFlags(0X149CC,0x0);
	MakeFunction    (0X149E0,0X14ABE);
	SetFunctionFlags(0X149E0,0x0);
	MakeFunction    (0X14ABE,0X14AFC);
	SetFunctionFlags(0X14ABE,0x0);
	MakeFunction    (0X14AFC,0X14B0C);
	SetFunctionFlags(0X14AFC,0x0);
	MakeFunction    (0X14B0C,0X14B2C);
	SetFunctionFlags(0X14B0C,0x0);
	MakeFunction    (0X14B2C,0X14B42);
	SetFunctionFlags(0X14B2C,0x0);
	MakeFunction    (0X14B42,0X14B62);
	SetFunctionFlags(0X14B42,0x0);
	MakeFunction    (0X14B62,0X14B6E);
	SetFunctionFlags(0X14B62,0x0);
	MakeFunction    (0X14B6E,0X14B82);
	SetFunctionFlags(0X14B6E,0x0);
	MakeFunction    (0X14B82,0X14B92);
	SetFunctionFlags(0X14B82,0x0);
	MakeFunction    (0X14B92,0X14B9E);
	SetFunctionFlags(0X14B92,0x0);
	MakeFunction    (0X14B9E,0X14BB8);
	SetFunctionFlags(0X14B9E,0x0);
	MakeFunction    (0X14BB8,0X14C14);
	SetFunctionFlags(0X14BB8,0x0);
	MakeFunction    (0X14C14,0X14C3A);
	SetFunctionFlags(0X14C14,0x0);
	MakeFunction    (0X14C3A,0X14C5E);
	SetFunctionFlags(0X14C3A,0x0);
	MakeFunction    (0X14C5E,0X14C90);
	SetFunctionFlags(0X14C5E,0x0);
	MakeFunction    (0X14C90,0X14CBE);
	SetFunctionFlags(0X14C90,0x0);
	MakeFunction    (0X14CBE,0X14D36);
	SetFunctionFlags(0X14CBE,0x0);
	MakeFunction    (0X14D36,0X14DE6);
	SetFunctionFlags(0X14D36,0x0);
	MakeFunction    (0X14DE6,0X14E18);
	SetFunctionFlags(0X14DE6,0x0);
	MakeFunction    (0X14E18,0X14E30);
	SetFunctionFlags(0X14E18,0x0);
	MakeFunction    (0X14E30,0X14E48);
	SetFunctionFlags(0X14E30,0x0);
	MakeFunction    (0X14E48,0X14E74);
	SetFunctionFlags(0X14E48,0x0);
	MakeFunction    (0X14E74,0X14E80);
	SetFunctionFlags(0X14E74,0x0);
	MakeFunction    (0X14E80,0X14E8A);
	SetFunctionFlags(0X14E80,0x0);
	MakeFunction    (0X14E8A,0X14EAA);
	SetFunctionFlags(0X14E8A,0x0);
	MakeFunction    (0X14EAA,0X14EC2);
	SetFunctionFlags(0X14EAA,0x0);
	MakeFunction    (0X14EC2,0X14ECE);
	SetFunctionFlags(0X14EC2,0x0);
	MakeFunction    (0X14ECE,0X14EF6);
	SetFunctionFlags(0X14ECE,0x0);
	MakeFunction    (0X14EF6,0X14F2A);
	SetFunctionFlags(0X14EF6,0x0);
	MakeFunction    (0X14F2A,0X14F5E);
	SetFunctionFlags(0X14F2A,0x0);
	MakeFunction    (0X14F5E,0X14F6A);
	SetFunctionFlags(0X14F5E,0x0);
	MakeFunction    (0X14F6A,0X14F96);
	SetFunctionFlags(0X14F6A,0x0);
	MakeFunction    (0X14F96,0X14FC4);
	SetFunctionFlags(0X14F96,0x0);
	MakeFunction    (0X14FC4,0X15010);
	SetFunctionFlags(0X14FC4,0x0);
	MakeFunction    (0X15010,0X15062);
	SetFunctionFlags(0X15010,0x0);
	MakeFunction    (0X15062,0X1506E);
	SetFunctionFlags(0X15062,0x0);
	MakeFunction    (0X1506E,0X15080);
	SetFunctionFlags(0X1506E,0x0);
	MakeFunction    (0X15080,0X15094);
	SetFunctionFlags(0X15080,0x0);
	MakeFunction    (0X15094,0X1511C);
	SetFunctionFlags(0X15094,0x0);
	MakeFunction    (0X1511C,0X15128);
	SetFunctionFlags(0X1511C,0x0);
	MakeFunction    (0X15128,0X15154);
	SetFunctionFlags(0X15128,0x0);
	MakeFunction    (0X15154,0X1518C);
	SetFunctionFlags(0X15154,0x0);
	MakeFunction    (0X1518C,0X151AC);
	SetFunctionFlags(0X1518C,0x0);
	MakeFunction    (0X151AC,0X151B8);
	SetFunctionFlags(0X151AC,0x0);
	MakeFunction    (0X151B8,0X151C4);
	SetFunctionFlags(0X151B8,0x0);
	MakeFunction    (0X151C4,0X151D0);
	SetFunctionFlags(0X151C4,0x0);
	MakeFunction    (0X151D0,0X151DC);
	SetFunctionFlags(0X151D0,0x0);
	MakeFunction    (0X151DC,0X1524E);
	SetFunctionFlags(0X151DC,0x0);
	MakeFunction    (0X1524E,0X15278);
	SetFunctionFlags(0X1524E,0x0);
	MakeFunction    (0X15278,0X152FC);
	SetFunctionFlags(0X15278,0x0);
	MakeFunction    (0X152FC,0X1534E);
	SetFunctionFlags(0X152FC,0x0);
	MakeFunction    (0X1534E,0X15374);
	SetFunctionFlags(0X1534E,0x0);
	MakeFunction    (0X15374,0X15380);
	SetFunctionFlags(0X15374,0x0);
	MakeFunction    (0X15380,0X1538C);
	SetFunctionFlags(0X15380,0x0);
	MakeFunction    (0X1538C,0X15398);
	SetFunctionFlags(0X1538C,0x0);
	MakeFunction    (0X15398,0X153BC);
	SetFunctionFlags(0X15398,0x0);
	MakeFunction    (0X153BC,0X153C0);
	SetFunctionFlags(0X153BC,0x80);
	MakeFunction    (0X155B8,0X155EC);
	SetFunctionFlags(0X155B8,0x0);
	MakeFunction    (0X155EC,0X15600);
	SetFunctionFlags(0X155EC,0x0);
	MakeFunction    (0X15600,0X156C0);
	SetFunctionFlags(0X15600,0x0);
	MakeFunction    (0X156C0,0X156D4);
	SetFunctionFlags(0X156C0,0x0);
	MakeFunction    (0X156D4,0X156EE);
	SetFunctionFlags(0X156D4,0x0);
	MakeFunction    (0X156EE,0X156FA);
	SetFunctionFlags(0X156EE,0x0);
	MakeFunction    (0X156FA,0X1574C);
	SetFunctionFlags(0X156FA,0x0);
	MakeFunction    (0X1574C,0X157C4);
	SetFunctionFlags(0X1574C,0x0);
	MakeFunction    (0X157C4,0X157D0);
	SetFunctionFlags(0X157C4,0x0);
	MakeFunction    (0X157D0,0X157DC);
	SetFunctionFlags(0X157D0,0x0);
	MakeFunction    (0X157DC,0X15816);
	SetFunctionFlags(0X157DC,0x0);
	MakeFunction    (0X15816,0X1586E);
	SetFunctionFlags(0X15816,0x0);
	MakeFunction    (0X1586E,0X1588A);
	SetFunctionFlags(0X1586E,0x0);
	MakeFunction    (0X1588A,0X158D0);
	SetFunctionFlags(0X1588A,0x0);
	MakeFunction    (0X158D0,0X158E6);
	SetFunctionFlags(0X158D0,0x0);
	MakeFunction    (0X158E6,0X158F6);
	SetFunctionFlags(0X158E6,0x0);
	MakeFunction    (0X158F6,0X15936);
	SetFunctionFlags(0X158F6,0x0);
	MakeFunction    (0X15936,0X159A8);
	SetFunctionFlags(0X15936,0x0);
	MakeFunction    (0X159A8,0X15AA6);
	SetFunctionFlags(0X159A8,0x0);
	MakeFunction    (0X15AA6,0X15B40);
	SetFunctionFlags(0X15AA6,0x0);
	MakeFunction    (0X15B40,0X15B60);
	SetFunctionFlags(0X15B40,0x0);
	MakeFunction    (0X15B60,0X15B6A);
	SetFunctionFlags(0X15B60,0x0);
	MakeFunction    (0X15B6A,0X15B8C);
	SetFunctionFlags(0X15B6A,0x0);
	MakeFunction    (0X15B8C,0X15BB6);
	SetFunctionFlags(0X15B8C,0x0);
	MakeFunction    (0X15BB6,0X15BC2);
	SetFunctionFlags(0X15BB6,0x0);
	MakeFunction    (0X15BC2,0X15BCE);
	SetFunctionFlags(0X15BC2,0x0);
	MakeFunction    (0X15BCE,0X15BEA);
	SetFunctionFlags(0X15BCE,0x0);
	MakeFunction    (0X15BEA,0X15C06);
	SetFunctionFlags(0X15BEA,0x0);
	MakeFunction    (0X15C06,0X15C12);
	SetFunctionFlags(0X15C06,0x0);
	MakeFunction    (0X15C12,0X15C1E);
	SetFunctionFlags(0X15C12,0x0);
	MakeFunction    (0X15C1E,0X15C30);
	SetFunctionFlags(0X15C1E,0x0);
	MakeFunction    (0X15C30,0X15C3C);
	SetFunctionFlags(0X15C30,0x0);
	MakeFunction    (0X15C3C,0X15C4C);
	SetFunctionFlags(0X15C3C,0x0);
	MakeFunction    (0X15CC0,0X15CC6);
	SetFunctionFlags(0X15CC0,0x0);
	MakeFunction    (0X15CC6,0X15CCA);
	SetFunctionFlags(0X15CC6,0x0);
	MakeFunction    (0X15CCA,0X15CE6);
	SetFunctionFlags(0X15CCA,0x0);
	MakeFunction    (0X15CE6,0X15D02);
	SetFunctionFlags(0X15CE6,0x0);
	MakeFunction    (0X15D02,0X15D0E);
	SetFunctionFlags(0X15D02,0x0);
	MakeFunction    (0X15D0E,0X15D2E);
	SetFunctionFlags(0X15D0E,0x0);
	MakeFunction    (0X15D2E,0X15D5C);
	SetFunctionFlags(0X15D2E,0x0);
	MakeFunction    (0X15D5C,0X15D7E);
	SetFunctionFlags(0X15D5C,0x0);
	MakeFunction    (0X15D7E,0X15D8A);
	SetFunctionFlags(0X15D7E,0x0);
	MakeFunction    (0X15D8A,0X15DBC);
	SetFunctionFlags(0X15D8A,0x0);
	MakeFunction    (0X15DBC,0X15DE2);
	SetFunctionFlags(0X15DBC,0x0);
	MakeFunction    (0X15DE2,0X15E38);
	SetFunctionFlags(0X15DE2,0x0);
	MakeFunction    (0X15E38,0X15E76);
	SetFunctionFlags(0X15E38,0x0);
	MakeFunction    (0X15E76,0X15EB8);
	SetFunctionFlags(0X15E76,0x0);
	MakeFunction    (0X15EB8,0X15EFE);
	SetFunctionFlags(0X15EB8,0x0);
	MakeFunction    (0X15EFE,0X15F20);
	SetFunctionFlags(0X15EFE,0x0);
	MakeFunction    (0X15F20,0X15F58);
	SetFunctionFlags(0X15F20,0x0);
	MakeFunction    (0X15F58,0X15FC2);
	SetFunctionFlags(0X15F58,0x0);
	MakeFunction    (0X15FC2,0X15FD2);
	SetFunctionFlags(0X15FC2,0x0);
	MakeFunction    (0X1604A,0X1605E);
	SetFunctionFlags(0X1604A,0x0);
	MakeFunction    (0X1605E,0X16098);
	SetFunctionFlags(0X1605E,0x0);
	MakeFunction    (0X16098,0X160B0);
	SetFunctionFlags(0X16098,0x0);
	MakeFunction    (0X160B0,0X160C8);
	SetFunctionFlags(0X160B0,0x0);
	MakeFunction    (0X160C8,0X160CC);
	SetFunctionFlags(0X160C8,0x0);
	MakeFunction    (0X160CC,0X160D4);
	SetFunctionFlags(0X160CC,0x0);
	MakeFrame(0X160CC, 0X1, 0, 0X0);
	MakeFunction    (0X160D4,0X160EE);
	SetFunctionFlags(0X160D4,0x0);
	MakeFunction    (0X160EE,0X160F8);
	SetFunctionFlags(0X160EE,0x0);
	MakeFunction    (0X160F8,0X16102);
	SetFunctionFlags(0X160F8,0x0);
	MakeFunction    (0X16102,0X16112);
	SetFunctionFlags(0X16102,0x0);
	MakeFunction    (0X16112,0X16122);
	SetFunctionFlags(0X16112,0x0);
	MakeFunction    (0X16122,0X1612C);
	SetFunctionFlags(0X16122,0x0);
	MakeFunction    (0X1612C,0X16146);
	SetFunctionFlags(0X1612C,0x0);
	MakeFunction    (0X16146,0X16150);
	SetFunctionFlags(0X16146,0x0);
	MakeFunction    (0X16150,0X1619C);
	SetFunctionFlags(0X16150,0x0);
	MakeFunction    (0X1619C,0X161C8);
	SetFunctionFlags(0X1619C,0x0);
	MakeFunction    (0X161C8,0X1627C);
	SetFunctionFlags(0X161C8,0x0);
	MakeFunction    (0X16284,0X1628C);
	SetFunctionFlags(0X16284,0x0);
	MakeFunction    (0X1628C,0X16298);
	SetFunctionFlags(0X1628C,0x0);
	MakeFunction    (0X16298,0X162A2);
	SetFunctionFlags(0X16298,0x0);
	MakeFunction    (0X162A2,0X162AC);
	SetFunctionFlags(0X162A2,0x0);
	MakeFunction    (0X162AC,0X162BC);
	SetFunctionFlags(0X162AC,0x0);
	MakeFunction    (0X162BC,0X162E0);
	SetFunctionFlags(0X162BC,0x0);
	MakeFunction    (0X162E0,0X16300);
	SetFunctionFlags(0X162E0,0x0);
	MakeFunction    (0X16300,0X16306);
	SetFunctionFlags(0X16300,0x0);
	MakeFunction    (0X16306,0X1631A);
	SetFunctionFlags(0X16306,0x0);
	MakeFunction    (0X1631A,0X16324);
	SetFunctionFlags(0X1631A,0x0);
	MakeFunction    (0X16324,0X1638A);
	SetFunctionFlags(0X16324,0x0);
	MakeFunction    (0X1638A,0X163A2);
	SetFunctionFlags(0X1638A,0x0);
	MakeFunction    (0X163A2,0X163BE);
	SetFunctionFlags(0X163A2,0x0);
	MakeFunction    (0X163BE,0X16456);
	SetFunctionFlags(0X163BE,0x0);
	MakeFunction    (0X16456,0X16460);
	SetFunctionFlags(0X16456,0x0);
	MakeFunction    (0X16460,0X1646A);
	SetFunctionFlags(0X16460,0x0);
	MakeFunction    (0X1646A,0X164EC);
	SetFunctionFlags(0X1646A,0x0);
	MakeFunction    (0X164EC,0X1652A);
	SetFunctionFlags(0X164EC,0x0);
	MakeFunction    (0X1652A,0X16560);
	SetFunctionFlags(0X1652A,0x0);
	MakeFunction    (0X16560,0X1656A);
	SetFunctionFlags(0X16560,0x0);
	MakeFunction    (0X1656A,0X16594);
	SetFunctionFlags(0X1656A,0x0);
	MakeFunction    (0X165BC,0X165FC);
	SetFunctionFlags(0X165BC,0x0);
	MakeFunction    (0X165FC,0X16632);
	SetFunctionFlags(0X165FC,0x0);
	MakeFunction    (0X16860,0X168A2);
	SetFunctionFlags(0X16860,0x10);
	MakeFrame(0X16860, 0X40, 0, 0X0);
	MakeFunction    (0X168A2,0X168D8);
	SetFunctionFlags(0X168A2,0x10);
	MakeFrame(0X168A2, 0X40, 0, 0X0);
	MakeNameEx(0X168D6, "@Return", SN_LOCAL);
	MakeFunction    (0X168D8,0X168FE);
	SetFunctionFlags(0X168D8,0x10);
	MakeFrame(0X168D8, 0X40, 0, 0X0);
	MakeNameEx(0X168FC, "@Return", SN_LOCAL);
	MakeFunction    (0X168FE,0X16DAE);
	SetFunctionFlags(0X168FE,0x10);
	MakeFrame(0X168FE, 0X40, 0, 0X0);
	MakeNameEx(0X16AA2, "@Deals", SN_LOCAL);
	MakeNameEx(0X16AAE, "@Repair", SN_LOCAL);
	MakeNameEx(0X16C0A, "@Sell", SN_LOCAL);
	MakeNameEx(0X16CCC, "@IsCursed", SN_LOCAL);
	MakeFunction    (0X16DAE,0X16DCE);
	SetFunctionFlags(0X16DAE,0x0);
	MakeFunction    (0X16DCE,0X16DF4);
	SetFunctionFlags(0X16DCE,0x10);
	MakeFrame(0X16DCE, 0X40, 0, 0X0);
	MakeFunction    (0X16DF4,0X16E12);
	SetFunctionFlags(0X16DF4,0x10);
	MakeFrame(0X16DF4, 0X40, 0, 0X0);
	MakeFunction    (0X16E12,0X16E30);
	SetFunctionFlags(0X16E12,0x0);
	MakeFunction    (0X16E30,0X16E48);
	SetFunctionFlags(0X16E30,0x0);
	MakeFunction    (0X16E48,0X16E66);
	SetFunctionFlags(0X16E48,0x0);
	MakeFunction    (0X16E66,0X16E7E);
	SetFunctionFlags(0X16E66,0x0);
	MakeFunction    (0X16E7E,0X16E92);
	SetFunctionFlags(0X16E7E,0x0);
	MakeFunction    (0X16E92,0X16EA6);
	SetFunctionFlags(0X16E92,0x0);
	MakeFunction    (0X16EA6,0X16EAE);
	SetFunctionFlags(0X16EA6,0x0);
	MakeFunction    (0X16EAE,0X16ED4);
	SetFunctionFlags(0X16EAE,0x0);
	MakeFunction    (0X16ED4,0X16F1C);
	SetFunctionFlags(0X16ED4,0x10);
	MakeFrame(0X16ED4, 0X40, 0, 0X0);
	MakeFunction    (0X16F1C,0X16F62);
	SetFunctionFlags(0X16F1C,0x10);
	MakeFrame(0X16F1C, 0X40, 0, 0X0);
	MakeFunction    (0X17028,0X175DE);
	SetFunctionFlags(0X17028,0x10);
	MakeFrame(0X17028, 0X40, 0, 0X0);
	MakeNameEx(0X1704E, "@Start", SN_LOCAL);
	MakeNameEx(0X170E6, "@IsCureAction", SN_LOCAL);
	MakeNameEx(0X17300, "@IsReviveAction", SN_LOCAL);
	MakeNameEx(0X17410, "@IsPromoteAction", SN_LOCAL);
	MakeNameEx(0X175BC, "@Exit", SN_LOCAL);
	MakeFunction    (0X175DE,0X175F2);
	SetFunctionFlags(0X175DE,0x0);
	MakeFunction    (0X175F2,0X17668);
	SetFunctionFlags(0X175F2,0x0);
	MakeFunction    (0X17668,0X17780);
	SetFunctionFlags(0X17668,0x0);
	MakeFunction    (0X17780,0X177E6);
	SetFunctionFlags(0X17780,0x0);
	MakeFunction    (0X177E6,0X178E0);
	SetFunctionFlags(0X177E6,0x0);
	MakeFunction    (0X178E0,0X179E6);
	SetFunctionFlags(0X178E0,0x0);
	MakeFunction    (0X179E6,0X17A2E);
	SetFunctionFlags(0X179E6,0x0);
	MakeFunction    (0X17A2E,0X17B10);
	SetFunctionFlags(0X17A2E,0x0);
	MakeFunction    (0X17B10,0X17BBC);
	SetFunctionFlags(0X17B10,0x0);
	MakeFunction    (0X17C5E,0X17C64);
	SetFunctionFlags(0X17C5E,0x80);
	MakeFunction    (0X17C64,0X17C6A);
	SetFunctionFlags(0X17C64,0x80);
	MakeFunction    (0X17C6A,0X17C70);
	SetFunctionFlags(0X17C6A,0x80);
	MakeFunction    (0X17C70,0X17CCA);
	SetFunctionFlags(0X17C70,0x0);
	MakeFunction    (0X17CCA,0X17D62);
	SetFunctionFlags(0X17CCA,0x10);
	MakeFrame(0X17CCA, 0X6, 0, 0X0);
	MakeFunction    (0X17E34,0X17E42);
	SetFunctionFlags(0X17E34,0x10);
	MakeFrame(0X17E34, 0X6, 0, 0X0);
	MakeNameEx(0X17E40, "@Return", SN_LOCAL);
	MakeFunction    (0X17E42,0X17E58);
	SetFunctionFlags(0X17E42,0x0);
	MakeNameEx(0X17E56, "@Return", SN_LOCAL);
	MakeFunction    (0X17E58,0X17E6E);
	SetFunctionFlags(0X17E58,0x0);
	MakeNameEx(0X17E6C, "@Return", SN_LOCAL);
	MakeFunction    (0X17E6E,0X17E90);
	SetFunctionFlags(0X17E6E,0x10);
	MakeFrame(0X17E6E, 0X6, 0, 0X0);
	MakeFunction    (0X17E90,0X17EB6);
	SetFunctionFlags(0X17E90,0x10);
	MakeFrame(0X17E90, 0X6, 0, 0X0);
	MakeFunction    (0X17EB6,0X17ED6);
	SetFunctionFlags(0X17EB6,0x10);
	MakeFrame(0X17EB6, 0X6, 0, 0X0);
	MakeNameEx(0X17ED4, "@Return", SN_LOCAL);
	MakeFunction    (0X17ED6,0X17EEC);
	SetFunctionFlags(0X17ED6,0x0);
	MakeFunction    (0X17EEC,0X17F64);
	SetFunctionFlags(0X17EEC,0x0);
	MakeFunction    (0X17F64,0X17F88);
	SetFunctionFlags(0X17F64,0x0);
	MakeFunction    (0X17F88,0X17FE0);
	SetFunctionFlags(0X17F88,0x0);
	MakeFunction    (0X17FE0,0X17FF6);
	SetFunctionFlags(0X17FE0,0x0);
	MakeFunction    (0X17FF6,0X18046);
	SetFunctionFlags(0X17FF6,0x0);
	MakeFunction    (0X18046,0X18056);
	SetFunctionFlags(0X18046,0x0);
	MakeFunction    (0X18056,0X18074);
	SetFunctionFlags(0X18056,0x0);
	MakeFunction    (0X18074,0X1808A);
	SetFunctionFlags(0X18074,0x0);
	MakeFunction    (0X1808A,0X180A6);
	SetFunctionFlags(0X1808A,0x0);
	MakeFunction    (0X180A6,0X180AC);
	SetFunctionFlags(0X180A6,0x0);
	MakeFunction    (0X180AC,0X180B4);
	SetFunctionFlags(0X180AC,0x0);
	MakeFunction    (0X180B4,0X180CA);
	SetFunctionFlags(0X180B4,0x0);
	MakeFunction    (0X180CA,0X180F0);
	SetFunctionFlags(0X180CA,0x0);
	MakeFunction    (0X180F0,0X18208);
	SetFunctionFlags(0X180F0,0x0);
	MakeFunction    (0X18238,0X185D0);
	SetFunctionFlags(0X18238,0x0);
	MakeFunction    (0X185D0,0X186E6);
	SetFunctionFlags(0X185D0,0x0);
	MakeFunction    (0X186E6,0X18882);
	SetFunctionFlags(0X186E6,0x0);
	MakeFrame(0X186E6, 0X0, 0, 0X0);
	MakeFunction    (0X18882,0X189CE);
	SetFunctionFlags(0X18882,0x0);
	MakeFunction    (0X189CE,0X18BE2);
	SetFunctionFlags(0X189CE,0x0);
	MakeFunction    (0X18C52,0X18D94);
	SetFunctionFlags(0X18C52,0x0);
	MakeFunction    (0X18D94,0X18DAA);
	SetFunctionFlags(0X18D94,0x0);
	MakeFunction    (0X18DAA,0X19044);
	SetFunctionFlags(0X18DAA,0x0);
	MakeFrame(0X18DAA, 0X0, 0, 0X0);
	MakeFunction    (0X19044,0X1934C);
	SetFunctionFlags(0X19044,0x0);
	MakeFrame(0X19044, 0X0, 0, 0X0);
	MakeFunction    (0X1934C,0X19450);
	SetFunctionFlags(0X1934C,0x0);
	MakeFrame(0X1934C, 0X0, 0, 0X0);
	MakeFunction    (0X19450,0X194DE);
	SetFunctionFlags(0X19450,0x0);
	MakeFunction    (0X194DE,0X19C82);
	SetFunctionFlags(0X194DE,0x0);
	MakeFunction    (0X19C82,0X19D48);
	SetFunctionFlags(0X19C82,0x0);
	MakeFunction    (0X19D48,0X1A4E2);
	SetFunctionFlags(0X19D48,0x0);
	MakeFrame(0X19D48, 0X0, 0, 0X0);
	MakeFunction    (0X1A4E2,0X1A5CA);
	SetFunctionFlags(0X1A4E2,0x0);
	MakeFunction    (0X1A5CA,0X1A5FA);
	SetFunctionFlags(0X1A5CA,0x0);
	MakeFunction    (0X1A6E2,0X1A85A);
	SetFunctionFlags(0X1A6E2,0x0);
	MakeFunction    (0X1A85A,0X1AC9C);
	SetFunctionFlags(0X1A85A,0x0);
	MakeFrame(0X1A85A, 0X0, 0, 0X0);
	MakeFunction    (0X1AC9C,0X1AF30);
	SetFunctionFlags(0X1AC9C,0x0);
	MakeFrame(0X1AC9C, 0X0, 0, 0X0);
	MakeFunction    (0X1AF30,0X1B03E);
	SetFunctionFlags(0X1AF30,0x0);
	MakeFrame(0X1AF30, 0X0, 0, 0X0);
	MakeFunction    (0X1B03E,0X1B236);
	SetFunctionFlags(0X1B03E,0x0);
	MakeFrame(0X1B03E, 0X0, 0, 0X0);
	MakeFunction    (0X1B236,0X1B43A);
	SetFunctionFlags(0X1B236,0x0);
	MakeFrame(0X1B236, 0X0, 0, 0X0);
	MakeFunction    (0X1B43A,0X1B912);
	SetFunctionFlags(0X1B43A,0x0);
	MakeFrame(0X1B43A, 0X0, 0, 0X0);
	MakeFunction    (0X1B912,0X1BA12);
	SetFunctionFlags(0X1B912,0x0);
	MakeFunction    (0X1BA12,0X1BA56);
	SetFunctionFlags(0X1BA12,0x0);
	MakeFunction    (0X1BA56,0X1BD74);
	SetFunctionFlags(0X1BA56,0x0);
	MakeFrame(0X1BA56, 0X0, 0, 0X0);
	MakeFunction    (0X1BD74,0X1BF28);
	SetFunctionFlags(0X1BD74,0x0);
	MakeFunction    (0X1BF28,0X1C2B8);
	SetFunctionFlags(0X1BF28,0x0);
	MakeFrame(0X1BF28, 0X0, 0, 0X0);
	MakeFunction    (0X1C2B8,0X1C40C);
	SetFunctionFlags(0X1C2B8,0x0);
	MakeFrame(0X1C2B8, 0X0, 0, 0X0);
	MakeFunction    (0X1C40C,0X1CBF4);
	SetFunctionFlags(0X1C40C,0x0);
	MakeFrame(0X1C40C, 0X0, 0, 0X0);
	MakeFunction    (0X1CBF4,0X1CF6A);
	SetFunctionFlags(0X1CBF4,0x0);
	MakeNameEx(0X1CE4E, "@DialogueNumber254", SN_LOCAL);
	MakeFunction    (0X1CF6A,0X1D152);
	SetFunctionFlags(0X1CF6A,0x0);
	MakeFunction    (0X1D152,0X1D2C0);
	SetFunctionFlags(0X1D152,0x0);
	MakeFunction    (0X1D2C0,0X1D314);
	SetFunctionFlags(0X1D2C0,0x0);
	MakeFunction    (0X1D356,0X1D37E);
	SetFunctionFlags(0X1D356,0x0);
	MakeFunction    (0X1DA8E,0X1DF28);
	SetFunctionFlags(0X1DA8E,0x0);
	MakeFunction    (0X1EFE0,0X1EFF6);
	SetFunctionFlags(0X1EFE0,0x0);
	MakeFunction    (0X1EFF6,0X1F068);
	SetFunctionFlags(0X1EFF6,0x0);
	MakeFunction    (0X20000,0X20004);
	SetFunctionFlags(0X20000,0x80);
	MakeFunction    (0X20004,0X20008);
	SetFunctionFlags(0X20004,0x80);
	MakeFunction    (0X20008,0X2000C);
	SetFunctionFlags(0X20008,0x80);
	MakeFunction    (0X2000C,0X20010);
	SetFunctionFlags(0X2000C,0x80);
	MakeFunction    (0X20010,0X20014);
	SetFunctionFlags(0X20010,0x80);
	MakeFunction    (0X20014,0X20018);
	SetFunctionFlags(0X20014,0x80);
	MakeFunction    (0X20018,0X2001C);
	SetFunctionFlags(0X20018,0x80);
	MakeFunction    (0X2001C,0X20020);
	SetFunctionFlags(0X2001C,0x80);
	MakeFunction    (0X20020,0X20024);
	SetFunctionFlags(0X20020,0x80);
	MakeFunction    (0X20024,0X20028);
	SetFunctionFlags(0X20024,0x80);
	MakeFunction    (0X20028,0X2002C);
	SetFunctionFlags(0X20028,0x80);
	MakeFunction    (0X2002C,0X20030);
	SetFunctionFlags(0X2002C,0x80);
	MakeFunction    (0X20034,0X20038);
	SetFunctionFlags(0X20034,0x80);
	MakeFunction    (0X20038,0X2003C);
	SetFunctionFlags(0X20038,0x80);
	MakeFunction    (0X2003C,0X20040);
	SetFunctionFlags(0X2003C,0x80);
	MakeFunction    (0X20040,0X20044);
	SetFunctionFlags(0X20040,0x80);
	MakeFunction    (0X20044,0X20048);
	SetFunctionFlags(0X20044,0xc0);
	MakeFunction    (0X20048,0X2004C);
	SetFunctionFlags(0X20048,0x80);
	MakeFunction    (0X2004C,0X20050);
	SetFunctionFlags(0X2004C,0x80);
	MakeFunction    (0X20050,0X20054);
	SetFunctionFlags(0X20050,0x80);
	MakeFunction    (0X20054,0X20058);
	SetFunctionFlags(0X20054,0xc0);
	MakeFunction    (0X20058,0X2005C);
	SetFunctionFlags(0X20058,0xc0);
	MakeFunction    (0X2005C,0X20060);
	SetFunctionFlags(0X2005C,0xc0);
	MakeFunction    (0X20060,0X20064);
	SetFunctionFlags(0X20060,0x80);
	MakeFunction    (0X20064,0X20068);
	SetFunctionFlags(0X20064,0xc0);
	MakeFunction    (0X20068,0X2006C);
	SetFunctionFlags(0X20068,0x80);
	MakeFunction    (0X2006C,0X20070);
	SetFunctionFlags(0X2006C,0x80);
	MakeFunction    (0X20070,0X20074);
	SetFunctionFlags(0X20070,0x80);
	MakeFunction    (0X20074,0X20078);
	SetFunctionFlags(0X20074,0x80);
	MakeFunction    (0X20078,0X2007C);
	SetFunctionFlags(0X20078,0xc0);
	MakeFunction    (0X2007C,0X20080);
	SetFunctionFlags(0X2007C,0x80);
	MakeFunction    (0X20080,0X20084);
	SetFunctionFlags(0X20080,0xc0);
	MakeFunction    (0X20084,0X20088);
	SetFunctionFlags(0X20084,0xc0);
	MakeFunction    (0X20088,0X2008C);
	SetFunctionFlags(0X20088,0xc0);
	MakeFunction    (0X20090,0X20094);
	SetFunctionFlags(0X20090,0xc0);
	MakeFunction    (0X20094,0X20098);
	SetFunctionFlags(0X20094,0x80);
	MakeFunction    (0X20098,0X2009C);
	SetFunctionFlags(0X20098,0xc0);
	MakeFunction    (0X2009C,0X200A0);
	SetFunctionFlags(0X2009C,0x80);
	MakeFunction    (0X200A0,0X200A4);
	SetFunctionFlags(0X200A0,0xc0);
	MakeFunction    (0X200A4,0X200A8);
	SetFunctionFlags(0X200A4,0xc0);
	MakeFunction    (0X200A8,0X200AC);
	SetFunctionFlags(0X200A8,0xc0);
	MakeFunction    (0X200AC,0X200B0);
	SetFunctionFlags(0X200AC,0x80);
	MakeFunction    (0X200B0,0X200B4);
	SetFunctionFlags(0X200B0,0x80);
	MakeFunction    (0X200B4,0X200B8);
	SetFunctionFlags(0X200B4,0x80);
	MakeFunction    (0X200B8,0X200BC);
	SetFunctionFlags(0X200B8,0x80);
	MakeFunction    (0X200BC,0X200C0);
	SetFunctionFlags(0X200BC,0xc0);
	MakeFunction    (0X200C0,0X200C4);
	SetFunctionFlags(0X200C0,0xc0);
	MakeFunction    (0X200C4,0X200C8);
	SetFunctionFlags(0X200C4,0xc0);
	MakeFunction    (0X200C8,0X200CC);
	SetFunctionFlags(0X200C8,0xc0);
	MakeFunction    (0X200CC,0X200D0);
	SetFunctionFlags(0X200CC,0x80);
	MakeFunction    (0X200D0,0X200D4);
	SetFunctionFlags(0X200D0,0xc0);
	MakeFunction    (0X200D4,0X200D8);
	SetFunctionFlags(0X200D4,0xc0);
	MakeFunction    (0X200D8,0X200DC);
	SetFunctionFlags(0X200D8,0xc0);
	MakeFunction    (0X200DC,0X200E0);
	SetFunctionFlags(0X200DC,0xc0);
	MakeFunction    (0X200E0,0X200E4);
	SetFunctionFlags(0X200E0,0x80);
	MakeFunction    (0X200E4,0X200E8);
	SetFunctionFlags(0X200E4,0xc0);
	MakeFunction    (0X200E8,0X200EC);
	SetFunctionFlags(0X200E8,0x80);
	MakeFunction    (0X200EC,0X200F0);
	SetFunctionFlags(0X200EC,0x80);
	MakeFunction    (0X200F0,0X200F4);
	SetFunctionFlags(0X200F0,0x80);
	MakeFunction    (0X200F4,0X200F8);
	SetFunctionFlags(0X200F4,0xc0);
	MakeFunction    (0X200F8,0X200FC);
	SetFunctionFlags(0X200F8,0xc0);
	MakeFunction    (0X200FC,0X20100);
	SetFunctionFlags(0X200FC,0x80);
	MakeFunction    (0X20100,0X20104);
	SetFunctionFlags(0X20100,0x80);
	MakeFunction    (0X20104,0X20108);
	SetFunctionFlags(0X20104,0xc0);
	MakeFunction    (0X20108,0X2010C);
	SetFunctionFlags(0X20108,0xc0);
	MakeFunction    (0X2010C,0X20110);
	SetFunctionFlags(0X2010C,0xc0);
	MakeFunction    (0X20110,0X20114);
	SetFunctionFlags(0X20110,0xc0);
	MakeFunction    (0X20114,0X20118);
	SetFunctionFlags(0X20114,0xc0);
	MakeFunction    (0X20118,0X2011C);
	SetFunctionFlags(0X20118,0xc0);
	MakeFunction    (0X2011C,0X20120);
	SetFunctionFlags(0X2011C,0xc0);
	MakeFunction    (0X20120,0X20124);
	SetFunctionFlags(0X20120,0xc0);
	MakeFunction    (0X20124,0X20128);
	SetFunctionFlags(0X20124,0x80);
	MakeFunction    (0X20128,0X2012C);
	SetFunctionFlags(0X20128,0xc0);
	MakeFunction    (0X2012C,0X20130);
	SetFunctionFlags(0X2012C,0xc0);
	MakeFunction    (0X20130,0X20134);
	SetFunctionFlags(0X20130,0xc0);
	MakeFunction    (0X20134,0X20138);
	SetFunctionFlags(0X20134,0xc0);
	MakeFunction    (0X20138,0X2013C);
	SetFunctionFlags(0X20138,0xc0);
	MakeFunction    (0X2013C,0X20140);
	SetFunctionFlags(0X2013C,0xc0);
	MakeFunction    (0X20140,0X20144);
	SetFunctionFlags(0X20140,0xc0);
	MakeFunction    (0X20144,0X20148);
	SetFunctionFlags(0X20144,0xc0);
	MakeFunction    (0X20148,0X2014C);
	SetFunctionFlags(0X20148,0xc0);
	MakeFunction    (0X2014C,0X20150);
	SetFunctionFlags(0X2014C,0xc0);
	MakeFunction    (0X20150,0X20154);
	SetFunctionFlags(0X20150,0xc0);
	MakeFunction    (0X20154,0X20158);
	SetFunctionFlags(0X20154,0xc0);
	MakeFunction    (0X20158,0X2015C);
	SetFunctionFlags(0X20158,0xc0);
	MakeFunction    (0X2015C,0X20160);
	SetFunctionFlags(0X2015C,0xc0);
	MakeFunction    (0X20160,0X20164);
	SetFunctionFlags(0X20160,0xc0);
	MakeFunction    (0X20164,0X20168);
	SetFunctionFlags(0X20164,0xc0);
	MakeFunction    (0X20168,0X2016C);
	SetFunctionFlags(0X20168,0xc0);
	MakeFunction    (0X2016C,0X20170);
	SetFunctionFlags(0X2016C,0xc0);
	MakeFunction    (0X20170,0X20174);
	SetFunctionFlags(0X20170,0xc0);
	MakeFunction    (0X20174,0X20178);
	SetFunctionFlags(0X20174,0xc0);
	MakeFunction    (0X20178,0X2017C);
	SetFunctionFlags(0X20178,0xc0);
	MakeFunction    (0X2017C,0X20180);
	SetFunctionFlags(0X2017C,0xc0);
	MakeFunction    (0X20180,0X20184);
	SetFunctionFlags(0X20180,0xc0);
	MakeFunction    (0X20184,0X20188);
	SetFunctionFlags(0X20184,0xc0);
	MakeFunction    (0X20188,0X2018C);
	SetFunctionFlags(0X20188,0xc0);
	MakeFunction    (0X2018C,0X20190);
	SetFunctionFlags(0X2018C,0xc0);
	MakeFunction    (0X20190,0X20194);
	SetFunctionFlags(0X20190,0xc0);
	MakeFunction    (0X20194,0X20198);
	SetFunctionFlags(0X20194,0xc0);
	MakeFunction    (0X20198,0X2019C);
	SetFunctionFlags(0X20198,0xc0);
	MakeFunction    (0X2019C,0X201A0);
	SetFunctionFlags(0X2019C,0x80);
	MakeFunction    (0X201A0,0X201A4);
	SetFunctionFlags(0X201A0,0x80);
	MakeFunction    (0X201A4,0X201A8);
	SetFunctionFlags(0X201A4,0x80);
	MakeFunction    (0X201A8,0X201AC);
	SetFunctionFlags(0X201A8,0x80);
	MakeFunction    (0X201AC,0X201B0);
	SetFunctionFlags(0X201AC,0xc0);
	MakeFunction    (0X201B0,0X201B4);
	SetFunctionFlags(0X201B0,0xc0);
	MakeFunction    (0X201B4,0X201B8);
	SetFunctionFlags(0X201B4,0xc0);
	MakeFunction    (0X201B8,0X201BC);
	SetFunctionFlags(0X201B8,0xc0);
	MakeFunction    (0X201BC,0X201C0);
	SetFunctionFlags(0X201BC,0xc0);
	MakeFunction    (0X201C0,0X201C4);
	SetFunctionFlags(0X201C0,0xc0);
	MakeFunction    (0X201C4,0X201C8);
	SetFunctionFlags(0X201C4,0xc0);
	MakeFunction    (0X201C8,0X201CC);
	SetFunctionFlags(0X201C8,0xc0);
	MakeFunction    (0X201CC,0X201D0);
	SetFunctionFlags(0X201CC,0xc0);
	MakeFunction    (0X201D0,0X201D4);
	SetFunctionFlags(0X201D0,0xc0);
	MakeFunction    (0X201D4,0X201D8);
	SetFunctionFlags(0X201D4,0xc0);
	MakeFunction    (0X201D8,0X201DC);
	SetFunctionFlags(0X201D8,0xc0);
	MakeFunction    (0X201DC,0X201E0);
	SetFunctionFlags(0X201DC,0xc0);
	MakeFunction    (0X201E0,0X201E4);
	SetFunctionFlags(0X201E0,0xc0);
	MakeFunction    (0X201E4,0X201E8);
	SetFunctionFlags(0X201E4,0xc0);
	MakeFunction    (0X201E8,0X201EC);
	SetFunctionFlags(0X201E8,0xc0);
	MakeFunction    (0X201EC,0X201F0);
	SetFunctionFlags(0X201EC,0xc0);
	MakeFunction    (0X201F0,0X201F4);
	SetFunctionFlags(0X201F0,0x80);
	MakeFunction    (0X201F4,0X201F8);
	SetFunctionFlags(0X201F4,0xc0);
	MakeFunction    (0X201F8,0X201FC);
	SetFunctionFlags(0X201F8,0xc0);
	MakeFunction    (0X201FC,0X20200);
	SetFunctionFlags(0X201FC,0xc0);
	MakeFunction    (0X20200,0X20204);
	SetFunctionFlags(0X20200,0xc0);
	MakeFunction    (0X20204,0X20208);
	SetFunctionFlags(0X20204,0xc0);
	MakeFunction    (0X20208,0X2020C);
	SetFunctionFlags(0X20208,0xc0);
	MakeFunction    (0X2020C,0X20210);
	SetFunctionFlags(0X2020C,0xc0);
	MakeFunction    (0X20210,0X20214);
	SetFunctionFlags(0X20210,0xc0);
	MakeFunction    (0X20214,0X20218);
	SetFunctionFlags(0X20214,0xc0);
	MakeFunction    (0X20218,0X2021C);
	SetFunctionFlags(0X20218,0xc0);
	MakeFunction    (0X2021C,0X20220);
	SetFunctionFlags(0X2021C,0xc0);
	MakeFunction    (0X20220,0X20224);
	SetFunctionFlags(0X20220,0xc0);
	MakeFunction    (0X20224,0X20228);
	SetFunctionFlags(0X20224,0xc0);
	MakeFunction    (0X20228,0X2022C);
	SetFunctionFlags(0X20228,0xc0);
	MakeFunction    (0X2022C,0X20230);
	SetFunctionFlags(0X2022C,0xc0);
	MakeFunction    (0X20230,0X20234);
	SetFunctionFlags(0X20230,0xc0);
	MakeFunction    (0X20234,0X20238);
	SetFunctionFlags(0X20234,0xc0);
	MakeFunction    (0X20238,0X2023C);
	SetFunctionFlags(0X20238,0xc0);
	MakeFunction    (0X2023C,0X20240);
	SetFunctionFlags(0X2023C,0xc0);
	MakeFunction    (0X20240,0X20244);
	SetFunctionFlags(0X20240,0xc0);
	MakeFunction    (0X20244,0X20248);
	SetFunctionFlags(0X20244,0xc0);
	MakeFunction    (0X20248,0X2024C);
	SetFunctionFlags(0X20248,0xc0);
	MakeFunction    (0X2024C,0X20250);
	SetFunctionFlags(0X2024C,0x80);
	MakeFunction    (0X20250,0X20254);
	SetFunctionFlags(0X20250,0x80);
	MakeFunction    (0X20254,0X20258);
	SetFunctionFlags(0X20254,0xc0);
	MakeFunction    (0X20258,0X2025C);
	SetFunctionFlags(0X20258,0x80);
	MakeFunction    (0X2025C,0X20260);
	SetFunctionFlags(0X2025C,0x80);
	MakeFunction    (0X20260,0X20264);
	SetFunctionFlags(0X20260,0x80);
	MakeFunction    (0X20264,0X20268);
	SetFunctionFlags(0X20264,0xc0);
	MakeFunction    (0X20268,0X2026C);
	SetFunctionFlags(0X20268,0x80);
	MakeFunction    (0X2026C,0X20270);
	SetFunctionFlags(0X2026C,0x80);
	MakeFunction    (0X20270,0X20274);
	SetFunctionFlags(0X20270,0x80);
	MakeFunction    (0X20274,0X20278);
	SetFunctionFlags(0X20274,0x80);
	MakeFunction    (0X20278,0X2027C);
	SetFunctionFlags(0X20278,0x80);
	MakeFunction    (0X2027C,0X20280);
	SetFunctionFlags(0X2027C,0x80);
	MakeFunction    (0X20280,0X20284);
	SetFunctionFlags(0X20280,0x80);
	MakeFunction    (0X20284,0X20288);
	SetFunctionFlags(0X20284,0x80);
	MakeFunction    (0X20288,0X2028C);
	SetFunctionFlags(0X20288,0x80);
	MakeFunction    (0X2028C,0X20290);
	SetFunctionFlags(0X2028C,0x80);
	MakeFunction    (0X20290,0X20294);
	SetFunctionFlags(0X20290,0x80);
	MakeFunction    (0X20294,0X20298);
	SetFunctionFlags(0X20294,0x80);
	MakeFunction    (0X20298,0X2029C);
	SetFunctionFlags(0X20298,0x80);
	MakeFunction    (0X2029C,0X202A0);
	SetFunctionFlags(0X2029C,0xc0);
	MakeFunction    (0X202A0,0X202A4);
	SetFunctionFlags(0X202A0,0x80);
	MakeFunction    (0X202A4,0X202A8);
	SetFunctionFlags(0X202A4,0x80);
	MakeFunction    (0X202A8,0X202AC);
	SetFunctionFlags(0X202A8,0x80);
	MakeFunction    (0X202AC,0X202B0);
	SetFunctionFlags(0X202AC,0x80);
	MakeFunction    (0X202B0,0X202B4);
	SetFunctionFlags(0X202B0,0x80);
	MakeFunction    (0X202B4,0X202B8);
	SetFunctionFlags(0X202B4,0xc0);
	MakeFunction    (0X202B8,0X202BC);
	SetFunctionFlags(0X202B8,0x80);
	MakeFunction    (0X202BC,0X202C0);
	SetFunctionFlags(0X202BC,0x80);
	MakeFunction    (0X202C0,0X202C4);
	SetFunctionFlags(0X202C0,0xc0);
	MakeFunction    (0X202C4,0X202C8);
	SetFunctionFlags(0X202C4,0x80);
	MakeFunction    (0X202C8,0X202CC);
	SetFunctionFlags(0X202C8,0x80);
	MakeFunction    (0X202CC,0X202D0);
	SetFunctionFlags(0X202CC,0x80);
	MakeFunction    (0X202D0,0X202D4);
	SetFunctionFlags(0X202D0,0x80);
	MakeFunction    (0X202D4,0X202D8);
	SetFunctionFlags(0X202D4,0x80);
	MakeFunction    (0X202D8,0X202DC);
	SetFunctionFlags(0X202D8,0xc0);
	MakeFunction    (0X202DC,0X202E0);
	SetFunctionFlags(0X202DC,0xc0);
	MakeFunction    (0X202E0,0X202E4);
	SetFunctionFlags(0X202E0,0x80);
	MakeFunction    (0X202E4,0X202E8);
	SetFunctionFlags(0X202E4,0x80);
	MakeFunction    (0X202E8,0X202EC);
	SetFunctionFlags(0X202E8,0x80);
	MakeFunction    (0X202EC,0X202F0);
	SetFunctionFlags(0X202EC,0x80);
	MakeFunction    (0X202F0,0X202F4);
	SetFunctionFlags(0X202F0,0x80);
	MakeFunction    (0X202F4,0X202F8);
	SetFunctionFlags(0X202F4,0x80);
	MakeFunction    (0X202F8,0X202FC);
	SetFunctionFlags(0X202F8,0x80);
	MakeFunction    (0X202FC,0X20300);
	SetFunctionFlags(0X202FC,0x80);
	MakeFunction    (0X20300,0X20304);
	SetFunctionFlags(0X20300,0x80);
	MakeFunction    (0X20304,0X20308);
	SetFunctionFlags(0X20304,0x80);
	MakeFunction    (0X20308,0X2030C);
	SetFunctionFlags(0X20308,0x80);
	MakeFunction    (0X2030C,0X20310);
	SetFunctionFlags(0X2030C,0xc0);
	MakeFunction    (0X20310,0X20314);
	SetFunctionFlags(0X20310,0x80);
	MakeFunction    (0X20314,0X20318);
	SetFunctionFlags(0X20314,0xc0);
	MakeFunction    (0X20318,0X2031C);
	SetFunctionFlags(0X20318,0x80);
	MakeFunction    (0X2031C,0X20320);
	SetFunctionFlags(0X2031C,0x80);
	MakeFunction    (0X20320,0X20324);
	SetFunctionFlags(0X20320,0x80);
	MakeFunction    (0X20324,0X20328);
	SetFunctionFlags(0X20324,0x80);
	MakeFunction    (0X20328,0X2032C);
	SetFunctionFlags(0X20328,0xc0);
	MakeFunction    (0X2032C,0X20330);
	SetFunctionFlags(0X2032C,0x80);
	MakeFunction    (0X20330,0X20334);
	SetFunctionFlags(0X20330,0x80);
	MakeFunction    (0X20334,0X20338);
	SetFunctionFlags(0X20334,0x80);
	MakeFunction    (0X20338,0X2033C);
	SetFunctionFlags(0X20338,0x80);
	MakeFunction    (0X2033C,0X20340);
	SetFunctionFlags(0X2033C,0x80);
	MakeFunction    (0X20340,0X20344);
	SetFunctionFlags(0X20340,0x80);
	MakeFunction    (0X20344,0X20348);
	SetFunctionFlags(0X20344,0x80);
	MakeFunction    (0X20348,0X2034C);
	SetFunctionFlags(0X20348,0x80);
	MakeFunction    (0X2034C,0X20350);
	SetFunctionFlags(0X2034C,0x80);
	MakeFunction    (0X20350,0X20354);
	SetFunctionFlags(0X20350,0x80);
	MakeFunction    (0X20354,0X20358);
	SetFunctionFlags(0X20354,0x80);
	MakeFunction    (0X20358,0X2035C);
	SetFunctionFlags(0X20358,0x80);
	MakeFunction    (0X2035C,0X20360);
	SetFunctionFlags(0X2035C,0xc0);
	MakeFunction    (0X20360,0X20364);
	SetFunctionFlags(0X20360,0xc0);
	MakeFunction    (0X20364,0X20368);
	SetFunctionFlags(0X20364,0x80);
	MakeFunction    (0X20368,0X2036C);
	SetFunctionFlags(0X20368,0xc0);
	MakeFunction    (0X2036C,0X20370);
	SetFunctionFlags(0X2036C,0x80);
	MakeFunction    (0X20370,0X20374);
	SetFunctionFlags(0X20370,0xc0);
	MakeFunction    (0X20374,0X20378);
	SetFunctionFlags(0X20374,0xc0);
	MakeFunction    (0X20378,0X2037C);
	SetFunctionFlags(0X20378,0xc0);
	MakeFunction    (0X2037C,0X20380);
	SetFunctionFlags(0X2037C,0xc0);
	MakeFunction    (0X20380,0X20384);
	SetFunctionFlags(0X20380,0xc0);
	MakeFunction    (0X20384,0X20388);
	SetFunctionFlags(0X20384,0xc0);
	MakeFunction    (0X20388,0X2038C);
	SetFunctionFlags(0X20388,0x80);
	MakeFunction    (0X2038C,0X20390);
	SetFunctionFlags(0X2038C,0x80);
	MakeFunction    (0X20390,0X20394);
	SetFunctionFlags(0X20390,0xc0);
	MakeFunction    (0X20394,0X20398);
	SetFunctionFlags(0X20394,0xc0);
	MakeFunction    (0X20398,0X2039C);
	SetFunctionFlags(0X20398,0xc0);
	MakeFunction    (0X2039C,0X203A0);
	SetFunctionFlags(0X2039C,0x80);
	MakeFunction    (0X203A0,0X203A4);
	SetFunctionFlags(0X203A0,0x80);
	MakeFunction    (0X203A4,0X203A8);
	SetFunctionFlags(0X203A4,0xc0);
	MakeFunction    (0X203F8,0X203FC);
	SetFunctionFlags(0X203F8,0x80);
	MakeFunction    (0X203FC,0X20400);
	SetFunctionFlags(0X203FC,0x80);
	MakeFunction    (0X20400,0X20404);
	SetFunctionFlags(0X20400,0x80);
	MakeFunction    (0X20404,0X2040C);
	SetFunctionFlags(0X20404,0x0);
	MakeFunction    (0X2040C,0X20432);
	SetFunctionFlags(0X2040C,0x0);
	MakeFunction    (0X20432,0X20464);
	SetFunctionFlags(0X20432,0x0);
	MakeFunction    (0X20464,0X2048C);
	SetFunctionFlags(0X20464,0x0);
	MakeFunction    (0X2048C,0X204B4);
	SetFunctionFlags(0X2048C,0x0);
	MakeFunction    (0X204B4,0X204DC);
	SetFunctionFlags(0X204B4,0x0);
	MakeFunction    (0X204DC,0X204F6);
	SetFunctionFlags(0X204DC,0x0);
	MakeFunction    (0X20506,0X2053E);
	SetFunctionFlags(0X20506,0x0);
	MakeFunction    (0X2053E,0X20584);
	SetFunctionFlags(0X2053E,0x0);
	MakeFunction    (0X20584,0X2059E);
	SetFunctionFlags(0X20584,0x0);
	MakeFunction    (0X2059E,0X205AC);
	SetFunctionFlags(0X2059E,0x0);
	MakeFunction    (0X205AC,0X205B2);
	SetFunctionFlags(0X205AC,0x0);
	MakeFunction    (0X205B2,0X205DE);
	SetFunctionFlags(0X205B2,0x0);
	MakeFunction    (0X205DE,0X2061C);
	SetFunctionFlags(0X205DE,0x0);
	MakeFunction    (0X2061C,0X20692);
	SetFunctionFlags(0X2061C,0x0);
	MakeFunction    (0X20692,0X206DC);
	SetFunctionFlags(0X20692,0x0);
	MakeFunction    (0X207BC,0X207CA);
	SetFunctionFlags(0X207BC,0x0);
	MakeFunction    (0X20802,0X20822);
	SetFunctionFlags(0X20802,0x0);
	MakeFunction    (0X20822,0X20868);
	SetFunctionFlags(0X20822,0x0);
	MakeFunction    (0X20868,0X208DE);
	SetFunctionFlags(0X20868,0x0);
	MakeFunction    (0X208DE,0X2091A);
	SetFunctionFlags(0X208DE,0x0);
	MakeFunction    (0X2091A,0X2097A);
	SetFunctionFlags(0X2091A,0x0);
	MakeNameEx(0X20930, "@Loop", SN_LOCAL);
	MakeNameEx(0X20970, "@Next", SN_LOCAL);
	MakeFunction    (0X2097A,0X20994);
	SetFunctionFlags(0X2097A,0x0);
	MakeFunction    (0X20994,0X209B0);
	SetFunctionFlags(0X20994,0x0);
	MakeFunction    (0X209B0,0X209CA);
	SetFunctionFlags(0X209B0,0x0);
	MakeFunction    (0X209CA,0X20A04);
	SetFunctionFlags(0X209CA,0x0);
	MakeFunction    (0X20BDC,0X20C1C);
	SetFunctionFlags(0X20BDC,0x0);
	MakeNameEx(0X20BF4, "@Countdown", SN_LOCAL);
	MakeNameEx(0X20C16, "@Done", SN_LOCAL);
	MakeFunction    (0X20C1C,0X20C40);
	SetFunctionFlags(0X20C1C,0x0);
	MakeFunction    (0X20C40,0X20C50);
	SetFunctionFlags(0X20C40,0x0);
	MakeFunction    (0X20C50,0X20CB0);
	SetFunctionFlags(0X20C50,0x0);
	MakeFunction    (0X20CB0,0X20CE2);
	SetFunctionFlags(0X20CB0,0x0);
	MakeFunction    (0X20CE2,0X20D08);
	SetFunctionFlags(0X20CE2,0x0);
	MakeNameEx(0X20D02, "@Done", SN_LOCAL);
	MakeFunction    (0X20D08,0X20D18);
	SetFunctionFlags(0X20D08,0x0);
	MakeNameEx(0X20D16, "@Return", SN_LOCAL);
	MakeFunction    (0X20D18,0X20D1E);
	SetFunctionFlags(0X20D18,0x0);
	MakeFunction    (0X20D1E,0X20D7C);
	SetFunctionFlags(0X20D1E,0x0);
	MakeFunction    (0X20D7C,0X20DF4);
	SetFunctionFlags(0X20D7C,0x0);
	MakeFunction    (0X20DF4,0X20E4A);
	SetFunctionFlags(0X20DF4,0x0);
	MakeFunction    (0X20E4A,0X20E6A);
	SetFunctionFlags(0X20E4A,0x0);
	MakeFunction    (0X20E6A,0X20E8C);
	SetFunctionFlags(0X20E6A,0x0);
	MakeFunction    (0X20E96,0X20EBA);
	SetFunctionFlags(0X20E96,0x0);
	MakeFunction    (0X20EBA,0X20EF6);
	SetFunctionFlags(0X20EBA,0x0);
	MakeFunction    (0X20EF6,0X20F12);
	SetFunctionFlags(0X20EF6,0x0);
	MakeFunction    (0X20F12,0X20F1A);
	SetFunctionFlags(0X20F12,0x0);
	MakeFunction    (0X20F1A,0X20F7C);
	SetFunctionFlags(0X20F1A,0x0);
	MakeFunction    (0X20F82,0X20F88);
	SetFunctionFlags(0X20F82,0x0);
	MakeFunction    (0X20F88,0X20FBA);
	SetFunctionFlags(0X20F88,0x0);
	MakeFunction    (0X20FBA,0X20FD4);
	SetFunctionFlags(0X20FBA,0x0);
	MakeFunction    (0X20FD4,0X2100C);
	SetFunctionFlags(0X20FD4,0x0);
	MakeFunction    (0X21034,0X21078);
	SetFunctionFlags(0X21034,0x0);
	MakeFunction    (0X21078,0X210DA);
	SetFunctionFlags(0X21078,0x0);
	MakeFunction    (0X210DA,0X210F0);
	SetFunctionFlags(0X210DA,0x0);
	MakeFunction    (0X210F0,0X21128);
	SetFunctionFlags(0X210F0,0x0);
	MakeNameEx(0X21122, "@Continue", SN_LOCAL);
	MakeFunction    (0X21128,0X21152);
	SetFunctionFlags(0X21128,0x0);
	MakeNameEx(0X21140, "@Failure", SN_LOCAL);
	MakeNameEx(0X2114C, "@Skip", SN_LOCAL);
	MakeFunction    (0X21152,0X21180);
	SetFunctionFlags(0X21152,0x0);
	MakeNameEx(0X21166, "@Enemy", SN_LOCAL);
	MakeNameEx(0X21172, "@Continue", SN_LOCAL);
	MakeNameEx(0X2117E, "@Return", SN_LOCAL);
	MakeFunction    (0X21180,0X211A8);
	SetFunctionFlags(0X21180,0x0);
	MakeFunction    (0X211A8,0X211C6);
	SetFunctionFlags(0X211A8,0x0);
	MakeFunction    (0X211C6,0X211E2);
	SetFunctionFlags(0X211C6,0x0);
	MakeFunction    (0X211E6,0X211FC);
	SetFunctionFlags(0X211E6,0x0);
	MakeFunction    (0X211FC,0X21224);
	SetFunctionFlags(0X211FC,0x0);
	MakeFunction    (0X21224,0X21266);
	SetFunctionFlags(0X21224,0x0);
	MakeNameEx(0X2124C, "@Continue", SN_LOCAL);
	MakeNameEx(0X21260, "@Failure", SN_LOCAL);
	MakeFunction    (0X2126A,0X212A2);
	SetFunctionFlags(0X2126A,0x0);
	MakeNameEx(0X21286, "@Loop", SN_LOCAL);
	MakeNameEx(0X21294, "@Break", SN_LOCAL);
	MakeNameEx(0X21298, "@Done", SN_LOCAL);
	MakeNameEx(0X2129E, "@NotAbleToEvade", SN_LOCAL);
	MakeFunction    (0X212A6,0X212B6);
	SetFunctionFlags(0X212A6,0x0);
	MakeFunction    (0X212B6,0X212DA);
	SetFunctionFlags(0X212B6,0x0);
	MakeNameEx(0X212D4, "@Skip", SN_LOCAL);
	MakeFunction    (0X212DE,0X212FA);
	SetFunctionFlags(0X212DE,0x0);
	MakeFunction    (0X212FA,0X2130E);
	SetFunctionFlags(0X212FA,0x0);
	MakeFunction    (0X2130E,0X2131C);
	SetFunctionFlags(0X2130E,0x0);
	MakeFunction    (0X2131C,0X21320);
	SetFunctionFlags(0X2131C,0x0);
	MakeFunction    (0X21340,0X2138C);
	SetFunctionFlags(0X21340,0x0);
	MakeFunction    (0X2138C,0X213B2);
	SetFunctionFlags(0X2138C,0x0);
	MakeFunction    (0X213B2,0X213BA);
	SetFunctionFlags(0X213B2,0x0);
	MakeFunction    (0X213BA,0X21424);
	SetFunctionFlags(0X213BA,0x0);
	MakeFunction    (0X21424,0X21460);
	SetFunctionFlags(0X21424,0x0);
	MakeFunction    (0X21460,0X21484);
	SetFunctionFlags(0X21460,0x0);
	MakeFunction    (0X21484,0X214A8);
	SetFunctionFlags(0X21484,0x0);
	MakeFunction    (0X214A8,0X21520);
	SetFunctionFlags(0X214A8,0x0);
	MakeFunction    (0X21520,0X2154C);
	SetFunctionFlags(0X21520,0x0);
	MakeNameEx(0X21538, "@ForceMember", SN_LOCAL);
	MakeFunction    (0X2154C,0X2157A);
	SetFunctionFlags(0X2154C,0x0);
	MakeNameEx(0X2156A, "@ForceMember", SN_LOCAL);
	MakeNameEx(0X21574, "@Done", SN_LOCAL);
	MakeFunction    (0X2157A,0X215A0);
	SetFunctionFlags(0X2157A,0x0);
	MakeFunction    (0X215A0,0X215AA);
	SetFunctionFlags(0X215A0,0x0);
	MakeFunction    (0X215AA,0X215C8);
	SetFunctionFlags(0X215AA,0x0);
	MakeFunction    (0X215C8,0X215F2);
	SetFunctionFlags(0X215C8,0x0);
	MakeFunction    (0X215F2,0X215FC);
	SetFunctionFlags(0X215F2,0x0);
	MakeFunction    (0X215FC,0X2160E);
	SetFunctionFlags(0X215FC,0x0);
	MakeFunction    (0X2160E,0X21620);
	SetFunctionFlags(0X2160E,0x0);
	MakeFunction    (0X21620,0X21640);
	SetFunctionFlags(0X21620,0x0);
	MakeFunction    (0X21640,0X21744);
	SetFunctionFlags(0X21640,0x0);
	MakeFunction    (0X21744,0X21754);
	SetFunctionFlags(0X21744,0x0);
	MakeFunction    (0X21754,0X218D4);
	SetFunctionFlags(0X21754,0x0);
	MakeNameEx(0X217D6, "@CheckMpCost", SN_LOCAL);
	MakeNameEx(0X217EE, "@CheckOpponent", SN_LOCAL);
	MakeFunction    (0X218D4,0X218EE);
	SetFunctionFlags(0X218D4,0x0);
	MakeFunction    (0X218EE,0X21934);
	SetFunctionFlags(0X218EE,0x0);
	MakeFunction    (0X21934,0X2195E);
	SetFunctionFlags(0X21934,0x0);
	MakeNameEx(0X21956, "@Opponent", SN_LOCAL);
	MakeNameEx(0X21958, "@Done", SN_LOCAL);
	MakeFunction    (0X2195E,0X219C0);
	SetFunctionFlags(0X2195E,0x0);
	MakeFunction    (0X219C0,0X219D0);
	SetFunctionFlags(0X219C0,0x0);
	MakeNameEx(0X219CE, "@Return", SN_LOCAL);
	MakeFunction    (0X219D0,0X219E6);
	SetFunctionFlags(0X219D0,0x0);
	MakeFunction    (0X219E6,0X219FC);
	SetFunctionFlags(0X219E6,0x0);
	MakeFunction    (0X219FC,0X21A1C);
	SetFunctionFlags(0X219FC,0x0);
	MakeNameEx(0X21A16, "@Skip", SN_LOCAL);
	MakeFunction    (0X21A1C,0X21A3E);
	SetFunctionFlags(0X21A1C,0x0);
	MakeFunction    (0X21A3E,0X21A4E);
	SetFunctionFlags(0X21A3E,0x0);
	MakeNameEx(0X21A4C, "@Return", SN_LOCAL);
	MakeFunction    (0X21A4E,0X21A80);
	SetFunctionFlags(0X21A4E,0x0);
	MakeNameEx(0X21A7A, "@Skip", SN_LOCAL);
	MakeFunction    (0X21A80,0X21AC8);
	SetFunctionFlags(0X21A80,0x0);
	MakeNameEx(0X21AC2, "@Skip", SN_LOCAL);
	MakeFunction    (0X21AC8,0X21ACA);
	SetFunctionFlags(0X21AC8,0x0);
	MakeFunction    (0X21ACA,0X21AEE);
	SetFunctionFlags(0X21ACA,0x0);
	MakeFunction    (0X21AEE,0X21B80);
	SetFunctionFlags(0X21AEE,0x0);
	MakeNameEx(0X21B00, "@ClearEventFlags_Loop", SN_LOCAL);
	MakeNameEx(0X21B0E, "@ClearDealsItems_Loop", SN_LOCAL);
	MakeNameEx(0X21B26, "@InitForceMembersData_Loop", SN_LOCAL);
	MakeNameEx(0X21B34, "@ClearPromotedAtLevels_Loop", SN_LOCAL);
	MakeNameEx(0X21B3C, "@LevelUpRegularForce_Loop", SN_LOCAL);
	MakeNameEx(0X21B4E, "@IncreaseStatsOnLevelUp_Loop", SN_LOCAL);
	MakeNameEx(0X21B70, "@EmptyBattleParty_Loop", SN_LOCAL);
	MakeFunction    (0X21B80,0X21BCC);
	SetFunctionFlags(0X21B80,0x0);
	MakeFunction    (0X21BCC,0X21BDC);
	SetFunctionFlags(0X21BCC,0x0);
	MakeFunction    (0X21BDC,0X21BF6);
	SetFunctionFlags(0X21BDC,0x0);
	MakeNameEx(0X21BE8, "@Loop", SN_LOCAL);
	MakeFunction    (0X21BF6,0X21C0C);
	SetFunctionFlags(0X21BF6,0x0);
	MakeFunction    (0X21C0C,0X21C70);
	SetFunctionFlags(0X21C0C,0x0);
	MakeFunction    (0X21C70,0X21C78);
	SetFunctionFlags(0X21C70,0x0);
	MakeFunction    (0X21C78,0X21C9C);
	SetFunctionFlags(0X21C78,0x0);
	MakeFunction    (0X21C9C,0X21CCE);
	SetFunctionFlags(0X21C9C,0x0);
	MakeNameEx(0X21CC8, "@Skip", SN_LOCAL);
	MakeFunction    (0X21CCE,0X21CF2);
	SetFunctionFlags(0X21CCE,0x0);
	MakeFunction    (0X21CF2,0X21D56);
	SetFunctionFlags(0X21CF2,0x0);
	MakeNameEx(0X21D28, "@ApplyEquipOnStats_Loop", SN_LOCAL);
	MakeNameEx(0X21D48, "@NextItem", SN_LOCAL);
	MakeFunction    (0X21D56,0X21DA6);
	SetFunctionFlags(0X21D56,0x0);
	MakeFunction    (0X21DA6,0X21DBC);
	SetFunctionFlags(0X21DA6,0x0);
	MakeFunction    (0X21DBC,0X21DF2);
	SetFunctionFlags(0X21DBC,0x0);
	MakeFunction    (0X21DF2,0X21EA6);
	SetFunctionFlags(0X21DF2,0x0);
	MakeFunction    (0X21EA6,0X21ED8);
	SetFunctionFlags(0X21EA6,0x0);
	MakeFunction    (0X21ED8,0X21F16);
	SetFunctionFlags(0X21ED8,0x0);
	MakeFunction    (0X21F16,0X21F64);
	SetFunctionFlags(0X21F16,0x0);
	MakeFunction    (0X21F64,0X21FF0);
	SetFunctionFlags(0X21F64,0x0);
	MakeFunction    (0X21FF0,0X22026);
	SetFunctionFlags(0X21FF0,0x0);
	MakeFunction    (0X22026,0X2204A);
	SetFunctionFlags(0X22026,0x0);
	MakeNameEx(0X22034, "@Loop", SN_LOCAL);
	MakeNameEx(0X22040, "@Next", SN_LOCAL);
	MakeFunction    (0X2204C,0X2206C);
	SetFunctionFlags(0X2204C,0x0);
	MakeFunction    (0X2206C,0X22090);
	SetFunctionFlags(0X2206C,0x0);
	MakeNameEx(0X22074, "@Loop", SN_LOCAL);
	MakeNameEx(0X2207C, "@Skip", SN_LOCAL);
	MakeFunction    (0X22090,0X2209A);
	SetFunctionFlags(0X22090,0x0);
	MakeFunction    (0X2209A,0X220A4);
	SetFunctionFlags(0X2209A,0x0);
	MakeFunction    (0X220A4,0X220AE);
	SetFunctionFlags(0X220A4,0x0);
	MakeFunction    (0X220AE,0X220B8);
	SetFunctionFlags(0X220AE,0x0);
	MakeFunction    (0X220B8,0X220C8);
	SetFunctionFlags(0X220B8,0x0);
	MakeFunction    (0X220C8,0X220D0);
	SetFunctionFlags(0X220C8,0x0);
	MakeNameEx(0X220CE, "@Return", SN_LOCAL);
	MakeFunction    (0X220D0,0X220F4);
	SetFunctionFlags(0X220D0,0x0);
	MakeNameEx(0X220DA, "@Loop", SN_LOCAL);
	MakeNameEx(0X220E8, "@Next", SN_LOCAL);
	MakeNameEx(0X220EE, "@Break", SN_LOCAL);
	MakeFunction    (0X220F4,0X22100);
	SetFunctionFlags(0X220F4,0x0);
	MakeNameEx(0X220FE, "@Return", SN_LOCAL);
	MakeFunction    (0X22100,0X2210E);
	SetFunctionFlags(0X22100,0x0);
	MakeFunction    (0X2210E,0X22132);
	SetFunctionFlags(0X2210E,0x0);
	MakeNameEx(0X22116, "@FindEmptyBattleSlot_Loop", SN_LOCAL);
	MakeNameEx(0X22126, "@Next", SN_LOCAL);
	MakeNameEx(0X2212C, "@Break", SN_LOCAL);
	MakeFunction    (0X22132,0X22158);
	SetFunctionFlags(0X22132,0x0);
	MakeNameEx(0X2213C, "@Loop", SN_LOCAL);
	MakeNameEx(0X2214C, "@Next", SN_LOCAL);
	MakeNameEx(0X22152, "@Break", SN_LOCAL);
	MakeFunction    (0X22158,0X22176);
	SetFunctionFlags(0X22158,0x0);
	MakeNameEx(0X22164, "@Loop", SN_LOCAL);
	MakeNameEx(0X22170, "@Break", SN_LOCAL);
	MakeFunction    (0X22176,0X221AE);
	SetFunctionFlags(0X22176,0x0);
	MakeFunction    (0X221AE,0X221D4);
	SetFunctionFlags(0X221AE,0x0);
	MakeFunction    (0X221D4,0X221E4);
	SetFunctionFlags(0X221D4,0x0);
	MakeFunction    (0X221E4,0X22220);
	SetFunctionFlags(0X221E4,0x0);
	MakeNameEx(0X221EA, "@Loop", SN_LOCAL);
	MakeNameEx(0X22216, "@Skip", SN_LOCAL);
	MakeFunction    (0X22220,0X22232);
	SetFunctionFlags(0X22220,0x0);
	MakeNameEx(0X22224, "@Loop", SN_LOCAL);
	MakeFunction    (0X22232,0X22298);
	SetFunctionFlags(0X22232,0x0);
	MakeNameEx(0X22292, "@Skip", SN_LOCAL);
	MakeFunction    (0X22298,0X222B0);
	SetFunctionFlags(0X22298,0x0);
	MakeNameEx(0X222AA, "@Skip", SN_LOCAL);
	MakeFunction    (0X222B0,0X222CA);
	SetFunctionFlags(0X222B0,0x0);
	MakeNameEx(0X222C4, "@Skip", SN_LOCAL);
	MakeFunction    (0X222CA,0X222E4);
	SetFunctionFlags(0X222CA,0x0);
	MakeNameEx(0X222DE, "@Skip", SN_LOCAL);
	MakeFunction    (0X222E4,0X222FE);
	SetFunctionFlags(0X222E4,0x0);
	MakeNameEx(0X222F8, "@Skip", SN_LOCAL);
	MakeFunction    (0X222FE,0X22318);
	SetFunctionFlags(0X222FE,0x0);
	MakeNameEx(0X22312, "@Skip", SN_LOCAL);
	MakeFunction    (0X22318,0X22332);
	SetFunctionFlags(0X22318,0x0);
	MakeNameEx(0X2232C, "@Skip", SN_LOCAL);
	MakeFunction    (0X22332,0X2234C);
	SetFunctionFlags(0X22332,0x0);
	MakeNameEx(0X22346, "@Skip", SN_LOCAL);
	MakeFunction    (0X2234C,0X22366);
	SetFunctionFlags(0X2234C,0x0);
	MakeNameEx(0X22360, "@Skip", SN_LOCAL);
	MakeFunction    (0X22366,0X22380);
	SetFunctionFlags(0X22366,0x0);
	MakeNameEx(0X2237A, "@Skip", SN_LOCAL);
	MakeFunction    (0X22380,0X22390);
	SetFunctionFlags(0X22380,0x0);
	MakeFunction    (0X22390,0X223A0);
	SetFunctionFlags(0X22390,0x0);
	MakeFunction    (0X223A0,0X223B4);
	SetFunctionFlags(0X223A0,0x0);
	MakeFunction    (0X223B4,0X223C8);
	SetFunctionFlags(0X223B4,0x0);
	MakeFunction    (0X223C8,0X223DC);
	SetFunctionFlags(0X223C8,0x0);
	MakeFunction    (0X223DC,0X223F0);
	SetFunctionFlags(0X223DC,0x0);
	MakeFunction    (0X223F0,0X22404);
	SetFunctionFlags(0X223F0,0x0);
	MakeFunction    (0X22404,0X22418);
	SetFunctionFlags(0X22404,0x0);
	MakeFunction    (0X22418,0X2242C);
	SetFunctionFlags(0X22418,0x0);
	MakeFunction    (0X2242C,0X22440);
	SetFunctionFlags(0X2242C,0x0);
	MakeFunction    (0X22440,0X22452);
	SetFunctionFlags(0X22440,0x0);
	MakeFunction    (0X22452,0X22464);
	SetFunctionFlags(0X22452,0x0);
	MakeFunction    (0X22464,0X22478);
	SetFunctionFlags(0X22464,0x0);
	MakeFunction    (0X22478,0X2248C);
	SetFunctionFlags(0X22478,0x0);
	MakeFunction    (0X2248C,0X2249E);
	SetFunctionFlags(0X2248C,0x0);
	MakeFunction    (0X2249E,0X224AC);
	SetFunctionFlags(0X2249E,0x0);
	MakeFunction    (0X224AC,0X224BA);
	SetFunctionFlags(0X224AC,0x0);
	MakeFunction    (0X224BA,0X224C8);
	SetFunctionFlags(0X224BA,0x0);
	MakeFunction    (0X224C8,0X224D6);
	SetFunctionFlags(0X224C8,0x0);
	MakeFunction    (0X224D6,0X224E4);
	SetFunctionFlags(0X224D6,0x0);
	MakeFunction    (0X224E4,0X224F2);
	SetFunctionFlags(0X224E4,0x0);
	MakeFunction    (0X224F2,0X22500);
	SetFunctionFlags(0X224F2,0x0);
	MakeFunction    (0X22500,0X2250E);
	SetFunctionFlags(0X22500,0x0);
	MakeFunction    (0X2250E,0X2251C);
	SetFunctionFlags(0X2250E,0x0);
	MakeFunction    (0X2251C,0X2252A);
	SetFunctionFlags(0X2251C,0x0);
	MakeFunction    (0X2252A,0X22538);
	SetFunctionFlags(0X2252A,0x0);
	MakeFunction    (0X22538,0X22546);
	SetFunctionFlags(0X22538,0x0);
	MakeFunction    (0X22546,0X22554);
	SetFunctionFlags(0X22546,0x0);
	MakeFunction    (0X22554,0X22562);
	SetFunctionFlags(0X22554,0x0);
	MakeFunction    (0X22562,0X22574);
	SetFunctionFlags(0X22562,0x0);
	MakeFunction    (0X22574,0X22586);
	SetFunctionFlags(0X22574,0x0);
	MakeFunction    (0X22586,0X22594);
	SetFunctionFlags(0X22586,0x0);
	MakeFunction    (0X22594,0X225A2);
	SetFunctionFlags(0X22594,0x0);
	MakeFunction    (0X225A2,0X225B0);
	SetFunctionFlags(0X225A2,0x0);
	MakeFunction    (0X225B0,0X225C4);
	SetFunctionFlags(0X225B0,0x0);
	MakeFunction    (0X225C4,0X225E0);
	SetFunctionFlags(0X225C4,0x0);
	MakeNameEx(0X225D0, "@Loop", SN_LOCAL);
	MakeFunction    (0X225E0,0X225F2);
	SetFunctionFlags(0X225E0,0x0);
	MakeFunction    (0X225F2,0X22610);
	SetFunctionFlags(0X225F2,0x0);
	MakeNameEx(0X22600, "@ForceMember", SN_LOCAL);
	MakeNameEx(0X22604, "@Continue", SN_LOCAL);
	MakeFunction    (0X22610,0X22620);
	SetFunctionFlags(0X22610,0x0);
	MakeFunction    (0X22620,0X22654);
	SetFunctionFlags(0X22620,0x0);
	MakeFunction    (0X22654,0X22664);
	SetFunctionFlags(0X22654,0x0);
	MakeFunction    (0X22664,0X22676);
	SetFunctionFlags(0X22664,0x0);
	MakeFunction    (0X22676,0X22688);
	SetFunctionFlags(0X22676,0x0);
	MakeFunction    (0X22688,0X2269A);
	SetFunctionFlags(0X22688,0x0);
	MakeFunction    (0X2269A,0X226AC);
	SetFunctionFlags(0X2269A,0x0);
	MakeFunction    (0X226AC,0X226BE);
	SetFunctionFlags(0X226AC,0x0);
	MakeFunction    (0X226BE,0X226D0);
	SetFunctionFlags(0X226BE,0x0);
	MakeFunction    (0X226D0,0X226E2);
	SetFunctionFlags(0X226D0,0x0);
}

static Functions_1(void) {

	MakeFunction    (0X226E2,0X226F4);
	SetFunctionFlags(0X226E2,0x0);
	MakeFunction    (0X226F4,0X22708);
	SetFunctionFlags(0X226F4,0x0);
	MakeFunction    (0X22708,0X2272C);
	SetFunctionFlags(0X22708,0x0);
	MakeFunction    (0X2272C,0X2273E);
	SetFunctionFlags(0X2272C,0x0);
	MakeFunction    (0X2273E,0X22750);
	SetFunctionFlags(0X2273E,0x0);
	MakeFunction    (0X22750,0X22762);
	SetFunctionFlags(0X22750,0x0);
	MakeFunction    (0X22762,0X22774);
	SetFunctionFlags(0X22762,0x0);
	MakeFunction    (0X22774,0X22786);
	SetFunctionFlags(0X22774,0x0);
	MakeFunction    (0X22786,0X22798);
	SetFunctionFlags(0X22786,0x0);
	MakeFunction    (0X22798,0X227AA);
	SetFunctionFlags(0X22798,0x0);
	MakeFunction    (0X227AA,0X227BC);
	SetFunctionFlags(0X227AA,0x0);
	MakeFunction    (0X227BC,0X227CE);
	SetFunctionFlags(0X227BC,0x0);
	MakeFunction    (0X227CE,0X227E0);
	SetFunctionFlags(0X227CE,0x0);
	MakeFunction    (0X227E0,0X227F2);
	SetFunctionFlags(0X227E0,0x0);
	MakeFunction    (0X227F2,0X22804);
	SetFunctionFlags(0X227F2,0x0);
	MakeFunction    (0X22804,0X22816);
	SetFunctionFlags(0X22804,0x0);
	MakeFunction    (0X22816,0X22824);
	SetFunctionFlags(0X22816,0x0);
	MakeFunction    (0X22824,0X22832);
	SetFunctionFlags(0X22824,0x0);
	MakeFunction    (0X22832,0X22840);
	SetFunctionFlags(0X22832,0x0);
	MakeFunction    (0X22840,0X2284E);
	SetFunctionFlags(0X22840,0x0);
	MakeFunction    (0X2284E,0X2285C);
	SetFunctionFlags(0X2284E,0x0);
	MakeFunction    (0X2285C,0X2286A);
	SetFunctionFlags(0X2285C,0x0);
	MakeFunction    (0X2286A,0X22878);
	SetFunctionFlags(0X2286A,0x0);
	MakeFunction    (0X22878,0X22886);
	SetFunctionFlags(0X22878,0x0);
	MakeFunction    (0X22886,0X22894);
	SetFunctionFlags(0X22886,0x0);
	MakeFunction    (0X22894,0X228A2);
	SetFunctionFlags(0X22894,0x0);
	MakeFunction    (0X228A2,0X228B0);
	SetFunctionFlags(0X228A2,0x0);
	MakeFunction    (0X228B0,0X228BE);
	SetFunctionFlags(0X228B0,0x0);
	MakeFunction    (0X228BE,0X228CC);
	SetFunctionFlags(0X228BE,0x0);
	MakeFunction    (0X228CC,0X228E6);
	SetFunctionFlags(0X228CC,0x0);
	MakeNameEx(0X228DA, "@Loop", SN_LOCAL);
	MakeFunction    (0X228E6,0X22910);
	SetFunctionFlags(0X228E6,0x0);
	MakeFunction    (0X22910,0X2293A);
	SetFunctionFlags(0X22910,0x0);
	MakeFunction    (0X2293A,0X22964);
	SetFunctionFlags(0X2293A,0x0);
	MakeFunction    (0X22964,0X2298E);
	SetFunctionFlags(0X22964,0x0);
	MakeFunction    (0X2298E,0X229B8);
	SetFunctionFlags(0X2298E,0x0);
	MakeFunction    (0X229B8,0X229E2);
	SetFunctionFlags(0X229B8,0x0);
	MakeFunction    (0X229E2,0X22A0C);
	SetFunctionFlags(0X229E2,0x0);
	MakeFunction    (0X22A0C,0X22A36);
	SetFunctionFlags(0X22A0C,0x0);
	MakeFunction    (0X22A36,0X22A60);
	SetFunctionFlags(0X22A36,0x0);
	MakeFunction    (0X22A60,0X22A8A);
	SetFunctionFlags(0X22A60,0x0);
	MakeFunction    (0X22A8A,0X22AB4);
	SetFunctionFlags(0X22A8A,0x0);
	MakeFunction    (0X22AB4,0X22ADC);
	SetFunctionFlags(0X22AB4,0x0);
	MakeFunction    (0X22ADC,0X22B06);
	SetFunctionFlags(0X22ADC,0x0);
	MakeFunction    (0X22B06,0X22B30);
	SetFunctionFlags(0X22B06,0x0);
	MakeFunction    (0X22B30,0X22B3E);
	SetFunctionFlags(0X22B30,0x0);
	MakeFunction    (0X22B3E,0X22B4C);
	SetFunctionFlags(0X22B3E,0x0);
	MakeFunction    (0X22B4C,0X22B5A);
	SetFunctionFlags(0X22B4C,0x0);
	MakeFunction    (0X22B5A,0X22B68);
	SetFunctionFlags(0X22B5A,0x0);
	MakeFunction    (0X22B68,0X22B76);
	SetFunctionFlags(0X22B68,0x0);
	MakeFunction    (0X22B76,0X22B84);
	SetFunctionFlags(0X22B76,0x0);
	MakeFunction    (0X22B84,0X22B92);
	SetFunctionFlags(0X22B84,0x0);
	MakeFunction    (0X22B92,0X22BA0);
	SetFunctionFlags(0X22B92,0x0);
	MakeFunction    (0X22BA0,0X22BAE);
	SetFunctionFlags(0X22BA0,0x0);
	MakeFunction    (0X22BAE,0X22BBC);
	SetFunctionFlags(0X22BAE,0x0);
	MakeFunction    (0X22BBC,0X22BCA);
	SetFunctionFlags(0X22BBC,0x0);
	MakeFunction    (0X22BCA,0X22C00);
	SetFunctionFlags(0X22BCA,0x0);
	MakeFunction    (0X22C00,0X22C2E);
	SetFunctionFlags(0X22C00,0x0);
	MakeFunction    (0X22C2E,0X22C5E);
	SetFunctionFlags(0X22C2E,0x0);
	MakeFunction    (0X22C5E,0X22C66);
	SetFunctionFlags(0X22C5E,0x0);
	MakeFunction    (0X22C66,0X22C6E);
	SetFunctionFlags(0X22C66,0x0);
	MakeFunction    (0X22C6E,0X22C76);
	SetFunctionFlags(0X22C6E,0x0);
	MakeFunction    (0X22C76,0X22C7E);
	SetFunctionFlags(0X22C76,0x0);
	MakeFunction    (0X22C7E,0X22C86);
	SetFunctionFlags(0X22C7E,0x0);
	MakeFunction    (0X22C86,0X22C8E);
	SetFunctionFlags(0X22C86,0x0);
	MakeFunction    (0X22C8E,0X22C96);
	SetFunctionFlags(0X22C8E,0x0);
	MakeFunction    (0X22C96,0X22C9E);
	SetFunctionFlags(0X22C96,0x0);
	MakeFunction    (0X22C9E,0X22CA6);
	SetFunctionFlags(0X22C9E,0x0);
	MakeFunction    (0X22CA6,0X22CAE);
	SetFunctionFlags(0X22CA6,0x0);
	MakeFunction    (0X22CAE,0X22CB6);
	SetFunctionFlags(0X22CAE,0x0);
	MakeFunction    (0X22CB6,0X22CBE);
	SetFunctionFlags(0X22CB6,0x0);
	MakeFunction    (0X22CBE,0X22CCC);
	SetFunctionFlags(0X22CBE,0x0);
	MakeFunction    (0X22CCC,0X22CDA);
	SetFunctionFlags(0X22CCC,0x0);
	MakeFunction    (0X22CDA,0X22CE8);
	SetFunctionFlags(0X22CDA,0x0);
	MakeFunction    (0X22CE8,0X22CF6);
	SetFunctionFlags(0X22CE8,0x0);
	MakeFunction    (0X22CF6,0X22D04);
	SetFunctionFlags(0X22CF6,0x0);
	MakeFunction    (0X22D04,0X22D12);
	SetFunctionFlags(0X22D04,0x0);
	MakeFunction    (0X22D12,0X22D20);
	SetFunctionFlags(0X22D12,0x0);
	MakeFunction    (0X22D20,0X22D2E);
	SetFunctionFlags(0X22D20,0x0);
	MakeFunction    (0X22D2E,0X22D58);
	SetFunctionFlags(0X22D2E,0x0);
	MakeFunction    (0X22D58,0X22D70);
	SetFunctionFlags(0X22D58,0x0);
	MakeFunction    (0X22D70,0X22D9E);
	SetFunctionFlags(0X22D70,0x0);
	MakeFunction    (0X22D9E,0X22DB6);
	SetFunctionFlags(0X22D9E,0x0);
	MakeFunction    (0X22DB6,0X22DDE);
	SetFunctionFlags(0X22DB6,0x0);
	MakeNameEx(0X22DC4, "@Loop", SN_LOCAL);
	MakeNameEx(0X22DCE, "@IncrementOccupiedItemSlotsCounter", SN_LOCAL);
	MakeNameEx(0X22DD8, "@Break", SN_LOCAL);
	MakeFunction    (0X22DDE,0X22DF2);
	SetFunctionFlags(0X22DDE,0x0);
	MakeFunction    (0X22DF2,0X22E0C);
	SetFunctionFlags(0X22DF2,0x0);
	MakeFunction    (0X22E0C,0X22E24);
	SetFunctionFlags(0X22E0C,0x0);
	MakeFunction    (0X22E24,0X22E36);
	SetFunctionFlags(0X22E24,0x0);
	MakeFunction    (0X22E36,0X22E48);
	SetFunctionFlags(0X22E36,0x0);
	MakeFunction    (0X22E48,0X22E5A);
	SetFunctionFlags(0X22E48,0x0);
	MakeFunction    (0X22E5A,0X22E6C);
	SetFunctionFlags(0X22E5A,0x0);
	MakeFunction    (0X22E6C,0X22E7E);
	SetFunctionFlags(0X22E6C,0x0);
	MakeFunction    (0X22E7E,0X22E92);
	SetFunctionFlags(0X22E7E,0x0);
	MakeFunction    (0X22E92,0X22EA8);
	SetFunctionFlags(0X22E92,0x0);
	MakeNameEx(0X22E9E, "@OccupiedItemSlot", SN_LOCAL);
	MakeNameEx(0X22EA4, "@Continue", SN_LOCAL);
	MakeFunction    (0X22EA8,0X22EB6);
	SetFunctionFlags(0X22EA8,0x0);
	MakeFunction    (0X22EB6,0X22EC0);
	SetFunctionFlags(0X22EB6,0x0);
	MakeFunction    (0X22EC0,0X22EFE);
	SetFunctionFlags(0X22EC0,0x0);
	MakeNameEx(0X22ED0, "@Loop", SN_LOCAL);
	MakeNameEx(0X22EE6, "@Next", SN_LOCAL);
	MakeNameEx(0X22EF2, "@GetItemIndex", SN_LOCAL);
	MakeNameEx(0X22EF8, "@Continue", SN_LOCAL);
	MakeFunction    (0X22EFE,0X22F36);
	SetFunctionFlags(0X22EFE,0x0);
	MakeFunction    (0X22F36,0X22F7A);
	SetFunctionFlags(0X22F36,0x0);
	MakeFunction    (0X22F7A,0X22FA6);
	SetFunctionFlags(0X22F7A,0x0);
	MakeFunction    (0X22FA6,0X22FD8);
	SetFunctionFlags(0X22FA6,0x0);
	MakeNameEx(0X22FD0, "@Skip", SN_LOCAL);
	MakeFunction    (0X22FD8,0X22FF2);
	SetFunctionFlags(0X22FD8,0x0);
	MakeNameEx(0X22FF0, "@Return", SN_LOCAL);
	MakeFunction    (0X22FF2,0X2303A);
	SetFunctionFlags(0X22FF2,0x0);
	MakeNameEx(0X2300E, "@Loop", SN_LOCAL);
	MakeNameEx(0X2301E, "@FindItem", SN_LOCAL);
	MakeNameEx(0X2302A, "@Next", SN_LOCAL);
	MakeNameEx(0X23030, "@Skip", SN_LOCAL);
	MakeNameEx(0X23034, "@ItemFound", SN_LOCAL);
	MakeFunction    (0X23040,0X23056);
	SetFunctionFlags(0X23040,0x0);
	MakeFunction    (0X23056,0X23068);
	SetFunctionFlags(0X23056,0x0);
	MakeFunction    (0X23068,0X2307A);
	SetFunctionFlags(0X23068,0x0);
	MakeFunction    (0X2307A,0X230EC);
	SetFunctionFlags(0X2307A,0x0);
	MakeFunction    (0X230F2,0X23136);
	SetFunctionFlags(0X230F2,0x0);
	MakeNameEx(0X23128, "@Continue", SN_LOCAL);
	MakeNameEx(0X2312E, "@Skip", SN_LOCAL);
	MakeFunction    (0X23136,0X23148);
	SetFunctionFlags(0X23136,0x0);
	MakeNameEx(0X23144, "@Skip", SN_LOCAL);
	MakeFunction    (0X23148,0X2315C);
	SetFunctionFlags(0X23148,0x0);
	MakeFunction    (0X23160,0X23178);
	SetFunctionFlags(0X23160,0x0);
	MakeNameEx(0X23172, "@Skip", SN_LOCAL);
	MakeFunction    (0X23378,0X2337A);
	SetFunctionFlags(0X23378,0x0);
	MakeFunction    (0X2337A,0X233BE);
	SetFunctionFlags(0X2337A,0x0);
	MakeFunction    (0X233BE,0X233D2);
	SetFunctionFlags(0X233BE,0x80);
	MakeFrame(0X233BE, 0X0, 0, 0X0);
	MakeFunction    (0X233D2,0X233E6);
	SetFunctionFlags(0X233D2,0x80);
	MakeFrame(0X233D2, 0X0, 0, 0X0);
	MakeFunction    (0X233E6,0X23418);
	SetFunctionFlags(0X233E6,0x0);
	MakeFunction    (0X23418,0X23426);
	SetFunctionFlags(0X23418,0x0);
	MakeFunction    (0X23426,0X23434);
	SetFunctionFlags(0X23426,0x0);
	MakeFunction    (0X23434,0X23442);
	SetFunctionFlags(0X23434,0x0);
	MakeFunction    (0X23442,0X23450);
	SetFunctionFlags(0X23442,0x0);
	MakeFunction    (0X23450,0X2345E);
	SetFunctionFlags(0X23450,0x0);
	MakeFunction    (0X2345E,0X2346C);
	SetFunctionFlags(0X2345E,0x0);
	MakeFunction    (0X2346C,0X2347A);
	SetFunctionFlags(0X2346C,0x0);
	MakeFunction    (0X2347A,0X23488);
	SetFunctionFlags(0X2347A,0x0);
	MakeFunction    (0X23488,0X23496);
	SetFunctionFlags(0X23488,0x0);
	MakeFunction    (0X23496,0X234A4);
	SetFunctionFlags(0X23496,0x0);
	MakeFunction    (0X234A4,0X234B2);
	SetFunctionFlags(0X234A4,0x0);
	MakeFunction    (0X234B2,0X234CA);
	SetFunctionFlags(0X234B2,0x0);
	MakeFunction    (0X234CA,0X2350A);
	SetFunctionFlags(0X234CA,0x0);
	MakeFunction    (0X2350A,0X23524);
	SetFunctionFlags(0X2350A,0x0);
	MakeFunction    (0X23524,0X2352A);
	SetFunctionFlags(0X23524,0x80);
	MakeFunction    (0X2352A,0X23566);
	SetFunctionFlags(0X2352A,0x0);
	MakeFunction    (0X23566,0X23594);
	SetFunctionFlags(0X23566,0x0);
	MakeFunction    (0X23594,0X235A8);
	SetFunctionFlags(0X23594,0x0);
	MakeNameEx(0X235A4, "@ForceMember", SN_LOCAL);
	MakeFunction    (0X235A8,0X235BA);
	SetFunctionFlags(0X235A8,0x0);
	MakeFunction    (0X235BA,0X2361A);
	SetFunctionFlags(0X235BA,0x0);
	MakeNameEx(0X235D2, "@RegularAttack", SN_LOCAL);
	MakeNameEx(0X235F2, "@AttackWithEquippedWeapon", SN_LOCAL);
	MakeNameEx(0X23600, "@UnarmedAttack", SN_LOCAL);
	MakeNameEx(0X23614, "@Skip", SN_LOCAL);
	MakeFunction    (0X2361E,0X23660);
	SetFunctionFlags(0X2361E,0x0);
	MakeNameEx(0X23646, "@CheckEquipFlags", SN_LOCAL);
	MakeNameEx(0X23648, "@NotUsable", SN_LOCAL);
	MakeNameEx(0X2364C, "@CannotBeUsedByCurrentActor", SN_LOCAL);
	MakeNameEx(0X2364E, "@Continue", SN_LOCAL);
	MakeNameEx(0X23650, "@Done", SN_LOCAL);
	MakeFunction    (0X23660,0X23684);
	SetFunctionFlags(0X23660,0x0);
	MakeNameEx(0X2367E, "@Skip", SN_LOCAL);
	MakeFunction    (0X23684,0X236A6);
	SetFunctionFlags(0X23684,0x0);
	MakeFunction    (0X236A6,0X236B8);
	SetFunctionFlags(0X236A6,0x0);
	MakeFunction    (0X236B8,0X236F0);
	SetFunctionFlags(0X236B8,0x0);
	MakeFunction    (0X236F0,0X23746);
	SetFunctionFlags(0X236F0,0x0);
	MakeNameEx(0X23740, "@Skip", SN_LOCAL);
	MakeFunction    (0X23746,0X23752);
	SetFunctionFlags(0X23746,0x80);
	MakeFrame(0X23746, 0X0, 0, 0X0);
	MakeFunction    (0X23752,0X23772);
	SetFunctionFlags(0X23752,0x0);
	MakeFunction    (0X23772,0X237CA);
	SetFunctionFlags(0X23772,0x0);
	MakeFunction    (0X237CA,0X237FA);
	SetFunctionFlags(0X237CA,0x0);
	MakeFunction    (0X237FA,0X23870);
	SetFunctionFlags(0X237FA,0x0);
	MakeFunction    (0X23870,0X238C2);
	SetFunctionFlags(0X23870,0x0);
	MakeFunction    (0X238C2,0X238CC);
	SetFunctionFlags(0X238C2,0x0);
	MakeFunction    (0X238CC,0X238EA);
	SetFunctionFlags(0X238CC,0x0);
	MakeFunction    (0X238EA,0X238F6);
	SetFunctionFlags(0X238EA,0x0);
	MakeFunction    (0X238F6,0X238FE);
	SetFunctionFlags(0X238F6,0x0);
	MakeFunction    (0X238FE,0X23914);
	SetFunctionFlags(0X238FE,0x0);
	MakeFunction    (0X23914,0X23928);
	SetFunctionFlags(0X23914,0x0);
	MakeFunction    (0X23928,0X23930);
	SetFunctionFlags(0X23928,0x0);
	MakeFunction    (0X23930,0X23956);
	SetFunctionFlags(0X23930,0x0);
	MakeFunction    (0X23956,0X2397C);
	SetFunctionFlags(0X23956,0x0);
	MakeFunction    (0X2397C,0X23998);
	SetFunctionFlags(0X2397C,0x0);
	MakeFunction    (0X23998,0X239B2);
	SetFunctionFlags(0X23998,0x0);
	MakeFunction    (0X239B2,0X239D2);
	SetFunctionFlags(0X239B2,0x0);
	MakeNameEx(0X239CC, "@IsFlying", SN_LOCAL);
	MakeFunction    (0X239D2,0X239DE);
	SetFunctionFlags(0X239D2,0x0);
	MakeFunction    (0X239DE,0X23A1E);
	SetFunctionFlags(0X239DE,0x0);
	MakeNameEx(0X239F2, "@ForceMember", SN_LOCAL);
	MakeNameEx(0X239FE, "@CheckIfChangedIntoJogurt", SN_LOCAL);
	MakeNameEx(0X23A0A, "@CheckIfPromoted", SN_LOCAL);
	MakeNameEx(0X23A18, "@Done", SN_LOCAL);
	MakeFunction    (0X23A3E,0X23A4A);
	SetFunctionFlags(0X23A3E,0x0);
	MakeFunction    (0X23A4A,0X23A94);
	SetFunctionFlags(0X23A4A,0x0);
	MakeNameEx(0X23A64, "@ForceMember", SN_LOCAL);
	MakeNameEx(0X23A70, "@isChangedIntoJogurt", SN_LOCAL);
	MakeNameEx(0X23A7C, "@ApplyOutfits", SN_LOCAL);
	MakeNameEx(0X23A8E, "@Done", SN_LOCAL);
	MakeFunction    (0X23A94,0X23ACE);
	SetFunctionFlags(0X23A94,0x0);
	MakeNameEx(0X23A9C, "@FindForceMember", SN_LOCAL);
	MakeNameEx(0X23AA6, "@Found", SN_LOCAL);
	MakeNameEx(0X23AAE, "@Loop", SN_LOCAL);
	MakeNameEx(0X23AC0, "@NextItemSlot", SN_LOCAL);
	MakeNameEx(0X23AC4, "@Skip", SN_LOCAL);
	MakeNameEx(0X23AC8, "@Done", SN_LOCAL);
	MakeFunction    (0X23AD6,0X23AF0);
	SetFunctionFlags(0X23AD6,0x0);
	MakeFunction    (0X23AF0,0X23B00);
	SetFunctionFlags(0X23AF0,0x0);
	MakeFunction    (0X23B00,0X23B12);
	SetFunctionFlags(0X23B00,0x0);
	MakeFunction    (0X23B12,0X23B24);
	SetFunctionFlags(0X23B12,0x0);
	MakeFunction    (0X23B24,0X23B86);
	SetFunctionFlags(0X23B24,0x0);
	MakeNameEx(0X23B52, "@ForceMember", SN_LOCAL);
	MakeNameEx(0X23B60, "@GetBattlespriteData", SN_LOCAL);
	MakeNameEx(0X23B78, "@Load", SN_LOCAL);
	MakeNameEx(0X23B80, "@Skip", SN_LOCAL);
	MakeFunction    (0X23B86,0X23BEC);
	SetFunctionFlags(0X23B86,0x0);
	MakeNameEx(0X23BB0, "@Continue", SN_LOCAL);
	MakeNameEx(0X23BE6, "@Skip", SN_LOCAL);
	MakeFunction    (0X23BEC,0X23C2E);
	SetFunctionFlags(0X23BEC,0x0);
	MakeNameEx(0X23C04, "FindWeaponSprite_Loop", SN_LOCAL);
	MakeNameEx(0X23C18, "@Found", SN_LOCAL);
	MakeNameEx(0X23C28, "@End", SN_LOCAL);
	MakeFunction    (0X23C2E,0X23C5C);
	SetFunctionFlags(0X23C2E,0x0);
	MakeNameEx(0X23C4A, "@ForceMember", SN_LOCAL);
	MakeNameEx(0X23C50, "@Continue", SN_LOCAL);
	MakeFunction    (0X23C5C,0X23C6C);
	SetFunctionFlags(0X23C5C,0x0);
	MakeFunction    (0X23C6C,0X23C88);
	SetFunctionFlags(0X23C6C,0x0);
	MakeNameEx(0X23C80, "@Enemy", SN_LOCAL);
	MakeNameEx(0X23C82, "@Done", SN_LOCAL);
	MakeFunction    (0X23C88,0X23CB6);
	SetFunctionFlags(0X23C88,0x0);
	MakeNameEx(0X23C96, "@Continue", SN_LOCAL);
	MakeFunction    (0X23CB6,0X23CC6);
	SetFunctionFlags(0X23CB6,0x80);
	MakeFrame(0X23CB6, 0X0, 0, 0X0);
	MakeFunction    (0X23CC6,0X23CDA);
	SetFunctionFlags(0X23CC6,0x0);
	MakeFunction    (0X23CDA,0X23D1A);
	SetFunctionFlags(0X23CDA,0x0);
	MakeFunction    (0X23D1A,0X23D32);
	SetFunctionFlags(0X23D1A,0x0);
	MakeFunction    (0X23D32,0X23D9C);
	SetFunctionFlags(0X23D32,0x0);
	MakeFunction    (0X23D9C,0X23DDE);
	SetFunctionFlags(0X23D9C,0x0);
	MakeFunction    (0X23DDE,0X23DEC);
	SetFunctionFlags(0X23DDE,0x0);
	MakeFunction    (0X23DEC,0X23E8E);
	SetFunctionFlags(0X23DEC,0x0);
	MakeFunction    (0X23E8E,0X23E9A);
	SetFunctionFlags(0X23E8E,0x0);
	MakeFunction    (0X23E9A,0X23EE2);
	SetFunctionFlags(0X23E9A,0x0);
	MakeFunction    (0X23EE2,0X23EFA);
	SetFunctionFlags(0X23EE2,0x0);
	MakeNameEx(0X23EF8, "@Return", SN_LOCAL);
	MakeFunction    (0X23EFA,0X23F6E);
	SetFunctionFlags(0X23EFA,0x0);
	MakeFunction    (0X23F6E,0X24002);
	SetFunctionFlags(0X23F6E,0x0);
	MakeNameEx(0X23FA8, "@CheckUseItemSlot0", SN_LOCAL);
	MakeNameEx(0X23FB6, "@CheckUseItemSlot1", SN_LOCAL);
	MakeNameEx(0X23FC4, "@CheckDarkDragon", SN_LOCAL);
	MakeNameEx(0X23FD0, "@SpecialAttack", SN_LOCAL);
	MakeNameEx(0X23FF6, "@Done", SN_LOCAL);
	MakeNameEx(0X23FFC, "@RegularAttack", SN_LOCAL);
	MakeFunction    (0X2401C,0X24062);
	SetFunctionFlags(0X2401C,0x0);
	MakeNameEx(0X24040, "@Loop", SN_LOCAL);
	MakeNameEx(0X24054, "@Break", SN_LOCAL);
	MakeNameEx(0X24056, "@Done", SN_LOCAL);
	MakeNameEx(0X2405C, "@RegularAttack", SN_LOCAL);
	MakeFunction    (0X24062,0X2409C);
	SetFunctionFlags(0X24062,0x0);
	MakeFunction    (0X240BC,0X240DC);
	SetFunctionFlags(0X240BC,0x0);
	MakeNameEx(0X240C8, "@Loop", SN_LOCAL);
	MakeNameEx(0X240D0, "@Break", SN_LOCAL);
	MakeFunction    (0X240E8,0X2414C);
	SetFunctionFlags(0X240E8,0x0);
	MakeNameEx(0X24132, "@TargetingFoes", SN_LOCAL);
	MakeNameEx(0X24136, "@Continue", SN_LOCAL);
	MakeNameEx(0X24140, "@Done", SN_LOCAL);
	MakeNameEx(0X24146, "@RegularAttack", SN_LOCAL);
	MakeFunction    (0X2414C,0X24170);
	SetFunctionFlags(0X2414C,0x0);
	MakeFunction    (0X24170,0X241A2);
	SetFunctionFlags(0X24170,0x0);
	MakeNameEx(0X24184, "@Continue", SN_LOCAL);
	MakeFunction    (0X241A2,0X241CA);
	SetFunctionFlags(0X241A2,0x0);
	MakeFunction    (0X241CA,0X241F8);
	SetFunctionFlags(0X241CA,0x0);
	MakeFunction    (0X241F8,0X24220);
	SetFunctionFlags(0X241F8,0x0);
	MakeFunction    (0X24220,0X2423E);
	SetFunctionFlags(0X24220,0x0);
	MakeFunction    (0X2423E,0X2425C);
	SetFunctionFlags(0X2423E,0x0);
	MakeFunction    (0X2425C,0X24292);
	SetFunctionFlags(0X2425C,0x0);
	MakeFunction    (0X24292,0X242EC);
	SetFunctionFlags(0X24292,0x0);
	MakeFunction    (0X242EC,0X24306);
	SetFunctionFlags(0X242EC,0x0);
	MakeFunction    (0X24306,0X24324);
	SetFunctionFlags(0X24306,0x0);
	MakeFunction    (0X24324,0X24378);
	SetFunctionFlags(0X24324,0x0);
	MakeFunction    (0X24378,0X24386);
	SetFunctionFlags(0X24378,0x0);
	MakeFunction    (0X24386,0X243AA);
	SetFunctionFlags(0X24386,0x0);
	MakeFunction    (0X244CA,0X244F0);
	SetFunctionFlags(0X244CA,0x0);
	MakeFunction    (0X244F0,0X24516);
	SetFunctionFlags(0X244F0,0x0);
	MakeFunction    (0X24516,0X2453E);
	SetFunctionFlags(0X24516,0x0);
	MakeFunction    (0X2453E,0X24544);
	SetFunctionFlags(0X2453E,0x0);
	MakeFunction    (0X24544,0X2454A);
	SetFunctionFlags(0X24544,0x0);
	MakeFunction    (0X2454A,0X24550);
	SetFunctionFlags(0X2454A,0x0);
	MakeFunction    (0X24550,0X24556);
	SetFunctionFlags(0X24550,0x0);
	MakeFunction    (0X24556,0X2455C);
	SetFunctionFlags(0X24556,0x0);
	MakeFunction    (0X2455C,0X24562);
	SetFunctionFlags(0X2455C,0x0);
	MakeFunction    (0X24562,0X24580);
	SetFunctionFlags(0X24562,0x0);
	MakeFunction    (0X24580,0X245A2);
	SetFunctionFlags(0X24580,0x0);
	MakeFunction    (0X245A2,0X24608);
	SetFunctionFlags(0X245A2,0x0);
	MakeFunction    (0X24608,0X24616);
	SetFunctionFlags(0X24608,0x0);
	MakeFunction    (0X24616,0X24646);
	SetFunctionFlags(0X24616,0x0);
	MakeFunction    (0X24646,0X2466C);
	SetFunctionFlags(0X24646,0x0);
	MakeFunction    (0X2466C,0X2468E);
	SetFunctionFlags(0X2466C,0x0);
	MakeFunction    (0X2468E,0X246D4);
	SetFunctionFlags(0X2468E,0x0);
	MakeFunction    (0X246EC,0X246F8);
	SetFunctionFlags(0X246EC,0x0);
	MakeNameEx(0X246F6, "@Return", SN_LOCAL);
	MakeFunction    (0X246F8,0X24708);
	SetFunctionFlags(0X246F8,0x0);
	MakeFunction    (0X24708,0X247F0);
	SetFunctionFlags(0X24708,0x0);
	MakeFunction    (0X247F0,0X24852);
	SetFunctionFlags(0X247F0,0x0);
	MakeFunction    (0X24852,0X24912);
	SetFunctionFlags(0X24852,0x0);
	MakeFunction    (0X24912,0X249D8);
	SetFunctionFlags(0X24912,0x0);
	MakeFunction    (0X249D8,0X249FC);
	SetFunctionFlags(0X249D8,0x0);
	MakeFunction    (0X249FC,0X24A2E);
	SetFunctionFlags(0X249FC,0x0);
	MakeFunction    (0X24A2E,0X24A38);
	SetFunctionFlags(0X24A2E,0x0);
	MakeFunction    (0X24A44,0X24A56);
	SetFunctionFlags(0X24A44,0x0);
	MakeFunction    (0X24A56,0X24AA2);
	SetFunctionFlags(0X24A56,0x0);
	MakeFunction    (0X24AA2,0X24AAE);
	SetFunctionFlags(0X24AA2,0x0);
	MakeFunction    (0X24AAE,0X24AC4);
	SetFunctionFlags(0X24AAE,0x0);
	MakeFunction    (0X24AC4,0X24ADA);
	SetFunctionFlags(0X24AC4,0x0);
	MakeFunction    (0X24ADA,0X24AE6);
	SetFunctionFlags(0X24ADA,0x0);
	MakeFunction    (0X24AE6,0X24AFE);
	SetFunctionFlags(0X24AE6,0x0);
	MakeFunction    (0X24AFE,0X24B30);
	SetFunctionFlags(0X24AFE,0x0);
	MakeFunction    (0X24B30,0X24B62);
	SetFunctionFlags(0X24B30,0x0);
	MakeFunction    (0X24B62,0X24B8C);
	SetFunctionFlags(0X24B62,0x0);
	MakeFunction    (0X24B8C,0X24BAC);
	SetFunctionFlags(0X24B8C,0x0);
	MakeNameEx(0X24BA6, "@Done", SN_LOCAL);
	MakeFunction    (0X24BAC,0X24BD2);
	SetFunctionFlags(0X24BAC,0x0);
	MakeNameEx(0X24BCC, "@Skip", SN_LOCAL);
	MakeFunction    (0X24BD2,0X24BF2);
	SetFunctionFlags(0X24BD2,0x0);
	MakeNameEx(0X24BEC, "@Done", SN_LOCAL);
	MakeFunction    (0X24BF2,0X24C98);
	SetFunctionFlags(0X24BF2,0x0);
	MakeFunction    (0X24CA6,0X24CBA);
	SetFunctionFlags(0X24CA6,0x0);
	MakeFunction    (0X24CBA,0X24CEE);
	SetFunctionFlags(0X24CBA,0x0);
	MakeFunction    (0X24CEE,0X24D0E);
	SetFunctionFlags(0X24CEE,0x0);
	MakeFunction    (0X24D0E,0X24D44);
	SetFunctionFlags(0X24D0E,0x0);
	MakeFunction    (0X24D44,0X24D70);
	SetFunctionFlags(0X24D44,0x0);
	MakeFunction    (0X24D74,0X24D9E);
	SetFunctionFlags(0X24D74,0x0);
	MakeFunction    (0X24D9E,0X24DBC);
	SetFunctionFlags(0X24D9E,0x0);
	MakeFunction    (0X24DBC,0X24DC4);
	SetFunctionFlags(0X24DBC,0x0);
	MakeFunction    (0X24DC4,0X24DCC);
	SetFunctionFlags(0X24DC4,0x0);
	MakeFunction    (0X24DCC,0X24DE8);
	SetFunctionFlags(0X24DCC,0x0);
	MakeFunction    (0X24DE8,0X24DFE);
	SetFunctionFlags(0X24DE8,0x0);
	MakeFunction    (0X24DFE,0X24E1C);
	SetFunctionFlags(0X24DFE,0x0);
	MakeFunction    (0X24E1C,0X24E2A);
	SetFunctionFlags(0X24E1C,0x0);
	MakeFunction    (0X24E2A,0X24E44);
	SetFunctionFlags(0X24E2A,0x0);
	MakeFunction    (0X24E44,0X24E64);
	SetFunctionFlags(0X24E44,0x0);
	MakeFunction    (0X24E64,0X24E74);
	SetFunctionFlags(0X24E64,0x0);
	MakeFunction    (0X24E74,0X24EC4);
	SetFunctionFlags(0X24E74,0x0);
	MakeFunction    (0X24EC4,0X24EDA);
	SetFunctionFlags(0X24EC4,0x0);
	MakeFunction    (0X24EDA,0X24EFE);
	SetFunctionFlags(0X24EDA,0x0);
	MakeFunction    (0X24EFE,0X24F1A);
	SetFunctionFlags(0X24EFE,0x0);
	MakeFunction    (0X24F1A,0X24F2C);
	SetFunctionFlags(0X24F1A,0x0);
	MakeFunction    (0X24F2C,0X24F3E);
	SetFunctionFlags(0X24F2C,0x0);
	MakeFunction    (0X24F3E,0X24F50);
	SetFunctionFlags(0X24F3E,0x0);
	MakeFunction    (0X24F50,0X24F62);
	SetFunctionFlags(0X24F50,0x0);
	MakeFunction    (0X24F62,0X24F74);
	SetFunctionFlags(0X24F62,0x0);
	MakeFunction    (0X24F74,0X24F86);
	SetFunctionFlags(0X24F74,0x0);
	MakeFunction    (0X24F86,0X24F98);
	SetFunctionFlags(0X24F86,0x0);
	MakeFunction    (0X24F98,0X24FAE);
	SetFunctionFlags(0X24F98,0x0);
	MakeFunction    (0X24FAE,0X24FC4);
	SetFunctionFlags(0X24FAE,0x0);
	MakeFunction    (0X24FC4,0X24FCE);
	SetFunctionFlags(0X24FC4,0x0);
	MakeFunction    (0X24FCE,0X24FE6);
	SetFunctionFlags(0X24FCE,0x0);
	MakeFunction    (0X24FE6,0X24FEC);
	SetFunctionFlags(0X24FE6,0x0);
	MakeFunction    (0X24FEC,0X25026);
	SetFunctionFlags(0X24FEC,0x0);
	MakeFunction    (0X25026,0X250DA);
	SetFunctionFlags(0X25026,0x0);
	MakeFunction    (0X250DA,0X2510A);
	SetFunctionFlags(0X250DA,0x0);
	MakeFunction    (0X2510A,0X25154);
	SetFunctionFlags(0X2510A,0x0);
	MakeFunction    (0X26E16,0X26E7E);
	SetFunctionFlags(0X26E16,0x0);
	MakeFunction    (0X26E7E,0X26EE4);
	SetFunctionFlags(0X26E7E,0x0);
	MakeFunction    (0X26F46,0X27036);
	SetFunctionFlags(0X26F46,0x0);
	MakeFunction    (0X27036,0X2704E);
	SetFunctionFlags(0X27036,0x0);
	MakeFunction    (0X2C008,0X2C0CA);
	SetFunctionFlags(0X2C008,0x0);
	MakeFunction    (0X2C0CA,0X2C0D6);
	SetFunctionFlags(0X2C0CA,0x0);
	MakeFunction    (0X8000C,0X80010);
	SetFunctionFlags(0X8000C,0x80);
	MakeFunction    (0X80EE0,0X80EFE);
	SetFunctionFlags(0X80EE0,0x0);
	MakeFunction    (0XBC000,0XBC004);
	SetFunctionFlags(0XBC000,0x80);
	MakeFunction    (0XBC01C,0XBC228);
	SetFunctionFlags(0XBC01C,0x0);
	MakeFunction    (0XBC228,0XBC246);
	SetFunctionFlags(0XBC228,0x0);
	MakeFunction    (0XBC246,0XBC28E);
	SetFunctionFlags(0XBC246,0x0);
	MakeFunction    (0XBC28E,0XBC29E);
	SetFunctionFlags(0XBC28E,0x0);
	MakeFunction    (0XCC004,0XCC008);
	SetFunctionFlags(0XCC004,0x80);
	MakeFunction    (0XCC02C,0XCC030);
	SetFunctionFlags(0XCC02C,0x80);
	MakeFunction    (0XCC030,0XCC05E);
	SetFunctionFlags(0XCC030,0x0);
	MakeFunction    (0XD2EA4,0XD2EE4);
	SetFunctionFlags(0XD2EA4,0x0);
	MakeFunction    (0XD2EE4,0XD2EEE);
	SetFunctionFlags(0XD2EE4,0x0);
	MakeFunction    (0XD2EEE,0XD2F02);
	SetFunctionFlags(0XD2EEE,0x0);
	MakeFunction    (0XD2F02,0XD2F50);
	SetFunctionFlags(0XD2F02,0x0);
	MakeFunction    (0XD2F50,0XD2FDA);
	SetFunctionFlags(0XD2F50,0x0);
	MakeFunction    (0XD2FDA,0XD301A);
	SetFunctionFlags(0XD2FDA,0x0);
	MakeFunction    (0X124000,0X124004);
	SetFunctionFlags(0X124000,0x80);
	MakeFunction    (0X124004,0X124008);
	SetFunctionFlags(0X124004,0x80);
	MakeFunction    (0X124008,0X12400C);
	SetFunctionFlags(0X124008,0x80);
	MakeFunction    (0X12400C,0X124010);
	SetFunctionFlags(0X12400C,0x80);
	MakeFunction    (0X124010,0X124014);
	SetFunctionFlags(0X124010,0x80);
	MakeFunction    (0X124018,0X12401C);
	SetFunctionFlags(0X124018,0x80);
	MakeFunction    (0X12401C,0X124020);
	SetFunctionFlags(0X12401C,0x80);
	MakeFunction    (0X124020,0X124024);
	SetFunctionFlags(0X124020,0x80);
	MakeFunction    (0X124024,0X124028);
	SetFunctionFlags(0X124024,0xc0);
	MakeFunction    (0X124028,0X12402C);
	SetFunctionFlags(0X124028,0x80);
	MakeFunction    (0X12402C,0X124030);
	SetFunctionFlags(0X12402C,0x80);
	MakeFunction    (0X12407C,0X124082);
	SetFunctionFlags(0X12407C,0x0);
	MakeFunction    (0X124082,0X1240D2);
	SetFunctionFlags(0X124082,0x0);
	MakeNameEx(0X124092, "@Loop", SN_LOCAL);
	MakeNameEx(0X1240CE, "@End", SN_LOCAL);
	MakeFunction    (0X1240D2,0X1244CA);
	SetFunctionFlags(0X1240D2,0x0);
	MakeFunction    (0X1244CA,0X124516);
	SetFunctionFlags(0X1244CA,0x0);
	MakeFunction    (0X124516,0X1245F2);
	SetFunctionFlags(0X124516,0x0);
	MakeFunction    (0X1245F2,0X124704);
	SetFunctionFlags(0X1245F2,0x0);
	MakeFunction    (0X124704,0X12471C);
	SetFunctionFlags(0X124704,0x0);
	MakeFunction    (0X12471C,0X124754);
	SetFunctionFlags(0X12471C,0x0);
	MakeFunction    (0X124754,0X124772);
	SetFunctionFlags(0X124754,0x0);
	MakeFunction    (0X124772,0X124798);
	SetFunctionFlags(0X124772,0x0);
	MakeFunction    (0X124798,0X1247F6);
	SetFunctionFlags(0X124798,0x0);
	MakeFunction    (0X1247F6,0X124800);
	SetFunctionFlags(0X1247F6,0x0);
	MakeFunction    (0X124800,0X1249D4);
	SetFunctionFlags(0X124800,0x0);
	MakeFunction    (0X1249D4,0X1249DC);
	SetFunctionFlags(0X1249D4,0x0);
	MakeFunction    (0X1249DC,0X124A14);
	SetFunctionFlags(0X1249DC,0x0);
	MakeFunction    (0X124A1A,0X124B4C);
	SetFunctionFlags(0X124A1A,0x0);
	MakeFunction    (0X124B4C,0X124B52);
	SetFunctionFlags(0X124B4C,0x0);
	MakeFunction    (0X124B52,0X124B8A);
	SetFunctionFlags(0X124B52,0x0);
	MakeFunction    (0X124B90,0X124C52);
	SetFunctionFlags(0X124B90,0x0);
	MakeFunction    (0X124C52,0X124C58);
	SetFunctionFlags(0X124C52,0x0);
	MakeFunction    (0X124C58,0X124CA2);
	SetFunctionFlags(0X124C58,0x0);
	MakeFunction    (0X124CA2,0X124D1E);
	SetFunctionFlags(0X124CA2,0x0);
	MakeFunction    (0X124D1E,0X124D46);
	SetFunctionFlags(0X124D1E,0x0);
	MakeFunction    (0X124D46,0X124D90);
	SetFunctionFlags(0X124D46,0x0);
	MakeFunction    (0X124D90,0X124DB4);
	SetFunctionFlags(0X124D90,0x0);
	MakeFunction    (0X124DB4,0X124DCE);
	SetFunctionFlags(0X124DB4,0x0);
	MakeFunction    (0X124DCE,0X124DEE);
	SetFunctionFlags(0X124DCE,0x0);
	MakeNameEx(0X124DEC, "@Return", SN_LOCAL);
	MakeFunction    (0X124DEE,0X124DFA);
	SetFunctionFlags(0X124DEE,0x0);
	MakeFunction    (0X124DFA,0X124E02);
	SetFunctionFlags(0X124DFA,0x0);
	MakeFunction    (0X124E02,0X124E44);
	SetFunctionFlags(0X124E02,0x0);
	MakeNameEx(0X124E42, "@Return", SN_LOCAL);
	MakeFunction    (0X124E44,0X124EA0);
	SetFunctionFlags(0X124E44,0x0);
	MakeFunction    (0X124EA0,0X124EB8);
	SetFunctionFlags(0X124EA0,0x0);
	MakeFunction    (0X124EB8,0X124ECC);
	SetFunctionFlags(0X124EB8,0x0);
	MakeFunction    (0X124ECC,0X124EE8);
	SetFunctionFlags(0X124ECC,0x0);
	MakeFunction    (0X124F1A,0X124F38);
	SetFunctionFlags(0X124F1A,0x0);
	MakeFunction    (0X124F38,0X12518C);
	SetFunctionFlags(0X124F38,0x0);
	MakeFunction    (0X12518C,0X1251A0);
	SetFunctionFlags(0X12518C,0x0);
	MakeFunction    (0X1251A0,0X1251B4);
	SetFunctionFlags(0X1251A0,0x0);
	MakeFunction    (0X1251B4,0X125352);
	SetFunctionFlags(0X1251B4,0x0);
	MakeFunction    (0X125352,0X125384);
	SetFunctionFlags(0X125352,0x0);
	MakeFunction    (0X125384,0X12538A);
	SetFunctionFlags(0X125384,0x0);
	MakeFunction    (0X12538A,0X1253CC);
	SetFunctionFlags(0X12538A,0x0);
	MakeFunction    (0X1253CC,0X1253E2);
	SetFunctionFlags(0X1253CC,0x0);
	MakeFrame(0X1253CC, 0X0, 0, 0X0);
	MakeFunction    (0X1253E2,0X125452);
	SetFunctionFlags(0X1253E2,0x0);
	MakeFunction    (0X125452,0X125496);
	SetFunctionFlags(0X125452,0x0);
	MakeFunction    (0X125496,0X1254A4);
	SetFunctionFlags(0X125496,0x0);
	MakeNameEx(0X1254A2, "@Return", SN_LOCAL);
	MakeFunction    (0X1255CC,0X12561E);
	SetFunctionFlags(0X1255CC,0x0);
	MakeFunction    (0X12561E,0X12566E);
	SetFunctionFlags(0X12561E,0x0);
	MakeFunction    (0X12566E,0X1256A2);
	SetFunctionFlags(0X12566E,0x0);
	MakeFunction    (0X1256A2,0X1256C8);
	SetFunctionFlags(0X1256A2,0x0);
	MakeFunction    (0X1256C8,0X1256E6);
	SetFunctionFlags(0X1256C8,0x0);
	MakeFunction    (0X1256E6,0X12570A);
	SetFunctionFlags(0X1256E6,0x0);
	MakeFunction    (0X125F36,0X125F54);
	SetFunctionFlags(0X125F36,0x0);
	MakeFunction    (0X125F54,0X125F7C);
	SetFunctionFlags(0X125F54,0x0);
	MakeNameEx(0X125F7A, "@Return", SN_LOCAL);
	MakeFunction    (0X125F7C,0X125FA4);
	SetFunctionFlags(0X125F7C,0x0);
	MakeNameEx(0X125FA2, "@Return", SN_LOCAL);
	MakeFunction    (0X125FA4,0X125FB4);
	SetFunctionFlags(0X125FA4,0x0);
	MakeFunction    (0X125FB4,0X12603E);
	SetFunctionFlags(0X125FB4,0x0);
	MakeFunction    (0X126100,0X126132);
	SetFunctionFlags(0X126100,0x0);
	MakeNameEx(0X126130, "@Return", SN_LOCAL);
	MakeFunction    (0X126132,0X1261F8);
	SetFunctionFlags(0X126132,0x0);
	MakeFunction    (0X1261F8,0X12627A);
	SetFunctionFlags(0X1261F8,0x0);
	MakeFunction    (0X12627A,0X126284);
	SetFunctionFlags(0X12627A,0x0);
	MakeFunction    (0X126284,0X1262A8);
	SetFunctionFlags(0X126284,0x0);
	MakeFunction    (0X1262A8,0X1262CE);
	SetFunctionFlags(0X1262A8,0x0);
	MakeFunction    (0X1262CE,0X12630C);
	SetFunctionFlags(0X1262CE,0x0);
	MakeFunction    (0X12630C,0X126326);
	SetFunctionFlags(0X12630C,0x0);
	MakeFunction    (0X126326,0X12634C);
	SetFunctionFlags(0X126326,0x0);
	MakeFunction    (0X12634C,0X126380);
	SetFunctionFlags(0X12634C,0x0);
	MakeFunction    (0X126380,0X1263A8);
	SetFunctionFlags(0X126380,0x0);
	MakeFunction    (0X1263A8,0X1263E8);
	SetFunctionFlags(0X1263A8,0x0);
	MakeFunction    (0X1263E8,0X12647E);
	SetFunctionFlags(0X1263E8,0x0);
	MakeFunction    (0X12647E,0X126498);
	SetFunctionFlags(0X12647E,0x0);
	MakeFunction    (0X126532,0X126534);
	SetFunctionFlags(0X126532,0x0);
	MakeFunction    (0X126534,0X12653A);
	SetFunctionFlags(0X126534,0x0);
	MakeFunction    (0X12653A,0X126540);
	SetFunctionFlags(0X12653A,0x0);
	MakeFunction    (0X126540,0X126546);
	SetFunctionFlags(0X126540,0x0);
	MakeFunction    (0X126546,0X12654C);
	SetFunctionFlags(0X126546,0x0);
	MakeFunction    (0X12654C,0X126552);
	SetFunctionFlags(0X12654C,0x0);
	MakeFunction    (0X126552,0X126558);
	SetFunctionFlags(0X126552,0x0);
	MakeFunction    (0X126558,0X12655E);
	SetFunctionFlags(0X126558,0x0);
	MakeFunction    (0X12655E,0X126564);
	SetFunctionFlags(0X12655E,0x0);
	MakeFunction    (0X126564,0X12656A);
	SetFunctionFlags(0X126564,0x0);
	MakeFunction    (0X12656A,0X126570);
	SetFunctionFlags(0X12656A,0x0);
	MakeFunction    (0X126570,0X126576);
	SetFunctionFlags(0X126570,0x0);
	MakeFunction    (0X126576,0X12657C);
	SetFunctionFlags(0X126576,0x0);
	MakeFunction    (0X12657C,0X126582);
	SetFunctionFlags(0X12657C,0x0);
	MakeFunction    (0X126582,0X126588);
	SetFunctionFlags(0X126582,0x0);
	MakeFunction    (0X126588,0X12658E);
	SetFunctionFlags(0X126588,0x0);
	MakeFunction    (0X12658E,0X126594);
	SetFunctionFlags(0X12658E,0x0);
	MakeFunction    (0X126594,0X12659A);
	SetFunctionFlags(0X126594,0x0);
	MakeFunction    (0X12659A,0X1265A0);
	SetFunctionFlags(0X12659A,0x0);
	MakeFunction    (0X1265A0,0X1265A6);
	SetFunctionFlags(0X1265A0,0x0);
	MakeFunction    (0X1265A6,0X1265AC);
	SetFunctionFlags(0X1265A6,0x0);
	MakeFunction    (0X1265AC,0X1265B2);
	SetFunctionFlags(0X1265AC,0x0);
	MakeFunction    (0X1265B2,0X1265B8);
	SetFunctionFlags(0X1265B2,0x0);
	MakeFunction    (0X1265B8,0X1265BE);
	SetFunctionFlags(0X1265B8,0x0);
	MakeFunction    (0X1265BE,0X1265C4);
	SetFunctionFlags(0X1265BE,0x0);
	MakeFunction    (0X1265C4,0X1265CA);
	SetFunctionFlags(0X1265C4,0x0);
	MakeFunction    (0X1265CA,0X1265D0);
	SetFunctionFlags(0X1265CA,0x0);
	MakeFunction    (0X1265D0,0X1265D6);
	SetFunctionFlags(0X1265D0,0x0);
	MakeFunction    (0X1265D6,0X1265DC);
	SetFunctionFlags(0X1265D6,0x0);
	MakeFunction    (0X1265DC,0X1265E2);
	SetFunctionFlags(0X1265DC,0x0);
	MakeFunction    (0X1265E2,0X1265E8);
	SetFunctionFlags(0X1265E2,0x0);
	MakeFunction    (0X1265E8,0X1265EE);
	SetFunctionFlags(0X1265E8,0x0);
	MakeFunction    (0X1265EE,0X1265F4);
	SetFunctionFlags(0X1265EE,0x0);
	MakeFunction    (0X1265F4,0X1265FA);
	SetFunctionFlags(0X1265F4,0x0);
	MakeFunction    (0X1265FA,0X126600);
	SetFunctionFlags(0X1265FA,0x0);
	MakeFunction    (0X126600,0X126606);
	SetFunctionFlags(0X126600,0x0);
	MakeFunction    (0X126606,0X12660C);
	SetFunctionFlags(0X126606,0x0);
	MakeFunction    (0X12660C,0X126612);
	SetFunctionFlags(0X12660C,0x0);
	MakeFunction    (0X126612,0X126618);
	SetFunctionFlags(0X126612,0x0);
	MakeFunction    (0X126618,0X12661E);
	SetFunctionFlags(0X126618,0x0);
	MakeFunction    (0X12661E,0X126624);
	SetFunctionFlags(0X12661E,0x0);
	MakeFunction    (0X126624,0X12662A);
	SetFunctionFlags(0X126624,0x0);
	MakeFunction    (0X12662A,0X126630);
	SetFunctionFlags(0X12662A,0x0);
	MakeFunction    (0X126630,0X126636);
	SetFunctionFlags(0X126630,0x0);
	MakeFunction    (0X126636,0X12663C);
	SetFunctionFlags(0X126636,0x0);
	MakeFunction    (0X12663C,0X126642);
	SetFunctionFlags(0X12663C,0x0);
	MakeFunction    (0X126642,0X126648);
	SetFunctionFlags(0X126642,0x0);
	MakeFunction    (0X126648,0X12664E);
	SetFunctionFlags(0X126648,0x0);
	MakeFunction    (0X12664E,0X126654);
	SetFunctionFlags(0X12664E,0x0);
	MakeFunction    (0X126654,0X12665A);
	SetFunctionFlags(0X126654,0x0);
	MakeFunction    (0X12665A,0X126660);
	SetFunctionFlags(0X12665A,0x0);
	MakeFunction    (0X126660,0X126666);
	SetFunctionFlags(0X126660,0x0);
	MakeFunction    (0X126666,0X12666C);
	SetFunctionFlags(0X126666,0x0);
	MakeFunction    (0X12666C,0X126672);
	SetFunctionFlags(0X12666C,0x0);
	MakeFunction    (0X126672,0X126678);
	SetFunctionFlags(0X126672,0x0);
	MakeFunction    (0X12667A,0X126680);
	SetFunctionFlags(0X12667A,0x0);
	MakeFunction    (0X126680,0X126686);
	SetFunctionFlags(0X126680,0x0);
	MakeFunction    (0X126686,0X1266C0);
	SetFunctionFlags(0X126686,0x0);
	MakeNameEx(0X126692, "@Loop", SN_LOCAL);
	MakeFunction    (0X1266DA,0X1266F0);
	SetFunctionFlags(0X1266DA,0x0);
	MakeFunction    (0X126704,0X126720);
	SetFunctionFlags(0X126704,0x0);
	MakeFunction    (0X12672A,0X12678E);
	SetFunctionFlags(0X12672A,0x0);
	MakeFunction    (0X12678E,0X1267AC);
	SetFunctionFlags(0X12678E,0x0);
	MakeNameEx(0X1267A0, "@Loop", SN_LOCAL);
	MakeFunction    (0X1267AC,0X1267AE);
	SetFunctionFlags(0X1267AC,0x0);
	MakeFunction    (0X1267AE,0X1267C6);
	SetFunctionFlags(0X1267AE,0x0);
	MakeNameEx(0X1267BA, "@Loop", SN_LOCAL);
	MakeFunction    (0X1267C6,0X1267E8);
	SetFunctionFlags(0X1267C6,0x0);
	MakeFunction    (0X1267E8,0X126818);
	SetFunctionFlags(0X1267E8,0x0);
	MakeNameEx(0X12680C, "@Loop", SN_LOCAL);
	MakeFunction    (0X126826,0X12682A);
	SetFunctionFlags(0X126826,0x0);
	MakeFunction    (0X12682A,0X12687A);
	SetFunctionFlags(0X12682A,0x0);
	MakeNameEx(0X126864, "@Continue", SN_LOCAL);
	MakeFunction    (0X12687A,0X1268FC);
	SetFunctionFlags(0X12687A,0x0);
	MakeFunction    (0X1268FC,0X126908);
	SetFunctionFlags(0X1268FC,0x0);
	MakeFunction    (0X126908,0X12690C);
	SetFunctionFlags(0X126908,0x0);
	MakeFunction    (0X12690C,0X12693A);
	SetFunctionFlags(0X12690C,0x0);
	MakeNameEx(0X126918, "@Loop", SN_LOCAL);
	MakeNameEx(0X126928, "@Continue", SN_LOCAL);
	MakeFunction    (0X12693A,0X126944);
	SetFunctionFlags(0X12693A,0x0);
	MakeFunction    (0X126948,0X126978);
	SetFunctionFlags(0X126948,0x0);
	MakeNameEx(0X126954, "@Loop", SN_LOCAL);
	MakeNameEx(0X126966, "@Continue", SN_LOCAL);
	MakeFunction    (0X126982,0X1269A4);
	SetFunctionFlags(0X126982,0x0);
	MakeFunction    (0X1269A4,0X1269C6);
	SetFunctionFlags(0X1269A4,0x0);
	MakeFunction    (0X1269EE,0X126A38);
	SetFunctionFlags(0X1269EE,0x0);
	MakeFunction    (0X126A38,0X126A6C);
	SetFunctionFlags(0X126A38,0x0);
	MakeFunction    (0X126A76,0X126AB4);
	SetFunctionFlags(0X126A76,0x0);
	MakeFunction    (0X126AB4,0X126AD6);
	SetFunctionFlags(0X126AB4,0x0);
	MakeFunction    (0X126AD6,0X126AEE);
	SetFunctionFlags(0X126AD6,0x0);
	MakeNameEx(0X126AE0, "@Loop", SN_LOCAL);
	MakeFunction    (0X126AEE,0X126B20);
	SetFunctionFlags(0X126AEE,0x0);
	MakeNameEx(0X126B0C, "@Mirrored", SN_LOCAL);
	MakeNameEx(0X126B14, "@Continue", SN_LOCAL);
	MakeFunction    (0X126B20,0X126B48);
	SetFunctionFlags(0X126B20,0x0);
	MakeNameEx(0X126B2A, "@Loop", SN_LOCAL);
	MakeNameEx(0X126B3C, "@NextSlot", SN_LOCAL);
	MakeNameEx(0X126B42, "@Done", SN_LOCAL);
	MakeFunction    (0X126B48,0X126B9E);
	SetFunctionFlags(0X126B48,0x0);
	MakeFunction    (0X126BA8,0X126BE6);
	SetFunctionFlags(0X126BA8,0x0);
	MakeFunction    (0X126BE6,0X126C06);
	SetFunctionFlags(0X126BE6,0x0);
	MakeFunction    (0X126C06,0X126C26);
	SetFunctionFlags(0X126C06,0x0);
	MakeFunction    (0X126C30,0X126C8E);
	SetFunctionFlags(0X126C30,0x0);
	MakeFunction    (0X126C98,0X126CF0);
	SetFunctionFlags(0X126C98,0x0);
	MakeFunction    (0X126CF0,0X126D1E);
	SetFunctionFlags(0X126CF0,0x0);
	MakeFunction    (0X126D3C,0X126D54);
	SetFunctionFlags(0X126D3C,0x0);
	MakeFunction    (0X126D54,0X126D6C);
	SetFunctionFlags(0X126D54,0x0);
	MakeFunction    (0X126D6C,0X126D84);
	SetFunctionFlags(0X126D6C,0x0);
	MakeFunction    (0X126D84,0X126DEA);
	SetFunctionFlags(0X126D84,0x0);
	MakeFunction    (0X126DFE,0X126E78);
	SetFunctionFlags(0X126DFE,0x0);
	MakeFunction    (0X126E82,0X126E90);
	SetFunctionFlags(0X126E82,0x0);
	MakeFunction    (0X126E9A,0X126EF0);
	SetFunctionFlags(0X126E9A,0x0);
	MakeFunction    (0X126EFA,0X126F4A);
	SetFunctionFlags(0X126EFA,0x0);
	MakeFunction    (0X126F54,0X126F6E);
	SetFunctionFlags(0X126F54,0x0);
	MakeFunction    (0X126F78,0X126FD0);
	SetFunctionFlags(0X126F78,0x0);
	MakeFunction    (0X126FDA,0X126FFE);
	SetFunctionFlags(0X126FDA,0x0);
	MakeFunction    (0X127008,0X12700A);
	SetFunctionFlags(0X127008,0x0);
	MakeFunction    (0X12700A,0X127060);
	SetFunctionFlags(0X12700A,0x0);
	MakeFunction    (0X12706A,0X12706C);
	SetFunctionFlags(0X12706A,0x0);
	MakeFunction    (0X12706C,0X127092);
	SetFunctionFlags(0X12706C,0x0);
	MakeFunction    (0X12709C,0X1270F4);
	SetFunctionFlags(0X12709C,0x0);
	MakeFunction    (0X1270FE,0X127152);
	SetFunctionFlags(0X1270FE,0x0);
	MakeFunction    (0X12715C,0X127182);
	SetFunctionFlags(0X12715C,0x0);
	MakeFunction    (0X12718C,0X1271CE);
	SetFunctionFlags(0X12718C,0x0);
	MakeFunction    (0X1271CE,0X1271EC);
	SetFunctionFlags(0X1271CE,0x0);
	MakeFunction    (0X1271EC,0X12723E);
	SetFunctionFlags(0X1271EC,0x0);
	MakeFunction    (0X12723E,0X127258);
	SetFunctionFlags(0X12723E,0x0);
	MakeFunction    (0X127284,0X127286);
	SetFunctionFlags(0X127284,0x0);
	MakeFunction    (0X127286,0X12743A);
	SetFunctionFlags(0X127286,0x0);
	MakeFunction    (0X127666,0X127818);
	SetFunctionFlags(0X127666,0x0);
	MakeFunction    (0X127818,0X127864);
	SetFunctionFlags(0X127818,0x0);
	MakeNameEx(0X12784E, "@Mirrored", SN_LOCAL);
	MakeNameEx(0X127862, "@Return", SN_LOCAL);
	MakeFunction    (0X127904,0X1279D4);
	SetFunctionFlags(0X127904,0x0);
	MakeFunction    (0X1279D4,0X127A3C);
	SetFunctionFlags(0X1279D4,0x0);
	MakeFunction    (0X127A6E,0X127B4C);
	SetFunctionFlags(0X127A6E,0x0);
	MakeFunction    (0X127B5C,0X127C2A);
	SetFunctionFlags(0X127B5C,0x0);
	MakeFunction    (0X127C2A,0X127C9C);
	SetFunctionFlags(0X127C2A,0x0);
	MakeFunction    (0X127CAA,0X127DEE);
	SetFunctionFlags(0X127CAA,0x0);
	MakeFunction    (0X127DEE,0X127E04);
	SetFunctionFlags(0X127DEE,0x0);
	MakeFunction    (0X127E0C,0X127E12);
	SetFunctionFlags(0X127E0C,0x0);
	MakeFunction    (0X127E12,0X127E18);
	SetFunctionFlags(0X127E12,0x0);
	MakeFunction    (0X127E18,0X127E74);
	SetFunctionFlags(0X127E18,0x0);
	MakeFunction    (0X127E74,0X127F86);
	SetFunctionFlags(0X127E74,0x0);
	MakeFunction    (0X127F86,0X127FC6);
	SetFunctionFlags(0X127F86,0x0);
	MakeFunction    (0X127FC6,0X1280F0);
	SetFunctionFlags(0X127FC6,0x0);
	MakeFunction    (0X1280F0,0X128106);
	SetFunctionFlags(0X1280F0,0x0);
	MakeFunction    (0X12810E,0X128114);
	SetFunctionFlags(0X12810E,0x0);
	MakeFunction    (0X128114,0X12815C);
	SetFunctionFlags(0X128114,0x0);
	MakeFunction    (0X1281FC,0X12829E);
	SetFunctionFlags(0X1281FC,0x0);
	MakeFunction    (0X12829E,0X1282A8);
	SetFunctionFlags(0X12829E,0x0);
	MakeFunction    (0X1282B0,0X1282B8);
	SetFunctionFlags(0X1282B0,0x0);
	MakeFunction    (0X1282B8,0X1282CC);
	SetFunctionFlags(0X1282B8,0x0);
	MakeFunction    (0X1282E0,0X12837A);
	SetFunctionFlags(0X1282E0,0x0);
	MakeFunction    (0X12837A,0X1283C4);
	SetFunctionFlags(0X12837A,0x0);
	MakeFunction    (0X1283E2,0X128424);
	SetFunctionFlags(0X1283E2,0x0);
	MakeFunction    (0X128424,0X12847C);
	SetFunctionFlags(0X128424,0x0);
	MakeFunction    (0X12847C,0X1284E0);
	SetFunctionFlags(0X12847C,0x0);
	MakeFunction    (0X1284E0,0X128536);
	SetFunctionFlags(0X1284E0,0x0);
	MakeFunction    (0X128536,0X128618);
	SetFunctionFlags(0X128536,0x0);
	MakeFunction    (0X128618,0X12865E);
	SetFunctionFlags(0X128618,0x0);
	MakeFunction    (0X128730,0X128798);
	SetFunctionFlags(0X128730,0x0);
	MakeFunction    (0X128798,0X12883E);
	SetFunctionFlags(0X128798,0x0);
	MakeFunction    (0X12883E,0X128894);
	SetFunctionFlags(0X12883E,0x0);
	MakeFunction    (0X1288B4,0X128910);
	SetFunctionFlags(0X1288B4,0x0);
	MakeFunction    (0X128A38,0X128AF4);
	SetFunctionFlags(0X128A38,0x0);
	MakeNameEx(0X128988, "@LaserEye", SN_LOCAL);
	MakeNameEx(0X128996, "@Loop", SN_LOCAL);
	MakeNameEx(0X1289EC, "@Next", SN_LOCAL);
	MakeNameEx(0X128A74, "@GreenLaser", SN_LOCAL);
	MakeNameEx(0X128AD0, "@GetLayout", SN_LOCAL);
	MakeNameEx(0X128AE6, "@Mirrored", SN_LOCAL);
	MakeNameEx(0X128AEC, "@LoadLayout", SN_LOCAL);
	MakeNameEx(0X128AF2, "@Return", SN_LOCAL);
	MakeFunction    (0X128D04,0X128D7E);
	SetFunctionFlags(0X128D04,0x0);
	MakeFunction    (0X128E16,0X128E8A);
	SetFunctionFlags(0X128E16,0x0);
	MakeFunction    (0X128F04,0X128F78);
	SetFunctionFlags(0X128F04,0x0);
	MakeFunction    (0X128F98,0X128FC2);
	SetFunctionFlags(0X128F98,0x0);
	MakeFunction    (0X128FC2,0X128FD6);
	SetFunctionFlags(0X128FC2,0x0);
	MakeFunction    (0X129012,0X129292);
	SetFunctionFlags(0X129012,0x0);
	MakeFunction    (0X129292,0X129396);
	SetFunctionFlags(0X129292,0x0);
	MakeFrame(0X129292, 0X0, 0, 0X0);
	MakeFunction    (0X129396,0X1293B6);
	SetFunctionFlags(0X129396,0x0);
	MakeFunction    (0X1293B6,0X129526);
	SetFunctionFlags(0X1293B6,0x0);
	MakeFunction    (0X129526,0X129546);
	SetFunctionFlags(0X129526,0x0);
	MakeFunction    (0X129546,0X129566);
	SetFunctionFlags(0X129546,0x0);
	MakeFunction    (0X129566,0X12963E);
	SetFunctionFlags(0X129566,0x0);
	MakeFunction    (0X12963E,0X12978E);
	SetFunctionFlags(0X12963E,0x0);
	MakeFunction    (0X12978E,0X1299C4);
	SetFunctionFlags(0X12978E,0x0);
	MakeFunction    (0X1299C4,0X1299E4);
	SetFunctionFlags(0X1299C4,0x0);
	MakeFunction    (0X1299E4,0X129CE6);
	SetFunctionFlags(0X1299E4,0x0);
	MakeFunction    (0X129CE6,0X129D74);
	SetFunctionFlags(0X129CE6,0x0);
	MakeFunction    (0X129D74,0X129D94);
	SetFunctionFlags(0X129D74,0x0);
	MakeFunction    (0X129D94,0X129E28);
	SetFunctionFlags(0X129D94,0x0);
	MakeFunction    (0X129E28,0X129E50);
	SetFunctionFlags(0X129E28,0x0);
	MakeFunction    (0X129E50,0X129ED6);
	SetFunctionFlags(0X129E50,0x0);
	MakeFunction    (0X129ED6,0X129EFE);
	SetFunctionFlags(0X129ED6,0x0);
	MakeFunction    (0X129EFE,0X129F6A);
	SetFunctionFlags(0X129EFE,0x0);
	MakeFunction    (0X129F6A,0X129FE4);
	SetFunctionFlags(0X129F6A,0x0);
	MakeFunction    (0X129FE4,0X12A004);
	SetFunctionFlags(0X129FE4,0x0);
	MakeFunction    (0X12A004,0X12A0D2);
	SetFunctionFlags(0X12A004,0x0);
	MakeFunction    (0X12A0D2,0X12A0F2);
	SetFunctionFlags(0X12A0D2,0x0);
	MakeFunction    (0X12A0F2,0X12A15E);
	SetFunctionFlags(0X12A0F2,0x0);
	MakeFunction    (0X12A15E,0X12A17E);
	SetFunctionFlags(0X12A15E,0x0);
	MakeFunction    (0X12A17E,0X12A19E);
	SetFunctionFlags(0X12A17E,0x0);
	MakeFunction    (0X12A19E,0X12A230);
	SetFunctionFlags(0X12A19E,0x0);
	MakeFunction    (0X12A230,0X12A388);
	SetFunctionFlags(0X12A230,0x0);
	MakeFunction    (0X12A3B4,0X12A4BA);
	SetFunctionFlags(0X12A3B4,0x0);
	MakeFunction    (0X12A4BA,0X12A4C4);
	SetFunctionFlags(0X12A4BA,0x0);
	MakeFunction    (0X12A4C4,0X12A4EE);
	SetFunctionFlags(0X12A4C4,0x0);
	MakeFunction    (0X12A52A,0X12A560);
	SetFunctionFlags(0X12A52A,0x0);
	MakeFunction    (0X12A560,0X12A562);
	SetFunctionFlags(0X12A560,0x0);
	MakeFunction    (0X12A562,0X12A598);
	SetFunctionFlags(0X12A562,0x0);
	MakeFunction    (0X12A598,0X12A5B6);
	SetFunctionFlags(0X12A598,0x0);
	MakeFunction    (0X12A5B6,0X12A5EC);
	SetFunctionFlags(0X12A5B6,0x0);
	MakeFunction    (0X12A5EC,0X12A622);
	SetFunctionFlags(0X12A5EC,0x0);
	MakeFunction    (0X12A622,0X12A666);
	SetFunctionFlags(0X12A622,0x0);
	MakeFunction    (0X12A666,0X12A6AE);
	SetFunctionFlags(0X12A666,0x0);
	MakeFunction    (0X12A6AE,0X12A7F6);
	SetFunctionFlags(0X12A6AE,0x0);
	MakeFunction    (0X12A7F6,0X12A7F8);
	SetFunctionFlags(0X12A7F6,0x0);
	MakeFunction    (0X12A7F8,0X12A82E);
	SetFunctionFlags(0X12A7F8,0x0);
	MakeFunction    (0X12A82E,0X12A830);
	SetFunctionFlags(0X12A82E,0x0);
	MakeFunction    (0X12A830,0X12A866);
	SetFunctionFlags(0X12A830,0x0);
	MakeFunction    (0X12A866,0X12A8EC);
	SetFunctionFlags(0X12A866,0x0);
	MakeFunction    (0X12A8EC,0X12A8EE);
	SetFunctionFlags(0X12A8EC,0x0);
	MakeFunction    (0X12A8EE,0X12A932);
	SetFunctionFlags(0X12A8EE,0x0);
	MakeFunction    (0X12A932,0X12A934);
	SetFunctionFlags(0X12A932,0x0);
	MakeFunction    (0X12A934,0X12A994);
	SetFunctionFlags(0X12A934,0x0);
	MakeFunction    (0X12A994,0X12A9C6);
	SetFunctionFlags(0X12A994,0x0);
	MakeFunction    (0X12A9C6,0X12A9DA);
	SetFunctionFlags(0X12A9C6,0x0);
	MakeFunction    (0X12A9DA,0X12A9DC);
	SetFunctionFlags(0X12A9DA,0x0);
	MakeFunction    (0X12A9DC,0X12AA0E);
	SetFunctionFlags(0X12A9DC,0x0);
	MakeFunction    (0X12AA0E,0X12AA40);
	SetFunctionFlags(0X12AA0E,0x0);
	MakeFunction    (0X12AA40,0X12AB7E);
	SetFunctionFlags(0X12AA40,0x0);
	MakeFunction    (0X12AB7E,0X12ABCA);
	SetFunctionFlags(0X12AB7E,0x0);
	MakeFunction    (0X12ABCC,0X12ABE0);
	SetFunctionFlags(0X12ABCC,0x0);
	MakeFunction    (0X12AC1C,0X12AC8C);
	SetFunctionFlags(0X12AC1C,0x0);
	MakeFunction    (0X12AC8C,0X12ACAC);
	SetFunctionFlags(0X12AC8C,0x0);
	MakeFunction    (0X12ACAC,0X12ACCC);
	SetFunctionFlags(0X12ACAC,0x0);
	MakeFunction    (0X12ACCC,0X12AD04);
	SetFunctionFlags(0X12ACCC,0x0);
	MakeFunction    (0X12AD04,0X12AD24);
	SetFunctionFlags(0X12AD04,0x0);
	MakeFunction    (0X12AD24,0X12AD44);
	SetFunctionFlags(0X12AD24,0x0);
	MakeFunction    (0X12AD44,0X12AE56);
	SetFunctionFlags(0X12AD44,0x0);
	MakeFunction    (0X12AE56,0X12AE6A);
	SetFunctionFlags(0X12AE56,0x0);
	MakeFunction    (0X12AE6A,0X12AEA8);
	SetFunctionFlags(0X12AE6A,0x0);
	MakeFunction    (0X12AEA8,0X12AEC8);
	SetFunctionFlags(0X12AEA8,0x0);
	MakeFunction    (0X12AEC8,0X12AFD8);
	SetFunctionFlags(0X12AEC8,0x0);
	MakeFunction    (0X12AFD8,0X12B038);
	SetFunctionFlags(0X12AFD8,0x0);
	MakeFunction    (0X12B038,0X12B092);
	SetFunctionFlags(0X12B038,0x0);
	MakeFunction    (0X12B092,0X12B0F2);
	SetFunctionFlags(0X12B092,0x0);
	MakeFunction    (0X12B0F2,0X12B212);
	SetFunctionFlags(0X12B0F2,0x0);
	MakeFunction    (0X12B216,0X12B256);
	SetFunctionFlags(0X12B216,0x0);
	MakeFunction    (0X12B256,0X12B276);
	SetFunctionFlags(0X12B256,0x0);
	MakeFunction    (0X12B276,0X12B2B0);
	SetFunctionFlags(0X12B276,0x0);
	MakeFunction    (0X12B2B0,0X12B2D0);
	SetFunctionFlags(0X12B2B0,0x0);
	MakeFunction    (0X12B2D0,0X12B31C);
	SetFunctionFlags(0X12B2D0,0x0);
	MakeFunction    (0X12B31C,0X12B33C);
	SetFunctionFlags(0X12B31C,0x0);
	MakeFunction    (0X12B33C,0X12B36C);
	SetFunctionFlags(0X12B33C,0x0);
	MakeFunction    (0X12B36C,0X12B378);
	SetFunctionFlags(0X12B36C,0x0);
	MakeFunction    (0X12B378,0X12B398);
	SetFunctionFlags(0X12B378,0x0);
	MakeFunction    (0X12B398,0X12B470);
	SetFunctionFlags(0X12B398,0x0);
	MakeFunction    (0X12B470,0X12B490);
	SetFunctionFlags(0X12B470,0x0);
	MakeFunction    (0X12B490,0X12B598);
	SetFunctionFlags(0X12B490,0x0);
	MakeFunction    (0X12B598,0X12B5A4);
	SetFunctionFlags(0X12B598,0x0);
	MakeFunction    (0X12B5E8,0X12B62C);
	SetFunctionFlags(0X12B5E8,0x0);
	MakeFunction    (0X12B638,0X12BF3E);
	SetFunctionFlags(0X12B638,0x0);
	MakeFunction    (0X12BF42,0X12BF66);
	SetFunctionFlags(0X12BF42,0x0);
	MakeFunction    (0X12BF66,0X12BF7C);
	SetFunctionFlags(0X12BF66,0x0);
	MakeFunction    (0X12BF7C,0X12BF92);
	SetFunctionFlags(0X12BF7C,0x0);
	MakeFunction    (0X12BF92,0X12BFAE);
	SetFunctionFlags(0X12BF92,0x0);
	MakeFunction    (0X12BFB6,0X12BFD0);
	SetFunctionFlags(0X12BFB6,0x0);
	MakeFunction    (0X12BFD0,0X12BFF0);
	SetFunctionFlags(0X12BFD0,0x0);
	MakeNameEx(0X12BFD6, "@Loop", SN_LOCAL);
	MakeNameEx(0X12BFEE, "@Return", SN_LOCAL);
	MakeFunction    (0X12BFF0,0X12C036);
	SetFunctionFlags(0X12BFF0,0x0);
	MakeFunction    (0X12C036,0X12C080);
	SetFunctionFlags(0X12C036,0x0);
	MakeFunction    (0X12C080,0X12C09E);
	SetFunctionFlags(0X12C080,0x0);
	MakeFunction    (0X12C09E,0X12C172);
	SetFunctionFlags(0X12C09E,0x0);
	MakeFunction    (0X12C1BA,0X12C1EC);
	SetFunctionFlags(0X12C1BA,0x0);
	MakeFunction    (0X12C1EC,0X12C200);
	SetFunctionFlags(0X12C1EC,0x0);
	MakeFunction    (0X12C208,0X12C21C);
	SetFunctionFlags(0X12C208,0x0);
	MakeFunction    (0X12C21C,0X12C224);
	SetFunctionFlags(0X12C21C,0x0);
	MakeFunction    (0X12C224,0X12C2B4);
	SetFunctionFlags(0X12C224,0x0);
	MakeFunction    (0X12C2B4,0X12C2BE);
	SetFunctionFlags(0X12C2B4,0x0);
	MakeFunction    (0X12C2BE,0X12C2DC);
	SetFunctionFlags(0X12C2BE,0x0);
	MakeFunction    (0X12C2DC,0X12C312);
	SetFunctionFlags(0X12C2DC,0x0);
	MakeFunction    (0X12C312,0X12C342);
	SetFunctionFlags(0X12C312,0x0);
	MakeFunction    (0X12C342,0X12C34E);
	SetFunctionFlags(0X12C342,0x0);
	MakeFunction    (0X12C34E,0X12C36E);
	SetFunctionFlags(0X12C34E,0x0);
	MakeFunction    (0X12C36E,0X12C404);
	SetFunctionFlags(0X12C36E,0x0);
	MakeFunction    (0X12C404,0X12C446);
	SetFunctionFlags(0X12C404,0x0);
	MakeFunction    (0X12C446,0X12C480);
	SetFunctionFlags(0X12C446,0x0);
	MakeFunction    (0X12C480,0X12C49C);
	SetFunctionFlags(0X12C480,0x0);
	MakeFunction    (0X12C4A8,0X12C4AA);
	SetFunctionFlags(0X12C4A8,0x0);
	MakeFunction    (0X12C4AA,0X12C508);
	SetFunctionFlags(0X12C4AA,0x0);
	MakeFunction    (0X12C524,0X12C582);
	SetFunctionFlags(0X12C524,0x0);
	MakeFunction    (0X12C59C,0X12C5FA);
	SetFunctionFlags(0X12C59C,0x0);
	MakeFunction    (0X12C608,0X12C666);
	SetFunctionFlags(0X12C608,0x0);
	MakeFunction    (0X12C678,0X12C7B0);
	SetFunctionFlags(0X12C678,0x0);
	MakeFunction    (0X130004,0X130464);
	SetFunctionFlags(0X130004,0x0);
	MakeFunction    (0X1304FE,0X130536);
	SetFunctionFlags(0X1304FE,0x0);
	MakeFunction    (0X130536,0X130562);
	SetFunctionFlags(0X130536,0x0);
	MakeFunction    (0X1305B4,0X1305F8);
	SetFunctionFlags(0X1305B4,0x0);
	MakeFrame(0X1305B4, 0X1, 0, 0X0);
	MakeFunction    (0X13062A,0X13066E);
	SetFunctionFlags(0X13062A,0x0);
	MakeFrame(0X13062A, 0X1, 0, 0X0);
	MakeFunction    (0X13066E,0X13068C);
	SetFunctionFlags(0X13066E,0x0);
	MakeFunction    (0X130694,0X130706);
	SetFunctionFlags(0X130694,0x0);
	MakeFunction    (0X130706,0X130740);
	SetFunctionFlags(0X130706,0x0);
	MakeFrame(0X130706, 0X1, 0, 0X0);
	MakeFunction    (0X13162E,0X1316A8);
	SetFunctionFlags(0X13162E,0x0);
	MakeFunction    (0X1316A8,0X1316D8);
	SetFunctionFlags(0X1316A8,0x0);
	MakeFunction    (0X1316D8,0X13171C);
	SetFunctionFlags(0X1316D8,0x0);
	MakeFunction    (0X164000,0X164004);
	SetFunctionFlags(0X164000,0x80);
	MakeFunction    (0X164004,0X164008);
	SetFunctionFlags(0X164004,0xc0);
	MakeFunction    (0X164008,0X16400C);
	SetFunctionFlags(0X164008,0x80);
	MakeFunction    (0X16400C,0X164010);
	SetFunctionFlags(0X16400C,0x80);
	MakeFunction    (0X164010,0X164014);
	SetFunctionFlags(0X164010,0x80);
	MakeFunction    (0X164014,0X164018);
	SetFunctionFlags(0X164014,0x80);
	MakeFunction    (0X164018,0X16401C);
	SetFunctionFlags(0X164018,0x80);
	MakeFunction    (0X16401C,0X164094);
	SetFunctionFlags(0X16401C,0x0);
	MakeFunction    (0X164094,0X1640C0);
	SetFunctionFlags(0X164094,0x0);
	MakeFunction    (0X164100,0X164176);
	SetFunctionFlags(0X164100,0x0);
	MakeFunction    (0X164176,0X1641E6);
	SetFunctionFlags(0X164176,0x0);
	MakeFunction    (0X1641E6,0X164254);
	SetFunctionFlags(0X1641E6,0x0);
	MakeFunction    (0X164254,0X1643B0);
	SetFunctionFlags(0X164254,0x0);
	MakeFunction    (0X1643B0,0X1643CE);
	SetFunctionFlags(0X1643B0,0x0);
	MakeFunction    (0X1643CE,0X1644EA);
	SetFunctionFlags(0X1643CE,0x0);
	MakeFunction    (0X1644F6,0X1645A4);
	SetFunctionFlags(0X1644F6,0x0);
	MakeFunction    (0X1645A4,0X16470E);
	SetFunctionFlags(0X1645A4,0x0);
	MakeFunction    (0X16470E,0X164732);
	SetFunctionFlags(0X16470E,0x0);
	MakeFunction    (0X164732,0X164834);
	SetFunctionFlags(0X164732,0x0);
	MakeFunction    (0X164834,0X164876);
	SetFunctionFlags(0X164834,0x0);
	MakeFunction    (0X164878,0X164916);
	SetFunctionFlags(0X164878,0x0);
	MakeFunction    (0X164916,0X16495C);
	SetFunctionFlags(0X164916,0x0);
	MakeFunction    (0X16495C,0X164990);
	SetFunctionFlags(0X16495C,0x0);
	MakeFunction    (0X1674E4,0X167576);
	SetFunctionFlags(0X1674E4,0x0);
	MakeFunction    (0X167576,0X16761C);
	SetFunctionFlags(0X167576,0x0);
	MakeFunction    (0X167F9C,0X167FA8);
	SetFunctionFlags(0X167F9C,0x0);
	MakeFunction    (0X167FA8,0X167FEA);
	SetFunctionFlags(0X167FA8,0x0);
	MakeNameEx(0X167FD2, "@Loop", SN_LOCAL);
	MakeNameEx(0X167FE2, "@Skip", SN_LOCAL);
	MakeNameEx(0X167FE8, "@Return", SN_LOCAL);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
	Functions_1();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
	Bytes_4();
	Bytes_5();
	Bytes_6();
	Bytes_7();
	Bytes_8();
	Bytes_9();
	Bytes_10();
}

// End of file.
