//
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void) {
        GenInfo();              // various settings
        Segments();             // segmentation
        Enums();                // enumerations
        Structures();           // structure types
        Bytes();                // individual bytes (code,data)
        Functions();            // function definitions
        SegRegs();              // segment register values
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
    SetPrcsr("z80");
    StringStp(0xA);
    Tabs(1);
    Comments(0);
    Voids(0);
    XrefShow(2);
    AutoShow(1);
    Indent(16);
    CmtIndent(40);
    TailDepth(0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
    SetSelector(0X1,0X0);
    ;
    SegCreate(0X0,0X2000,0X0,0,1,2);
    SegRename(0X0,"RAM");
    SegClass (0X0,"");
    SegCreate(0X4000,0X5FFF,0X0,0,1,2);
    SegRename(0X4000,"YM");
    SegClass (0X4000,"");
    SegCreate(0X6000,0X60FF,0X0,0,1,2);
    SegRename(0X6000,"BAR");
    SegClass (0X6000,"");
    SegCreate(0X7F00,0X7FFF,0X0,0,1,2);
    SegRename(0X7F00,"VDP");
    SegClass (0X7F00,"");
    SegCreate(0X8000,0XFFFF,0X0,0,1,2);
    SegRename(0X8000,"BANK");
    SegClass (0X8000,"");
    LowVoids(0x0);
    HighVoids(0xFFFF);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

    MakeComm    (0X0,    "disable interrupts : synchronisation is just based on YM Timer");
    MakeCode    (0X0);
    MakeName    (0X0,    "init");
    MakeRptCmt    (0X1,    "initialize stack pointer");
    MakeCode    (x=0X1);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X4,    "apparently the smart way to clear 8-bit accumulator a");
    MakeRptCmt    (0X8,    "I've no idea of the initial purpose of those two bytes, but they absolutely have no influence on the driver's execution with this initialization");
    MakeRptCmt    (0XE,    "init music level at max");
    MakeRptCmt    (0X13,    "init timer value without sending it to YM");
    MakeRptCmt    (0X18,    "init fade in parameters : no fade in");
    MakeRptCmt    (0X1B,    "load music $20, which is void");
    MakeRptCmt    (0X1D,    "process new operation $20 to initialize YM and PSG with void data");
    MakeRptCmt    (0X20,    "init loaded bank, and enter the driver's main loop !");
    MakeComm    (0X23,    "get YM status");
    MakeName    (0X23,    "Main_Loop");
    MakeRptCmt    (0X26,    "check YM Timer. Docs say it's Timer A, but the rest of the code uses Timer B. Error in docs, I assume.");
    MakeRptCmt    (0X28,    "jump as long as there is no timer overflow");
    MakeRptCmt    (0X2A,    "call this subroutine at YM Timer overflow to update the sound data for everything else than DAC");
    MakeRptCmt    (0X30,    "loop parameter is dynamically changed to adjust time period of a DAC sound");
    MakeCode    (0X30);
    MakeName    (0X30,    "Dac_Loop");
    MakeComm    (0X32,    "loop b times before checking things to do");
    MakeRptCmt    (0X37,    "check first if there is a new operation to process");
    MakeRptCmt    (0X3E,    "check if there is a new DAC sample to play");
    MakeRptCmt    (0X42,    "check remaining sound length");
    MakeRptCmt    (0X44,    "if remaining length = 0, then it's end of DAC sample, or it's because sample $FE has been loaded at initialization");
    MakeRptCmt    (0X46,    "YM Register : DAC data");
    MakeRptCmt    (0X48,    "get next DAC sample byte. It's 8-bit PCM");
    MakeRptCmt    (0X4F,    "loop as long as YM busy");
    MakeRptCmt    (0X56,    "transmit DAC Data");
    MakeRptCmt    (0X59,    "decrement remaining sound length to play");
    MakeRptCmt    (0X5A,    "End of the driver's main loop !");
    MakeComm    (0X5D,    "mutes sound at reception of operation $FF");
    MakeCode    (0X5D);
    MakeName    (0X5D,    "Mute_Sound");
    MakeRptCmt    (0X60,    "clear");
    MakeRptCmt    (0X66,    "set Total Level to smallest amplitude");
    MakeRptCmt    (0X69,    "4 loops, one for each operator of the 3 channels");
    MakeRptCmt    (0X80,    "set Total Level to smallest amplitude");
    MakeRptCmt    (0X83,    "4 loops, one for each operator of 3 channels");
    MakeCode    (x=0X95);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X9A,    "set PSG channel 1 volume to 0");
    MakeRptCmt    (0X9D,    "set PSG channel 2 volume to 0");
    MakeRptCmt    (0XA0,    "set PSG channel 3 volume to 0");
    MakeRptCmt    (0XA3,    "set PSG noise channel volume to 0");
    MakeRptCmt    (0XA8,    "loop as long as there is no new operation to process");
    MakeRptCmt    (0XAC,    "if next sent operation is not to mute the sound, go process it in the main loop");
    MakeRptCmt    (0XAE,    "if next sent operation is to mute the sound, then ignore it, and also go back to main loop !");
    MakeName    (0XB2,    "Update_YM_Instruments");
    MakeRptCmt    (0XB8,    "go back to main loop");
    MakeCode    (0XBB);
    MakeName    (0XBB,    "YM_UpdateInstrumentsLevels");
    MakeRptCmt    (0XC6,    "get channel data area");
    MakeCode    (x=0XC6);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0XCA,    "get channel level");
    MakeRptCmt    (0XCD,    "reload instrument to load the new level");
    MakeCode    (x=0XD3);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (x=0XE0);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (x=0XF3);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (x=0X100);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (x=0X113);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (x=0X126);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (0X137);
    MakeName    (0X137,    "Update_YM_Level");
    MakeCode    (x=0X139);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeComm    (0X143,    "b = 1, c = 0");
    MakeCode    (0X143);
    MakeName    (0X143,    "LoadBank");
    MakeRptCmt    (0X146,    "save register");
    MakeRptCmt    (0X147,    "save register");
    MakeRptCmt    (0X148,    "get offset containing bank index to use stored on 2 bits -> 4 different banks available");
    MakeCode    (x=0X148);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X14B,    "load bank value");
    MakeRptCmt    (0X14C,    "keep only bit 0");
    MakeRptCmt    (0X14E,    "load bank value again");
    MakeRptCmt    (0X14F,    "keep only bit 1");
    MakeRptCmt    (0X151,    "load bank address register");
    MakeCode    (x=0X151);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X15D,    "load saved register");
    MakeRptCmt    (0X15E,    "load saved register");
    MakeCode    (0X160);
    MakeName    (0X160,    "LoadMusicBank");
    MakeCode    (x=0X165);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (0X177);
    MakeName    (0X177,    "LoadInstrumentsBank");
    MakeRptCmt    (0X179,    "b = 1, c = 0");
    MakeRptCmt    (0X17C,    "load bank address register");
    MakeCode    (x=0X17C);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (0X18B);
    MakeName    (0X18B,    "LoadDacSound");
    MakeRptCmt    (0X18D,    "if a != FE");
    MakeRptCmt    (0X18F,    "if a = FE, play nothing");
    MakeRptCmt    (0X192,    "0 remaining length, so just stay in the main loop");
    MakeRptCmt    (0X196,    "a is DAC sound index, starting at 1, so decrement it");
    MakeCode    (0X196);
    MakeRptCmt    (0X19C,    "hl = 8 * a, so each DAC sound entry uses 8 bytes");
    MakeCode    (x=0X19D);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X1A0,    "hl now points to the right entry");
    MakeRptCmt    (0X1A1,    "get byte 0 : time period used");
    MakeRptCmt    (0X1A2,    "ignore byte 1 !");
    MakeRptCmt    (0X1A3,    "point to byte 2 : bank to load");
    MakeRptCmt    (0X1A4,    "change loop number to change DAC play time period");
    MakeRptCmt    (0X1A7,    "get byte 2");
    MakeRptCmt    (0X1A8,    "save byte 2");
    MakeRptCmt    (0X1AB,    "ignore byte 3 !");
    MakeRptCmt    (0X1AF,    "de = bytes 5-4 : sound length");
    MakeRptCmt    (0X1B1,    "7th byte");
    MakeRptCmt    (0X1B3,    "8th byte");
    MakeRptCmt    (0X1B4,    "hl = bytes 7-6 : sound data pointer");
    MakeRptCmt    (0X1B6,    "clear to say that DAC sound is now loaded");
    MakeComm    (0X1BD,    "main handles any new operation sent by 68K (or Z80 itself)");
    MakeCode    (0X1BD);
    MakeName    (0X1BD,    "Main");
    MakeRptCmt    (0X1BF,    "clear 0x1FFF (its value is already in pushed a)");
    MakeRptCmt    (0X1C5,    "if a = FFh : mute sound");
    MakeRptCmt    (0X1CA,    "if a = FEh : stop music by muting PSG and releasing YM keys");
    MakeRptCmt    (0X1CF,    "if a = FDh : fade out");
    MakeRptCmt    (0X1D4,    "if a = F0h");
    MakeRptCmt    (0X1D9,    "if a > 41h, then play an SFX (already stored in ram along with the code)");
    MakeComm    (0X1DC,    "else, play a music !");
    MakeRptCmt    (0X1E1,    "if a > 21h, then play music from chunk 0x1F0000");
    MakeRptCmt    (0X1E3,    "otherwise play music from 0x1F8000");
    MakeRptCmt    (0X1E5,    "load 01h to 0x14AD");
    MakeRptCmt    (0X1F2,    "clear a");
    MakeCode    (0X1F2);
    MakeRptCmt    (0X1FF,    "decrement music/sound index (no $00 entry)");
    MakeName    (0X1FF,    "Load_Music");
    MakeRptCmt    (0X200,    "double index because the pointer table to reach has 2 bytes per entry");
    MakeRptCmt    (0X208,    "now hl contains pointer to music/sound data");
    MakeRptCmt    (0X209,    "get byte 0");
    MakeRptCmt    (0X20A,    "check if a = 0 with z flag");
    MakeRptCmt    (0X20B,    "if byte 0 of music data != 0, actually load it as an SFX instead");
    MakeRptCmt    (0X217,    "reset fade in timer");
    MakeRptCmt    (0X21A,    "clear that useless byte ... no kidding ! that thing is really used nowhere");
    MakeRptCmt    (0X21D,    "stop currently playing music if there was one");
    MakeRptCmt    (0X239,    "clear fade out bytes");
    MakeRptCmt    (0X244,    "hl now points to the first of the ten pointers");
    MakeRptCmt    (0X245,    "number of loops");
    MakeRptCmt    (0X247,    "start of the data to store");
    MakeRptCmt    (0X24B,    "this part initializes each channel ram data");
    MakeName    (0X24B,    "Load_Music_Channels");
    MakeRptCmt    (0X24D,    "de = channel data pointer");
    MakeRptCmt    (0X24E,    "point to first byte of next pointer");
    MakeRptCmt    (0X252,    "init data pointer");
    MakeRptCmt    (0X25A,    "and let me present to you ...");
    MakeRptCmt    (0X25B,    "time counter for note/sample length");
    MakeRptCmt    (0X25E,    "\"channel not in use\" indicator");
    MakeRptCmt    (0X261,    "set to $80 when there is no key release");
    MakeRptCmt    (0X267,    "loop A start pointer");
    MakeRptCmt    (0X26A,    "note shift value");
    MakeRptCmt    (0X26D,    "frequency shift value");
    MakeRptCmt    (0X270,    "slide speed");
    MakeRptCmt    (0X275,    "stereo setting");
    MakeRptCmt    (0X27E,    "get first pointed data byte");
    MakeRptCmt    (0X283,    "if first byte of channel data = FF, then there is no data for this channel");
    MakeRptCmt    (0X285,    "\"channel not in use\"");
    MakeRptCmt    (0X28D,    "actual loop instruction based on register b");
    MakeRptCmt    (0X28F,    "loop two times");
    MakeName    (0X291,    "Activate_Stereo_Outputs");
    MakeRptCmt    (0X297,    "activate left and right sound outputs for each channel");
    MakeRptCmt    (0X29A,    "first channel of called YM part");
    MakeRptCmt    (0X29E,    "second channel");
    MakeRptCmt    (0X2A2,    "third channel");
    MakeRptCmt    (0X2A8,    "set C0h for byte 1E of YM channels 4,5,6");
    MakeRptCmt    (0X2B0,    "put value FE as DAC Sound sample to load ... which loads nothing. Why such a thing then ?");
    MakeRptCmt    (0X2B8,    "end of the loadSFX and loadMusic chunks");
    MakeName    (0X2B8,    "Load_End");
    MakeRptCmt    (0X2BD,    "looks like the part to play SFX");
    MakeCode    (0X2BD);
    MakeName    (0X2BD,    "Load_SFX");
    MakeRptCmt    (0X2C4,    "a is an index, and you double it to access to a pointer table");
    MakeRptCmt    (0X2C5,    "SFX are actually already stored in RAM");
    MakeCode    (x=0X2C5);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X2CB,    "get the proper pointer");
    MakeRptCmt    (0X2CD,    "get pointed byte 0");
    MakeRptCmt    (0X2CE,    "hl points to byte 1 of sfx data");
    MakeRptCmt    (0X2D1,    "if a != 1 (then a = 2, which means the sound just concerns 3 channels)");
    MakeRptCmt    (0X2D3,    "loop 10 times");
    MakeCode    (x=0X2D5);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X2D9,    "part to get next channel data");
    MakeName    (0X2D9,    "Load_SFX_Channels");
    MakeRptCmt    (0X2DB,    "de = bytes 2-3 of sound data = pointer");
    MakeRptCmt    (0X2DD,    "a = first byte of current channel");
    MakeRptCmt    (0X2DE,    "if first byte = FF, there is no data to setup, so skip subroutine call");
    MakeRptCmt    (0X2E8,    "go to next channel data");
    MakeRptCmt    (0X2EA,    "loop");
    MakeCode    (0X2EE);
    MakeName    (0X2EE,    "Load_SFX_Type_2");
    MakeRptCmt    (0X2F1,    "This is the only place where those two bytes could be used");
    MakeRptCmt    (0X2F6,    "if (0x1FFE) > (0x14AE), don't load the sound");
    MakeRptCmt    (0X2FD,    "loop 3 times");
    MakeRptCmt    (0X300,    "the 3 channel SFX are stored in dedicated temp channel data, in order not to overwrite current music data");
    MakeCode    (x=0X300);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X308,    "hl points to next pointer");
    MakeRptCmt    (0X309,    "a = first byte of current channel");
    MakeRptCmt    (0X30C,    "if a = FF, ignore this channel");
    MakeRptCmt    (0X30E,    "otherwise, init channel data");
    MakeRptCmt    (0X311,    "YM register : Key on/off");
    MakeRptCmt    (0X313,    "input \"key off\" for YM channel 4, 5, 6 respectively for channel 1,2,3 of the sound");
    MakeRptCmt    (0X316,    "a = c = current YM channel to use");
    MakeRptCmt    (0X317,    "a = YM register to activate left and right stereo outputs");
    MakeRptCmt    (0X31A,    "sets stereo left and right on");
    MakeRptCmt    (0X322,    "point next channel destination slot");
    MakeRptCmt    (0X325,    "next channel number");
    MakeRptCmt    (0X326,    "loop");
    MakeCode    (0X32B);
    MakeName    (0X32B,    "InitChannelDataForSFX");
    MakeRptCmt    (0X32E,    "bytes 0-1 = ed = offset of channel data source");
    MakeRptCmt    (0X333,    "byte 1E = C0");
    MakeRptCmt    (0X336,    "clear a");
    MakeRptCmt    (0X337,    "clear all those bytes");
    MakeRptCmt    (0X351,    "byte 1E = 1 ... er ... why is it set to $CO first and then to 1 at the end ?");
    MakeComm    (0X355,    "the subroutine sets key off / mutes channels playing music");
    MakeCode    (0X355);
    MakeName    (0X355,    "StopMusic");
    MakeCode    (x=0X356);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (x=0X361);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X368,    "YM register : Key on/off");
    MakeRptCmt    (0X36B,    "set Key OFF");
    MakeCode    (x=0X372);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X379,    "YM register : Key on/off");
    MakeRptCmt    (0X37C,    "set Key OFF");
    MakeCode    (x=0X383);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeComm    (0X38A,    "YM register : Key on/off");
    MakeRptCmt    (0X38D,    "set Key OFF");
    MakeCode    (x=0X3A0);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X3A7,    "YM register : Key on/off");
    MakeCode    (x=0X3B7);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X3BE,    "YM register : Key on/off");
    MakeCode    (x=0X3C4);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X3C9,    "set PSG channel 1 volume to 0");
    MakeRptCmt    (0X3CC,    "set PSG channel 2 volume to 0");
    MakeRptCmt    (0X3CF,    "set PSG channel 3 volume to 0");
    MakeRptCmt    (0X3D2,    "set PSG noise channel volume to 0");
    MakeCode    (x=0X3D3);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X3D6,    "value to add to pointer to go to next channel in ram");
    MakeRptCmt    (0X3D9,    "loop ten times");
    MakeRptCmt    (0X3DD,    "set \"Channel not in use\" byte");
    MakeRptCmt    (0X3DE,    "go to next channel");
    MakeRptCmt    (0X3DF,    "loop until PSG Noise Channel. SFX extra channels are not concerned.");
    MakeComm    (0X3F7,    "this is THE subroutine that updates every channel at each YM Timer overflow. Quite important !");
    MakeCode    (0X3F7);
    MakeName    (0X3F7,    "UpdateSound");
    MakeRptCmt    (0X3FD,    "increment counter");
    MakeRptCmt    (0X401,    "two circular right rotates");
    MakeRptCmt    (0X403,    "just keep nibble 1 * 4");
    MakeRptCmt    (0X40A,    "if MusicCounter = Nibble 1 * 4 and != 0");
    MakeRptCmt    (0X40B,    "clear MusicCounter");
    MakeCode    (x=0X40C);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X414,    "if music level not 0F, increment it and update YM instruments levels");
    MakeRptCmt    (0X42F,    "jump unless currently executing a fade out");
    MakeRptCmt    (0X441,    "increment fade out counter if fade out timer has reached 0");
    MakeRptCmt    (0X448,    "if FadeOutCounter = 0Ch, then stop music because it's the end of a fade out operation");
    MakeCode    (0X44D);
    MakeRptCmt    (0X44E,    "decrement fade out timer");
    MakeRptCmt    (0X451,    "reload timer B");
    MakeCode    (x=0X454);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X459,    "taking care of the music channel data");
    MakeRptCmt    (0X45C,    "taking care of YM 1,2,3");
    MakeRptCmt    (0X473,    "taking care of YM 4,5,6");
    MakeRptCmt    (0X4A4,    "taking care of SFX channel data");
    MakeRptCmt    (0X4A7,    "when a 3-channel SFX is played, it has priority over music on YM4,5,6");
    MakeComm    (0X4C1,    "reset timers A and B, enable and load B");
    MakeCode    (0X4C1);
    MakeName    (0X4C1,    "YM_LoadTimerB");
    MakeCode    (0X4C6);
    MakeName    (0X4C6,    "YM1_ConditionnalInput");
    MakeRptCmt    (0X4CA,    "if currently managing SFX channel data, then just send data to YM1");
    MakeRptCmt    (0X4CD,    "otherwise, check if an SFX is being played on YM4,5,6");
    MakeRptCmt    (0X4D4,    "get \"channel not in use\" byte for SFX Channel 1");
    MakeRptCmt    (0X4D7,    "don't send data to YM if an SFX is being played, as it has priority over music");
    MakeCode    (0X4DA);
    MakeName    (0X4DA,    "YM_Input");
    MakeRptCmt    (0X4DE,    "if CallYm2InsteadOfYm1 set");
    MakeComm    (0X4E0,    "the subroutine sends value c in register b of YM1");
    MakeName    (0X4E0,    "YM1_Input");
    MakeRptCmt    (0X4E5,    "loop as long as YM2612 busy");
    MakeRptCmt    (0X4E8,    "write address to part I");
    MakeRptCmt    (0X4EC,    "write data to part I");
    MakeCode    (0X4F0);
    MakeName    (0X4F0,    "YM2_ConditionalInput");
    MakeRptCmt    (0X4F4,    "if currently managing SFX channel ram data, just send byte to YM");
    MakeRptCmt    (0X4F7,    "otherwise, first check if an SFX is being played with YM4,5,6 channels");
    MakeRptCmt    (0X4FE,    "get \"channel not in use\" byte of SFX channel 1");
    MakeRptCmt    (0X500,    "if SFX currently being played, then don't send data to YM2, as SFX has priority");
    MakeName    (0X502,    "YM2_Input");
    MakeRptCmt    (0X507,    "loop as long as YM2612 busy");
    MakeRptCmt    (0X50A,    "write address to YM2");
    MakeRptCmt    (0X50E,    "write data to YM2");
    MakeComm    (0X512,    "just keep attenuation parameter");
    MakeCode    (0X512);
    MakeName    (0X512,    "PSG_SetChannelAttenuation");
    MakeRptCmt    (0X514,    "save it");
    MakeRptCmt    (0X515,    "get concerned channel");
    MakeRptCmt    (0X518,    "load attenuation value");
    MakeRptCmt    (0X519,    "load attenuation command bits");
    MakeRptCmt    (0X51B,    "send message");
    MakeCode    (0X51F);
    MakeName    (0X51F,    "DAC_SetNewSample");
    MakeRptCmt    (0X524,    "if currently managing SFX channel ram data, just set new sample to load");
    MakeRptCmt    (0X527,    "otherwise, check if an SFX is being played, since it has priority");
    MakeRptCmt    (0X52E,    "get \"channel not in use\" byte for SFX Channel 1");
    MakeRptCmt    (0X531,    "if SFX Channel 1 in use, return");
    MakeRptCmt    (0X535,    "if fade out counter > 3, don't play sample, it would be too loud compared to the other channels");
    MakeRptCmt    (0X53B,    "if general sound level not at its max, then don't play sample");
    MakeComm    (0X543,    "iy : channel to process");
    MakeCode    (0X543);
    MakeName    (0X543,    "YM1_ParseData");
    MakeCode    (x=0X546);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X54B,    "THIS PART just inits iy, ix, and frequency registers");
    MakeRptCmt    (0X54F,    "a = 20h * a");
    MakeRptCmt    (0X553,    "point to appropriate channel ram data");
    MakeRptCmt    (0X558,    "A0 + channel number : first input address of frequency  register");
    MakeRptCmt    (0X559,    "parameter directly moved to code in ram !");
    MakeRptCmt    (0X55E,    "(0x75A) + 4 : second input address of frequency register");
    MakeRptCmt    (0X55F,    "parameter directly moved to code in ram !");
    MakeComm    (0X562,    "THIS PART checks if the channel actually has to be used or not");
    MakeRptCmt    (0X566,    "if byte 3 = 1, do nothing with this channel");
    MakeRptCmt    (0X567,    "THIS PART seems to check if it's time to release key or not yet");
    MakeRptCmt    (0X56D,    "if bytes 2 != byte 6, then it's not yet the end of note");
    MakeRptCmt    (0X56F,    "if byte 2 = byte 6, end of note counter, check byte 8");
    MakeRptCmt    (0X573,    "if byte 8 != 0");
    MakeRptCmt    (0X575,    "so if (byte 2 = byte 6) and (byte 8 = 0), set key off");
    MakeRptCmt    (0X577,    "concerned channel");
    MakeRptCmt    (0X57B,    "set key OFF");
    MakeComm    (0X57E,    "THIS PART checks if it's time to parse new music data or not yet (I think)");
    MakeRptCmt    (0X582,    "if byte 2 != 0");
    MakeRptCmt    (0X588,    "get ROM offset of next byte to parse");
    MakeComm    (0X58B,    "THIS PART checks if parsed byte is a command or a parameter");
    MakeName    (0X58B,    "Parsing_Start");
    MakeRptCmt    (0X58C,    "clear vibrato relative pointer");
    MakeRptCmt    (0X592,    "load time counter before vibrato");
    MakeRptCmt    (0X595,    "get pointed byte in rom");
    MakeRptCmt    (0X596,    "keep only bits 7-3");
    MakeRptCmt    (0X59A,    "if kept bits of pointed byte != F8, so if data byte is not a command");
    MakeRptCmt    (0X59D,    "else, value of pointed rom byte is a command");
    MakeRptCmt    (0X5A0,    "if pointed byte != FF, go test other possible command values");
    MakeRptCmt    (0X5A3,    "if pointed rom byte = FF, then get next two bytes");
    MakeRptCmt    (0X5A4,    "THIS PART handles an FF command");
    MakeRptCmt    (0X5AA,    "if second byte != 0, we have FF xx xx, so go parse from new offset xxxx");
    MakeRptCmt    (0X5AE,    "if we have FF 00 00, then mute channel because there is nothing else to do");
    MakeRptCmt    (0X5B0,    "else, we have FF xx 00, so put first byte in 0x1FFF to process operation xx");
    MakeRptCmt    (0X5B3,    "THIS PART mutes the channel because it has nothing to play");
    MakeRptCmt    (0X5B5,    "channel data byte 3 = 1");
    MakeRptCmt    (0X5B9,    "set channel level to minimum and leave subroutine");
    MakeRptCmt    (0X5BC,    "THIS PART puts in de the new offset from which to parse data");
    MakeCode    (0X5BC);
    MakeName    (0X5BC,    "YM1_Parse_At_New_Offset");
    MakeComm    (0X5BF,    "FE xx : set new instrument xx");
    MakeCode    (0X5BF);
    MakeName    (0X5BF,    "Set_Instrument");
    MakeRptCmt    (0X5CC,    "FD xx : play note at level xx. It's followed by other parameters handled at next parsing loop");
    MakeCode    (0X5CC);
    MakeName    (0X5CC,    "Load_Note");
    MakeRptCmt    (0X5D1,    "get note level");
    MakeCode    (0X5DB);
    MakeName    (0X5DB,    "Set_Slide_Or_Key_Release");
    MakeCode    (0X5E5);
    MakeName    (0X5E5,    "Load_Vibrato");
    MakeCode    (0X5EF);
    MakeName    (0X5EF,    "Set_Stereo");
    MakeCode    (0X5F9);
    MakeName    (0X5F9,    "Load_Note_Shift");
    MakeCode    (0X603);
    MakeName    (0X603,    "Loop_Command");
    MakeComm    (0X60D,    "if none of the commands from above are found,");
    MakeCode    (0X60D);
    MakeName    (0X60D,    "Theoretically_Unreachable");
    MakeRptCmt    (0X60E,    "then ignore and start process again two bytes forward. Theoretically, it can't happen ...");
    MakeRptCmt    (0X612,    "we are here because a < F8, so a can still be F0, 70, or a new note frequency to play");
    MakeCode    (0X612);
    MakeRptCmt    (0X617,    "if a = F0 or 70. Else, a is a note frequency byte");
    MakeRptCmt    (0X61A,    "1C affects note index up or down. It's set by command F9");
    MakeRptCmt    (0X620,    "load table of YM frequencies");
    MakeCode    (x=0X620);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X624,    "now hl points to the YM frequency value corresponding to the note's frequency");
    MakeRptCmt    (0X627,    "l = byte to put in YM Register Frequency 2");
    MakeRptCmt    (0X628,    "h = byte to put in YM Register Frequency 1");
    MakeRptCmt    (0X62B,    "byte 1D affects frequency up. It's set by command F9. Is it used ? I'll look in SF2 musics");
    MakeRptCmt    (0X632,    "YM Register : Frequency 2");
    MakeRptCmt    (0X633,    "input value");
    MakeRptCmt    (0X637,    "if channel byte 1F != 0, then pitch slide is activated");
    MakeRptCmt    (0X63A,    "so keep final value to reach in channel byte 12");
    MakeRptCmt    (0X63B,    "then jump");
    MakeRptCmt    (0X63D,    "else, put it directly in channel byte 0F");
    MakeRptCmt    (0X64A,    "YM register : Frequency 1");
    MakeRptCmt    (0X64B,    "input value");
    MakeRptCmt    (0X64F,    "if channel byte 1F != 0, pitch slide is activated");
    MakeRptCmt    (0X652,    "so keep value in channel byte 11");
    MakeRptCmt    (0X653,    "then jump");
    MakeRptCmt    (0X655,    "else, put it directly in channel byte 0E");
    MakeRptCmt    (0X65F,    "YM Register : Key on/off");
    MakeRptCmt    (0X664,    "set key ON");
    MakeRptCmt    (0X66A,    "get full byte again");
    MakeRptCmt    (0X66D,    "if bit 7 set, then it's command F0 or it's new note to play needing new note length");
    MakeRptCmt    (0X66F,    "else use existing time period");
    MakeRptCmt    (0X674,    "if a's bit 7 is set, then it's F0");
    MakeCode    (0X674);
    MakeName    (0X674,    "Command_F0");
    MakeRptCmt    (0X675,    "set a new time period with next byte");
    MakeComm    (0X679,    "also put time period in channel byte 2, which is the time counter");
    MakeRptCmt    (0X67D,    "point to next channel rom byte");
    MakeComm    (0X686,    "decrement channel time counter");
    MakeCode    (0X686);
    MakeRptCmt    (0X691,    "if bc = 0, then there is no pitch slide");
    MakeRptCmt    (0X693,    "else, pitch slide !");
    MakeRptCmt    (0X69A,    "hl = current frequency ; bc = frequency to reach");
    MakeRptCmt    (0X69E,    "get frequency difference");
    MakeRptCmt    (0X6A1,    "save first frequency byte ... why ?");
    MakeRptCmt    (0X6A4,    "if bc <= hl, so if frequency value to reach is lower");
    MakeRptCmt    (0X6A8,    "frequency to reach is higher, so get slide up value");
    MakeRptCmt    (0X6AE,    "frequency to reach is lower, so get slide down value");
    MakeCode    (0X6AE);
    MakeRptCmt    (0X6B3,    "get negative value of pitch slide speed in order to slide down");
    MakeRptCmt    (0X6B7,    "apply slide on frequency");
    MakeRptCmt    (0X6BB,    "get new frequency difference");
    MakeRptCmt    (0X6BD,    "xor old h and new h");
    MakeRptCmt    (0X6C4,    "jump if bit 7 of xor result = 1, go put final pitch as current frequency, but how can it happen ?");
    MakeRptCmt    (0X6C8,    "leave octave bits, just keep frequency bits");
    MakeRptCmt    (0X6CB,    "save new frequency");
    MakeRptCmt    (0X6D4,    "if hl frequency (without octave) < $4D4");
    MakeRptCmt    (0X6D6,    "hl > $4D4, so add $596");
    MakeCode    (0X6DC);
    MakeRptCmt    (0X6DF,    "2 * $26A = $4D4");
    MakeRptCmt    (0X6E5,    "if hl frequency (without octave) >= 26A");
    MakeRptCmt    (0X6E7,    "hl < $26A, so sub $596");
    MakeRptCmt    (0X6ED,    "hl between $26A and $4D4, so do nothing");
    MakeCode    (0X6ED);
    MakeRptCmt    (0X6F3,    "set new frequency... but why do they have to add/sub $596 O___o ?!");
    MakeRptCmt    (0X6FD,    "current frequency = final slide pitch");
    MakeCode    (0X6FD);
    MakeRptCmt    (0X704,    "end of slide");
    MakeRptCmt    (0X70E,    "if channel byte 0A = 0 ... then start vibrato ?");
    MakeRptCmt    (0X710,    "decrement channel byte 0A : I think this is a time counter before note vibrato");
    MakeCode    (0X716);
    MakeRptCmt    (0X71D,    "hl = vibrato pointer");
    MakeRptCmt    (0X71E,    "get vibrato relative pointer");
    MakeRptCmt    (0X727,    "point to next vibrato byte");
    MakeRptCmt    (0X72D,    "if byte = 81, point previous byte and do nothing ? O_o");
    MakeRptCmt    (0X730,    "anyway, there's no $81 in the data -_- ...");
    MakeCode    (0X733);
    MakeRptCmt    (0X738,    "if byte = 80, it's the end of vibrato data, so go back to the beginning");
    MakeComm    (0X73F,    "a = vibrato value to apply");
    MakeCode    (0X73F);
    MakeName    (0X73F,    "EndPart");
    MakeRptCmt    (0X747,    "hl = current note's frequency value");
    MakeRptCmt    (0X74E,    "if c is a negative value, b = FF");
    MakeComm    (0X74F,    "after this, up to date frequency is sent to YM");
    MakeComm    (0X750,    "dynamically changed : 2nd frequency register corresponding to current channel");
    MakeByte    (0X751);
    MakeRptCmt    (0X759,    "dynamically changed : 1st frequency register to use corresponding to current channel");
    MakeByte    (0X75A);
    MakeRptCmt    (0X767,    "if currently fading out, make sure the instrument level is updated");
    MakeComm    (0X76D,    "exactly the same general behaviour as YM1_ParseData, with access to YM2 instead");
    MakeCode    (0X76D);
    MakeName    (0X76D,    "YM2_ParseData");
    MakeCode    (x=0X770);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X785,    "point to the right SFX channel data");
    MakeRptCmt    (0X7AA,    "YM register : Key on/off");
    MakeRptCmt    (0X7E1,    "jump if FF xx xx");
    MakeRptCmt    (0X7E3,    "else, end of data for this channel");
    MakeRptCmt    (0X7F3,    "if an SFX was being managed, go back to corresponding music channel");
    MakeRptCmt    (0X7F8,    "YM Register : Stereo / LFO Sensitivity");
    MakeRptCmt    (0X7FE,    "load corresponding music channel stereo setting");
    MakeRptCmt    (0X80A,    "if corresponding music channel in use, load its instrument, and return");
    MakeCode    (0X810);
    MakeCode    (0X814);
    MakeCode    (0X817);
    MakeName    (0X817,    "setInstrument");
    MakeCode    (0X824);
    MakeCode    (0X833);
    MakeCode    (0X83D);
    MakeCode    (0X847);
    MakeCode    (0X851);
    MakeCode    (0X85B);
    MakeCode    (0X865);
    MakeCode    (0X86A);
    MakeRptCmt    (0X872,    "index");
    MakeCode    (x=0X878);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0X880,    "hl = corresponding word");
    MakeRptCmt    (0X8B7,    "YM register : Key on/off");
    MakeCode    (0X8CE);
    MakeCode    (0X8E0);
    MakeCode    (0X908);
    MakeCode    (0X936);
    MakeCode    (0X947);
    MakeCode    (0X957);
    MakeCode    (0X970);
    MakeCode    (0X98D);
    MakeCode    (0X999);
    MakeByte    (0X9AB);
    MakeByte    (0X9B4);
    MakeCode    (0X9CC);
    MakeName    (0X9CC,    "YM1_SetChannelInstrument");
    MakeName    (0X9D2,    "YM1_LoadInstrument");
    MakeRptCmt    (0X9D5,    "a is the total level of the instrument");
    MakeRptCmt    (0X9E7,    "put level to 0");
    MakeRptCmt    (0X9EA,    "load instrument index");
    MakeRptCmt    (0XA00,    "hl now points to the first byte of the instrument to load");
    MakeRptCmt    (0XA02,    "get algorithm byte");
    MakeRptCmt    (0XA07,    "only keep algo bits");
    MakeRptCmt    (0XA09,    "store algo value");
    MakeRptCmt    (0XA0C,    "get back instrument start offset");
    MakeRptCmt    (0XA0D,    "get currently managed channel value");
    MakeRptCmt    (0XA10,    "register value for detune/multiple");
    MakeRptCmt    (0XA12,    "loop 4 times");
    MakeRptCmt    (0XA15,    "YM Register : detune/multiple");
    MakeRptCmt    (0XA22,    "store register value : 40h");
    MakeCode    (x=0XA2A);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0XA2F,    "put corresponding value in c");
    MakeRptCmt    (0XA30,    "get Algo");
    MakeCode    (x=0XA33);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0XA37,    "put corresponding value in d");
    MakeRptCmt    (0XA3C,    "loop 4 times");
    MakeRptCmt    (0XA3F,    "YM Register : Total level");
    MakeRptCmt    (0XA43,    "if rotated bit = 0, then use original instrument level");
    MakeRptCmt    (0XA45,    "else, the operator is a slot, so use channel level");
    MakeRptCmt    (0XA47,    "instrument's operator total level value");
    MakeRptCmt    (0XA4C,    "if result > 7F, then put 7F, since it's the max value");
    MakeRptCmt    (0XA53,    "get instrument's operator level");
    MakeCode    (0XA53);
    MakeRptCmt    (0XA5E,    "loop 20d times, so 5 * 4 operators, so from 50h to A0h");
    MakeRptCmt    (0XA61,    "YM Register : Rate scalling / Attack rate, First decay rate / Amplitude modulation ...");
    MakeRptCmt    (0XA62,    "... Secondary decay rate, Secondary amplitude / Release rate, SSG-EG");
    MakeRptCmt    (0XA70,    "YM Register : Feedback / Algorithm");
    MakeCode    (0XA79);
    MakeName    (0XA79,    "YM2_setChannelInstrument");
    MakeName    (0XA7F,    "YM2_LoadInstrument");
    MakeCode    (0XA90);
    MakeRptCmt    (0XAA2,    "same as in YM1 version of subroutine, load instrument index etc...");
    MakeCode    (x=0XAE2);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (x=0XAEB);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeCode    (0XB0B);
    MakeCode    (x=0XB31);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeName    (0XB31,    "YM2_ParseChannel6Data");
    MakeRptCmt    (0XB3B,    "if we are currently managing an SFX using the 3 extra RAM areas, point to the right area");
    MakeComm    (0XB40,    "check with byte 3 if channel 3 has something to do or not");
    MakeRptCmt    (0XB45,    "check if time counter 02 has reached key release value 06");
    MakeRptCmt    (0XB4D,    "check if \"don't release key\" byte 08 is set");
    MakeRptCmt    (0XB51,    "don't jump if byte 02 = byte 06 and byte 08 = 0");
    MakeRptCmt    (0XB55,    "play nothing !");
    MakeRptCmt    (0XB58,    "check if it's time to parse new data or not yet");
    MakeRptCmt    (0XB5F,    "get data pointer");
    MakeRptCmt    (0XB65,    "get data to parse");
    MakeName    (0XB65,    "parseByte");
    MakeRptCmt    (0XB6A,    "jump if it's not a command");
    MakeRptCmt    (0XB6D,    "else, parse command");
    MakeRptCmt    (0XB70,    "jump if command is not FF");
    MakeRptCmt    (0XB73,    "if command is FF, parse next bytes");
    MakeRptCmt    (0XB7A,    "jump when it's FF xx xx, meaning \"parse from new offset xxxx\"");
    MakeRptCmt    (0XB7C,    "else, you have FF 00 00, so end parsing and mute channel");
    MakeCode    (0XB87);
    MakeName    (0XB87,    "parseAtNewOffset");
    MakeCode    (0XB8A);
    MakeName    (0XB8A,    "setKeyRelease");
    MakeCode    (0XB94);
    MakeName    (0XB94,    "setStereo");
    MakeCode    (0XB9E);
    MakeName    (0XB9E,    "loopCommand");
    MakeCode    (0XBA8);
    MakeName    (0XBA8,    "ifCommandUnidentified");
    MakeRptCmt    (0XBAD,    "parsed byte is not a command");
    MakeCode    (0XBAD);
    MakeRptCmt    (0XBB2,    "if byte is F0 or 70");
    MakeRptCmt    (0XBB5,    "else, it's a new sample index : bits 6-0 + 1");
    MakeRptCmt    (0XBBA,    "if bit 7 = 1, then next byte is sample play length");
    MakeRptCmt    (0XBBE,    "else, load current sample play length");
    MakeRptCmt    (0XBC3,    "get sample play length byte");
    MakeCode    (0XBC3);
    MakeRptCmt    (0XBC5,    "set new sample play length");
    MakeRptCmt    (0XBC8,    "restart counter with sample play length value");
    MakeRptCmt    (0XBCC,    "point to next byte to parse");
    MakeRptCmt    (0XBD2,    "go back to the beginning of subroutine");
    MakeRptCmt    (0XBD5,    "if it's not end of sample play, decrement counter and return");
    MakeCode    (0XBD5);
    MakeRptCmt    (0XBDC,    "return in any way !");
    MakeComm    (0XBDE,    "a = index of currently managed channel");
    MakeCode    (0XBDE);
    MakeName    (0XBDE,    "PSG_ParseToneData");
    MakeRptCmt    (0XBE1,    "start of PSG channel data");
    MakeCode    (x=0XBE1);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0XBEC,    "hl = 20h * a");
    MakeRptCmt    (0XBEE,    "ix now points to concerned channel");
    MakeRptCmt    (0XBF2,    "channel value now in right place to make a PSG command");
    MakeRptCmt    (0XBF3,    "make sure only the two interesting bits are used");
    MakeRptCmt    (0XBF5,    "save channel number stored in that way");
    MakeRptCmt    (0XBF8,    "get byte 3 of channel data");
    MakeRptCmt    (0XBFC,    "return if channel has nothing to do");
    MakeRptCmt    (0XBFD,    "get time counter");
    MakeRptCmt    (0XC01,    "don't jump if it's time to parse next byte");
    MakeRptCmt    (0XC04,    "if counter = 0, parse next byte");
    MakeRptCmt    (0XC07,    "load channel data pointer");
    MakeRptCmt    (0XC0A,    "get pointed data");
    MakeRptCmt    (0XC0F,    "if byte is not a command");
    MakeRptCmt    (0XC12,    "get byte again");
    MakeRptCmt    (0XC15,    "if a != FF check other possible command values");
    MakeRptCmt    (0XC18,    "a = FF");
    MakeRptCmt    (0XC1F,    "FF xx xx, go parse at new offset xxxx");
    MakeRptCmt    (0XC21,    "FF 00 00, end of data, mute channel and return");
    MakeRptCmt    (0XC23,    "byte 3 of channel data = 1");
    MakeRptCmt    (0XC2D,    "concerned channel volume : OFF");
    MakeCode    (0XC30);
    MakeName    (0XC30,    "PSG_Parse_At_New_Offset");
    MakeCode    (0XC33);
    MakeCode    (0XC3D);
    MakeCode    (0XC47);
    MakeCode    (0XC51);
    MakeName    (0XC51,    "Set_Timer");
    MakeRptCmt    (0XC56,    "YM Register : Timer B value");
    MakeCode    (0XC61);
    MakeCode    (0XC6B);
    MakeRptCmt    (0XC75,    "Unidentified_Command");
    MakeCode    (0XC75);
    MakeName    (0XC75,    "unidentifiedCommand");
    MakeRptCmt    (0XC7A,    "byte is not a command");
    MakeCode    (0XC7A);
    MakeRptCmt    (0XC7F,    "jump if byte = F0 or 70");
    MakeRptCmt    (0XC82,    "keep byte without bit 7 : new note");
    MakeRptCmt    (0XC87,    "jump if byte 1E = 0. Byte 1E is set when key has just been released");
    MakeRptCmt    (0XC89,    "key has just been released");
    MakeRptCmt    (0XC8A,    "reset instrument relative pointer");
    MakeRptCmt    (0XC8D,    "clear byte 1E");
    MakeRptCmt    (0XC90,    "reset vibrato counter");
    MakeName    (0XC96,    "Set_New_Note");
    MakeRptCmt    (0XC97,    "reset vibrato relative pointer");
    MakeRptCmt    (0XC9A,    "get back byte without bit 7");
    MakeRptCmt    (0XC9B,    "add note shift value");
    MakeCode    (x=0XCA3);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0XCAB,    "hl = corresponding frequency");
    MakeRptCmt    (0XCB3,    "add frequency shift value");
    MakeRptCmt    (0XCB5,    "keep frequency value to play");
    MakeRptCmt    (0XCBF,    "keep only bit 7");
    MakeRptCmt    (0XCC3,    "if byte = F0 or 70");
    MakeCode    (0XCC3);
    MakeRptCmt    (0XCC6,    "set bit 0");
    MakeRptCmt    (0XCCB,    "get full byte again");
    MakeRptCmt    (0XCCE,    "if bit 7 = 1, set note length");
    MakeCode    (0XCD5);
    MakeRptCmt    (0XCD7,    "set new note length");
    MakeRptCmt    (0XCDA,    "reset time counter");
    MakeRptCmt    (0XCDE,    "save offset of next byte to parse");
    MakeRptCmt    (0XCE7,    "decrement counter");
    MakeCode    (0XCE7);
    MakeRptCmt    (0XCEE,    "jump if vibrato must be applied");
    MakeRptCmt    (0XCF0,    "decrement vibrato counter");
    MakeCode    (0XCF6);
    MakeName    (0XCF6,    "Apply_Vibrato");
    MakeCode    (0XD12);
    MakeCode    (0XD1E);
    MakeRptCmt    (0XD36,    "now vibrato is applied");
    MakeRptCmt    (0XD39,    "THIS PART will change the level depending on the PSG Instrument");
    MakeRptCmt    (0XD3C,    "byte b = 8x or 0x");
    MakeRptCmt    (0XD3F,    "if byte $8x, then it's data end, so just keep applying the same level alteration");
    MakeRptCmt    (0XD41,    "if byte 0x, point to next byte");
    MakeRptCmt    (0XD45,    "keep x only");
    MakeRptCmt    (0XD4E,    "a = level affected by instrument");
    MakeRptCmt    (0XD4F,    "make sure value is at least 0");
    MakeRptCmt    (0XD52,    "put level to apply in b");
    MakeRptCmt    (0XD58,    "jump if it's PSG Tone 1 or 2 Channels");
    MakeRptCmt    (0XD5A,    "if PSG Tone 3 Channel, apply max level");
    MakeCode    (0XD5E);
    MakeRptCmt    (0XD64,    "make sure level is at least 0");
    MakeRptCmt    (0XD67,    "store level to apply in byte 05");
    MakeRptCmt    (0XD71,    "if counter = 0, jump to release key part");
    MakeRptCmt    (0XD75,    "jump if byte 08 bit 7 = 1");
    MakeRptCmt    (0XD7A,    "or if byte 02 != byte 06");
    MakeName    (0XD7C,    "PSG_Release_Key");
    MakeRptCmt    (0XD7E,    "leave if byte 08 != 0");
    MakeRptCmt    (0XD82,    "set byte 1E to \"release key\" before next note");
    MakeRptCmt    (0XD87,    "byte 08 = $03");
    MakeRptCmt    (0XD90,    "increment relative pointer until pointed byte's bit 7 = 1");
    MakeRptCmt    (0XD97,    "now byte 12 points to instrument release data");
    MakeCode    (0XD97);
    MakeRptCmt    (0XDA5,    "jump if currently managing PSG Tone 3 Channel");
    MakeRptCmt    (0XDAD,    "decrement level if currently fading out and fade out timer = 0");
    MakeRptCmt    (0XDB1,    "transmit Frequency data to PSG");
    MakeName    (0XDB1,    "Transmit_Data");
    MakeRptCmt    (0XDC2,    "first byte of tone channel frequency command");
    MakeRptCmt    (0XDD0,    "second byte of tone channel frequency command");
    MakeRptCmt    (0XDD3,    "starting attenuation value");
    MakeRptCmt    (0XDD5,    "get level to apply");
    MakeRptCmt    (0XDD8,    "save it");
    MakeRptCmt    (0XDD9,    "get channel number");
    MakeRptCmt    (0XDDC,    "load saved value");
    MakeRptCmt    (0XDDD,    "load attenuation command bits");
    MakeCode    (0XDE3);
    MakeName    (0XDE3,    "PSG_GetInstrumentPointer");
    MakeRptCmt    (0XDE7,    "bytes 10-11 : pointer");
    MakeRptCmt    (0XDED,    "byte 12 : relative pointer to add to 10-11 pointer");
    MakeComm    (0XDF3,    "load psg instrument x at level y");
    MakeCode    (0XDF3);
    MakeName    (0XDF3,    "PSG_LoadInstrument");
    MakeRptCmt    (0XDF6,    "keep only nibble 2 : instrument level");
    MakeRptCmt    (0XDFC,    "if it's PSG Tone 3 Channel");
    MakeRptCmt    (0XE04,    "don't jump if 0, so load new level");
    MakeComm    (0XE06,    "if it's PSG Tone 3 channel, keep nibble 2 in byte 04");
    MakeComm    (0XE09,    "get back full byte");
    MakeRptCmt    (0XE0E,    "get psg instrument index");
    MakeCode    (x=0XE15);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0XE1C,    "get instrument pointer");
    MakeCode    (0XE23);
    MakeName    (0XE23,    "PSG_ParseNoiseData");
    MakeCode    (x=0XE26);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0XE33,    "don't parse if channel not in use");
    MakeRptCmt    (0XE37,    "check note time counter");
    MakeRptCmt    (0XE38,    "jump if it's not the end of the note");
    MakeRptCmt    (0XE3E,    "if it's the end of the note, get data pointer to parse next byte");
    MakeRptCmt    (0XE46,    "jump if parsed byte is not a command");
    MakeRptCmt    (0XE4C,    "jump if command is not $FF");
    MakeRptCmt    (0XE56,    "jump if command is FF xx xx");
    MakeRptCmt    (0XE5A,    "else, FF 00 00 : stop using this channel");
    MakeCode    (0XE67);
    MakeCode    (0XE6B);
    MakeCode    (0XE75);
    MakeCode    (0XE7F);
    MakeCode    (0XE89);
    MakeName    (0XE89,    "Unidentified_Command");
    MakeCode    (0XE8E);
    MakeRptCmt    (0XE93,    "jump if byte = F0 or 70");
    MakeRptCmt    (0XE96,    "keep byte without bit 7 : new note");
    MakeRptCmt    (0XE9B,    "jump if key has not just been released");
    MakeRptCmt    (0XE9D,    "key has just been released");
    MakeRptCmt    (0XE9E,    "reset instrument relative pointer");
    MakeRptCmt    (0XEA1,    "clear key release indicator");
    MakeRptCmt    (0XEA5,    "just keep bits 2-0");
    MakeRptCmt    (0XEA9,    "transmit feedback and freqency");
    MakeCode    (0XEB3);
    MakeRptCmt    (0XEBB,    "get full byte again");
    MakeRptCmt    (0XEBE,    "if bit 7 is set, next byte is note length to apply");
    MakeCode    (0XEC5);
    MakeRptCmt    (0XEC7,    "set new note length");
    MakeRptCmt    (0XECA,    "reset time counter");
    MakeRptCmt    (0XECE,    "point to next byte to parse");
    MakeRptCmt    (0XED7,    "decrement time counter");
    MakeCode    (0XED7);
    MakeRptCmt    (0XEDA,    "affect level depending on PSG Instrument used");
    MakeRptCmt    (0XEDD,    "byte b = 8x or 0x");
    MakeRptCmt    (0XEE0,    "if byte $8x, then it's data end, so just keep applying the same level alteration");
    MakeRptCmt    (0XEE2,    "if byte 0x, point to next byte");
    MakeRptCmt    (0XEE6,    "keep x only");
    MakeRptCmt    (0XEEF,    "a = level affected by instrument");
    MakeRptCmt    (0XEF0,    "make sure value is at least 0");
    MakeRptCmt    (0XEF4,    "apply music level");
    MakeRptCmt    (0XEFA,    "make sure level is at least 0");
    MakeRptCmt    (0XEFD,    "keep level value");
    MakeRptCmt    (0XF07,    "if counter = 0, jump to release key part");
    MakeRptCmt    (0XF0B,    "jump if byte 08 bit 7 = 1");
    MakeRptCmt    (0XF10,    "or if byte 02 != byte 06");
    MakeName    (0XF12,    "Release_Key");
    MakeRptCmt    (0XF14,    "leave if byte 08 != 0");
    MakeRptCmt    (0XF18,    "set byte 1E to \"release key\" before next note");
    MakeRptCmt    (0XF1D,    "byte 08 = $03");
    MakeRptCmt    (0XF26,    "increment relative pointer until pointed byte's bit 7 = 1");
    MakeRptCmt    (0XF2D,    "now byte 12 points to instrument release data");
    MakeCode    (0XF2D);
    MakeRptCmt    (0XF3C,    "decrement level if currently fading out and fade out timer = 0");
    MakeName    (0XF40,    "Transmit_Attenuation");
    MakeRptCmt    (0XF42,    "get sound level and invert it to get sound attenuation");
    MakeRptCmt    (0XF45,    "add attenuation command bits");
    MakeRptCmt    (0XF47,    "transmit attenuation");
    MakeCode    (0XF4B);
    MakeName    (0XF4B,    "YM_SetSlideOrKeyRelease");
    MakeRptCmt    (0XF4C,    "get parameter");
    MakeRptCmt    (0XF4F,    "if parameter != $FF");
    MakeRptCmt    (0XF51,    "if parameter = $FF, clear channel byte 1F");
    MakeCode    (0XF57);
    MakeRptCmt    (0XF59,    "jump if a < 81");
    MakeRptCmt    (0XF5D,    "else, put bits 6-0 in channel ram byte 1F");
    MakeComm    (0XF62,    "point to next byte");
    MakeCode    (0XF62);
    MakeName    (0XF62,    "SetRelease");
    MakeRptCmt    (0XF63,    "get next byte");
    MakeRptCmt    (0XF67,    "bit 7 goes to channel data byte 8");
    MakeRptCmt    (0XF6D,    "bits 6-0 go to channel data byte 6");
    MakeRptCmt    (0XF70,    "point to next byte");
    MakeComm    (0XF72,    "affects channel ram bytes 09, 0B and 0C");
    MakeCode    (0XF72);
    MakeName    (0XF72,    "LoadVibrato");
    MakeRptCmt    (0XF73,    "get next parameter : $2C");
    MakeRptCmt    (0XF78,    "keep nibble 1 only, multiplied by 2 -> $04");
    MakeCode    (x=0XF7A);
    OpOff        (x,    1,    0X0);
    OpOff        (x,    129,    0X0);
    MakeRptCmt    (0XF80,    "point to the corresponding pointer");
    MakeRptCmt    (0XF88,    "channel ram bytes B-C = 4th pointer");
    MakeRptCmt    (0XF8D,    "get nibble 2 only, multiplied by 2 -> $18");
    MakeRptCmt    (0XF91,    "$17");
    MakeCode    (0XF97);
    MakeName    (0XF97,    "YM1_SetStereo");
    MakeRptCmt    (0XF9B,    "if bit 0 of pointed value is set to 1 : if FMS value = 1 or 3 ?");
    MakeRptCmt    (0XF9D,    "else");
    MakeRptCmt    (0XFA6,    "set proper register according to currently processed channel");
    MakeRptCmt    (0XFA7,    "point to next pointed rom byte");
    MakeCode    (0XFAB);
    MakeName    (0XFAB,    "YM2_SetStereo");
    MakeComm    (0XFBE,    "that byte is never really used !");
    MakeCode    (0XFBE);
    MakeName    (0XFBE,    "UselessSubroutine");
    MakeCode    (0XFC7);
    MakeName    (0XFC7,    "LoadNoteShift");
    MakeComm    (0XFD1,    "byte 1C = 0x or Fx depending on byte 7 : value of note shift");
    MakeRptCmt    (0XFD8,    "just keep bytes 6-5-4 multiplied by 2");
    MakeRptCmt    (0XFDA,    "value of frequeny shift");
    MakeCode    (0XFDF);
    MakeName    (0XFDF,    "ParseLoopCommand");
    MakeRptCmt    (0XFE0,    "get first byte parameter");
    MakeRptCmt    (0XFE2,    "point to next data byte");
    MakeRptCmt    (0XFE6,    "keep bits 7-6-5. It must be a subcommand");
    MakeRptCmt    (0XFEA,    "if bits 7-6-5 = 0, put next data byte offset into channel bytes 13-14");
    MakeRptCmt    (0XFED,    "this must be a loop start !");
    MakeComm    (0XFF1,    "if bits 7-6-5 = 1 ... beginning of a loop ?");
    MakeCode    (0XFF1);
    MakeRptCmt    (0XFF5,    "put next data byte offset in 15-16");
    MakeRptCmt    (0XFF8,    "is it also a loop start ? like there could be a loop in another loop ? Two loops managed independently ?");
    MakeRptCmt    (0XFFC,    "clear 1A-1B");
    MakeComm    (0X1003,    "if bits 7-6-5 = 2");
    MakeCode    (0X1003);
    MakeRptCmt    (0X100B,    "if (1A) != 0, then it's not the first loop");
    MakeRptCmt    (0X100D,    "if (1A) = 0, then put 1 instead. It means it's the first loop.");
    MakeRptCmt    (0X1013,    "a = $F0");
    MakeCode    (0X1013);
    MakeRptCmt    (0X1014,    "b = $F0");
    MakeRptCmt    (0X1016,    "a = $D8");
    MakeRptCmt    (0X1017,    "c = $D8");
    MakeRptCmt    (0X1018,    "de points to a next F8 command");
    MakeRptCmt    (0X1019,    "a = $F0");
    MakeRptCmt    (0X101C,    "if first data byte = FF, finish");
    MakeRptCmt    (0X1020,    "if first data byte = F8 (then you have something like F8, byte with bits 7-6-5 = 2, and F8 again ?)");
    MakeRptCmt    (0X1024,    "if bit 7 of first data byte = 1, start process again");
    MakeRptCmt    (0X1026,    "else, start process again but point one byte backward first ... wow ... o_O");
    MakeCode    (0X1029);
    MakeRptCmt    (0X102C,    "if a = 60, finish, else start process again ... so it expects loop command 3 to get out of here !");
    MakeComm    (0X1031,    "if bits 7-6-5 = 3");
    MakeCode    (0X1031);
    MakeRptCmt    (0X103B,    "if (1B) = 0, then put 1 instead");
    MakeRptCmt    (0X1041,    "same idea as command 2");
    MakeCode    (0X1041);
    MakeCode    (0X1057);
    MakeRptCmt    (0X105A,    "expects command 4 to get out of here");
    MakeComm    (0X105E,    "if bits 7-6-5 = 4 end of command 3");
    MakeCode    (0X105E);
    MakeRptCmt    (0X1062,    "if command 4, just return ! it's just here to stop command 3");
    MakeComm    (0X1063,    "if bits 7-6-5 = 5 ... go back to the beginning of a loop ?");
    MakeCode    (0X1063);
    MakeRptCmt    (0X1069,    "if bit 0 = 1 (value A1)");
    MakeRptCmt    (0X106B,    "else (value A0), point back to offset saved in 15-16");
    MakeRptCmt    (0X1072,    "point back to offset saved in 13-14");
    MakeCode    (0X1072);
    MakeComm    (0X1079,    "if bits 7-6-5 = 6 : initiate a loop repeated x times, x being bits 4-0");
    MakeCode    (0X1079);
    MakeRptCmt    (0X107B,    "else, bits 7-6-5 = 7");
    MakeRptCmt    (0X107D,    "put next data byte offset in 17-18");
    MakeRptCmt    (0X1084,    "just keep parameter");
    MakeRptCmt    (0X1086,    "increment it");
    MakeRptCmt    (0X1087,    "and store it in 19");
    MakeRptCmt    (0X108B,    "decrement loop counter");
    MakeCode    (0X108B);
    MakeRptCmt    (0X108E,    "return if counter reached 0");
    MakeRptCmt    (0X108F,    "go back to the beginning of the loop");
    MakeComm    (0X1096,    "set a fade out period length of $12 YM timer overflows");
    MakeCode    (0X1096);
    MakeName    (0X1096,    "Fade_Out");
    MakeByte    (0X10A7);
    MakeRptCmt    (0X10A8,    "these words are not pointers, they are the two frequency bytes to send to YM for a given note");
    MakeByte    (0X10A8);
    MakeName    (0X10A8,    "t_YM_FREQUENCIES");
    MakeWord    (0X10A9);
    MakeWord    (0X10AB);
    MakeWord    (0X10AD);
    MakeWord    (0X10AF);
    MakeWord    (0X10B1);
    MakeWord    (0X10B3);
    MakeWord    (0X10B5);
    MakeWord    (0X10B7);
    MakeWord    (0X10B9);
    MakeWord    (0X10BB);
    MakeWord    (0X10BD);
    MakeWord    (0X10BF);
    MakeWord    (0X10C1);
    MakeWord    (0X10C3);
    MakeWord    (0X10C5);
    MakeWord    (0X10C7);
    MakeWord    (0X10C9);
    MakeWord    (0X10CB);
    MakeWord    (0X10CD);
    MakeWord    (0X10CF);
    MakeWord    (0X10D1);
    MakeWord    (0X10D3);
    MakeWord    (0X10D5);
    MakeWord    (0X10D7);
    MakeWord    (0X10D9);
    MakeWord    (0X10DB);
    MakeWord    (0X10DD);
    MakeWord    (0X10DF);
    MakeWord    (0X10E1);
    MakeWord    (0X10E3);
    MakeWord    (0X10E5);
    MakeWord    (0X10E7);
    MakeWord    (0X10E9);
    MakeWord    (0X10EB);
    MakeWord    (0X10ED);
    MakeWord    (0X10EF);
    MakeWord    (0X10F1);
    MakeWord    (0X10F3);
    MakeWord    (0X10F5);
    MakeWord    (0X10F7);
    MakeWord    (0X10F9);
    MakeWord    (0X10FB);
    MakeWord    (0X10FD);
    MakeWord    (0X10FF);
    MakeWord    (0X1101);
    MakeWord    (0X1103);
    MakeWord    (0X1105);
    MakeWord    (0X1107);
    MakeWord    (0X1109);
    MakeWord    (0X110B);
    MakeWord    (0X110D);
    MakeWord    (0X110F);
    MakeWord    (0X1111);
    MakeWord    (0X1113);
    MakeWord    (0X1115);
    MakeWord    (0X1117);
    MakeWord    (0X1119);
    MakeWord    (0X111B);
    MakeWord    (0X111D);
    MakeWord    (0X111F);
    MakeWord    (0X1121);
    MakeWord    (0X1123);
    MakeWord    (0X1125);
    MakeWord    (0X1127);
    MakeWord    (0X1129);
    MakeWord    (0X112B);
    MakeWord    (0X112D);
    MakeWord    (0X112F);
    MakeWord    (0X1131);
    MakeWord    (0X1133);
    MakeWord    (0X1135);
    MakeWord    (0X1137);
    MakeWord    (0X1139);
    MakeWord    (0X113B);
    MakeWord    (0X113D);
    MakeWord    (0X113F);
    MakeWord    (0X1141);
    MakeWord    (0X1143);
    MakeWord    (0X1145);
    MakeWord    (0X1147);
    MakeWord    (0X1149);
    MakeWord    (0X114B);
    MakeWord    (0X114D);
    MakeRptCmt    (0X114F,    "PSG Frequency table, same idea as YM Frequency table but for PSG Tone Channels");
    MakeWord    (0X114F);
    MakeName    (0X114F,    "t_PSG_FREQUENCIES");
    MakeWord    (0X1151);
    MakeWord    (0X1153);
    MakeWord    (0X1155);
    MakeWord    (0X1157);
    MakeWord    (0X1159);
    MakeWord    (0X115B);
    MakeWord    (0X115D);
    MakeWord    (0X115F);
    MakeWord    (0X1161);
    MakeWord    (0X1163);
    MakeWord    (0X1165);
    MakeWord    (0X1167);
    MakeWord    (0X1169);
    MakeWord    (0X116B);
    MakeWord    (0X116D);
    MakeWord    (0X116F);
    MakeWord    (0X1171);
    MakeWord    (0X1173);
    MakeWord    (0X1175);
    MakeWord    (0X1177);
    MakeWord    (0X1179);
    MakeWord    (0X117B);
    MakeWord    (0X117D);
    MakeWord    (0X117F);
    MakeWord    (0X1181);
    MakeWord    (0X1183);
    MakeWord    (0X1185);
    MakeWord    (0X1187);
    MakeWord    (0X1189);
    MakeWord    (0X118B);
    MakeWord    (0X118D);
    MakeWord    (0X118F);
    MakeWord    (0X1191);
    MakeWord    (0X1193);
    MakeWord    (0X1195);
    MakeWord    (0X1197);
    MakeWord    (0X1199);
    MakeWord    (0X119B);
    MakeWord    (0X119D);
    MakeWord    (0X119F);
    MakeWord    (0X11A1);
    MakeWord    (0X11A3);
    MakeWord    (0X11A5);
    MakeWord    (0X11A7);
    MakeWord    (0X11A9);
    MakeWord    (0X11AB);
    MakeWord    (0X11AD);
    MakeWord    (0X11AF);
    MakeWord    (0X11B1);
    MakeWord    (0X11B3);
    MakeWord    (0X11B5);
    MakeWord    (0X11B7);
    MakeWord    (0X11B9);
    MakeWord    (0X11BB);
    MakeWord    (0X11BD);
    MakeWord    (0X11BF);
    MakeWord    (0X11C1);
    MakeWord    (0X11C3);
    MakeWord    (0X11C5);
    MakeWord    (0X11C7);
    MakeWord    (0X11C9);
    MakeWord    (0X11CB);
    MakeWord    (0X11CD);
    MakeByte    (0X11CF);
    MakeName    (0X11CF,    "t_YM_LEVELS");
    MakeRptCmt    (0X11D0,    "this table contains the actual YM level values corresponding");
    MakeByte    (0X11D0);
    MakeRptCmt    (0X11D1,    "to the 16 possible values of the sound engine");
    MakeByte    (0X11D1);
    MakeRptCmt    (0X11D2,    "First value being almost YM's min level,");
    MakeByte    (0X11D2);
    MakeRptCmt    (0X11D3,    "and last value being almost YM's max level");
    MakeByte    (0X11D3);
    MakeByte    (0X11D4);
    MakeByte    (0X11D5);
    MakeByte    (0X11D6);
    MakeByte    (0X11D7);
    MakeByte    (0X11D8);
    MakeByte    (0X11D9);
    MakeByte    (0X11DA);
    MakeByte    (0X11DB);
    MakeByte    (0X11DC);
    MakeByte    (0X11DD);
    MakeByte    (0X11DE);
    MakeByte    (0X11DF);
    MakeName    (0X11DF,    "t_SLOTS_PER_ALGO");
    MakeByte    (0X11E0);
    MakeRptCmt    (0X11E1,    "table used to know which operators have to be affected by the channel's level");
    MakeByte    (0X11E1);
    MakeRptCmt    (0X11E2,    "bit 0 related to operator 1, bit 1 to operator 2 etc ...");
    MakeByte    (0X11E2);
    MakeRptCmt    (0X11E3,    "if 0, then operator is not a slot, so use the instrument's original level value");
    MakeByte    (0X11E3);
    MakeRptCmt    (0X11E4,    "if 1, then operator is a slot, so use channel level value");
    MakeByte    (0X11E4);
    MakeByte    (0X11E5);
    MakeByte    (0X11E6);
    MakeRptCmt    (0X11E7,    "The pitch effects mostly are vibratos, but also effects that make pitch go up or down indefinitely");
    MakeWord    (x=0X11E7);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeName    (0X11E7,    "pt_PITCH_EFFECTS");
    MakeWord    (x=0X11E9);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11EB);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11ED);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11EF);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11F1);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11F3);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11F5);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11F7);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11F9);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11FB);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11FD);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X11FF);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1201);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1203);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1205);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeRptCmt    (0X1207,    "vibrato 0 : nothing ! used to cancel a previous vibrato ?");
    MakeByte    (0X1207);
    MakeByte    (0X1208);
    MakeRptCmt    (0X1209,    "vibrato 1");
    MakeByte    (0X1209);
    MakeRptCmt    (0X120A,    "at each sound frame, the next data byte is added to the current frequency to slightly affect it");
    MakeByte    (0X120A);
    MakeByte    (0X120B);
    MakeByte    (0X120C);
    MakeRptCmt    (0X120D,    "value $80 means that it's end of data, so go back to the first byte of the pitch effect");
    MakeByte    (0X120D);
    MakeByte    (0X120E);
    MakeByte    (0X120F);
    MakeByte    (0X1210);
    MakeByte    (0X1211);
    MakeByte    (0X1212);
    MakeByte    (0X1213);
    MakeByte    (0X1214);
    MakeByte    (0X1215);
    MakeByte    (0X1216);
    MakeByte    (0X1217);
    MakeByte    (0X1218);
    MakeByte    (0X1219);
    MakeByte    (0X121A);
    MakeByte    (0X121B);
    MakeByte    (0X121C);
    MakeByte    (0X121D);
    MakeByte    (0X121E);
    MakeByte    (0X121F);
    MakeByte    (0X1220);
    MakeByte    (0X1221);
    MakeByte    (0X1222);
    MakeByte    (0X1223);
    MakeByte    (0X1224);
    MakeByte    (0X1225);
    MakeByte    (0X1226);
    MakeByte    (0X1227);
    MakeByte    (0X1228);
    MakeByte    (0X1229);
    MakeByte    (0X122A);
    MakeByte    (0X122B);
    MakeByte    (0X122C);
    MakeByte    (0X122D);
    MakeByte    (0X122E);
    MakeByte    (0X122F);
    MakeByte    (0X1230);
    MakeByte    (0X1231);
    MakeByte    (0X1232);
    MakeByte    (0X1233);
    MakeByte    (0X1234);
    MakeByte    (0X1235);
    MakeByte    (0X1236);
    MakeByte    (0X1237);
    MakeByte    (0X1238);
    MakeByte    (0X1239);
    MakeRptCmt    (0X123A,    "from here, the pitch effects are not vibratos, they just make the pitch constantly go up or down");
    MakeByte    (0X123A);
    MakeByte    (0X123B);
    MakeByte    (0X123C);
    MakeByte    (0X123D);
    MakeByte    (0X123E);
    MakeByte    (0X123F);
    MakeByte    (0X1240);
    MakeByte    (0X1241);
    MakeByte    (0X1242);
    MakeByte    (0X1243);
    MakeByte    (0X1244);
    MakeByte    (0X1245);
    MakeByte    (0X1246);
    MakeByte    (0X1247);
    MakeByte    (0X1248);
    MakeByte    (0X1249);
    MakeByte    (0X124A);
    MakeByte    (0X124B);
    MakeByte    (0X124C);
    MakeByte    (0X124D);
    MakeRptCmt    (0X124E,    "The PSG instruments only affect the channel level");
    MakeWord    (x=0X124E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeName    (0X124E,    "pt_PSG_INSTRUMENTS");
    MakeRptCmt    (0X1250,    "more details about the data layout in psg-intruments.txt");
    MakeWord    (x=0X1250);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1252);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1254);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1256);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1258);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X125A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X125C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X125E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1260);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1262);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1264);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1266);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1268);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X126A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X126C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeRptCmt    (0X126E,    "start of data : instrument 0");
    MakeByte    (0X126E);
    MakeByte    (0X126F);
    MakeRptCmt    (0X1270,    "instrument 1");
    MakeByte    (0X1270);
    MakeByte    (0X1271);
    MakeByte    (0X1272);
    MakeByte    (0X1273);
    MakeByte    (0X1274);
    MakeByte    (0X1275);
    MakeByte    (0X1276);
    MakeByte    (0X1277);
    MakeByte    (0X1278);
    MakeByte    (0X1279);
    MakeByte    (0X127A);
    MakeByte    (0X127B);
    MakeByte    (0X127C);
    MakeByte    (0X127D);
    MakeByte    (0X127E);
    MakeByte    (0X127F);
    MakeByte    (0X1280);
    MakeByte    (0X1281);
    MakeRptCmt    (0X1282,    "instrument 2");
    MakeByte    (0X1282);
    MakeByte    (0X1283);
    MakeByte    (0X1284);
    MakeByte    (0X1285);
    MakeByte    (0X1286);
    MakeByte    (0X1287);
    MakeByte    (0X1288);
    MakeByte    (0X1289);
    MakeByte    (0X128A);
    MakeByte    (0X128B);
    MakeByte    (0X128C);
    MakeByte    (0X128D);
    MakeByte    (0X128E);
    MakeByte    (0X128F);
    MakeRptCmt    (0X1290,    "instrument 3");
    MakeByte    (0X1290);
    MakeByte    (0X1291);
    MakeByte    (0X1292);
    MakeByte    (0X1293);
    MakeByte    (0X1294);
    MakeByte    (0X1295);
    MakeByte    (0X1296);
    MakeByte    (0X1297);
    MakeByte    (0X1298);
    MakeByte    (0X1299);
    MakeByte    (0X129A);
    MakeByte    (0X129B);
    MakeByte    (0X129C);
    MakeByte    (0X129D);
    MakeByte    (0X129E);
    MakeByte    (0X129F);
    MakeByte    (0X12A0);
    MakeByte    (0X12A1);
    MakeByte    (0X12A2);
    MakeByte    (0X12A3);
    MakeByte    (0X12A4);
    MakeByte    (0X12A5);
    MakeByte    (0X12A6);
    MakeRptCmt    (0X12A7,    "instrument 4");
    MakeByte    (0X12A7);
    MakeByte    (0X12A8);
    MakeByte    (0X12A9);
    MakeByte    (0X12AA);
    MakeByte    (0X12AB);
    MakeByte    (0X12AC);
    MakeByte    (0X12AD);
    MakeRptCmt    (0X12AE,    "instrument 5");
    MakeByte    (0X12AE);
    MakeByte    (0X12AF);
    MakeByte    (0X12B0);
    MakeByte    (0X12B1);
    MakeByte    (0X12B2);
    MakeByte    (0X12B3);
    MakeByte    (0X12B4);
    MakeByte    (0X12B5);
    MakeByte    (0X12B6);
    MakeByte    (0X12B7);
    MakeByte    (0X12B8);
    MakeRptCmt    (0X12B9,    "instrument 6");
    MakeByte    (0X12B9);
    MakeByte    (0X12BA);
    MakeByte    (0X12BB);
    MakeByte    (0X12BC);
    MakeByte    (0X12BD);
    MakeByte    (0X12BE);
    MakeByte    (0X12BF);
    MakeByte    (0X12C0);
    MakeRptCmt    (0X12C1,    "instrument 7");
    MakeByte    (0X12C1);
    MakeByte    (0X12C2);
    MakeByte    (0X12C3);
    MakeByte    (0X12C4);
    MakeByte    (0X12C5);
    MakeRptCmt    (0X12C6,    "instrument 8");
    MakeByte    (0X12C6);
    MakeByte    (0X12C7);
    MakeByte    (0X12C8);
    MakeByte    (0X12C9);
    MakeByte    (0X12CA);
    MakeByte    (0X12CB);
    MakeByte    (0X12CC);
    MakeByte    (0X12CD);
    MakeByte    (0X12CE);
    MakeByte    (0X12CF);
    MakeByte    (0X12D0);
    MakeByte    (0X12D1);
    MakeByte    (0X12D2);
    MakeByte    (0X12D3);
    MakeRptCmt    (0X12D4,    "instrument 9");
    MakeByte    (0X12D4);
    MakeByte    (0X12D5);
    MakeByte    (0X12D6);
    MakeByte    (0X12D7);
    MakeByte    (0X12D8);
    MakeByte    (0X12D9);
    MakeRptCmt    (0X12DA,    "instrument A");
    MakeByte    (0X12DA);
    MakeByte    (0X12DB);
    MakeByte    (0X12DC);
    MakeByte    (0X12DD);
    MakeByte    (0X12DE);
    MakeByte    (0X12DF);
    MakeByte    (0X12E0);
    MakeByte    (0X12E1);
    MakeByte    (0X12E2);
    MakeByte    (0X12E3);
    MakeByte    (0X12E4);
    MakeRptCmt    (0X12E5,    "instrument B");
    MakeByte    (0X12E5);
    MakeByte    (0X12E6);
    MakeRptCmt    (0X12E7,    "instrument C");
    MakeByte    (0X12E7);
    MakeByte    (0X12E8);
    MakeByte    (0X12E9);
    MakeByte    (0X12EA);
    MakeRptCmt    (0X12EB,    "instrument D");
    MakeByte    (0X12EB);
    MakeByte    (0X12EC);
    MakeByte    (0X12ED);
    MakeByte    (0X12EE);
    MakeByte    (0X12EF);
    MakeByte    (0X12F0);
    MakeRptCmt    (0X12F1,    "instrument E");
    MakeByte    (0X12F1);
    MakeByte    (0X12F2);
    MakeByte    (0X12F3);
    MakeByte    (0X12F4);
    MakeByte    (0X12F5);
    MakeByte    (0X12F6);
    MakeByte    (0X12F7);
    MakeByte    (0X12F8);
    MakeRptCmt    (0X12F9,    "instrument F");
    MakeByte    (0X12F9);
    MakeRptCmt    (0X12FA,    "end of data");
    MakeByte    (0X12FA);
    MakeByte    (0X12FB);
    MakeByte    (0X12FC);
    MakeByte    (0X12FD);
    MakeByte    (0X12FE);
    MakeByte    (0X12FF);
    MakeByte    (0X1300);
    MakeName    (0X1300,    "YM_CHANNEL_DATA_1");
    MakeRptCmt    (0X1301,    "from this point starts the several RAM areas dedicated to temporary channel data, like note timers, data pointers ...");
    MakeByte    (0X1301);
    MakeRptCmt    (0X1302,    "more details in channel-ram-data.txt");
    MakeByte    (0X1302);
    MakeRptCmt    (0X1303,    "also pointed once from 68k, to know if music/sfx is currently being played, I guess");
    MakeByte    (0X1303);
    MakeName    (0X1303,    "YM_CHANNEL_1_NOT_IN_USE");
    MakeByte    (0X1304);
    MakeByte    (0X1305);
    MakeByte    (0X1306);
    MakeByte    (0X1307);
    MakeByte    (0X1308);
    MakeByte    (0X1309);
    MakeByte    (0X130A);
    MakeByte    (0X130B);
    MakeByte    (0X130C);
    MakeByte    (0X130D);
    MakeByte    (0X130E);
    MakeByte    (0X130F);
    MakeByte    (0X1310);
    MakeByte    (0X1311);
    MakeByte    (0X1312);
    MakeByte    (0X1313);
    MakeByte    (0X1314);
    MakeByte    (0X1315);
    MakeByte    (0X1316);
    MakeByte    (0X1317);
    MakeByte    (0X1318);
    MakeByte    (0X1319);
    MakeByte    (0X131A);
    MakeByte    (0X131B);
    MakeByte    (0X131C);
    MakeByte    (0X131D);
    MakeByte    (0X131E);
    MakeByte    (0X131F);
    MakeByte    (0X1320);
    MakeName    (0X1320,    "YM_CHANNEL_DATA_2");
    MakeByte    (0X1321);
    MakeByte    (0X1322);
    MakeByte    (0X1323);
    MakeByte    (0X1324);
    MakeByte    (0X1325);
    MakeByte    (0X1326);
    MakeByte    (0X1327);
    MakeByte    (0X1328);
    MakeByte    (0X1329);
    MakeByte    (0X132A);
    MakeByte    (0X132B);
    MakeByte    (0X132C);
    MakeByte    (0X132D);
    MakeByte    (0X132E);
    MakeByte    (0X132F);
    MakeByte    (0X1330);
    MakeByte    (0X1331);
    MakeByte    (0X1332);
    MakeByte    (0X1333);
    MakeByte    (0X1334);
    MakeByte    (0X1335);
    MakeByte    (0X1336);
    MakeByte    (0X1337);
    MakeByte    (0X1338);
    MakeByte    (0X1339);
    MakeByte    (0X133A);
    MakeByte    (0X133B);
    MakeByte    (0X133C);
    MakeByte    (0X133D);
    MakeByte    (0X133E);
    MakeByte    (0X133F);
    MakeByte    (0X1340);
    MakeName    (0X1340,    "YM_CHANNEL_DATA_3");
    MakeByte    (0X1341);
    MakeByte    (0X1342);
    MakeByte    (0X1343);
    MakeByte    (0X1344);
    MakeByte    (0X1345);
    MakeByte    (0X1346);
    MakeByte    (0X1347);
    MakeByte    (0X1348);
    MakeByte    (0X1349);
    MakeByte    (0X134A);
    MakeByte    (0X134B);
    MakeByte    (0X134C);
    MakeByte    (0X134D);
    MakeByte    (0X134E);
    MakeByte    (0X134F);
    MakeByte    (0X1350);
    MakeByte    (0X1351);
    MakeByte    (0X1352);
    MakeByte    (0X1353);
    MakeByte    (0X1354);
    MakeByte    (0X1355);
    MakeByte    (0X1356);
    MakeByte    (0X1357);
    MakeByte    (0X1358);
    MakeByte    (0X1359);
    MakeByte    (0X135A);
    MakeByte    (0X135B);
    MakeByte    (0X135C);
    MakeByte    (0X135D);
    MakeByte    (0X135E);
    MakeByte    (0X135F);
    MakeByte    (0X1360);
    MakeName    (0X1360,    "YM_CHANNEL_DATA_4");
    MakeByte    (0X1361);
    MakeByte    (0X1362);
    MakeByte    (0X1363);
    MakeByte    (0X1364);
    MakeByte    (0X1365);
    MakeByte    (0X1366);
    MakeByte    (0X1367);
    MakeByte    (0X1368);
    MakeByte    (0X1369);
    MakeByte    (0X136A);
    MakeByte    (0X136B);
    MakeByte    (0X136C);
    MakeByte    (0X136D);
    MakeByte    (0X136E);
    MakeByte    (0X136F);
    MakeByte    (0X1370);
    MakeByte    (0X1371);
    MakeByte    (0X1372);
    MakeByte    (0X1373);
    MakeByte    (0X1374);
    MakeByte    (0X1375);
    MakeByte    (0X1376);
    MakeByte    (0X1377);
    MakeByte    (0X1378);
    MakeByte    (0X1379);
    MakeByte    (0X137A);
    MakeByte    (0X137B);
    MakeByte    (0X137C);
    MakeByte    (0X137D);
    MakeByte    (0X137E);
    MakeName    (0X137E,    "YM_CHANNEL_4_STEREO");
    MakeByte    (0X137F);
    MakeByte    (0X1380);
    MakeName    (0X1380,    "YM_CHANNEL_DATA_5");
    MakeByte    (0X1381);
    MakeByte    (0X1382);
    MakeByte    (0X1383);
    MakeByte    (0X1384);
    MakeByte    (0X1385);
    MakeByte    (0X1386);
    MakeByte    (0X1387);
    MakeByte    (0X1388);
    MakeByte    (0X1389);
    MakeByte    (0X138A);
    MakeByte    (0X138B);
    MakeByte    (0X138C);
    MakeByte    (0X138D);
    MakeByte    (0X138E);
    MakeByte    (0X138F);
    MakeByte    (0X1390);
    MakeByte    (0X1391);
    MakeByte    (0X1392);
    MakeByte    (0X1393);
    MakeByte    (0X1394);
    MakeByte    (0X1395);
    MakeByte    (0X1396);
    MakeByte    (0X1397);
    MakeByte    (0X1398);
    MakeByte    (0X1399);
    MakeByte    (0X139A);
    MakeByte    (0X139B);
    MakeByte    (0X139C);
    MakeByte    (0X139D);
    MakeByte    (0X139E);
    MakeName    (0X139E,    "YM_CHANNEL_5_STEREO");
    MakeByte    (0X139F);
    MakeByte    (0X13A0);
    MakeName    (0X13A0,    "YM_CHANNEL_DATA_6");
    MakeByte    (0X13A1);
    MakeByte    (0X13A2);
    MakeByte    (0X13A3);
    MakeByte    (0X13A4);
    MakeByte    (0X13A5);
    MakeByte    (0X13A6);
    MakeByte    (0X13A7);
    MakeByte    (0X13A8);
    MakeByte    (0X13A9);
    MakeByte    (0X13AA);
    MakeByte    (0X13AB);
    MakeByte    (0X13AC);
    MakeByte    (0X13AD);
    MakeByte    (0X13AE);
    MakeByte    (0X13AF);
    MakeByte    (0X13B0);
    MakeByte    (0X13B1);
    MakeByte    (0X13B2);
    MakeByte    (0X13B3);
    MakeByte    (0X13B4);
    MakeByte    (0X13B5);
    MakeByte    (0X13B6);
    MakeByte    (0X13B7);
    MakeByte    (0X13B8);
    MakeByte    (0X13B9);
    MakeByte    (0X13BA);
    MakeByte    (0X13BB);
    MakeByte    (0X13BC);
    MakeByte    (0X13BD);
    MakeByte    (0X13BE);
    MakeByte    (0X13BF);
    MakeByte    (0X13C0);
    MakeName    (0X13C0,    "PSG_CHANNEL_DATA_TONE_1");
    MakeByte    (0X13C1);
    MakeByte    (0X13C2);
    MakeByte    (0X13C3);
    MakeByte    (0X13C4);
    MakeByte    (0X13C5);
    MakeByte    (0X13C6);
    MakeByte    (0X13C7);
    MakeByte    (0X13C8);
    MakeByte    (0X13C9);
    MakeByte    (0X13CA);
    MakeByte    (0X13CB);
    MakeByte    (0X13CC);
    MakeByte    (0X13CD);
    MakeByte    (0X13CE);
    MakeByte    (0X13CF);
    MakeByte    (0X13D0);
    MakeByte    (0X13D1);
    MakeByte    (0X13D2);
    MakeByte    (0X13D3);
    MakeByte    (0X13D4);
    MakeByte    (0X13D5);
    MakeByte    (0X13D6);
    MakeByte    (0X13D7);
    MakeByte    (0X13D8);
    MakeByte    (0X13D9);
    MakeByte    (0X13DA);
    MakeByte    (0X13DB);
    MakeByte    (0X13DC);
    MakeByte    (0X13DD);
    MakeByte    (0X13DE);
    MakeByte    (0X13DF);
    MakeByte    (0X13E0);
    MakeByte    (0X13E1);
    MakeByte    (0X13E2);
    MakeByte    (0X13E3);
    MakeByte    (0X13E4);
    MakeByte    (0X13E5);
    MakeByte    (0X13E6);
    MakeByte    (0X13E7);
    MakeByte    (0X13E8);
    MakeByte    (0X13E9);
    MakeByte    (0X13EA);
    MakeByte    (0X13EB);
    MakeByte    (0X13EC);
    MakeByte    (0X13ED);
    MakeByte    (0X13EE);
    MakeByte    (0X13EF);
    MakeByte    (0X13F0);
    MakeByte    (0X13F1);
    MakeByte    (0X13F2);
    MakeByte    (0X13F3);
    MakeByte    (0X13F4);
    MakeByte    (0X13F5);
    MakeByte    (0X13F6);
    MakeByte    (0X13F7);
    MakeByte    (0X13F8);
    MakeByte    (0X13F9);
    MakeByte    (0X13FA);
    MakeByte    (0X13FB);
    MakeByte    (0X13FC);
    MakeByte    (0X13FD);
    MakeByte    (0X13FE);
    MakeByte    (0X13FF);
    MakeByte    (0X1400);
    MakeByte    (0X1401);
    MakeByte    (0X1402);
    MakeByte    (0X1403);
    MakeByte    (0X1404);
    MakeByte    (0X1405);
    MakeByte    (0X1406);
    MakeByte    (0X1407);
    MakeByte    (0X1408);
    MakeByte    (0X1409);
    MakeByte    (0X140A);
    MakeByte    (0X140B);
    MakeByte    (0X140C);
    MakeByte    (0X140D);
    MakeByte    (0X140E);
    MakeByte    (0X140F);
    MakeByte    (0X1410);
    MakeByte    (0X1411);
    MakeByte    (0X1412);
    MakeByte    (0X1413);
    MakeByte    (0X1414);
    MakeByte    (0X1415);
    MakeByte    (0X1416);
    MakeByte    (0X1417);
    MakeByte    (0X1418);
    MakeByte    (0X1419);
    MakeByte    (0X141A);
    MakeByte    (0X141B);
    MakeByte    (0X141C);
    MakeByte    (0X141D);
    MakeByte    (0X141E);
    MakeByte    (0X141F);
    MakeByte    (0X1420);
    MakeName    (0X1420,    "PSG_CHANNEL_DATA_NOISE");
    MakeByte    (0X1421);
    MakeByte    (0X1422);
    MakeByte    (0X1423);
    MakeByte    (0X1424);
    MakeByte    (0X1425);
    MakeByte    (0X1426);
    MakeByte    (0X1427);
    MakeByte    (0X1428);
    MakeByte    (0X1429);
    MakeByte    (0X142A);
    MakeByte    (0X142B);
    MakeByte    (0X142C);
    MakeByte    (0X142D);
    MakeByte    (0X142E);
    MakeByte    (0X142F);
    MakeByte    (0X1430);
    MakeByte    (0X1431);
    MakeByte    (0X1432);
    MakeByte    (0X1433);
    MakeByte    (0X1434);
    MakeByte    (0X1435);
    MakeByte    (0X1436);
    MakeByte    (0X1437);
    MakeByte    (0X1438);
    MakeByte    (0X1439);
    MakeByte    (0X143A);
    MakeByte    (0X143B);
    MakeByte    (0X143C);
    MakeByte    (0X143D);
    MakeByte    (0X143E);
    MakeByte    (0X143F);
    MakeByte    (0X1440);
    MakeName    (0X1440,    "SFX_TYPE_2_CHANNEL_DATA_1");
    MakeByte    (0X1441);
    MakeByte    (0X1442);
    MakeByte    (0X1443);
    MakeName    (0X1443,    "SFX_TYPE_2_CHANNEL_1_NOT_IN_USE");
    MakeByte    (0X1444);
    MakeByte    (0X1445);
    MakeByte    (0X1446);
    MakeByte    (0X1447);
    MakeByte    (0X1448);
    MakeByte    (0X1449);
    MakeByte    (0X144A);
    MakeByte    (0X144B);
    MakeByte    (0X144C);
    MakeByte    (0X144D);
    MakeByte    (0X144E);
    MakeByte    (0X144F);
    MakeByte    (0X1450);
    MakeByte    (0X1451);
    MakeByte    (0X1452);
    MakeByte    (0X1453);
    MakeByte    (0X1454);
    MakeByte    (0X1455);
    MakeByte    (0X1456);
    MakeByte    (0X1457);
    MakeByte    (0X1458);
    MakeByte    (0X1459);
    MakeByte    (0X145A);
    MakeByte    (0X145B);
    MakeByte    (0X145C);
    MakeByte    (0X145D);
    MakeByte    (0X145E);
    MakeByte    (0X145F);
    MakeByte    (0X1460);
    MakeName    (0X1460,    "SFX_TYPE_2_CHANNEL_DATA_2");
    MakeByte    (0X1461);
    MakeByte    (0X1462);
    MakeByte    (0X1463);
    MakeName    (0X1463,    "SFX_TYPE_2_CHANNEL_2_NOT_IN_USE");
    MakeByte    (0X1464);
    MakeByte    (0X1465);
    MakeByte    (0X1466);
    MakeByte    (0X1467);
    MakeByte    (0X1468);
    MakeByte    (0X1469);
    MakeByte    (0X146A);
    MakeByte    (0X146B);
    MakeByte    (0X146C);
    MakeByte    (0X146D);
    MakeByte    (0X146E);
    MakeByte    (0X146F);
    MakeByte    (0X1470);
    MakeByte    (0X1471);
    MakeByte    (0X1472);
    MakeByte    (0X1473);
    MakeByte    (0X1474);
    MakeByte    (0X1475);
    MakeByte    (0X1476);
    MakeByte    (0X1477);
    MakeByte    (0X1478);
    MakeByte    (0X1479);
    MakeByte    (0X147A);
    MakeByte    (0X147B);
    MakeByte    (0X147C);
    MakeByte    (0X147D);
    MakeByte    (0X147E);
    MakeByte    (0X147F);
    MakeByte    (0X1480);
    MakeByte    (0X1481);
    MakeByte    (0X1482);
    MakeByte    (0X1483);
    MakeByte    (0X1484);
    MakeByte    (0X1485);
    MakeByte    (0X1486);
    MakeByte    (0X1487);
    MakeByte    (0X1488);
    MakeByte    (0X1489);
    MakeByte    (0X148A);
    MakeByte    (0X148B);
    MakeByte    (0X148C);
    MakeByte    (0X148D);
    MakeByte    (0X148E);
    MakeByte    (0X148F);
    MakeByte    (0X1490);
    MakeByte    (0X1491);
    MakeByte    (0X1492);
    MakeByte    (0X1493);
    MakeByte    (0X1494);
    MakeByte    (0X1495);
    MakeByte    (0X1496);
    MakeByte    (0X1497);
    MakeByte    (0X1498);
    MakeByte    (0X1499);
    MakeByte    (0X149A);
    MakeByte    (0X149B);
    MakeByte    (0X149C);
    MakeByte    (0X149D);
    MakeByte    (0X149E);
    MakeByte    (0X149F);
    MakeRptCmt    (0X14A0,    "incremented each time new stereo byte has bit 0 set to 1, but actually has no effect on sound. Useless !");
    MakeByte    (0X14A0);
    MakeName    (0X14A0,    "USELESS_BYTE");
    MakeRptCmt    (0X14A1,    "current PSG channel to process, stored in the right bits ready to be sent to PSG");
    MakeByte    (0X14A1);
    MakeName    (0X14A1,    "CURRENT_PSG_CHANNEL");
    MakeRptCmt    (0X14A2,    "indicates the channel to process, from a relative point of view : YM1, YM2, PSG or SFX channels");
    MakeByte    (0X14A2);
    MakeName    (0X14A2,    "CURRENT_CHANNEL");
    MakeRptCmt    (0X14A3,    "set to 01 when a fade out operation is being executed");
    MakeByte    (0X14A3);
    MakeName    (0X14A3,    "CURRENTLY_FADING_OUT");
    MakeByte    (0X14A4);
    MakeRptCmt    (0X14A5,    "set to $01 when managing YM4,5,6 channels, to call part 2 of YM");
    MakeByte    (0X14A5);
    MakeName    (0X14A5,    "CALL_YM2_INSTEAD_OF_YM1");
    MakeRptCmt    (0X14A6,    "indicates if an SFX type 2 is being processed, because these ones use extra channel ram areas, to keep current music data for when SFX is finished");
    MakeByte    (0X14A6);
    MakeName    (0X14A6,    "CURRENTLY_MANAGING_SFX_TYPE_2");
    MakeRptCmt    (0X14A7,    "number of YM Timer overflows to handle before incrementing the fade out counter");
    MakeByte    (0X14A7);
    MakeName    (0X14A7,    "FADE_OUT_LENGTH");
    MakeRptCmt    (0X14A8,    "Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while loading music");
    MakeByte    (0X14A8);
    MakeName    (0X14A8,    "FADE_OUT_TIMER");
    MakeRptCmt    (0X14A9,    "Counts how many times the fade out timer reached 0. Fade out stops at value $0C.");
    MakeByte    (0X14A9);
    MakeName    (0X14A9,    "FADE_OUT_COUNTER");
    MakeWord    (0X14AA);
    MakeByte    (0X14AC);
    MakeName    (0X14AC,    "BANK_TO_LOAD");
    MakeByte    (0X14AD);
    MakeName    (0X14AD,    "MUSIC_BANK_TO_LOAD");
    MakeRptCmt    (0X14AE,    "3-Channel SFX are not loaded if this byte is less than byte 0x1FFE. Which can't happen at all ! So don't care about it.");
    MakeByte    (0X14AE);
    MakeName    (0X14AE,    "SFX_USELESS_BYTE_2");
    MakeByte    (0X14AF);
    MakeRptCmt    (0X14B0,    "temp space to store frequency values when YM data is parsed");
    MakeWord    (0X14B0);
    MakeName    (0X14B0,    "TEMP_FREQUENCY");
    MakeRptCmt    (0X14B2,    "temp place to keep a register value when an YM instrument is loaded");
    MakeByte    (0X14B2);
    MakeName    (0X14B2,    "TEMP_REGISTER");
    MakeRptCmt    (0X14B3,    "incremented at each YM Timer overflow. When it corresponds to fade in parameter, increment YM instruments level until max level");
    MakeByte    (0X14B3);
    MakeName    (0X14B3,    "FADE_IN_TIMER");
    MakeComm    (0X14B4,    "Data layout of the 8-byte entries :\nbyte 0 : PCM frame period parameter\nbyte 1 : always 0 (ignored when data is parsed)\nbyte 2 : bank to load\nbyte 3 : always 0 (ignored when data is parsed)\nbytes 5-4 : sample length\nbytes 7-6 : pointer to sound PCM Data once bank is loaded\n\nWith this table, the same sound sample can be played at different rates,\nresulting with quick high-pitched, or slow low-pitched sounds, \nwhich is quite appropriate for drums or attack hits or explosions !");
    MakeByte    (0X14B4);
    MakeArray    (0X14B4,    0X40);
    MakeName    (0X14B4,    "t_SAMPLE_LOAD_DATA");
    MakeRptCmt    (0X14F4,    "SFX pointer table\n\nmore details about them in sfx.txt");
    MakeWord    (x=0X14F4);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeName    (0X14F4,    "pt_SFX");
    MakeByte    (0X14F6);
    MakeByte    (0X14F7);
    MakeByte    (0X14F8);
    MakeByte    (0X14F9);
    MakeByte    (0X14FA);
    MakeByte    (0X14FB);
    MakeByte    (0X14FC);
    MakeByte    (0X14FD);
    MakeByte    (0X14FE);
    MakeByte    (0X14FF);
    MakeByte    (0X1500);
    MakeByte    (0X1501);
    MakeByte    (0X1502);
    MakeByte    (0X1503);
    MakeByte    (0X1504);
    MakeByte    (0X1505);
    MakeByte    (0X1506);
    MakeByte    (0X1507);
    MakeByte    (0X1508);
    MakeByte    (0X1509);
    MakeByte    (0X150A);
    MakeByte    (0X150B);
    MakeByte    (0X150C);
    MakeByte    (0X150D);
    MakeByte    (0X150E);
    MakeByte    (0X150F);
    MakeByte    (0X1510);
    MakeByte    (0X1511);
    MakeByte    (0X1512);
    MakeByte    (0X1513);
    MakeByte    (0X1514);
    MakeByte    (0X1515);
    MakeByte    (0X1516);
    MakeByte    (0X1517);
    MakeByte    (0X1518);
    MakeByte    (0X1519);
    MakeByte    (0X151A);
    MakeByte    (0X151B);
    MakeByte    (0X151C);
    MakeByte    (0X151D);
    MakeByte    (0X151E);
    MakeByte    (0X151F);
    MakeByte    (0X1520);
    MakeByte    (0X1521);
    MakeByte    (0X1522);
    MakeByte    (0X1523);
    MakeByte    (0X1524);
    MakeByte    (0X1525);
    MakeByte    (0X1526);
    MakeByte    (0X1527);
    MakeByte    (0X1528);
    MakeByte    (0X1529);
    MakeByte    (0X152A);
    MakeByte    (0X152B);
    MakeByte    (0X152C);
    MakeByte    (0X152D);
    MakeByte    (0X152E);
    MakeByte    (0X152F);
    MakeByte    (0X1530);
    MakeByte    (0X1531);
    MakeByte    (0X1532);
    MakeByte    (0X1533);
    MakeByte    (0X1534);
    MakeByte    (0X1535);
    MakeByte    (0X1536);
    MakeByte    (0X1537);
    MakeByte    (0X1538);
    MakeByte    (0X1539);
    MakeByte    (0X153A);
    MakeByte    (0X153B);
    MakeByte    (0X153C);
    MakeByte    (0X153D);
    MakeByte    (0X153E);
    MakeByte    (0X153F);
    MakeByte    (0X1540);
    MakeByte    (0X1541);
    MakeByte    (0X1542);
    MakeByte    (0X1543);
    MakeByte    (0X1544);
    MakeByte    (0X1545);
    MakeByte    (0X1546);
    MakeByte    (0X1547);
    MakeByte    (0X1548);
    MakeByte    (0X1549);
    MakeByte    (0X154A);
    MakeByte    (0X154B);
    MakeByte    (0X154C);
    MakeByte    (0X154D);
    MakeByte    (0X154E);
    MakeByte    (0X154F);
    MakeRptCmt    (0X1550,    "sound 1 data");
    MakeByte    (0X1550);
    MakeName    (0X1550,    "sfx_01");
    MakeWord    (x=0X1551);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1553);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1555);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1557);
    MakeArray    (0X1557,    0X16);
    MakeByte    (0X156D);
    MakeByte    (0X156E);
    MakeByte    (0X156F);
    MakeRptCmt    (0X1570,    "sound 2");
    MakeByte    (0X1570);
    MakeName    (0X1570,    "sfx_02");
    MakeWord    (x=0X1571);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1573);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1575);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1577);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1579);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X157B);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X157D);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X157F);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1581);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1583);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1585);
    MakeArray    (0X1585,    0X10);
    MakeByte    (0X1595);
    MakeByte    (0X1596);
    MakeByte    (0X1597);
    MakeRptCmt    (0X1598,    "sound 3");
    MakeByte    (0X1598);
    MakeName    (0X1598,    "sfx_03");
    MakeWord    (x=0X1599);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X159B);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X159D);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X159F);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15A1);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15A3);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15A5);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15A7);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15A9);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15AB);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X15AD);
    MakeArray    (0X15AD,    0X1C);
    MakeByte    (0X15C9);
    MakeByte    (0X15CA);
    MakeByte    (0X15CB);
    MakeRptCmt    (0X15CC,    "sound 4");
    MakeByte    (0X15CC);
    MakeName    (0X15CC,    "sfx_04");
    MakeWord    (x=0X15CD);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15CF);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15D1);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X15D3);
    MakeArray    (0X15D3,    0X18);
    MakeByte    (0X15EB);
    MakeByte    (0X15EC);
    MakeByte    (0X15ED);
    MakeRptCmt    (0X15EE,    "sound 5");
    MakeByte    (0X15EE);
    MakeName    (0X15EE,    "sfx_05");
    MakeWord    (x=0X15EF);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15F1);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15F3);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15F5);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15F7);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15F9);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15FB);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15FD);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X15FF);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1601);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeRptCmt    (0X1603,    "sound 6");
    MakeByte    (0X1603);
    MakeName    (0X1603,    "sfx_06");
    MakeWord    (x=0X1604);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1606);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1608);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X160A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X160C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X160E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1610);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1612);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1614);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1616);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeRptCmt    (0X1618,    "sound 7");
    MakeByte    (0X1618);
    MakeName    (0X1618,    "sfx_07");
    MakeWord    (x=0X1619);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X161B);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X161D);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X161F);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1621);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1623);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1625);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1627);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1629);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X162B);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeRptCmt    (0X162D,    "sound 8");
    MakeByte    (0X162D);
    MakeName    (0X162D,    "sfx_08");
    MakeWord    (x=0X162E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1630);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1632);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1634);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1636);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1638);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X163A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X163C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X163E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1640);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeRptCmt    (0X1642,    "sound 9");
    MakeByte    (0X1642);
    MakeName    (0X1642,    "sfx_09");
    MakeWord    (x=0X1643);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1645);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1647);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1649);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X164B);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X164D);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X164F);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1651);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1653);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1655);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeRptCmt    (0X1657,    "sound A");
    MakeByte    (0X1657);
    MakeName    (0X1657,    "sfx_0A");
    MakeWord    (x=0X1658);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X165A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X165C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X165E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1660);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1662);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1664);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1666);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1668);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X166A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeRptCmt    (0X166C,    "sound B");
    MakeByte    (0X166C);
    MakeName    (0X166C,    "sfx_0B");
    MakeWord    (x=0X166D);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X166F);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1671);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1673);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1675);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1677);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1679);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X167B);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X167D);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X167F);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeRptCmt    (0X1681,    "sound C");
    MakeByte    (0X1681);
    MakeName    (0X1681,    "sfx_0C");
    MakeWord    (x=0X1682);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1684);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1686);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1688);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X168A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X168C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X168E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1690);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1692);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1694);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1696);
    MakeArray    (0X1696,    0X8);
    MakeByte    (0X169E);
    MakeByte    (0X169F);
    MakeByte    (0X16A0);
    MakeByte    (0X16A1);
    MakeByte    (0X16A2);
    MakeByte    (0X16A3);
    MakeByte    (0X16A4);
    MakeByte    (0X16A5);
    MakeByte    (0X16A6);
    MakeByte    (0X16A7);
    MakeByte    (0X16A8);
    MakeByte    (0X16A9);
    MakeByte    (0X16AA);
    MakeByte    (0X16AB);
    MakeByte    (0X16AC);
    MakeByte    (0X16AD);
    MakeByte    (0X16AE);
    MakeByte    (0X16AF);
    MakeByte    (0X16B0);
    MakeByte    (0X16B1);
    MakeByte    (0X16B2);
    MakeByte    (0X16B3);
    MakeByte    (0X16B4);
    MakeByte    (0X16B5);
    MakeByte    (0X16B6);
    MakeByte    (0X16B7);
    MakeByte    (0X16B8);
    MakeByte    (0X16B9);
    MakeByte    (0X16BA);
    MakeByte    (0X16BB);
    MakeByte    (0X16BC);
    MakeByte    (0X16BD);
    MakeByte    (0X16BE);
    MakeByte    (0X16BF);
    MakeByte    (0X16C0);
    MakeByte    (0X16C1);
    MakeByte    (0X16C2);
    MakeByte    (0X16C3);
    MakeByte    (0X16C4);
    MakeByte    (0X16C5);
    MakeByte    (0X16C6);
    MakeByte    (0X16C7);
    MakeByte    (0X16C8);
    MakeByte    (0X16C9);
    MakeByte    (0X16CA);
    MakeByte    (0X16CB);
    MakeByte    (0X16CC);
    MakeByte    (0X16CD);
    MakeByte    (0X16CE);
    MakeByte    (0X16CF);
    MakeByte    (0X16D0);
    MakeByte    (0X16D1);
    MakeByte    (0X16D2);
    MakeByte    (0X16D3);
    MakeByte    (0X16D4);
    MakeByte    (0X16D5);
    MakeByte    (0X16D6);
    MakeByte    (0X16D7);
    MakeByte    (0X16D8);
    MakeByte    (0X16D9);
    MakeByte    (0X16DA);
    MakeByte    (0X16DB);
    MakeByte    (0X16DC);
    MakeByte    (0X16DD);
    MakeByte    (0X16DE);
    MakeByte    (0X16DF);
    MakeByte    (0X16E0);
    MakeByte    (0X16E1);
    MakeByte    (0X16E2);
    MakeByte    (0X16E3);
    MakeByte    (0X16E4);
    MakeByte    (0X16E5);
    MakeByte    (0X16E6);
    MakeByte    (0X16E7);
    MakeByte    (0X16E8);
    MakeByte    (0X16E9);
    MakeByte    (0X16EA);
    MakeByte    (0X16EB);
    MakeByte    (0X16EC);
    MakeByte    (0X16ED);
    MakeRptCmt    (0X16EE,    "sound D");
    MakeByte    (0X16EE);
    MakeName    (0X16EE,    "sfx_0D");
    MakeWord    (x=0X16EF);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X16F1);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X16F3);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X16F5);
    MakeByte    (0X16F6);
    MakeByte    (0X16F7);
    MakeByte    (0X16F8);
    MakeByte    (0X16F9);
    MakeByte    (0X16FA);
    MakeByte    (0X16FB);
    MakeByte    (0X16FC);
    MakeByte    (0X16FD);
    MakeByte    (0X16FE);
    MakeByte    (0X16FF);
    MakeByte    (0X1700);
    MakeByte    (0X1701);
    MakeByte    (0X1702);
    MakeByte    (0X1703);
    MakeByte    (0X1704);
    MakeByte    (0X1705);
    MakeByte    (0X1706);
    MakeByte    (0X1707);
    MakeByte    (0X1708);
    MakeByte    (0X1709);
    MakeByte    (0X170A);
    MakeByte    (0X170B);
    MakeByte    (0X170C);
    MakeByte    (0X170D);
    MakeByte    (0X170E);
    MakeByte    (0X170F);
    MakeByte    (0X1710);
    MakeByte    (0X1711);
    MakeByte    (0X1712);
    MakeByte    (0X1713);
    MakeByte    (0X1714);
    MakeByte    (0X1715);
    MakeByte    (0X1716);
    MakeByte    (0X1717);
    MakeByte    (0X1718);
    MakeRptCmt    (0X1719,    "sound E");
    MakeByte    (0X1719);
    MakeName    (0X1719,    "sfx_0E");
    MakeWord    (x=0X171A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X171C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X171E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1720);
    MakeArray    (0X1720,    0X2);
    MakeByte    (0X1722);
    MakeByte    (0X1723);
    MakeByte    (0X1724);
    MakeRptCmt    (0X1725,    "sound 12");
    MakeByte    (0X1725);
    MakeName    (0X1725,    "sfx_12");
    MakeWord    (x=0X1726);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1728);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X172A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X172C);
    MakeArray    (0X172C,    0X2);
    MakeByte    (0X172E);
    MakeByte    (0X172F);
    MakeByte    (0X1730);
    MakeRptCmt    (0X1731,    "sound 13");
    MakeByte    (0X1731);
    MakeName    (0X1731,    "sfx_13");
    MakeWord    (x=0X1732);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1734);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1736);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1738);
    MakeArray    (0X1738,    0X2);
    MakeByte    (0X173A);
    MakeByte    (0X173B);
    MakeByte    (0X173C);
    MakeRptCmt    (0X173D,    "sound 14");
    MakeByte    (0X173D);
    MakeName    (0X173D,    "sfx_14");
    MakeWord    (x=0X173E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1740);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1742);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1744);
    MakeArray    (0X1744,    0X2);
    MakeByte    (0X1746);
    MakeByte    (0X1747);
    MakeByte    (0X1748);
    MakeRptCmt    (0X1749,    "sound 11");
    MakeByte    (0X1749);
    MakeName    (0X1749,    "sfx_11");
    MakeWord    (x=0X174A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X174C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X174E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1750);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1752);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1754);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1756);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1758);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X175A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X175C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X175E);
    MakeArray    (0X175E,    0X20);
    MakeByte    (0X177E);
    MakeByte    (0X177F);
    MakeByte    (0X1780);
    MakeRptCmt    (0X1781,    "sound 15");
    MakeByte    (0X1781);
    MakeName    (0X1781,    "sfx_15");
    MakeWord    (x=0X1782);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1784);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1786);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1788);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X178A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X178C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X178E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1790);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1792);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1794);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1796);
    MakeByte    (0X1797);
    MakeByte    (0X1798);
    MakeByte    (0X1799);
    MakeByte    (0X179A);
    MakeByte    (0X179B);
    MakeByte    (0X179C);
    MakeByte    (0X179D);
    MakeByte    (0X179E);
    MakeByte    (0X179F);
    MakeByte    (0X17A0);
    MakeRptCmt    (0X17A1,    "sound 16");
    MakeByte    (0X17A1);
    MakeName    (0X17A1,    "sfx_16");
    MakeWord    (x=0X17A2);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X17A4);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X17A6);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X17A8);
    MakeByte    (0X17A9);
    MakeByte    (0X17AA);
    MakeByte    (0X17AB);
    MakeByte    (0X17AC);
    MakeByte    (0X17AD);
    MakeByte    (0X17AE);
    MakeByte    (0X17AF);
    MakeByte    (0X17B0);
    MakeByte    (0X17B1);
    MakeByte    (0X17B2);
    MakeByte    (0X17B3);
    MakeByte    (0X17B4);
    MakeWord    (0X17B5);
    MakeByte    (0X17B7);
    MakeByte    (0X17B8);
    MakeByte    (0X17B9);
    MakeByte    (0X17BA);
    MakeByte    (0X17BB);
    MakeByte    (0X17BC);
    MakeByte    (0X17BD);
    MakeByte    (0X17BE);
    MakeByte    (0X17BF);
    MakeByte    (0X17C0);
    MakeByte    (0X17C1);
    MakeByte    (0X17C2);
    MakeByte    (0X17C3);
    MakeByte    (0X17C4);
    MakeRptCmt    (0X17C5,    "sound 17");
    MakeByte    (0X17C5);
    MakeName    (0X17C5,    "sfx_17");
    MakeWord    (x=0X17C6);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X17C8);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X17CA);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X17CC);
    MakeByte    (0X17CD);
    MakeByte    (0X17CE);
    MakeByte    (0X17CF);
    MakeByte    (0X17D0);
    MakeByte    (0X17D1);
    MakeByte    (0X17D2);
    MakeByte    (0X17D3);
    MakeByte    (0X17D4);
    MakeByte    (0X17D5);
    MakeByte    (0X17D6);
    MakeByte    (0X17D7);
    MakeByte    (0X17D8);
    MakeByte    (0X17D9);
    MakeByte    (0X17DA);
    MakeByte    (0X17DB);
    MakeByte    (0X17DC);
    MakeByte    (0X17DD);
    MakeByte    (0X17DE);
    MakeByte    (0X17DF);
    MakeByte    (0X17E0);
    MakeByte    (0X17E1);
    MakeByte    (0X17E2);
    MakeByte    (0X17E3);
    MakeByte    (0X17E4);
    MakeByte    (0X17E5);
    MakeByte    (0X17E6);
    MakeByte    (0X17E7);
    MakeByte    (0X17E8);
    MakeByte    (0X17E9);
    MakeByte    (0X17EA);
    MakeByte    (0X17EB);
    MakeByte    (0X17EC);
    MakeByte    (0X17ED);
    MakeByte    (0X17EE);
    MakeByte    (0X17EF);
    MakeByte    (0X17F0);
    MakeByte    (0X17F1);
    MakeByte    (0X17F2);
    MakeByte    (0X17F3);
    MakeByte    (0X17F4);
    MakeByte    (0X17F5);
    MakeByte    (0X17F6);
    MakeByte    (0X17F7);
    MakeByte    (0X17F8);
    MakeByte    (0X17F9);
    MakeByte    (0X17FA);
    MakeByte    (0X17FB);
    MakeByte    (0X17FC);
    MakeByte    (0X17FD);
    MakeByte    (0X17FE);
    MakeRptCmt    (0X17FF,    "sound 18");
    MakeByte    (0X17FF);
    MakeName    (0X17FF,    "sfx_18");
    MakeWord    (x=0X1800);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1802);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1804);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1806);
    MakeByte    (0X1807);
    MakeByte    (0X1808);
    MakeByte    (0X1809);
    MakeByte    (0X180A);
    MakeByte    (0X180B);
    MakeByte    (0X180C);
    MakeByte    (0X180D);
    MakeByte    (0X180E);
    MakeByte    (0X180F);
    MakeByte    (0X1810);
    MakeByte    (0X1811);
    MakeByte    (0X1812);
    MakeByte    (0X1813);
    MakeByte    (0X1814);
    MakeByte    (0X1815);
    MakeArray    (0X1815,    0XC);
    MakeByte    (0X1821);
    MakeByte    (0X1822);
    MakeByte    (0X1823);
    MakeRptCmt    (0X1824,    "sound 1A");
    MakeByte    (0X1824);
    MakeName    (0X1824,    "sfx_1A");
    MakeWord    (x=0X1825);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1827);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1829);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X182B);
    MakeArray    (0X182B,    0X27);
    MakeByte    (0X1852);
    MakeByte    (0X1853);
    MakeByte    (0X1854);
    MakeRptCmt    (0X1855,    "sound 1B");
    MakeByte    (0X1855);
    MakeName    (0X1855,    "sfx_1B");
    MakeWord    (x=0X1856);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1858);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X185A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X185C);
    MakeByte    (0X185D);
    MakeByte    (0X185E);
    MakeByte    (0X185F);
    MakeByte    (0X1860);
    MakeByte    (0X1861);
    MakeByte    (0X1862);
    MakeByte    (0X1863);
    MakeByte    (0X1864);
    MakeByte    (0X1865);
    MakeByte    (0X1866);
    MakeByte    (0X1867);
    MakeByte    (0X1868);
    MakeByte    (0X1869);
    MakeByte    (0X186A);
    MakeByte    (0X186B);
    MakeByte    (0X186C);
    MakeByte    (0X186D);
    MakeByte    (0X186E);
    MakeByte    (0X186F);
    MakeByte    (0X1870);
    MakeByte    (0X1871);
    MakeByte    (0X1872);
    MakeByte    (0X1873);
    MakeByte    (0X1874);
    MakeByte    (0X1875);
    MakeByte    (0X1876);
    MakeByte    (0X1877);
    MakeByte    (0X1878);
    MakeByte    (0X1879);
    MakeByte    (0X187A);
    MakeByte    (0X187B);
    MakeByte    (0X187C);
    MakeByte    (0X187D);
    MakeByte    (0X187E);
    MakeByte    (0X187F);
    MakeByte    (0X1880);
    MakeRptCmt    (0X1881,    "sound 1C");
    MakeByte    (0X1881);
    MakeName    (0X1881,    "sfx_1C");
    MakeWord    (x=0X1882);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1884);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1886);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1888);
    MakeByte    (0X1889);
    MakeByte    (0X188A);
    MakeByte    (0X188B);
    MakeByte    (0X188C);
    MakeByte    (0X188D);
    MakeByte    (0X188E);
    MakeByte    (0X188F);
    MakeByte    (0X1890);
    MakeByte    (0X1891);
    MakeByte    (0X1892);
    MakeByte    (0X1893);
    MakeByte    (0X1894);
    MakeByte    (0X1895);
    MakeByte    (0X1896);
    MakeByte    (0X1897);
    MakeByte    (0X1898);
    MakeByte    (0X1899);
    MakeByte    (0X189A);
    MakeByte    (0X189B);
    MakeByte    (0X189C);
    MakeByte    (0X189D);
    MakeByte    (0X189E);
    MakeByte    (0X189F);
    MakeByte    (0X18A0);
    MakeByte    (0X18A1);
    MakeByte    (0X18A2);
    MakeByte    (0X18A3);
    MakeByte    (0X18A4);
    MakeRptCmt    (0X18A5,    "sound 1D");
    MakeByte    (0X18A5);
    MakeName    (0X18A5,    "sfx_1D");
    MakeWord    (x=0X18A6);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X18A8);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X18AA);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X18AC);
    MakeByte    (0X18AD);
    MakeByte    (0X18AE);
    MakeByte    (0X18AF);
    MakeByte    (0X18B0);
    MakeByte    (0X18B1);
    MakeByte    (0X18B2);
    MakeByte    (0X18B3);
    MakeByte    (0X18B4);
    MakeByte    (0X18B5);
    MakeByte    (0X18B6);
    MakeByte    (0X18B7);
    MakeByte    (0X18B8);
    MakeByte    (0X18B9);
    MakeByte    (0X18BA);
    MakeByte    (0X18BB);
    MakeByte    (0X18BC);
    MakeByte    (0X18BD);
    MakeByte    (0X18BE);
    MakeRptCmt    (0X18BF,    "sound 1E");
    MakeByte    (0X18BF);
    MakeName    (0X18BF,    "sfx_1E");
    MakeWord    (x=0X18C0);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X18C2);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X18C4);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X18C6);
    MakeByte    (0X18C7);
    MakeByte    (0X18C8);
    MakeByte    (0X18C9);
    MakeByte    (0X18CA);
    MakeByte    (0X18CB);
    MakeByte    (0X18CC);
    MakeByte    (0X18CD);
    MakeByte    (0X18CE);
    MakeByte    (0X18CF);
    MakeByte    (0X18D0);
    MakeByte    (0X18D1);
    MakeByte    (0X18D2);
    MakeByte    (0X18D3);
    MakeByte    (0X18D4);
    MakeByte    (0X18D5);
    MakeByte    (0X18D6);
    MakeByte    (0X18D7);
    MakeByte    (0X18D8);
    MakeRptCmt    (0X18D9,    "sound 1F");
    MakeByte    (0X18D9);
    MakeName    (0X18D9,    "sfx_1F");
    MakeWord    (x=0X18DA);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X18DC);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X18DE);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X18E0);
    MakeByte    (0X18E1);
    MakeByte    (0X18E2);
    MakeByte    (0X18E3);
    MakeByte    (0X18E4);
    MakeByte    (0X18E5);
    MakeByte    (0X18E6);
    MakeByte    (0X18E7);
    MakeByte    (0X18E8);
    MakeByte    (0X18E9);
    MakeByte    (0X18EA);
    MakeByte    (0X18EB);
    MakeByte    (0X18EC);
    MakeByte    (0X18ED);
    MakeByte    (0X18EE);
    MakeByte    (0X18EF);
    MakeByte    (0X18F0);
    MakeByte    (0X18F1);
    MakeByte    (0X18F2);
    MakeByte    (0X18F3);
    MakeByte    (0X18F4);
    MakeByte    (0X18F5);
    MakeByte    (0X18F6);
    MakeByte    (0X18F7);
    MakeByte    (0X18F8);
    MakeByte    (0X18F9);
    MakeByte    (0X18FA);
    MakeByte    (0X18FB);
    MakeByte    (0X18FC);
    MakeByte    (0X18FD);
    MakeByte    (0X18FE);
    MakeByte    (0X18FF);
    MakeByte    (0X1900);
    MakeByte    (0X1901);
    MakeByte    (0X1902);
    MakeByte    (0X1903);
    MakeByte    (0X1904);
    MakeRptCmt    (0X1905,    "sound 20");
    MakeByte    (0X1905);
    MakeName    (0X1905,    "sfx_20");
    MakeWord    (x=0X1906);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

    MakeWord    (x=0X1908);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X190A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X190C);
    MakeByte    (0X190D);
    MakeByte    (0X190E);
    MakeByte    (0X190F);
    MakeByte    (0X1910);
    MakeByte    (0X1911);
    MakeByte    (0X1912);
    MakeByte    (0X1913);
    MakeByte    (0X1914);
    MakeByte    (0X1915);
    MakeByte    (0X1916);
    MakeByte    (0X1917);
    MakeByte    (0X1918);
    MakeByte    (0X1919);
    MakeByte    (0X191A);
    MakeByte    (0X191B);
    MakeByte    (0X191C);
    MakeByte    (0X191D);
    MakeByte    (0X191E);
    MakeByte    (0X191F);
    MakeByte    (0X1920);
    MakeByte    (0X1921);
    MakeByte    (0X1922);
    MakeByte    (0X1923);
    MakeByte    (0X1924);
    MakeRptCmt    (0X1925,    "sound 21");
    MakeByte    (0X1925);
    MakeName    (0X1925,    "sfx_21");
    MakeWord    (x=0X1926);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1928);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X192A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X192C);
    MakeByte    (0X192D);
    MakeByte    (0X192E);
    MakeByte    (0X192F);
    MakeByte    (0X1930);
    MakeByte    (0X1931);
    MakeByte    (0X1932);
    MakeByte    (0X1933);
    MakeByte    (0X1934);
    MakeByte    (0X1935);
    MakeByte    (0X1936);
    MakeByte    (0X1937);
    MakeByte    (0X1938);
    MakeByte    (0X1939);
    MakeByte    (0X193A);
    MakeByte    (0X193B);
    MakeByte    (0X193C);
    MakeByte    (0X193D);
    MakeByte    (0X193E);
    MakeRptCmt    (0X193F,    "sound 22");
    MakeByte    (0X193F);
    MakeName    (0X193F,    "sfx_22");
    MakeWord    (x=0X1940);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1942);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1944);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1946);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1948);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X194A);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X194C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X194E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1950);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1952);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1954);
    MakeArray    (0X1954,    0X11);
    MakeByte    (0X1965);
    MakeByte    (0X1966);
    MakeByte    (0X1967);
    MakeRptCmt    (0X1968,    "sound 23");
    MakeByte    (0X1968);
    MakeName    (0X1968,    "sfx_23");
    MakeWord    (x=0X1969);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X196B);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X196D);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X196F);
    MakeByte    (0X1970);
    MakeByte    (0X1971);
    MakeByte    (0X1972);
    MakeByte    (0X1973);
    MakeByte    (0X1974);
    MakeByte    (0X1975);
    MakeByte    (0X1976);
    MakeByte    (0X1977);
    MakeByte    (0X1978);
    MakeByte    (0X1979);
    MakeByte    (0X197A);
    MakeByte    (0X197B);
    MakeByte    (0X197C);
    MakeByte    (0X197D);
    MakeByte    (0X197E);
    MakeByte    (0X197F);
    MakeByte    (0X1980);
    MakeByte    (0X1981);
    MakeRptCmt    (0X1982,    "sound 24");
    MakeByte    (0X1982);
    MakeName    (0X1982,    "sfx_24");
    MakeWord    (x=0X1983);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1985);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1987);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1989);
    MakeByte    (0X198A);
    MakeByte    (0X198B);
    MakeByte    (0X198C);
    MakeByte    (0X198D);
    MakeByte    (0X198E);
    MakeByte    (0X198F);
    MakeByte    (0X1990);
    MakeByte    (0X1991);
    MakeByte    (0X1992);
    MakeByte    (0X1993);
    MakeByte    (0X1994);
    MakeByte    (0X1995);
    MakeByte    (0X1996);
    MakeByte    (0X1997);
    MakeByte    (0X1998);
    MakeByte    (0X1999);
    MakeByte    (0X199A);
    MakeByte    (0X199B);
    MakeByte    (0X199C);
    MakeByte    (0X199D);
    MakeByte    (0X199E);
    MakeByte    (0X199F);
    MakeByte    (0X19A0);
    MakeByte    (0X19A1);
    MakeByte    (0X19A2);
    MakeRptCmt    (0X19A3,    "sound 19");
    MakeByte    (0X19A3);
    MakeName    (0X19A3,    "sfx_19");
    MakeWord    (x=0X19A4);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19A6);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19A8);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X19AA);
    MakeByte    (0X19AB);
    MakeByte    (0X19AC);
    MakeByte    (0X19AD);
    MakeByte    (0X19AE);
    MakeByte    (0X19AF);
    MakeByte    (0X19B0);
    MakeByte    (0X19B1);
    MakeByte    (0X19B2);
    MakeByte    (0X19B3);
    MakeByte    (0X19B4);
    MakeByte    (0X19B5);
    MakeByte    (0X19B6);
    MakeByte    (0X19B7);
    MakeByte    (0X19B8);
    MakeByte    (0X19B9);
    MakeByte    (0X19BA);
    MakeByte    (0X19BB);
    MakeByte    (0X19BC);
    MakeByte    (0X19BD);
    MakeByte    (0X19BE);
    MakeByte    (0X19BF);
    MakeByte    (0X19C0);
    MakeByte    (0X19C1);
    MakeByte    (0X19C2);
    MakeByte    (0X19C3);
    MakeRptCmt    (0X19C4,    "sound 25");
    MakeByte    (0X19C4);
    MakeName    (0X19C4,    "sfx_25");
    MakeWord    (x=0X19C5);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19C7);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19C9);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19CB);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19CD);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19CF);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19D1);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19D3);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19D5);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X19D7);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X19D9);
    MakeArray    (0X19D9,    0X26);
    MakeByte    (0X19FF);
    MakeByte    (0X1A00);
    MakeByte    (0X1A01);
    MakeRptCmt    (0X1A02,    "sound 26");
    MakeByte    (0X1A02);
    MakeName    (0X1A02,    "sfx_26");
    MakeWord    (x=0X1A03);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A05);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A07);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A09);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A0B);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A0D);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A0F);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A11);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A13);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A15);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1A17);
    MakeArray    (0X1A17,    0X17);
    MakeByte    (0X1A2E);
    MakeByte    (0X1A2F);
    MakeByte    (0X1A30);
    MakeRptCmt    (0X1A31,    "sound 27");
    MakeByte    (0X1A31);
    MakeName    (0X1A31,    "sfx_27");
    MakeWord    (x=0X1A32);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A34);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A36);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1A38);
    MakeByte    (0X1A39);
    MakeByte    (0X1A3A);
    MakeByte    (0X1A3B);
    MakeByte    (0X1A3C);
    MakeByte    (0X1A3D);
    MakeByte    (0X1A3E);
    MakeByte    (0X1A3F);
    MakeByte    (0X1A40);
    MakeByte    (0X1A41);
    MakeByte    (0X1A42);
    MakeByte    (0X1A43);
    MakeByte    (0X1A44);
    MakeByte    (0X1A45);
    MakeByte    (0X1A46);
    MakeByte    (0X1A47);
    MakeByte    (0X1A48);
    MakeByte    (0X1A49);
    MakeByte    (0X1A4A);
    MakeByte    (0X1A4B);
    MakeByte    (0X1A4C);
    MakeByte    (0X1A4D);
    MakeByte    (0X1A4E);
    MakeByte    (0X1A4F);
    MakeByte    (0X1A50);
    MakeByte    (0X1A51);
    MakeByte    (0X1A52);
    MakeByte    (0X1A53);
    MakeByte    (0X1A54);
    MakeByte    (0X1A55);
    MakeByte    (0X1A56);
    MakeByte    (0X1A57);
    MakeByte    (0X1A58);
    MakeByte    (0X1A59);
    MakeByte    (0X1A5A);
    MakeByte    (0X1A5B);
    MakeByte    (0X1A5C);
    MakeByte    (0X1A5D);
    MakeByte    (0X1A5E);
    MakeByte    (0X1A5F);
    MakeByte    (0X1A60);
    MakeByte    (0X1A61);
    MakeByte    (0X1A62);
    MakeByte    (0X1A63);
    MakeByte    (0X1A64);
    MakeByte    (0X1A65);
    MakeByte    (0X1A66);
    MakeByte    (0X1A67);
    MakeByte    (0X1A68);
    MakeByte    (0X1A69);
    MakeByte    (0X1A6A);
    MakeRptCmt    (0X1A6B,    "sound 29");
    MakeByte    (0X1A6B);
    MakeName    (0X1A6B,    "sfx_29");
    MakeWord    (x=0X1A6C);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A6E);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1A70);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1A72);
    MakeByte    (0X1A73);
    MakeByte    (0X1A74);
    MakeByte    (0X1A75);
    MakeByte    (0X1A76);
    MakeByte    (0X1A77);
    MakeByte    (0X1A78);
    MakeByte    (0X1A79);
    MakeByte    (0X1A7A);
    MakeByte    (0X1A7B);
    MakeByte    (0X1A7C);
    MakeByte    (0X1A7D);
    MakeByte    (0X1A7E);
    MakeByte    (0X1A7F);
    MakeByte    (0X1A80);
    MakeByte    (0X1A81);
    MakeByte    (0X1A82);
    MakeByte    (0X1A83);
    MakeByte    (0X1A84);
    MakeByte    (0X1A85);
    MakeByte    (0X1A86);
    MakeByte    (0X1A87);
    MakeByte    (0X1A88);
    MakeByte    (0X1A89);
    MakeByte    (0X1A8A);
    MakeByte    (0X1A8B);
    MakeByte    (0X1A8C);
    MakeByte    (0X1A8D);
    MakeByte    (0X1A8E);
    MakeByte    (0X1A8F);
    MakeByte    (0X1A90);
    MakeByte    (0X1A91);
    MakeByte    (0X1A92);
    MakeByte    (0X1A93);
    MakeByte    (0X1A94);
    MakeByte    (0X1A95);
    MakeByte    (0X1A96);
    MakeByte    (0X1A97);
    MakeByte    (0X1A98);
    MakeByte    (0X1A99);
    MakeByte    (0X1A9A);
    MakeByte    (0X1A9B);
    MakeByte    (0X1A9C);
    MakeByte    (0X1A9D);
    MakeByte    (0X1A9E);
    MakeRptCmt    (0X1A9F,    "sound 28");
    MakeByte    (0X1A9F);
    MakeName    (0X1A9F,    "sfx_28");
    MakeWord    (x=0X1AA0);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AA2);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AA4);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1AA6);
    MakeArray    (0X1AA6,    0X28);
    MakeByte    (0X1ACE);
    MakeByte    (0X1ACF);
    MakeByte    (0X1AD0);
    MakeByte    (0X1AD1);
    MakeByte    (0X1AD2);
    MakeByte    (0X1AD3);
    MakeByte    (0X1AD4);
    MakeByte    (0X1AD5);
    MakeRptCmt    (0X1AD6,    "sound F");
    MakeByte    (0X1AD6);
    MakeName    (0X1AD6,    "sfx_0F");
    MakeWord    (x=0X1AD7);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AD9);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1ADB);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1ADD);
    MakeByte    (0X1ADE);
    MakeByte    (0X1ADF);
    MakeByte    (0X1AE0);
    MakeWord    (x=0X1AE1);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AE3);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AE5);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AE7);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AE9);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AEB);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AED);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AEF);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AF1);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeWord    (x=0X1AF3);
    OpOff        (x,    0,    0X0);
    OpOff        (x,    128,    0X0);
    MakeByte    (0X1AF5);
    MakeByte    (0X1AF6);
    MakeByte    (0X1AF7);
    MakeRptCmt    (0X1AF8,    "padding $FFs");
    MakeByte    (0X1AF8);
    MakeArray    (0X1AF8,    0X4F8);
    MakeComm    (0X1FF0,    "start of the stack pointer, data goes backward");
    MakeByte    (0X1FF0);
    MakeName    (0X1FF0,    "STACK_START");
    MakeByte    (0X1FF1);
    MakeByte    (0X1FF2);
    MakeByte    (0X1FF3);
    MakeByte    (0X1FF4);
    MakeByte    (0X1FF5);
    MakeByte    (0X1FF6);
    MakeByte    (0X1FF7);
    MakeRptCmt    (0X1FF8,    "stores the index of a new DAC sample to play");
    MakeByte    (0X1FF8);
    MakeName    (0X1FF8,    "NEW_SAMPLE_TO_LOAD");
    MakeRptCmt    (0X1FF9,    "stores the timer value to send to YM");
    MakeByte    (0X1FF9);
    MakeName    (0X1FF9,    "YM_TIMER_VALUE");
    MakeByte    (0X1FFA);
    MakeByte    (0X1FFB);
    MakeRptCmt    (0X1FFC,    "fade in parameter applied from 68k when a music is loaded. \nnibble 1 : fade in speed. \nnibble 2 : fade in start level.");
    MakeByte    (0X1FFC);
    MakeName    (0X1FFC,    "FADE_IN_PARAMETERS");
    MakeRptCmt    (0X1FFD,    "general output level for music and SFX type 1, sent from 68k");
    MakeByte    (0X1FFD);
    MakeName    (0X1FFD,    "MUSIC_LEVEL");
    MakeRptCmt    (0X1FFE,    "init at 0, never changes, just has an influence on byte 0x14AE, but no actual effect. So, don't care about it !");
    MakeByte    (0X1FFE);
    MakeName    (0X1FFE,    "SFX_USELESS_BYTE_1");
    MakeRptCmt    (0X1FFF,    "new operation to process (play music/sfx, fade out ...), sent from 68k");
    MakeByte    (0X1FFF);
    MakeName    (0X1FFF,    "NEW_OPERATION");
    MakeByte    (0X4000);
    MakeName    (0X4000,    "YM1_REGISTER");
    MakeByte    (0X4001);
    MakeName    (0X4001,    "YM1_DATA");
    MakeByte    (0X4002);
    MakeName    (0X4002,    "YM2_REGISTER");
    MakeByte    (0X4003);
    MakeName    (0X4003,    "YM2_DATA");
    MakeByte    (0X4004);
    MakeArray    (0X4004,    0X1FFB);
    MakeByte    (0X6000);
    MakeArray    (0X6000,    0XFF);
    MakeName    (0X6000,    "BANK_REGISTER");
    MakeByte    (0X7F00);
    MakeArray    (0X7F00,    0X11);
    MakeByte    (0X7F11);
    MakeArray    (0X7F11,    0XEE);
    MakeName    (0X7F11,    "PSG_PORT");
    MakeByte    (0X8000);
    MakeArray    (0X8000,    0X7FFF);
}

static Functions_0(void) {

    MakeFunction    (0X0,0X23);
    SetFunctionFlags(0X0,0x0);
    MakeFunction    (0X5D,0XB2);
    SetFunctionFlags(0X5D,0x0);
    MakeFunction    (0XBB,0X137);
    SetFunctionFlags(0XBB,0x0);
    MakeFunction    (0X143,0X160);
    SetFunctionFlags(0X143,0x0);
    MakeFunction    (0X160,0X177);
    SetFunctionFlags(0X160,0x0);
    MakeFunction    (0X177,0X18B);
    SetFunctionFlags(0X177,0x0);
    MakeFunction    (0X18B,0X1BD);
    SetFunctionFlags(0X18B,0x0);
    MakeFunction    (0X1BD,0X32B);
    SetFunctionFlags(0X1BD,0x0);
    MakeFunction    (0X32B,0X355);
    SetFunctionFlags(0X32B,0x0);
    MakeFunction    (0X355,0X3F7);
    SetFunctionFlags(0X355,0x0);
    MakeFunction    (0X3F7,0X4C1);
    SetFunctionFlags(0X3F7,0x0);
    MakeFunction    (0X4C1,0X4C6);
    SetFunctionFlags(0X4C1,0x0);
    MakeFunction    (0X4C6,0X4DA);
    SetFunctionFlags(0X4C6,0x0);
    MakeFunction    (0X4DA,0X4E0);
    SetFunctionFlags(0X4DA,0x0);
    MakeFunction    (0X4E0,0X4F0);
    SetFunctionFlags(0X4E0,0x0);
    MakeFunction    (0X4F0,0X502);
    SetFunctionFlags(0X4F0,0x0);
    MakeFunction    (0X502,0X512);
    SetFunctionFlags(0X502,0x0);
    MakeFunction    (0X51F,0X543);
    SetFunctionFlags(0X51F,0x0);
    MakeFunction    (0X543,0X76D);
    SetFunctionFlags(0X543,0x0);
    MakeFunction    (0X76D,0X9CC);
    SetFunctionFlags(0X76D,0x0);
    MakeFunction    (0X9CC,0X9D2);
    SetFunctionFlags(0X9CC,0x0);
    MakeFunction    (0X9D2,0XA79);
    SetFunctionFlags(0X9D2,0x0);
    MakeFunction    (0XA79,0XA7F);
    SetFunctionFlags(0XA79,0x0);
    MakeFunction    (0XA7F,0XB31);
    SetFunctionFlags(0XA7F,0x0);
    MakeFunction    (0XB31,0XBDE);
    SetFunctionFlags(0XB31,0x0);
    MakeFunction    (0XBDE,0XDE3);
    SetFunctionFlags(0XBDE,0x0);
    MakeFunction    (0XDE3,0XDF3);
    SetFunctionFlags(0XDE3,0x0);
    MakeFunction    (0XDF3,0XE23);
    SetFunctionFlags(0XDF3,0x0);
    MakeFunction    (0XE23,0XF4B);
    SetFunctionFlags(0XE23,0x0);
    MakeFunction    (0XF4B,0XF62);
    SetFunctionFlags(0XF4B,0x0);
    MakeFunction    (0XF62,0XF72);
    SetFunctionFlags(0XF62,0x0);
    MakeFunction    (0XF72,0XF97);
    SetFunctionFlags(0XF72,0x0);
    MakeFunction    (0XF97,0XFAB);
    SetFunctionFlags(0XF97,0x0);
    MakeFunction    (0XFAB,0XFBE);
    SetFunctionFlags(0XFAB,0x0);
    MakeFunction    (0XFBE,0XFC7);
    SetFunctionFlags(0XFBE,0x0);
    MakeFunction    (0XFC7,0XFDF);
    SetFunctionFlags(0XFC7,0x0);
    MakeFunction    (0XFDF,0X1096);
    SetFunctionFlags(0XFDF,0x0);
    MakeFunction    (0X1096,0X10A7);
    SetFunctionFlags(0X1096,0x0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

    Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
    Bytes_0();
    Bytes_1();
}

// End of file.
